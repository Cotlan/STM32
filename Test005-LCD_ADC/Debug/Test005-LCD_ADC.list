
Test005-LCD_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c54  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08005df4  08005df4  00015df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ebc  08005ebc  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08005ebc  08005ebc  00015ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ec4  08005ec4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ec4  08005ec4  00015ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ec8  08005ec8  00015ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005ecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000068  08005f34  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08005f34  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011c1f  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002855  00000000  00000000  00031cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  00034550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8e  00000000  00000000  00035688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018edd  00000000  00000000  00036416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014dc8  00000000  00000000  0004f2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e4ae  00000000  00000000  000640bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052ac  00000000  00000000  0010256c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00107818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ddc 	.word	0x08005ddc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005ddc 	.word	0x08005ddc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <__io_putchar>:
//#include "C:\Users\user\STM32Cube\Repository\STM32Cube_FW_F4_V1.28.1\Drivers\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_i2c.h"
extern UART_HandleTypeDef huart2;


int __io_putchar(int ch)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000584:	1d39      	adds	r1, r7, #4
 8000586:	230a      	movs	r3, #10
 8000588:	2201      	movs	r2, #1
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <__io_putchar+0x20>)
 800058c:	f003 ff00 	bl	8004390 <HAL_UART_Transmit>
	return(ch);
 8000590:	687b      	ldr	r3, [r7, #4]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200001cc 	.word	0x200001cc

080005a0 <StandBy>:

void StandBy()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin));
 80005a4:	bf00      	nop
 80005a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <StandBy+0x1c>)
 80005ac:	f002 f904 	bl	80027b8 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1f7      	bne.n	80005a6 <StandBy+0x6>
}
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40020800 	.word	0x40020800

080005c0 <ProgramStart>:

void ProgramStart(char * str)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	cls();
 80005c8:	f000 f820 	bl	800060c <cls>
	Cursor(0,0);
 80005cc:	2100      	movs	r1, #0
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f826 	bl	8000620 <Cursor>
	printf("\033[2J");//화면 clear
 80005d4:	4809      	ldr	r0, [pc, #36]	; (80005fc <ProgramStart+0x3c>)
 80005d6:	f004 fb59 	bl	8004c8c <iprintf>
	printf("\033[0;0H"); //cursor다시 이동
 80005da:	4809      	ldr	r0, [pc, #36]	; (8000600 <ProgramStart+0x40>)
 80005dc:	f004 fb56 	bl	8004c8c <iprintf>
	printf("Program Start - %s\r\n", str);
 80005e0:	6879      	ldr	r1, [r7, #4]
 80005e2:	4808      	ldr	r0, [pc, #32]	; (8000604 <ProgramStart+0x44>)
 80005e4:	f004 fb52 	bl	8004c8c <iprintf>
	printf("Press Blue-button(B1) to Start...\r\n");
 80005e8:	4807      	ldr	r0, [pc, #28]	; (8000608 <ProgramStart+0x48>)
 80005ea:	f004 fbb5 	bl	8004d58 <puts>
	StandBy();
 80005ee:	f7ff ffd7 	bl	80005a0 <StandBy>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	08005df4 	.word	0x08005df4
 8000600:	08005dfc 	.word	0x08005dfc
 8000604:	08005e04 	.word	0x08005e04
 8000608:	08005e1c 	.word	0x08005e1c

0800060c <cls>:


void cls()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	printf("\033[2J");//화면 clear
 8000610:	4802      	ldr	r0, [pc, #8]	; (800061c <cls+0x10>)
 8000612:	f004 fb3b 	bl	8004c8c <iprintf>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	08005df4 	.word	0x08005df4

08000620 <Cursor>:



void Cursor(int x,int y)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
	char buf[20];
	sprintf(buf,"\033[%d;%dH",y,x);
 800062a:	f107 000c 	add.w	r0, r7, #12
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	4906      	ldr	r1, [pc, #24]	; (800064c <Cursor+0x2c>)
 8000634:	f004 fb98 	bl	8004d68 <siprintf>
	puts(buf);//문자열 출력함수
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	4618      	mov	r0, r3
 800063e:	f004 fb8b 	bl	8004d58 <puts>
}
 8000642:	bf00      	nop
 8000644:	3720      	adds	r7, #32
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	08005e40 	.word	0x08005e40

08000650 <lcd_command>:

I2C_HandleTypeDef *hi2c=NULL;


void lcd_command(char cmd)// cmd_bit : abcd efgh
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	char n1, n2,n3,n4, dd[4];
	n1 = cmd & 0xf0; //n1: abcd 0000 upper nibble
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	f023 030f 	bic.w	r3, r3, #15
 8000660:	73fb      	strb	r3, [r7, #15]
	n2 = (cmd <<4); // n2: efgh 0000
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	011b      	lsls	r3, r3, #4
 8000666:	73bb      	strb	r3, [r7, #14]
	n3 = (1<<3)|(1<<2)|0|0;//(RW|EN_1|NC|RS) 0x0c
 8000668:	230c      	movs	r3, #12
 800066a:	737b      	strb	r3, [r7, #13]
	n4 = (1<<3)|0|0|0;//(RW|EN_0|NC|RS) 0x08
 800066c:	2308      	movs	r3, #8
 800066e:	733b      	strb	r3, [r7, #12]
	dd[0] = n1 | n3;
 8000670:	7bfa      	ldrb	r2, [r7, #15]
 8000672:	7b7b      	ldrb	r3, [r7, #13]
 8000674:	4313      	orrs	r3, r2
 8000676:	b2db      	uxtb	r3, r3
 8000678:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;// enable, disable, valid data(keep data)
 800067a:	7bfa      	ldrb	r2, [r7, #15]
 800067c:	7b3b      	ldrb	r3, [r7, #12]
 800067e:	4313      	orrs	r3, r2
 8000680:	b2db      	uxtb	r3, r3
 8000682:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 8000684:	7bba      	ldrb	r2, [r7, #14]
 8000686:	7b7b      	ldrb	r3, [r7, #13]
 8000688:	4313      	orrs	r3, r2
 800068a:	b2db      	uxtb	r3, r3
 800068c:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;// enable, disable, valid data(keep data)
 800068e:	7bba      	ldrb	r2, [r7, #14]
 8000690:	7b3b      	ldrb	r3, [r7, #12]
 8000692:	4313      	orrs	r3, r2
 8000694:	b2db      	uxtb	r3, r3
 8000696:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, I2C_ADDR, dd, 4, 10);// 4byte, timeout 10
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <lcd_command+0x64>)
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	f107 0208 	add.w	r2, r7, #8
 80006a0:	230a      	movs	r3, #10
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2304      	movs	r3, #4
 80006a6:	214e      	movs	r1, #78	; 0x4e
 80006a8:	f002 f9fc 	bl	8002aa4 <HAL_I2C_Master_Transmit>
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000084 	.word	0x20000084

080006b8 <lcd_data>:

void lcd_data(char ch)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af02      	add	r7, sp, #8
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	char n1, n2,n3,n4, dd[4];
	n1 = ch & 0xf0; //n1: abcd 0000 upper nibble
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	73fb      	strb	r3, [r7, #15]
	n2 = (ch <<4); // n2: efgh 0000
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	011b      	lsls	r3, r3, #4
 80006ce:	73bb      	strb	r3, [r7, #14]
	n3 = (1<<3)|(1<<2)|0|(1<<0);//(RW|EN_1|NC|RS) 0x0d
 80006d0:	230d      	movs	r3, #13
 80006d2:	737b      	strb	r3, [r7, #13]
	n4 = (1<<3)|0|0|(1<<0);//(RW|EN_0|NC|RS) 0x09
 80006d4:	2309      	movs	r3, #9
 80006d6:	733b      	strb	r3, [r7, #12]
	dd[0] = n1 | n3;
 80006d8:	7bfa      	ldrb	r2, [r7, #15]
 80006da:	7b7b      	ldrb	r3, [r7, #13]
 80006dc:	4313      	orrs	r3, r2
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;// enable, disable, valid data(keep data)
 80006e2:	7bfa      	ldrb	r2, [r7, #15]
 80006e4:	7b3b      	ldrb	r3, [r7, #12]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 80006ec:	7bba      	ldrb	r2, [r7, #14]
 80006ee:	7b7b      	ldrb	r3, [r7, #13]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;// enable, disable, valid data(keep data)
 80006f6:	7bba      	ldrb	r2, [r7, #14]
 80006f8:	7b3b      	ldrb	r3, [r7, #12]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, I2C_ADDR, dd, 4, 10);// 4byte, timeout 10
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <lcd_data+0x64>)
 8000702:	6818      	ldr	r0, [r3, #0]
 8000704:	f107 0208 	add.w	r2, r7, #8
 8000708:	230a      	movs	r3, #10
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2304      	movs	r3, #4
 800070e:	214e      	movs	r1, #78	; 0x4e
 8000710:	f002 f9c8 	bl	8002aa4 <HAL_I2C_Master_Transmit>
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000084 	.word	0x20000084

08000720 <lcd_init>:

void lcd_init()
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	lcd_command(0x01); // screen clear
 8000724:	2001      	movs	r0, #1
 8000726:	f7ff ff93 	bl	8000650 <lcd_command>
	lcd_command(0x02); // cursor home
 800072a:	2002      	movs	r0, #2
 800072c:	f7ff ff90 	bl	8000650 <lcd_command>
	lcd_command(0x06); //
 8000730:	2006      	movs	r0, #6
 8000732:	f7ff ff8d 	bl	8000650 <lcd_command>
	lcd_command(0x0f);
 8000736:	200f      	movs	r0, #15
 8000738:	f7ff ff8a 	bl	8000650 <lcd_command>
	HAL_Delay(10);
 800073c:	200a      	movs	r0, #10
 800073e:	f000 fe0f 	bl	8001360 <HAL_Delay>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <i2c_init>:

int i2c_init(I2C_HandleTypeDef *p)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	hi2c = p;
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <i2c_init+0x1c>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6013      	str	r3, [r2, #0]
}
 8000756:	bf00      	nop
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	20000084 	.word	0x20000084

08000768 <lcd_printEx>:

void lcd_printEx(char *str, int ln)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
	if(ln == 0) lcd_command(0x80);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d102      	bne.n	800077e <lcd_printEx+0x16>
 8000778:	2080      	movs	r0, #128	; 0x80
 800077a:	f7ff ff69 	bl	8000650 <lcd_command>
	if(ln == 1) lcd_command(0xc0);
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d102      	bne.n	800078a <lcd_printEx+0x22>
 8000784:	20c0      	movs	r0, #192	; 0xc0
 8000786:	f7ff ff63 	bl	8000650 <lcd_command>
	lcd_print(str);
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f000 f804 	bl	8000798 <lcd_print>
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <lcd_print>:

void lcd_print(char *str)//character parameter pointer
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	while(*str) lcd_data(*str++);
 80007a0:	e006      	b.n	80007b0 <lcd_print+0x18>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	1c5a      	adds	r2, r3, #1
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ff84 	bl	80006b8 <lcd_data>
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1f4      	bne.n	80007a2 <lcd_print+0xa>
}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <i2c_scan>:

int i2c_scan()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
	if(hi2c == NULL) return;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <i2c_scan+0x64>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d024      	beq.n	800081c <i2c_scan+0x58>
	for(int addr=0;addr<128;addr++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	e01d      	b.n	8000814 <i2c_scan+0x50>
	{
		if(HAL_I2C_IsDeviceReady(hi2c, addr, 1, 10) == HAL_OK)
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <i2c_scan+0x64>)
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	b299      	uxth	r1, r3
 80007e0:	230a      	movs	r3, #10
 80007e2:	2201      	movs	r2, #1
 80007e4:	f002 fa5c 	bl	8002ca0 <HAL_I2C_IsDeviceReady>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d104      	bne.n	80007f8 <i2c_scan+0x34>
		{
			printf("  %02x ", addr);
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	480e      	ldr	r0, [pc, #56]	; (800082c <i2c_scan+0x68>)
 80007f2:	f004 fa4b 	bl	8004c8c <iprintf>
 80007f6:	e002      	b.n	80007fe <i2c_scan+0x3a>
		}
		else
		{
			printf("   . ");
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <i2c_scan+0x6c>)
 80007fa:	f004 fa47 	bl	8004c8c <iprintf>
		}
		if((addr % 16) == 0) printf("\r\n");
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f003 030f 	and.w	r3, r3, #15
 8000804:	2b00      	cmp	r3, #0
 8000806:	d102      	bne.n	800080e <i2c_scan+0x4a>
 8000808:	480a      	ldr	r0, [pc, #40]	; (8000834 <i2c_scan+0x70>)
 800080a:	f004 faa5 	bl	8004d58 <puts>
	for(int addr=0;addr<128;addr++)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3301      	adds	r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b7f      	cmp	r3, #127	; 0x7f
 8000818:	ddde      	ble.n	80007d8 <i2c_scan+0x14>
 800081a:	e000      	b.n	800081e <i2c_scan+0x5a>
	if(hi2c == NULL) return;
 800081c:	bf00      	nop
	}
}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000084 	.word	0x20000084
 800082c:	08005e4c 	.word	0x08005e4c
 8000830:	08005e54 	.word	0x08005e54
 8000834:	08005e5c 	.word	0x08005e5c

08000838 <Printnum>:

void Printnum(unsigned short number, int ln)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	80fb      	strh	r3, [r7, #6]
	char str[5];
    number = number % 10000;
 8000844:	88fb      	ldrh	r3, [r7, #6]
 8000846:	4a2b      	ldr	r2, [pc, #172]	; (80008f4 <Printnum+0xbc>)
 8000848:	fba2 1203 	umull	r1, r2, r2, r3
 800084c:	0b52      	lsrs	r2, r2, #13
 800084e:	f242 7110 	movw	r1, #10000	; 0x2710
 8000852:	fb01 f202 	mul.w	r2, r1, r2
 8000856:	1a9b      	subs	r3, r3, r2
 8000858:	80fb      	strh	r3, [r7, #6]

    str[0] = (number / 1000) + '0';
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	4a26      	ldr	r2, [pc, #152]	; (80008f8 <Printnum+0xc0>)
 800085e:	fba2 2303 	umull	r2, r3, r2, r3
 8000862:	099b      	lsrs	r3, r3, #6
 8000864:	b29b      	uxth	r3, r3
 8000866:	b2db      	uxtb	r3, r3
 8000868:	3330      	adds	r3, #48	; 0x30
 800086a:	b2db      	uxtb	r3, r3
 800086c:	723b      	strb	r3, [r7, #8]
    str[1] = (number / 100 % 10) + '0';
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	4a22      	ldr	r2, [pc, #136]	; (80008fc <Printnum+0xc4>)
 8000872:	fba2 2303 	umull	r2, r3, r2, r3
 8000876:	095b      	lsrs	r3, r3, #5
 8000878:	b29a      	uxth	r2, r3
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <Printnum+0xc8>)
 800087c:	fba3 1302 	umull	r1, r3, r3, r2
 8000880:	08d9      	lsrs	r1, r3, #3
 8000882:	460b      	mov	r3, r1
 8000884:	009b      	lsls	r3, r3, #2
 8000886:	440b      	add	r3, r1
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	b29b      	uxth	r3, r3
 800088e:	b2db      	uxtb	r3, r3
 8000890:	3330      	adds	r3, #48	; 0x30
 8000892:	b2db      	uxtb	r3, r3
 8000894:	727b      	strb	r3, [r7, #9]
    str[2] = (number / 10 % 10) + '0';
 8000896:	88fb      	ldrh	r3, [r7, #6]
 8000898:	4a19      	ldr	r2, [pc, #100]	; (8000900 <Printnum+0xc8>)
 800089a:	fba2 2303 	umull	r2, r3, r2, r3
 800089e:	08db      	lsrs	r3, r3, #3
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <Printnum+0xc8>)
 80008a4:	fba3 1302 	umull	r1, r3, r3, r2
 80008a8:	08d9      	lsrs	r1, r3, #3
 80008aa:	460b      	mov	r3, r1
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	440b      	add	r3, r1
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	3330      	adds	r3, #48	; 0x30
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	72bb      	strb	r3, [r7, #10]
    str[3] = (number % 10) + '0';
 80008be:	88fa      	ldrh	r2, [r7, #6]
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <Printnum+0xc8>)
 80008c2:	fba3 1302 	umull	r1, r3, r3, r2
 80008c6:	08d9      	lsrs	r1, r3, #3
 80008c8:	460b      	mov	r3, r1
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	440b      	add	r3, r1
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	1ad3      	subs	r3, r2, r3
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	3330      	adds	r3, #48	; 0x30
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	72fb      	strb	r3, [r7, #11]
    str[4] = '\0';
 80008dc:	2300      	movs	r3, #0
 80008de:	733b      	strb	r3, [r7, #12]
    lcd_printEx(number, ln);
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	6839      	ldr	r1, [r7, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff3f 	bl	8000768 <lcd_printEx>
}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	d1b71759 	.word	0xd1b71759
 80008f8:	10624dd3 	.word	0x10624dd3
 80008fc:	51eb851f 	.word	0x51eb851f
 8000900:	cccccccd 	.word	0xcccccccd

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000908:	f000 fcb8 	bl	800127c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090c:	f000 f836 	bl	800097c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000910:	f000 f9c8 	bl	8000ca4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000914:	f000 f9a6 	bl	8000c64 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000918:	f000 f97a 	bl	8000c10 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800091c:	f000 f898 	bl	8000a50 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000920:	f000 f8fa 	bl	8000b18 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000924:	f000 f926 	bl	8000b74 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  ProgramStart("LCD DMA");
 8000928:	480f      	ldr	r0, [pc, #60]	; (8000968 <main+0x64>)
 800092a:	f7ff fe49 	bl	80005c0 <ProgramStart>

  i2c_init(&hi2c2);
 800092e:	480f      	ldr	r0, [pc, #60]	; (800096c <main+0x68>)
 8000930:	f7ff ff0a 	bl	8000748 <i2c_init>
  i2c_scan();
 8000934:	f7ff ff46 	bl	80007c4 <i2c_scan>

  lcd_init();
 8000938:	f7ff fef2 	bl	8000720 <lcd_init>


  HAL_ADC_Start_DMA(&hadc1, val, 2);
 800093c:	2202      	movs	r2, #2
 800093e:	490c      	ldr	r1, [pc, #48]	; (8000970 <main+0x6c>)
 8000940:	480c      	ldr	r0, [pc, #48]	; (8000974 <main+0x70>)
 8000942:	f000 fd75 	bl	8001430 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim3);
 8000946:	480c      	ldr	r0, [pc, #48]	; (8000978 <main+0x74>)
 8000948:	f003 fa1c 	bl	8003d84 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Printnum(val[0], 0);
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <main+0x6c>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff70 	bl	8000838 <Printnum>
	  Printnum(val[1], 1);
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <main+0x6c>)
 800095a:	885b      	ldrh	r3, [r3, #2]
 800095c:	2101      	movs	r1, #1
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff ff6a 	bl	8000838 <Printnum>
  {
 8000964:	e7f2      	b.n	800094c <main+0x48>
 8000966:	bf00      	nop
 8000968:	08005e60 	.word	0x08005e60
 800096c:	20000130 	.word	0x20000130
 8000970:	20000214 	.word	0x20000214
 8000974:	20000088 	.word	0x20000088
 8000978:	20000184 	.word	0x20000184

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b094      	sub	sp, #80	; 0x50
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 0320 	add.w	r3, r7, #32
 8000986:	2230      	movs	r2, #48	; 0x30
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f004 fae4 	bl	8004f58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <SystemClock_Config+0xcc>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	4a27      	ldr	r2, [pc, #156]	; (8000a48 <SystemClock_Config+0xcc>)
 80009aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ae:	6413      	str	r3, [r2, #64]	; 0x40
 80009b0:	4b25      	ldr	r3, [pc, #148]	; (8000a48 <SystemClock_Config+0xcc>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <SystemClock_Config+0xd0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <SystemClock_Config+0xd0>)
 80009c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ca:	6013      	str	r3, [r2, #0]
 80009cc:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <SystemClock_Config+0xd0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d8:	2302      	movs	r3, #2
 80009da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009dc:	2301      	movs	r3, #1
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e0:	2310      	movs	r3, #16
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e4:	2302      	movs	r3, #2
 80009e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e8:	2300      	movs	r3, #0
 80009ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009ec:	2310      	movs	r3, #16
 80009ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009f6:	2304      	movs	r3, #4
 80009f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009fa:	2304      	movs	r3, #4
 80009fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fe:	f107 0320 	add.w	r3, r7, #32
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 fcd6 	bl	80033b4 <HAL_RCC_OscConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a0e:	f000 f9b7 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a12:	230f      	movs	r3, #15
 8000a14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a16:	2302      	movs	r3, #2
 8000a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f002 ff38 	bl	80038a4 <HAL_RCC_ClockConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a3a:	f000 f9a1 	bl	8000d80 <Error_Handler>
  }
}
 8000a3e:	bf00      	nop
 8000a40:	3750      	adds	r7, #80	; 0x50
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40007000 	.word	0x40007000

08000a50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a56:	463b      	mov	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a62:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <MX_ADC1_Init+0xc0>)
 8000a64:	4a2b      	ldr	r2, [pc, #172]	; (8000b14 <MX_ADC1_Init+0xc4>)
 8000a66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a68:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <MX_ADC1_Init+0xc0>)
 8000a6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a70:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <MX_ADC1_Init+0xc0>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a76:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <MX_ADC1_Init+0xc0>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a7c:	4b24      	ldr	r3, [pc, #144]	; (8000b10 <MX_ADC1_Init+0xc0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000a82:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <MX_ADC1_Init+0xc0>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_ADC1_Init+0xc0>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_ADC1_Init+0xc0>)
 8000a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_ADC1_Init+0xc0>)
 8000a9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a9e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <MX_ADC1_Init+0xc0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000aa6:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_ADC1_Init+0xc0>)
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_ADC1_Init+0xc0>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab4:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_ADC1_Init+0xc0>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aba:	4815      	ldr	r0, [pc, #84]	; (8000b10 <MX_ADC1_Init+0xc0>)
 8000abc:	f000 fc74 	bl	80013a8 <HAL_ADC_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_ADC1_Init+0x7a>
  {
    Error_Handler();
 8000ac6:	f000 f95b 	bl	8000d80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_ADC1_Init+0xc0>)
 8000adc:	f000 fdb6 	bl	800164c <HAL_ADC_ConfigChannel>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000ae6:	f000 f94b 	bl	8000d80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aea:	2301      	movs	r3, #1
 8000aec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af2:	463b      	mov	r3, r7
 8000af4:	4619      	mov	r1, r3
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <MX_ADC1_Init+0xc0>)
 8000af8:	f000 fda8 	bl	800164c <HAL_ADC_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000b02:	f000 f93d 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000088 	.word	0x20000088
 8000b14:	40012000 	.word	0x40012000

08000b18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b1e:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <MX_I2C2_Init+0x54>)
 8000b20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b24:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <MX_I2C2_Init+0x58>)
 8000b26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b3a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_I2C2_Init+0x50>)
 8000b56:	f001 fe61 	bl	800281c <HAL_I2C_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b60:	f000 f90e 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000130 	.word	0x20000130
 8000b6c:	40005800 	.word	0x40005800
 8000b70:	000186a0 	.word	0x000186a0

08000b74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b88:	463b      	mov	r3, r7
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b90:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_TIM3_Init+0x94>)
 8000b92:	4a1e      	ldr	r2, [pc, #120]	; (8000c0c <MX_TIM3_Init+0x98>)
 8000b94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <MX_TIM3_Init+0x94>)
 8000b98:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000b9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_TIM3_Init+0x94>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_TIM3_Init+0x94>)
 8000ba6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000baa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_TIM3_Init+0x94>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_TIM3_Init+0x94>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bb8:	4813      	ldr	r0, [pc, #76]	; (8000c08 <MX_TIM3_Init+0x94>)
 8000bba:	f003 f893 	bl	8003ce4 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000bc4:	f000 f8dc 	bl	8000d80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <MX_TIM3_Init+0x94>)
 8000bd6:	f003 f92f 	bl	8003e38 <HAL_TIM_ConfigClockSource>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000be0:	f000 f8ce 	bl	8000d80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000be4:	2320      	movs	r3, #32
 8000be6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bec:	463b      	mov	r3, r7
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_TIM3_Init+0x94>)
 8000bf2:	f003 fb0f 	bl	8004214 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000bfc:	f000 f8c0 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000184 	.word	0x20000184
 8000c0c:	40000400 	.word	0x40000400

08000c10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <MX_USART2_UART_Init+0x50>)
 8000c18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_USART2_UART_Init+0x4c>)
 8000c48:	f003 fb52 	bl	80042f0 <HAL_UART_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c52:	f000 f895 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200001cc 	.word	0x200001cc
 8000c60:	40004400 	.word	0x40004400

08000c64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_DMA_Init+0x3c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <MX_DMA_Init+0x3c>)
 8000c74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_DMA_Init+0x3c>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2038      	movs	r0, #56	; 0x38
 8000c8c:	f001 f869 	bl	8001d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c90:	2038      	movs	r0, #56	; 0x38
 8000c92:	f001 f882 	bl	8001d9a <HAL_NVIC_EnableIRQ>

}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	; 0x28
 8000ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a2c      	ldr	r2, [pc, #176]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b26      	ldr	r3, [pc, #152]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a25      	ldr	r2, [pc, #148]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b23      	ldr	r3, [pc, #140]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a1e      	ldr	r2, [pc, #120]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <MX_GPIO_Init+0xd0>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2120      	movs	r1, #32
 8000d2e:	4812      	ldr	r0, [pc, #72]	; (8000d78 <MX_GPIO_Init+0xd4>)
 8000d30:	f001 fd5a 	bl	80027e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d3a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480c      	ldr	r0, [pc, #48]	; (8000d7c <MX_GPIO_Init+0xd8>)
 8000d4c:	f001 fbb0 	bl	80024b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d50:	2320      	movs	r3, #32
 8000d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4804      	ldr	r0, [pc, #16]	; (8000d78 <MX_GPIO_Init+0xd4>)
 8000d68:	f001 fba2 	bl	80024b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	; 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020000 	.word	0x40020000
 8000d7c:	40020800 	.word	0x40020800

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <Error_Handler+0x8>
	...

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dca:	2007      	movs	r0, #7
 8000dcc:	f000 ffbe 	bl	8001d4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800

08000ddc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	; 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a2f      	ldr	r2, [pc, #188]	; (8000eb8 <HAL_ADC_MspInit+0xdc>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d157      	bne.n	8000eae <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b2e      	ldr	r3, [pc, #184]	; (8000ebc <HAL_ADC_MspInit+0xe0>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a2d      	ldr	r2, [pc, #180]	; (8000ebc <HAL_ADC_MspInit+0xe0>)
 8000e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <HAL_ADC_MspInit+0xe0>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <HAL_ADC_MspInit+0xe0>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a26      	ldr	r2, [pc, #152]	; (8000ebc <HAL_ADC_MspInit+0xe0>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <HAL_ADC_MspInit+0xe0>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e36:	2303      	movs	r3, #3
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	481d      	ldr	r0, [pc, #116]	; (8000ec0 <HAL_ADC_MspInit+0xe4>)
 8000e4a:	f001 fb31 	bl	80024b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <HAL_ADC_MspInit+0xe8>)
 8000e50:	4a1d      	ldr	r2, [pc, #116]	; (8000ec8 <HAL_ADC_MspInit+0xec>)
 8000e52:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <HAL_ADC_MspInit+0xe8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <HAL_ADC_MspInit+0xe8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e60:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <HAL_ADC_MspInit+0xe8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <HAL_ADC_MspInit+0xe8>)
 8000e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e6c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_ADC_MspInit+0xe8>)
 8000e70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e74:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <HAL_ADC_MspInit+0xe8>)
 8000e78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_ADC_MspInit+0xe8>)
 8000e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e84:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_ADC_MspInit+0xe8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <HAL_ADC_MspInit+0xe8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e92:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <HAL_ADC_MspInit+0xe8>)
 8000e94:	f000 ff9c 	bl	8001dd0 <HAL_DMA_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e9e:	f7ff ff6f 	bl	8000d80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_ADC_MspInit+0xe8>)
 8000ea6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <HAL_ADC_MspInit+0xe8>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40012000 	.word	0x40012000
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000
 8000ec4:	200000d0 	.word	0x200000d0
 8000ec8:	40026410 	.word	0x40026410

08000ecc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a22      	ldr	r2, [pc, #136]	; (8000f74 <HAL_I2C_MspInit+0xa8>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d13d      	bne.n	8000f6a <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <HAL_I2C_MspInit+0xac>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a20      	ldr	r2, [pc, #128]	; (8000f78 <HAL_I2C_MspInit+0xac>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <HAL_I2C_MspInit+0xac>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f10:	2312      	movs	r3, #18
 8000f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	4815      	ldr	r0, [pc, #84]	; (8000f7c <HAL_I2C_MspInit+0xb0>)
 8000f28:	f001 fac2 	bl	80024b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f32:	2312      	movs	r3, #18
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000f3e:	2309      	movs	r3, #9
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <HAL_I2C_MspInit+0xb0>)
 8000f4a:	f001 fab1 	bl	80024b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_I2C_MspInit+0xac>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <HAL_I2C_MspInit+0xac>)
 8000f58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_I2C_MspInit+0xac>)
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40005800 	.word	0x40005800
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020400 	.word	0x40020400

08000f80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <HAL_TIM_Base_MspInit+0x3c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d10d      	bne.n	8000fae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_TIM_Base_MspInit+0x40>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a09      	ldr	r2, [pc, #36]	; (8000fc0 <HAL_TIM_Base_MspInit+0x40>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <HAL_TIM_Base_MspInit+0x40>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40000400 	.word	0x40000400
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a19      	ldr	r2, [pc, #100]	; (8001048 <HAL_UART_MspInit+0x84>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d12b      	bne.n	800103e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_UART_MspInit+0x88>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a17      	ldr	r2, [pc, #92]	; (800104c <HAL_UART_MspInit+0x88>)
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_UART_MspInit+0x88>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_UART_MspInit+0x88>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a10      	ldr	r2, [pc, #64]	; (800104c <HAL_UART_MspInit+0x88>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_UART_MspInit+0x88>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800101e:	230c      	movs	r3, #12
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800102e:	2307      	movs	r3, #7
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_UART_MspInit+0x8c>)
 800103a:	f001 fa39 	bl	80024b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	3728      	adds	r7, #40	; 0x28
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40004400 	.word	0x40004400
 800104c:	40023800 	.word	0x40023800
 8001050:	40020000 	.word	0x40020000

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler+0x4>

08001066 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <UsageFault_Handler+0x4>

08001072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a0:	f000 f93e 	bl	8001320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <DMA2_Stream0_IRQHandler+0x10>)
 80010ae:	f000 ff95 	bl	8001fdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200000d0 	.word	0x200000d0

080010bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	e00a      	b.n	80010e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010ce:	f3af 8000 	nop.w
 80010d2:	4601      	mov	r1, r0
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	60ba      	str	r2, [r7, #8]
 80010da:	b2ca      	uxtb	r2, r1
 80010dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3301      	adds	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dbf0      	blt.n	80010ce <_read+0x12>
  }

  return len;
 80010ec:	687b      	ldr	r3, [r7, #4]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	60f8      	str	r0, [r7, #12]
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	e009      	b.n	800111c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	60ba      	str	r2, [r7, #8]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fa33 	bl	800057c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	429a      	cmp	r2, r3
 8001122:	dbf1      	blt.n	8001108 <_write+0x12>
  }
  return len;
 8001124:	687b      	ldr	r3, [r7, #4]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <_close>:

int _close(int file)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001156:	605a      	str	r2, [r3, #4]
  return 0;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <_isatty>:

int _isatty(int file)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800116e:	2301      	movs	r3, #1
}
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a0:	4a14      	ldr	r2, [pc, #80]	; (80011f4 <_sbrk+0x5c>)
 80011a2:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <_sbrk+0x60>)
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b4:	4b11      	ldr	r3, [pc, #68]	; (80011fc <_sbrk+0x64>)
 80011b6:	4a12      	ldr	r2, [pc, #72]	; (8001200 <_sbrk+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d207      	bcs.n	80011d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c8:	f003 ff14 	bl	8004ff4 <__errno>
 80011cc:	4603      	mov	r3, r0
 80011ce:	220c      	movs	r2, #12
 80011d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	e009      	b.n	80011ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d8:	4b08      	ldr	r3, [pc, #32]	; (80011fc <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <_sbrk+0x64>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <_sbrk+0x64>)
 80011e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20020000 	.word	0x20020000
 80011f8:	00000400 	.word	0x00000400
 80011fc:	20000218 	.word	0x20000218
 8001200:	20000370 	.word	0x20000370

08001204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <SystemInit+0x20>)
 800120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <SystemInit+0x20>)
 8001210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001260 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800122c:	f7ff ffea 	bl	8001204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001232:	490d      	ldr	r1, [pc, #52]	; (8001268 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001234:	4a0d      	ldr	r2, [pc, #52]	; (800126c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001248:	4c0a      	ldr	r4, [pc, #40]	; (8001274 <LoopFillZerobss+0x22>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001256:	f003 fed3 	bl	8005000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125a:	f7ff fb53 	bl	8000904 <main>
  bx  lr    
 800125e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001260:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800126c:	08005ecc 	.word	0x08005ecc
  ldr r2, =_sbss
 8001270:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001274:	2000036c 	.word	0x2000036c

08001278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC_IRQHandler>
	...

0800127c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001280:	4b0e      	ldr	r3, [pc, #56]	; (80012bc <HAL_Init+0x40>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0d      	ldr	r2, [pc, #52]	; (80012bc <HAL_Init+0x40>)
 8001286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_Init+0x40>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <HAL_Init+0x40>)
 8001292:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001296:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_Init+0x40>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a07      	ldr	r2, [pc, #28]	; (80012bc <HAL_Init+0x40>)
 800129e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a4:	2003      	movs	r0, #3
 80012a6:	f000 fd51 	bl	8001d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012aa:	2000      	movs	r0, #0
 80012ac:	f000 f808 	bl	80012c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b0:	f7ff fd6c 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023c00 	.word	0x40023c00

080012c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_InitTick+0x54>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_InitTick+0x58>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012da:	fbb2 f3f3 	udiv	r3, r2, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fd69 	bl	8001db6 <HAL_SYSTICK_Config>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00e      	b.n	800130c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d80a      	bhi.n	800130a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f4:	2200      	movs	r2, #0
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f000 fd31 	bl	8001d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001300:	4a06      	ldr	r2, [pc, #24]	; (800131c <HAL_InitTick+0x5c>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e000      	b.n	800130c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000000 	.word	0x20000000
 8001318:	20000008 	.word	0x20000008
 800131c:	20000004 	.word	0x20000004

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008
 8001344:	2000021c 	.word	0x2000021c

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2000021c 	.word	0x2000021c

08001360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff ffee 	bl	8001348 <HAL_GetTick>
 800136c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001378:	d005      	beq.n	8001386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <HAL_Delay+0x44>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001386:	bf00      	nop
 8001388:	f7ff ffde 	bl	8001348 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	d8f7      	bhi.n	8001388 <HAL_Delay+0x28>
  {
  }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000008 	.word	0x20000008

080013a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e033      	b.n	8001426 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d109      	bne.n	80013da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fd08 	bl	8000ddc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d118      	bne.n	8001418 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013ee:	f023 0302 	bic.w	r3, r3, #2
 80013f2:	f043 0202 	orr.w	r2, r3, #2
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 fa58 	bl	80018b0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f023 0303 	bic.w	r3, r3, #3
 800140e:	f043 0201 	orr.w	r2, r3, #1
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
 8001416:	e001      	b.n	800141c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <HAL_ADC_Start_DMA+0x1e>
 800144a:	2302      	movs	r3, #2
 800144c:	e0ce      	b.n	80015ec <HAL_ADC_Start_DMA+0x1bc>
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b01      	cmp	r3, #1
 8001462:	d018      	beq.n	8001496 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0201 	orr.w	r2, r2, #1
 8001472:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001474:	4b5f      	ldr	r3, [pc, #380]	; (80015f4 <HAL_ADC_Start_DMA+0x1c4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a5f      	ldr	r2, [pc, #380]	; (80015f8 <HAL_ADC_Start_DMA+0x1c8>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	0c9a      	lsrs	r2, r3, #18
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001488:	e002      	b.n	8001490 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	3b01      	subs	r3, #1
 800148e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f9      	bne.n	800148a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014a4:	d107      	bne.n	80014b6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689a      	ldr	r2, [r3, #8]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014b4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	f040 8086 	bne.w	80015d2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014ce:	f023 0301 	bic.w	r3, r3, #1
 80014d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d007      	beq.n	80014f8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001504:	d106      	bne.n	8001514 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f023 0206 	bic.w	r2, r3, #6
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	645a      	str	r2, [r3, #68]	; 0x44
 8001512:	e002      	b.n	800151a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001522:	4b36      	ldr	r3, [pc, #216]	; (80015fc <HAL_ADC_Start_DMA+0x1cc>)
 8001524:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152a:	4a35      	ldr	r2, [pc, #212]	; (8001600 <HAL_ADC_Start_DMA+0x1d0>)
 800152c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001532:	4a34      	ldr	r2, [pc, #208]	; (8001604 <HAL_ADC_Start_DMA+0x1d4>)
 8001534:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153a:	4a33      	ldr	r2, [pc, #204]	; (8001608 <HAL_ADC_Start_DMA+0x1d8>)
 800153c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001546:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001556:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001566:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	334c      	adds	r3, #76	; 0x4c
 8001572:	4619      	mov	r1, r3
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f000 fcd8 	bl	8001f2c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 031f 	and.w	r3, r3, #31
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10f      	bne.n	80015a8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d129      	bne.n	80015ea <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	e020      	b.n	80015ea <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a17      	ldr	r2, [pc, #92]	; (800160c <HAL_ADC_Start_DMA+0x1dc>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d11b      	bne.n	80015ea <HAL_ADC_Start_DMA+0x1ba>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d114      	bne.n	80015ea <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	e00b      	b.n	80015ea <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f043 0210 	orr.w	r2, r3, #16
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f043 0201 	orr.w	r2, r3, #1
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000000 	.word	0x20000000
 80015f8:	431bde83 	.word	0x431bde83
 80015fc:	40012300 	.word	0x40012300
 8001600:	08001aa9 	.word	0x08001aa9
 8001604:	08001b63 	.word	0x08001b63
 8001608:	08001b7f 	.word	0x08001b7f
 800160c:	40012000 	.word	0x40012000

08001610 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x1c>
 8001664:	2302      	movs	r3, #2
 8001666:	e113      	b.n	8001890 <HAL_ADC_ConfigChannel+0x244>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b09      	cmp	r3, #9
 8001676:	d925      	bls.n	80016c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68d9      	ldr	r1, [r3, #12]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	461a      	mov	r2, r3
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	3b1e      	subs	r3, #30
 800168e:	2207      	movs	r2, #7
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43da      	mvns	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	400a      	ands	r2, r1
 800169c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68d9      	ldr	r1, [r3, #12]
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	4603      	mov	r3, r0
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4403      	add	r3, r0
 80016b6:	3b1e      	subs	r3, #30
 80016b8:	409a      	lsls	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	e022      	b.n	800170a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6919      	ldr	r1, [r3, #16]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	461a      	mov	r2, r3
 80016d2:	4613      	mov	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	2207      	movs	r2, #7
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	400a      	ands	r2, r1
 80016e6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6919      	ldr	r1, [r3, #16]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4618      	mov	r0, r3
 80016fa:	4603      	mov	r3, r0
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4403      	add	r3, r0
 8001700:	409a      	lsls	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	430a      	orrs	r2, r1
 8001708:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b06      	cmp	r3, #6
 8001710:	d824      	bhi.n	800175c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	3b05      	subs	r3, #5
 8001724:	221f      	movs	r2, #31
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43da      	mvns	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	400a      	ands	r2, r1
 8001732:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	b29b      	uxth	r3, r3
 8001740:	4618      	mov	r0, r3
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	3b05      	subs	r3, #5
 800174e:	fa00 f203 	lsl.w	r2, r0, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	635a      	str	r2, [r3, #52]	; 0x34
 800175a:	e04c      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b0c      	cmp	r3, #12
 8001762:	d824      	bhi.n	80017ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	3b23      	subs	r3, #35	; 0x23
 8001776:	221f      	movs	r2, #31
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43da      	mvns	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	400a      	ands	r2, r1
 8001784:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	b29b      	uxth	r3, r3
 8001792:	4618      	mov	r0, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	3b23      	subs	r3, #35	; 0x23
 80017a0:	fa00 f203 	lsl.w	r2, r0, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	631a      	str	r2, [r3, #48]	; 0x30
 80017ac:	e023      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	3b41      	subs	r3, #65	; 0x41
 80017c0:	221f      	movs	r2, #31
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	400a      	ands	r2, r1
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	4618      	mov	r0, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	3b41      	subs	r3, #65	; 0x41
 80017ea:	fa00 f203 	lsl.w	r2, r0, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f6:	4b29      	ldr	r3, [pc, #164]	; (800189c <HAL_ADC_ConfigChannel+0x250>)
 80017f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a28      	ldr	r2, [pc, #160]	; (80018a0 <HAL_ADC_ConfigChannel+0x254>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d10f      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x1d8>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b12      	cmp	r3, #18
 800180a:	d10b      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1d      	ldr	r2, [pc, #116]	; (80018a0 <HAL_ADC_ConfigChannel+0x254>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d12b      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x23a>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <HAL_ADC_ConfigChannel+0x258>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d003      	beq.n	8001840 <HAL_ADC_ConfigChannel+0x1f4>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b11      	cmp	r3, #17
 800183e:	d122      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <HAL_ADC_ConfigChannel+0x258>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d111      	bne.n	8001886 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_ADC_ConfigChannel+0x25c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a11      	ldr	r2, [pc, #68]	; (80018ac <HAL_ADC_ConfigChannel+0x260>)
 8001868:	fba2 2303 	umull	r2, r3, r2, r3
 800186c:	0c9a      	lsrs	r2, r3, #18
 800186e:	4613      	mov	r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001878:	e002      	b.n	8001880 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	3b01      	subs	r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f9      	bne.n	800187a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	40012300 	.word	0x40012300
 80018a0:	40012000 	.word	0x40012000
 80018a4:	10000012 	.word	0x10000012
 80018a8:	20000000 	.word	0x20000000
 80018ac:	431bde83 	.word	0x431bde83

080018b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018b8:	4b79      	ldr	r3, [pc, #484]	; (8001aa0 <ADC_Init+0x1f0>)
 80018ba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	431a      	orrs	r2, r3
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6859      	ldr	r1, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	021a      	lsls	r2, r3, #8
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685a      	ldr	r2, [r3, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001908:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6859      	ldr	r1, [r3, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800192a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	6899      	ldr	r1, [r3, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	4a58      	ldr	r2, [pc, #352]	; (8001aa4 <ADC_Init+0x1f4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d022      	beq.n	800198e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001956:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6899      	ldr	r1, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001978:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6899      	ldr	r1, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	e00f      	b.n	80019ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800199c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019ac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0202 	bic.w	r2, r2, #2
 80019bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6899      	ldr	r1, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7e1b      	ldrb	r3, [r3, #24]
 80019c8:	005a      	lsls	r2, r3, #1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d01b      	beq.n	8001a14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019ea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6859      	ldr	r1, [r3, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	3b01      	subs	r3, #1
 8001a08:	035a      	lsls	r2, r3, #13
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	e007      	b.n	8001a24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a22:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	051a      	lsls	r2, r3, #20
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6899      	ldr	r1, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a66:	025a      	lsls	r2, r3, #9
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6899      	ldr	r1, [r3, #8]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	029a      	lsls	r2, r3, #10
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	609a      	str	r2, [r3, #8]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40012300 	.word	0x40012300
 8001aa4:	0f000001 	.word	0x0f000001

08001aa8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d13c      	bne.n	8001b3c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d12b      	bne.n	8001b34 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d127      	bne.n	8001b34 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d006      	beq.n	8001b00 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d119      	bne.n	8001b34 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	685a      	ldr	r2, [r3, #4]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 0220 	bic.w	r2, r2, #32
 8001b0e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d105      	bne.n	8001b34 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f043 0201 	orr.w	r2, r3, #1
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff fd6b 	bl	8001610 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b3a:	e00e      	b.n	8001b5a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f7ff fd75 	bl	8001638 <HAL_ADC_ErrorCallback>
}
 8001b4e:	e004      	b.n	8001b5a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	4798      	blx	r3
}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f7ff fd57 	bl	8001624 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b084      	sub	sp, #16
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2240      	movs	r2, #64	; 0x40
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f043 0204 	orr.w	r2, r3, #4
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f7ff fd4a 	bl	8001638 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bde:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	60d3      	str	r3, [r2, #12]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0b      	blt.n	8001c3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4907      	ldr	r1, [pc, #28]	; (8001c48 <__NVIC_EnableIRQ+0x38>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	db0a      	blt.n	8001c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	490c      	ldr	r1, [pc, #48]	; (8001c98 <__NVIC_SetPriority+0x4c>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	0112      	lsls	r2, r2, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	440b      	add	r3, r1
 8001c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c74:	e00a      	b.n	8001c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	4908      	ldr	r1, [pc, #32]	; (8001c9c <__NVIC_SetPriority+0x50>)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	3b04      	subs	r3, #4
 8001c84:	0112      	lsls	r2, r2, #4
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	440b      	add	r3, r1
 8001c8a:	761a      	strb	r2, [r3, #24]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000e100 	.word	0xe000e100
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f1c3 0307 	rsb	r3, r3, #7
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	bf28      	it	cs
 8001cbe:	2304      	movcs	r3, #4
 8001cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d902      	bls.n	8001cd0 <NVIC_EncodePriority+0x30>
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3b03      	subs	r3, #3
 8001cce:	e000      	b.n	8001cd2 <NVIC_EncodePriority+0x32>
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	401a      	ands	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	43d9      	mvns	r1, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	4313      	orrs	r3, r2
         );
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3724      	adds	r7, #36	; 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d18:	d301      	bcc.n	8001d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e00f      	b.n	8001d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d1e:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <SysTick_Config+0x40>)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d26:	210f      	movs	r1, #15
 8001d28:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2c:	f7ff ff8e 	bl	8001c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <SysTick_Config+0x40>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <SysTick_Config+0x40>)
 8001d38:	2207      	movs	r2, #7
 8001d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	e000e010 	.word	0xe000e010

08001d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff ff29 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b086      	sub	sp, #24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d74:	f7ff ff3e 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68b9      	ldr	r1, [r7, #8]
 8001d7e:	6978      	ldr	r0, [r7, #20]
 8001d80:	f7ff ff8e 	bl	8001ca0 <NVIC_EncodePriority>
 8001d84:	4602      	mov	r2, r0
 8001d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff ff5d 	bl	8001c4c <__NVIC_SetPriority>
}
 8001d92:	bf00      	nop
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff31 	bl	8001c10 <__NVIC_EnableIRQ>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffa2 	bl	8001d08 <SysTick_Config>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ddc:	f7ff fab4 	bl	8001348 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e099      	b.n	8001f20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0201 	bic.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e0c:	e00f      	b.n	8001e2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e0e:	f7ff fa9b 	bl	8001348 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	d908      	bls.n	8001e2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2203      	movs	r2, #3
 8001e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e078      	b.n	8001f20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1e8      	bne.n	8001e0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <HAL_DMA_Init+0x158>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d107      	bne.n	8001e98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	4313      	orrs	r3, r2
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f023 0307 	bic.w	r3, r3, #7
 8001eae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d117      	bne.n	8001ef2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00e      	beq.n	8001ef2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 fa6f 	bl	80023b8 <DMA_CheckFifoParam>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d008      	beq.n	8001ef2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2240      	movs	r2, #64	; 0x40
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e016      	b.n	8001f20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fa26 	bl	800234c <DMA_CalcBaseAndBitshift>
 8001f00:	4603      	mov	r3, r0
 8001f02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f08:	223f      	movs	r2, #63	; 0x3f
 8001f0a:	409a      	lsls	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	f010803f 	.word	0xf010803f

08001f2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
 8001f38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_DMA_Start_IT+0x26>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e040      	b.n	8001fd4 <HAL_DMA_Start_IT+0xa8>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d12f      	bne.n	8001fc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f9b8 	bl	80022f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f84:	223f      	movs	r2, #63	; 0x3f
 8001f86:	409a      	lsls	r2, r3
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0216 	orr.w	r2, r2, #22
 8001f9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0208 	orr.w	r2, r2, #8
 8001fb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e005      	b.n	8001fd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001fe8:	4b8e      	ldr	r3, [pc, #568]	; (8002224 <HAL_DMA_IRQHandler+0x248>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a8e      	ldr	r2, [pc, #568]	; (8002228 <HAL_DMA_IRQHandler+0x24c>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	0a9b      	lsrs	r3, r3, #10
 8001ff4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002006:	2208      	movs	r2, #8
 8002008:	409a      	lsls	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4013      	ands	r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d01a      	beq.n	8002048 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d013      	beq.n	8002048 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 0204 	bic.w	r2, r2, #4
 800202e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002034:	2208      	movs	r2, #8
 8002036:	409a      	lsls	r2, r3
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002040:	f043 0201 	orr.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204c:	2201      	movs	r2, #1
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d012      	beq.n	800207e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206a:	2201      	movs	r2, #1
 800206c:	409a      	lsls	r2, r3
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002076:	f043 0202 	orr.w	r2, r3, #2
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002082:	2204      	movs	r2, #4
 8002084:	409a      	lsls	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d012      	beq.n	80020b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00b      	beq.n	80020b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	2204      	movs	r2, #4
 80020a2:	409a      	lsls	r2, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ac:	f043 0204 	orr.w	r2, r3, #4
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b8:	2210      	movs	r2, #16
 80020ba:	409a      	lsls	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d043      	beq.n	800214c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d03c      	beq.n	800214c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d6:	2210      	movs	r2, #16
 80020d8:	409a      	lsls	r2, r3
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d018      	beq.n	800211e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d108      	bne.n	800210c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d024      	beq.n	800214c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	4798      	blx	r3
 800210a:	e01f      	b.n	800214c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01b      	beq.n	800214c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
 800211c:	e016      	b.n	800214c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d107      	bne.n	800213c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0208 	bic.w	r2, r2, #8
 800213a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002150:	2220      	movs	r2, #32
 8002152:	409a      	lsls	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4013      	ands	r3, r2
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 808f 	beq.w	800227c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0310 	and.w	r3, r3, #16
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 8087 	beq.w	800227c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002172:	2220      	movs	r2, #32
 8002174:	409a      	lsls	r2, r3
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b05      	cmp	r3, #5
 8002184:	d136      	bne.n	80021f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0216 	bic.w	r2, r2, #22
 8002194:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d103      	bne.n	80021b6 <HAL_DMA_IRQHandler+0x1da>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d007      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0208 	bic.w	r2, r2, #8
 80021c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ca:	223f      	movs	r2, #63	; 0x3f
 80021cc:	409a      	lsls	r2, r3
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d07e      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4798      	blx	r3
        }
        return;
 80021f2:	e079      	b.n	80022e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01d      	beq.n	800223e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10d      	bne.n	800222c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002214:	2b00      	cmp	r3, #0
 8002216:	d031      	beq.n	800227c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4798      	blx	r3
 8002220:	e02c      	b.n	800227c <HAL_DMA_IRQHandler+0x2a0>
 8002222:	bf00      	nop
 8002224:	20000000 	.word	0x20000000
 8002228:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d023      	beq.n	800227c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	4798      	blx	r3
 800223c:	e01e      	b.n	800227c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10f      	bne.n	800226c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0210 	bic.w	r2, r2, #16
 800225a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002280:	2b00      	cmp	r3, #0
 8002282:	d032      	beq.n	80022ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	d022      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2205      	movs	r2, #5
 8002294:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0201 	bic.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	3301      	adds	r3, #1
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d307      	bcc.n	80022c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f2      	bne.n	80022a8 <HAL_DMA_IRQHandler+0x2cc>
 80022c2:	e000      	b.n	80022c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	4798      	blx	r3
 80022e6:	e000      	b.n	80022ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80022e8:	bf00      	nop
    }
  }
}
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800230c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b40      	cmp	r3, #64	; 0x40
 800231c:	d108      	bne.n	8002330 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800232e:	e007      	b.n	8002340 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	60da      	str	r2, [r3, #12]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	3b10      	subs	r3, #16
 800235c:	4a14      	ldr	r2, [pc, #80]	; (80023b0 <DMA_CalcBaseAndBitshift+0x64>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	091b      	lsrs	r3, r3, #4
 8002364:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002366:	4a13      	ldr	r2, [pc, #76]	; (80023b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4413      	add	r3, r2
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	461a      	mov	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d909      	bls.n	800238e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002382:	f023 0303 	bic.w	r3, r3, #3
 8002386:	1d1a      	adds	r2, r3, #4
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	659a      	str	r2, [r3, #88]	; 0x58
 800238c:	e007      	b.n	800239e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002396:	f023 0303 	bic.w	r3, r3, #3
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	aaaaaaab 	.word	0xaaaaaaab
 80023b4:	08005e80 	.word	0x08005e80

080023b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d11f      	bne.n	8002412 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b03      	cmp	r3, #3
 80023d6:	d856      	bhi.n	8002486 <DMA_CheckFifoParam+0xce>
 80023d8:	a201      	add	r2, pc, #4	; (adr r2, 80023e0 <DMA_CheckFifoParam+0x28>)
 80023da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023de:	bf00      	nop
 80023e0:	080023f1 	.word	0x080023f1
 80023e4:	08002403 	.word	0x08002403
 80023e8:	080023f1 	.word	0x080023f1
 80023ec:	08002487 	.word	0x08002487
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d046      	beq.n	800248a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002400:	e043      	b.n	800248a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002406:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800240a:	d140      	bne.n	800248e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002410:	e03d      	b.n	800248e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241a:	d121      	bne.n	8002460 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b03      	cmp	r3, #3
 8002420:	d837      	bhi.n	8002492 <DMA_CheckFifoParam+0xda>
 8002422:	a201      	add	r2, pc, #4	; (adr r2, 8002428 <DMA_CheckFifoParam+0x70>)
 8002424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002428:	08002439 	.word	0x08002439
 800242c:	0800243f 	.word	0x0800243f
 8002430:	08002439 	.word	0x08002439
 8002434:	08002451 	.word	0x08002451
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
      break;
 800243c:	e030      	b.n	80024a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d025      	beq.n	8002496 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800244e:	e022      	b.n	8002496 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002458:	d11f      	bne.n	800249a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800245e:	e01c      	b.n	800249a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d903      	bls.n	800246e <DMA_CheckFifoParam+0xb6>
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b03      	cmp	r3, #3
 800246a:	d003      	beq.n	8002474 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800246c:	e018      	b.n	80024a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
      break;
 8002472:	e015      	b.n	80024a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00e      	beq.n	800249e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
      break;
 8002484:	e00b      	b.n	800249e <DMA_CheckFifoParam+0xe6>
      break;
 8002486:	bf00      	nop
 8002488:	e00a      	b.n	80024a0 <DMA_CheckFifoParam+0xe8>
      break;
 800248a:	bf00      	nop
 800248c:	e008      	b.n	80024a0 <DMA_CheckFifoParam+0xe8>
      break;
 800248e:	bf00      	nop
 8002490:	e006      	b.n	80024a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002492:	bf00      	nop
 8002494:	e004      	b.n	80024a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002496:	bf00      	nop
 8002498:	e002      	b.n	80024a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800249a:	bf00      	nop
 800249c:	e000      	b.n	80024a0 <DMA_CheckFifoParam+0xe8>
      break;
 800249e:	bf00      	nop
    }
  } 
  
  return status; 
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop

080024b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	; 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	61fb      	str	r3, [r7, #28]
 80024ca:	e159      	b.n	8002780 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024cc:	2201      	movs	r2, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	f040 8148 	bne.w	800277a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d005      	beq.n	8002502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d130      	bne.n	8002564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	2203      	movs	r2, #3
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002538:	2201      	movs	r2, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 0201 	and.w	r2, r3, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	2b03      	cmp	r3, #3
 800256e:	d017      	beq.n	80025a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2203      	movs	r2, #3
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d123      	bne.n	80025f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	08da      	lsrs	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3208      	adds	r2, #8
 80025b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	220f      	movs	r2, #15
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	691a      	ldr	r2, [r3, #16]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	08da      	lsrs	r2, r3, #3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3208      	adds	r2, #8
 80025ee:	69b9      	ldr	r1, [r7, #24]
 80025f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	2203      	movs	r2, #3
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43db      	mvns	r3, r3
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4013      	ands	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0203 	and.w	r2, r3, #3
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80a2 	beq.w	800277a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4b57      	ldr	r3, [pc, #348]	; (8002798 <HAL_GPIO_Init+0x2e8>)
 800263c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263e:	4a56      	ldr	r2, [pc, #344]	; (8002798 <HAL_GPIO_Init+0x2e8>)
 8002640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002644:	6453      	str	r3, [r2, #68]	; 0x44
 8002646:	4b54      	ldr	r3, [pc, #336]	; (8002798 <HAL_GPIO_Init+0x2e8>)
 8002648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002652:	4a52      	ldr	r2, [pc, #328]	; (800279c <HAL_GPIO_Init+0x2ec>)
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	089b      	lsrs	r3, r3, #2
 8002658:	3302      	adds	r3, #2
 800265a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	220f      	movs	r2, #15
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4013      	ands	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a49      	ldr	r2, [pc, #292]	; (80027a0 <HAL_GPIO_Init+0x2f0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d019      	beq.n	80026b2 <HAL_GPIO_Init+0x202>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a48      	ldr	r2, [pc, #288]	; (80027a4 <HAL_GPIO_Init+0x2f4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d013      	beq.n	80026ae <HAL_GPIO_Init+0x1fe>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a47      	ldr	r2, [pc, #284]	; (80027a8 <HAL_GPIO_Init+0x2f8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d00d      	beq.n	80026aa <HAL_GPIO_Init+0x1fa>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a46      	ldr	r2, [pc, #280]	; (80027ac <HAL_GPIO_Init+0x2fc>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d007      	beq.n	80026a6 <HAL_GPIO_Init+0x1f6>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a45      	ldr	r2, [pc, #276]	; (80027b0 <HAL_GPIO_Init+0x300>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d101      	bne.n	80026a2 <HAL_GPIO_Init+0x1f2>
 800269e:	2304      	movs	r3, #4
 80026a0:	e008      	b.n	80026b4 <HAL_GPIO_Init+0x204>
 80026a2:	2307      	movs	r3, #7
 80026a4:	e006      	b.n	80026b4 <HAL_GPIO_Init+0x204>
 80026a6:	2303      	movs	r3, #3
 80026a8:	e004      	b.n	80026b4 <HAL_GPIO_Init+0x204>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e002      	b.n	80026b4 <HAL_GPIO_Init+0x204>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_GPIO_Init+0x204>
 80026b2:	2300      	movs	r3, #0
 80026b4:	69fa      	ldr	r2, [r7, #28]
 80026b6:	f002 0203 	and.w	r2, r2, #3
 80026ba:	0092      	lsls	r2, r2, #2
 80026bc:	4093      	lsls	r3, r2
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c4:	4935      	ldr	r1, [pc, #212]	; (800279c <HAL_GPIO_Init+0x2ec>)
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	089b      	lsrs	r3, r3, #2
 80026ca:	3302      	adds	r3, #2
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026d2:	4b38      	ldr	r3, [pc, #224]	; (80027b4 <HAL_GPIO_Init+0x304>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	43db      	mvns	r3, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4013      	ands	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026f6:	4a2f      	ldr	r2, [pc, #188]	; (80027b4 <HAL_GPIO_Init+0x304>)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026fc:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <HAL_GPIO_Init+0x304>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002720:	4a24      	ldr	r2, [pc, #144]	; (80027b4 <HAL_GPIO_Init+0x304>)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002726:	4b23      	ldr	r3, [pc, #140]	; (80027b4 <HAL_GPIO_Init+0x304>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	43db      	mvns	r3, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4013      	ands	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800274a:	4a1a      	ldr	r2, [pc, #104]	; (80027b4 <HAL_GPIO_Init+0x304>)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002750:	4b18      	ldr	r3, [pc, #96]	; (80027b4 <HAL_GPIO_Init+0x304>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002774:	4a0f      	ldr	r2, [pc, #60]	; (80027b4 <HAL_GPIO_Init+0x304>)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3301      	adds	r3, #1
 800277e:	61fb      	str	r3, [r7, #28]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	2b0f      	cmp	r3, #15
 8002784:	f67f aea2 	bls.w	80024cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	3724      	adds	r7, #36	; 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40023800 	.word	0x40023800
 800279c:	40013800 	.word	0x40013800
 80027a0:	40020000 	.word	0x40020000
 80027a4:	40020400 	.word	0x40020400
 80027a8:	40020800 	.word	0x40020800
 80027ac:	40020c00 	.word	0x40020c00
 80027b0:	40021000 	.word	0x40021000
 80027b4:	40013c00 	.word	0x40013c00

080027b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	887b      	ldrh	r3, [r7, #2]
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027d0:	2301      	movs	r3, #1
 80027d2:	73fb      	strb	r3, [r7, #15]
 80027d4:	e001      	b.n	80027da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027da:	7bfb      	ldrb	r3, [r7, #15]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	807b      	strh	r3, [r7, #2]
 80027f4:	4613      	mov	r3, r2
 80027f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027f8:	787b      	ldrb	r3, [r7, #1]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027fe:	887a      	ldrh	r2, [r7, #2]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002804:	e003      	b.n	800280e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002806:	887b      	ldrh	r3, [r7, #2]
 8002808:	041a      	lsls	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	619a      	str	r2, [r3, #24]
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e12b      	b.n	8002a86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe fb42 	bl	8000ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2224      	movs	r2, #36	; 0x24
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800286e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800287e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002880:	f001 fa08 	bl	8003c94 <HAL_RCC_GetPCLK1Freq>
 8002884:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	4a81      	ldr	r2, [pc, #516]	; (8002a90 <HAL_I2C_Init+0x274>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d807      	bhi.n	80028a0 <HAL_I2C_Init+0x84>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a80      	ldr	r2, [pc, #512]	; (8002a94 <HAL_I2C_Init+0x278>)
 8002894:	4293      	cmp	r3, r2
 8002896:	bf94      	ite	ls
 8002898:	2301      	movls	r3, #1
 800289a:	2300      	movhi	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	e006      	b.n	80028ae <HAL_I2C_Init+0x92>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4a7d      	ldr	r2, [pc, #500]	; (8002a98 <HAL_I2C_Init+0x27c>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	bf94      	ite	ls
 80028a8:	2301      	movls	r3, #1
 80028aa:	2300      	movhi	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e0e7      	b.n	8002a86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4a78      	ldr	r2, [pc, #480]	; (8002a9c <HAL_I2C_Init+0x280>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	0c9b      	lsrs	r3, r3, #18
 80028c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a6a      	ldr	r2, [pc, #424]	; (8002a90 <HAL_I2C_Init+0x274>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d802      	bhi.n	80028f0 <HAL_I2C_Init+0xd4>
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	3301      	adds	r3, #1
 80028ee:	e009      	b.n	8002904 <HAL_I2C_Init+0xe8>
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	4a69      	ldr	r2, [pc, #420]	; (8002aa0 <HAL_I2C_Init+0x284>)
 80028fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002900:	099b      	lsrs	r3, r3, #6
 8002902:	3301      	adds	r3, #1
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	430b      	orrs	r3, r1
 800290a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002916:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	495c      	ldr	r1, [pc, #368]	; (8002a90 <HAL_I2C_Init+0x274>)
 8002920:	428b      	cmp	r3, r1
 8002922:	d819      	bhi.n	8002958 <HAL_I2C_Init+0x13c>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1e59      	subs	r1, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002932:	1c59      	adds	r1, r3, #1
 8002934:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002938:	400b      	ands	r3, r1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_I2C_Init+0x138>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1e59      	subs	r1, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	fbb1 f3f3 	udiv	r3, r1, r3
 800294c:	3301      	adds	r3, #1
 800294e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002952:	e051      	b.n	80029f8 <HAL_I2C_Init+0x1dc>
 8002954:	2304      	movs	r3, #4
 8002956:	e04f      	b.n	80029f8 <HAL_I2C_Init+0x1dc>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d111      	bne.n	8002984 <HAL_I2C_Init+0x168>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1e58      	subs	r0, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6859      	ldr	r1, [r3, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	440b      	add	r3, r1
 800296e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002972:	3301      	adds	r3, #1
 8002974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e012      	b.n	80029aa <HAL_I2C_Init+0x18e>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	1e58      	subs	r0, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	460b      	mov	r3, r1
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	0099      	lsls	r1, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	fbb0 f3f3 	udiv	r3, r0, r3
 800299a:	3301      	adds	r3, #1
 800299c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_I2C_Init+0x196>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e022      	b.n	80029f8 <HAL_I2C_Init+0x1dc>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10e      	bne.n	80029d8 <HAL_I2C_Init+0x1bc>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1e58      	subs	r0, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6859      	ldr	r1, [r3, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	440b      	add	r3, r1
 80029c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029cc:	3301      	adds	r3, #1
 80029ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d6:	e00f      	b.n	80029f8 <HAL_I2C_Init+0x1dc>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1e58      	subs	r0, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	0099      	lsls	r1, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	6809      	ldr	r1, [r1, #0]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69da      	ldr	r2, [r3, #28]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6911      	ldr	r1, [r2, #16]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68d2      	ldr	r2, [r2, #12]
 8002a32:	4311      	orrs	r1, r2
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	000186a0 	.word	0x000186a0
 8002a94:	001e847f 	.word	0x001e847f
 8002a98:	003d08ff 	.word	0x003d08ff
 8002a9c:	431bde83 	.word	0x431bde83
 8002aa0:	10624dd3 	.word	0x10624dd3

08002aa4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	607a      	str	r2, [r7, #4]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	817b      	strh	r3, [r7, #10]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ab8:	f7fe fc46 	bl	8001348 <HAL_GetTick>
 8002abc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	f040 80e0 	bne.w	8002c8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	2319      	movs	r3, #25
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	4970      	ldr	r1, [pc, #448]	; (8002c98 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fa92 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e0d3      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_I2C_Master_Transmit+0x50>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e0cc      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x1ea>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d007      	beq.n	8002b1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2221      	movs	r2, #33	; 0x21
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2210      	movs	r2, #16
 8002b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	893a      	ldrh	r2, [r7, #8]
 8002b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4a50      	ldr	r2, [pc, #320]	; (8002c9c <HAL_I2C_Master_Transmit+0x1f8>)
 8002b5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b5c:	8979      	ldrh	r1, [r7, #10]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	6a3a      	ldr	r2, [r7, #32]
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 f9ca 	bl	8002efc <I2C_MasterRequestWrite>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e08d      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b72:	2300      	movs	r3, #0
 8002b74:	613b      	str	r3, [r7, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b88:	e066      	b.n	8002c58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	6a39      	ldr	r1, [r7, #32]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fb50 	bl	8003234 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00d      	beq.n	8002bb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d107      	bne.n	8002bb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06b      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	781a      	ldrb	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d11b      	bne.n	8002c2c <HAL_I2C_Master_Transmit+0x188>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d017      	beq.n	8002c2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	781a      	ldrb	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	6a39      	ldr	r1, [r7, #32]
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fb47 	bl	80032c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00d      	beq.n	8002c58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d107      	bne.n	8002c54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e01a      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d194      	bne.n	8002b8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e000      	b.n	8002c8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c8c:	2302      	movs	r3, #2
  }
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	00100002 	.word	0x00100002
 8002c9c:	ffff0000 	.word	0xffff0000

08002ca0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	460b      	mov	r3, r1
 8002cae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002cb0:	f7fe fb4a 	bl	8001348 <HAL_GetTick>
 8002cb4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	f040 8111 	bne.w	8002eea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	2319      	movs	r3, #25
 8002cce:	2201      	movs	r2, #1
 8002cd0:	4988      	ldr	r1, [pc, #544]	; (8002ef4 <HAL_I2C_IsDeviceReady+0x254>)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f994 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e104      	b.n	8002eec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_I2C_IsDeviceReady+0x50>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e0fd      	b.n	8002eec <HAL_I2C_IsDeviceReady+0x24c>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d007      	beq.n	8002d16 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0201 	orr.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2224      	movs	r2, #36	; 0x24
 8002d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4a70      	ldr	r2, [pc, #448]	; (8002ef8 <HAL_I2C_IsDeviceReady+0x258>)
 8002d38:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d48:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 f952 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00d      	beq.n	8002d7e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d70:	d103      	bne.n	8002d7a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d78:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e0b6      	b.n	8002eec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d7e:	897b      	ldrh	r3, [r7, #10]
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d8c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002d8e:	f7fe fadb 	bl	8001348 <HAL_GetTick>
 8002d92:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	bf0c      	ite	eq
 8002da2:	2301      	moveq	r3, #1
 8002da4:	2300      	movne	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db8:	bf0c      	ite	eq
 8002dba:	2301      	moveq	r3, #1
 8002dbc:	2300      	movne	r3, #0
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002dc2:	e025      	b.n	8002e10 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dc4:	f7fe fac0 	bl	8001348 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d302      	bcc.n	8002dda <HAL_I2C_IsDeviceReady+0x13a>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d103      	bne.n	8002de2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	22a0      	movs	r2, #160	; 0xa0
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	bf0c      	ite	eq
 8002df0:	2301      	moveq	r3, #1
 8002df2:	2300      	movne	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2ba0      	cmp	r3, #160	; 0xa0
 8002e1a:	d005      	beq.n	8002e28 <HAL_I2C_IsDeviceReady+0x188>
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d102      	bne.n	8002e28 <HAL_I2C_IsDeviceReady+0x188>
 8002e22:	7dbb      	ldrb	r3, [r7, #22]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0cd      	beq.n	8002dc4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d129      	bne.n	8002e92 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	2319      	movs	r3, #25
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	4921      	ldr	r1, [pc, #132]	; (8002ef4 <HAL_I2C_IsDeviceReady+0x254>)
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f000 f8c6 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e036      	b.n	8002eec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e02c      	b.n	8002eec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eaa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2319      	movs	r3, #25
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	490f      	ldr	r1, [pc, #60]	; (8002ef4 <HAL_I2C_IsDeviceReady+0x254>)
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8a2 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e012      	b.n	8002eec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	f4ff af32 	bcc.w	8002d3a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002eea:	2302      	movs	r3, #2
  }
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3720      	adds	r7, #32
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	00100002 	.word	0x00100002
 8002ef8:	ffff0000 	.word	0xffff0000

08002efc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d006      	beq.n	8002f26 <I2C_MasterRequestWrite+0x2a>
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d003      	beq.n	8002f26 <I2C_MasterRequestWrite+0x2a>
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f24:	d108      	bne.n	8002f38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	e00b      	b.n	8002f50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	2b12      	cmp	r3, #18
 8002f3e:	d107      	bne.n	8002f50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f000 f84f 	bl	8003000 <I2C_WaitOnFlagUntilTimeout>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00d      	beq.n	8002f84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f76:	d103      	bne.n	8002f80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e035      	b.n	8002ff0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f8c:	d108      	bne.n	8002fa0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f8e:	897b      	ldrh	r3, [r7, #10]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f9c:	611a      	str	r2, [r3, #16]
 8002f9e:	e01b      	b.n	8002fd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fa0:	897b      	ldrh	r3, [r7, #10]
 8002fa2:	11db      	asrs	r3, r3, #7
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	f003 0306 	and.w	r3, r3, #6
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f063 030f 	orn	r3, r3, #15
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	490e      	ldr	r1, [pc, #56]	; (8002ff8 <I2C_MasterRequestWrite+0xfc>)
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f898 	bl	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e010      	b.n	8002ff0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fce:	897b      	ldrh	r3, [r7, #10]
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	4907      	ldr	r1, [pc, #28]	; (8002ffc <I2C_MasterRequestWrite+0x100>)
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f888 	bl	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	00010008 	.word	0x00010008
 8002ffc:	00010002 	.word	0x00010002

08003000 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	4613      	mov	r3, r2
 800300e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003010:	e048      	b.n	80030a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003018:	d044      	beq.n	80030a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301a:	f7fe f995 	bl	8001348 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d302      	bcc.n	8003030 <I2C_WaitOnFlagUntilTimeout+0x30>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d139      	bne.n	80030a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	0c1b      	lsrs	r3, r3, #16
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b01      	cmp	r3, #1
 8003038:	d10d      	bne.n	8003056 <I2C_WaitOnFlagUntilTimeout+0x56>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	43da      	mvns	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	4013      	ands	r3, r2
 8003046:	b29b      	uxth	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	461a      	mov	r2, r3
 8003054:	e00c      	b.n	8003070 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	43da      	mvns	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	4013      	ands	r3, r2
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	461a      	mov	r2, r3
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	429a      	cmp	r2, r3
 8003074:	d116      	bne.n	80030a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e023      	b.n	80030ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	0c1b      	lsrs	r3, r3, #16
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d10d      	bne.n	80030ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	43da      	mvns	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4013      	ands	r3, r2
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	e00c      	b.n	80030e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	43da      	mvns	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4013      	ands	r3, r2
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d093      	beq.n	8003012 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003102:	e071      	b.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003112:	d123      	bne.n	800315c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003122:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800312c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	f043 0204 	orr.w	r2, r3, #4
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e067      	b.n	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003162:	d041      	beq.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003164:	f7fe f8f0 	bl	8001348 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	d302      	bcc.n	800317a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d136      	bne.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b01      	cmp	r3, #1
 8003182:	d10c      	bne.n	800319e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4013      	ands	r3, r2
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf14      	ite	ne
 8003196:	2301      	movne	r3, #1
 8003198:	2300      	moveq	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	e00b      	b.n	80031b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	43da      	mvns	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4013      	ands	r3, r2
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d016      	beq.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	f043 0220 	orr.w	r2, r3, #32
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e021      	b.n	800322c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	0c1b      	lsrs	r3, r3, #16
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d10c      	bne.n	800320c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	43da      	mvns	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4013      	ands	r3, r2
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf14      	ite	ne
 8003204:	2301      	movne	r3, #1
 8003206:	2300      	moveq	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	e00b      	b.n	8003224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	43da      	mvns	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4013      	ands	r3, r2
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	bf14      	ite	ne
 800321e:	2301      	movne	r3, #1
 8003220:	2300      	moveq	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	f47f af6d 	bne.w	8003104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003240:	e034      	b.n	80032ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f886 	bl	8003354 <I2C_IsAcknowledgeFailed>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e034      	b.n	80032bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003258:	d028      	beq.n	80032ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800325a:	f7fe f875 	bl	8001348 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	429a      	cmp	r2, r3
 8003268:	d302      	bcc.n	8003270 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d11d      	bne.n	80032ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327a:	2b80      	cmp	r3, #128	; 0x80
 800327c:	d016      	beq.n	80032ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	f043 0220 	orr.w	r2, r3, #32
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e007      	b.n	80032bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b80      	cmp	r3, #128	; 0x80
 80032b8:	d1c3      	bne.n	8003242 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032d0:	e034      	b.n	800333c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f83e 	bl	8003354 <I2C_IsAcknowledgeFailed>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e034      	b.n	800334c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d028      	beq.n	800333c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ea:	f7fe f82d 	bl	8001348 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d302      	bcc.n	8003300 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d11d      	bne.n	800333c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	2b04      	cmp	r3, #4
 800330c:	d016      	beq.n	800333c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	f043 0220 	orr.w	r2, r3, #32
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e007      	b.n	800334c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b04      	cmp	r3, #4
 8003348:	d1c3      	bne.n	80032d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336a:	d11b      	bne.n	80033a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003374:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	f043 0204 	orr.w	r2, r3, #4
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e267      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d075      	beq.n	80034be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033d2:	4b88      	ldr	r3, [pc, #544]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d00c      	beq.n	80033f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033de:	4b85      	ldr	r3, [pc, #532]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d112      	bne.n	8003410 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ea:	4b82      	ldr	r3, [pc, #520]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f6:	d10b      	bne.n	8003410 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f8:	4b7e      	ldr	r3, [pc, #504]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d05b      	beq.n	80034bc <HAL_RCC_OscConfig+0x108>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d157      	bne.n	80034bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e242      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003418:	d106      	bne.n	8003428 <HAL_RCC_OscConfig+0x74>
 800341a:	4b76      	ldr	r3, [pc, #472]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a75      	ldr	r2, [pc, #468]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e01d      	b.n	8003464 <HAL_RCC_OscConfig+0xb0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0x98>
 8003432:	4b70      	ldr	r3, [pc, #448]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a6f      	ldr	r2, [pc, #444]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b6d      	ldr	r3, [pc, #436]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a6c      	ldr	r2, [pc, #432]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e00b      	b.n	8003464 <HAL_RCC_OscConfig+0xb0>
 800344c:	4b69      	ldr	r3, [pc, #420]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a68      	ldr	r2, [pc, #416]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	4b66      	ldr	r3, [pc, #408]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a65      	ldr	r2, [pc, #404]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 800345e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d013      	beq.n	8003494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fd ff6c 	bl	8001348 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003474:	f7fd ff68 	bl	8001348 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e207      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003486:	4b5b      	ldr	r3, [pc, #364]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0xc0>
 8003492:	e014      	b.n	80034be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fd ff58 	bl	8001348 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800349c:	f7fd ff54 	bl	8001348 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	; 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e1f3      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ae:	4b51      	ldr	r3, [pc, #324]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0xe8>
 80034ba:	e000      	b.n	80034be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d063      	beq.n	8003592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034ca:	4b4a      	ldr	r3, [pc, #296]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00b      	beq.n	80034ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d6:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d11c      	bne.n	800351c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e2:	4b44      	ldr	r3, [pc, #272]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d116      	bne.n	800351c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ee:	4b41      	ldr	r3, [pc, #260]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d005      	beq.n	8003506 <HAL_RCC_OscConfig+0x152>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d001      	beq.n	8003506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e1c7      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003506:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4937      	ldr	r1, [pc, #220]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003516:	4313      	orrs	r3, r2
 8003518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351a:	e03a      	b.n	8003592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d020      	beq.n	8003566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003524:	4b34      	ldr	r3, [pc, #208]	; (80035f8 <HAL_RCC_OscConfig+0x244>)
 8003526:	2201      	movs	r2, #1
 8003528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7fd ff0d 	bl	8001348 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003532:	f7fd ff09 	bl	8001348 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e1a8      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003544:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003550:	4b28      	ldr	r3, [pc, #160]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	4925      	ldr	r1, [pc, #148]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003560:	4313      	orrs	r3, r2
 8003562:	600b      	str	r3, [r1, #0]
 8003564:	e015      	b.n	8003592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003566:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <HAL_RCC_OscConfig+0x244>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fd feec 	bl	8001348 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003574:	f7fd fee8 	bl	8001348 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e187      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003586:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d036      	beq.n	800360c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d016      	beq.n	80035d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035a6:	4b15      	ldr	r3, [pc, #84]	; (80035fc <HAL_RCC_OscConfig+0x248>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ac:	f7fd fecc 	bl	8001348 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b4:	f7fd fec8 	bl	8001348 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e167      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80035c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0x200>
 80035d2:	e01b      	b.n	800360c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d4:	4b09      	ldr	r3, [pc, #36]	; (80035fc <HAL_RCC_OscConfig+0x248>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035da:	f7fd feb5 	bl	8001348 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e0:	e00e      	b.n	8003600 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e2:	f7fd feb1 	bl	8001348 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d907      	bls.n	8003600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e150      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
 80035f4:	40023800 	.word	0x40023800
 80035f8:	42470000 	.word	0x42470000
 80035fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003600:	4b88      	ldr	r3, [pc, #544]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1ea      	bne.n	80035e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8097 	beq.w	8003748 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361a:	2300      	movs	r3, #0
 800361c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800361e:	4b81      	ldr	r3, [pc, #516]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10f      	bne.n	800364a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	4b7d      	ldr	r3, [pc, #500]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	4a7c      	ldr	r2, [pc, #496]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003638:	6413      	str	r3, [r2, #64]	; 0x40
 800363a:	4b7a      	ldr	r3, [pc, #488]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003646:	2301      	movs	r3, #1
 8003648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364a:	4b77      	ldr	r3, [pc, #476]	; (8003828 <HAL_RCC_OscConfig+0x474>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d118      	bne.n	8003688 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003656:	4b74      	ldr	r3, [pc, #464]	; (8003828 <HAL_RCC_OscConfig+0x474>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a73      	ldr	r2, [pc, #460]	; (8003828 <HAL_RCC_OscConfig+0x474>)
 800365c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003662:	f7fd fe71 	bl	8001348 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366a:	f7fd fe6d 	bl	8001348 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e10c      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367c:	4b6a      	ldr	r3, [pc, #424]	; (8003828 <HAL_RCC_OscConfig+0x474>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d106      	bne.n	800369e <HAL_RCC_OscConfig+0x2ea>
 8003690:	4b64      	ldr	r3, [pc, #400]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	4a63      	ldr	r2, [pc, #396]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	6713      	str	r3, [r2, #112]	; 0x70
 800369c:	e01c      	b.n	80036d8 <HAL_RCC_OscConfig+0x324>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	2b05      	cmp	r3, #5
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x30c>
 80036a6:	4b5f      	ldr	r3, [pc, #380]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	4a5e      	ldr	r2, [pc, #376]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036ac:	f043 0304 	orr.w	r3, r3, #4
 80036b0:	6713      	str	r3, [r2, #112]	; 0x70
 80036b2:	4b5c      	ldr	r3, [pc, #368]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	4a5b      	ldr	r2, [pc, #364]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6713      	str	r3, [r2, #112]	; 0x70
 80036be:	e00b      	b.n	80036d8 <HAL_RCC_OscConfig+0x324>
 80036c0:	4b58      	ldr	r3, [pc, #352]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a57      	ldr	r2, [pc, #348]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
 80036cc:	4b55      	ldr	r3, [pc, #340]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	4a54      	ldr	r2, [pc, #336]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036d2:	f023 0304 	bic.w	r3, r3, #4
 80036d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d015      	beq.n	800370c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e0:	f7fd fe32 	bl	8001348 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e6:	e00a      	b.n	80036fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e8:	f7fd fe2e 	bl	8001348 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e0cb      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036fe:	4b49      	ldr	r3, [pc, #292]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0ee      	beq.n	80036e8 <HAL_RCC_OscConfig+0x334>
 800370a:	e014      	b.n	8003736 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370c:	f7fd fe1c 	bl	8001348 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003712:	e00a      	b.n	800372a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003714:	f7fd fe18 	bl	8001348 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003722:	4293      	cmp	r3, r2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e0b5      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372a:	4b3e      	ldr	r3, [pc, #248]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1ee      	bne.n	8003714 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003736:	7dfb      	ldrb	r3, [r7, #23]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d105      	bne.n	8003748 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800373c:	4b39      	ldr	r3, [pc, #228]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	4a38      	ldr	r2, [pc, #224]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003746:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 80a1 	beq.w	8003894 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003752:	4b34      	ldr	r3, [pc, #208]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
 800375a:	2b08      	cmp	r3, #8
 800375c:	d05c      	beq.n	8003818 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d141      	bne.n	80037ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003766:	4b31      	ldr	r3, [pc, #196]	; (800382c <HAL_RCC_OscConfig+0x478>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376c:	f7fd fdec 	bl	8001348 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003774:	f7fd fde8 	bl	8001348 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e087      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003786:	4b27      	ldr	r3, [pc, #156]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69da      	ldr	r2, [r3, #28]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	019b      	lsls	r3, r3, #6
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	085b      	lsrs	r3, r3, #1
 80037aa:	3b01      	subs	r3, #1
 80037ac:	041b      	lsls	r3, r3, #16
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	061b      	lsls	r3, r3, #24
 80037b6:	491b      	ldr	r1, [pc, #108]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037bc:	4b1b      	ldr	r3, [pc, #108]	; (800382c <HAL_RCC_OscConfig+0x478>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c2:	f7fd fdc1 	bl	8001348 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ca:	f7fd fdbd 	bl	8001348 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e05c      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x416>
 80037e8:	e054      	b.n	8003894 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <HAL_RCC_OscConfig+0x478>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7fd fdaa 	bl	8001348 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f8:	f7fd fda6 	bl	8001348 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e045      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x444>
 8003816:	e03d      	b.n	8003894 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d107      	bne.n	8003830 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e038      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
 8003824:	40023800 	.word	0x40023800
 8003828:	40007000 	.word	0x40007000
 800382c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003830:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <HAL_RCC_OscConfig+0x4ec>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d028      	beq.n	8003890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d121      	bne.n	8003890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003856:	429a      	cmp	r2, r3
 8003858:	d11a      	bne.n	8003890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003860:	4013      	ands	r3, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003866:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003868:	4293      	cmp	r3, r2
 800386a:	d111      	bne.n	8003890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	085b      	lsrs	r3, r3, #1
 8003878:	3b01      	subs	r3, #1
 800387a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800387c:	429a      	cmp	r2, r3
 800387e:	d107      	bne.n	8003890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40023800 	.word	0x40023800

080038a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0cc      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038b8:	4b68      	ldr	r3, [pc, #416]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d90c      	bls.n	80038e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	4b65      	ldr	r3, [pc, #404]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b63      	ldr	r3, [pc, #396]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0b8      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d020      	beq.n	800392e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f8:	4b59      	ldr	r3, [pc, #356]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	4a58      	ldr	r2, [pc, #352]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003902:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003910:	4b53      	ldr	r3, [pc, #332]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a52      	ldr	r2, [pc, #328]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800391a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800391c:	4b50      	ldr	r3, [pc, #320]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	494d      	ldr	r1, [pc, #308]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d044      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003942:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d119      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e07f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d003      	beq.n	8003962 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800395e:	2b03      	cmp	r3, #3
 8003960:	d107      	bne.n	8003972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003962:	4b3f      	ldr	r3, [pc, #252]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e06f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003972:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e067      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003982:	4b37      	ldr	r3, [pc, #220]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f023 0203 	bic.w	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	4934      	ldr	r1, [pc, #208]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	4313      	orrs	r3, r2
 8003992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003994:	f7fd fcd8 	bl	8001348 <HAL_GetTick>
 8003998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399c:	f7fd fcd4 	bl	8001348 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e04f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 020c 	and.w	r2, r3, #12
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d1eb      	bne.n	800399c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039c4:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d20c      	bcs.n	80039ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e032      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f8:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4916      	ldr	r1, [pc, #88]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a16:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	490e      	ldr	r1, [pc, #56]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a2a:	f000 f821 	bl	8003a70 <HAL_RCC_GetSysClockFreq>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	490a      	ldr	r1, [pc, #40]	; (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 8003a3c:	5ccb      	ldrb	r3, [r1, r3]
 8003a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a42:	4a09      	ldr	r2, [pc, #36]	; (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_RCC_ClockConfig+0x1c8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fd fc38 	bl	80012c0 <HAL_InitTick>

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023c00 	.word	0x40023c00
 8003a60:	40023800 	.word	0x40023800
 8003a64:	08005e68 	.word	0x08005e68
 8003a68:	20000000 	.word	0x20000000
 8003a6c:	20000004 	.word	0x20000004

08003a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a74:	b094      	sub	sp, #80	; 0x50
 8003a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a88:	4b79      	ldr	r3, [pc, #484]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d00d      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	f200 80e1 	bhi.w	8003c5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8003aa2:	e0db      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003aa4:	4b73      	ldr	r3, [pc, #460]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aa6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aa8:	e0db      	b.n	8003c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aaa:	4b73      	ldr	r3, [pc, #460]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x208>)
 8003aac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aae:	e0d8      	b.n	8003c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ab0:	4b6f      	ldr	r3, [pc, #444]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aba:	4b6d      	ldr	r3, [pc, #436]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d063      	beq.n	8003b8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac6:	4b6a      	ldr	r3, [pc, #424]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	099b      	lsrs	r3, r3, #6
 8003acc:	2200      	movs	r2, #0
 8003ace:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ad0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad8:	633b      	str	r3, [r7, #48]	; 0x30
 8003ada:	2300      	movs	r3, #0
 8003adc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ade:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ae2:	4622      	mov	r2, r4
 8003ae4:	462b      	mov	r3, r5
 8003ae6:	f04f 0000 	mov.w	r0, #0
 8003aea:	f04f 0100 	mov.w	r1, #0
 8003aee:	0159      	lsls	r1, r3, #5
 8003af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003af4:	0150      	lsls	r0, r2, #5
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	4621      	mov	r1, r4
 8003afc:	1a51      	subs	r1, r2, r1
 8003afe:	6139      	str	r1, [r7, #16]
 8003b00:	4629      	mov	r1, r5
 8003b02:	eb63 0301 	sbc.w	r3, r3, r1
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b14:	4659      	mov	r1, fp
 8003b16:	018b      	lsls	r3, r1, #6
 8003b18:	4651      	mov	r1, sl
 8003b1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b1e:	4651      	mov	r1, sl
 8003b20:	018a      	lsls	r2, r1, #6
 8003b22:	4651      	mov	r1, sl
 8003b24:	ebb2 0801 	subs.w	r8, r2, r1
 8003b28:	4659      	mov	r1, fp
 8003b2a:	eb63 0901 	sbc.w	r9, r3, r1
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b42:	4690      	mov	r8, r2
 8003b44:	4699      	mov	r9, r3
 8003b46:	4623      	mov	r3, r4
 8003b48:	eb18 0303 	adds.w	r3, r8, r3
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	462b      	mov	r3, r5
 8003b50:	eb49 0303 	adc.w	r3, r9, r3
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b62:	4629      	mov	r1, r5
 8003b64:	024b      	lsls	r3, r1, #9
 8003b66:	4621      	mov	r1, r4
 8003b68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b6c:	4621      	mov	r1, r4
 8003b6e:	024a      	lsls	r2, r1, #9
 8003b70:	4610      	mov	r0, r2
 8003b72:	4619      	mov	r1, r3
 8003b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b76:	2200      	movs	r2, #0
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b80:	f7fc fb7e 	bl	8000280 <__aeabi_uldivmod>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4613      	mov	r3, r2
 8003b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b8c:	e058      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b8e:	4b38      	ldr	r3, [pc, #224]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	099b      	lsrs	r3, r3, #6
 8003b94:	2200      	movs	r2, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	4611      	mov	r1, r2
 8003b9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b9e:	623b      	str	r3, [r7, #32]
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ba8:	4642      	mov	r2, r8
 8003baa:	464b      	mov	r3, r9
 8003bac:	f04f 0000 	mov.w	r0, #0
 8003bb0:	f04f 0100 	mov.w	r1, #0
 8003bb4:	0159      	lsls	r1, r3, #5
 8003bb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bba:	0150      	lsls	r0, r2, #5
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4641      	mov	r1, r8
 8003bc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bc6:	4649      	mov	r1, r9
 8003bc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003be0:	ebb2 040a 	subs.w	r4, r2, sl
 8003be4:	eb63 050b 	sbc.w	r5, r3, fp
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	00eb      	lsls	r3, r5, #3
 8003bf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bf6:	00e2      	lsls	r2, r4, #3
 8003bf8:	4614      	mov	r4, r2
 8003bfa:	461d      	mov	r5, r3
 8003bfc:	4643      	mov	r3, r8
 8003bfe:	18e3      	adds	r3, r4, r3
 8003c00:	603b      	str	r3, [r7, #0]
 8003c02:	464b      	mov	r3, r9
 8003c04:	eb45 0303 	adc.w	r3, r5, r3
 8003c08:	607b      	str	r3, [r7, #4]
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c16:	4629      	mov	r1, r5
 8003c18:	028b      	lsls	r3, r1, #10
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c20:	4621      	mov	r1, r4
 8003c22:	028a      	lsls	r2, r1, #10
 8003c24:	4610      	mov	r0, r2
 8003c26:	4619      	mov	r1, r3
 8003c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	61bb      	str	r3, [r7, #24]
 8003c2e:	61fa      	str	r2, [r7, #28]
 8003c30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c34:	f7fc fb24 	bl	8000280 <__aeabi_uldivmod>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	0c1b      	lsrs	r3, r3, #16
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003c50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c5a:	e002      	b.n	8003c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c5c:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c5e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3750      	adds	r7, #80	; 0x50
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c6e:	bf00      	nop
 8003c70:	40023800 	.word	0x40023800
 8003c74:	00f42400 	.word	0x00f42400
 8003c78:	007a1200 	.word	0x007a1200

08003c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c80:	4b03      	ldr	r3, [pc, #12]	; (8003c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c82:	681b      	ldr	r3, [r3, #0]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	20000000 	.word	0x20000000

08003c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c98:	f7ff fff0 	bl	8003c7c <HAL_RCC_GetHCLKFreq>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	0a9b      	lsrs	r3, r3, #10
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	4903      	ldr	r1, [pc, #12]	; (8003cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003caa:	5ccb      	ldrb	r3, [r1, r3]
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	08005e78 	.word	0x08005e78

08003cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cc0:	f7ff ffdc 	bl	8003c7c <HAL_RCC_GetHCLKFreq>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	0b5b      	lsrs	r3, r3, #13
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	4903      	ldr	r1, [pc, #12]	; (8003ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cd2:	5ccb      	ldrb	r3, [r1, r3]
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	08005e78 	.word	0x08005e78

08003ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e041      	b.n	8003d7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fd f938 	bl	8000f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4619      	mov	r1, r3
 8003d22:	4610      	mov	r0, r2
 8003d24:	f000 f950 	bl	8003fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d001      	beq.n	8003d9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e03c      	b.n	8003e16 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1e      	ldr	r2, [pc, #120]	; (8003e24 <HAL_TIM_Base_Start+0xa0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d018      	beq.n	8003de0 <HAL_TIM_Base_Start+0x5c>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db6:	d013      	beq.n	8003de0 <HAL_TIM_Base_Start+0x5c>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a1a      	ldr	r2, [pc, #104]	; (8003e28 <HAL_TIM_Base_Start+0xa4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00e      	beq.n	8003de0 <HAL_TIM_Base_Start+0x5c>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a19      	ldr	r2, [pc, #100]	; (8003e2c <HAL_TIM_Base_Start+0xa8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d009      	beq.n	8003de0 <HAL_TIM_Base_Start+0x5c>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a17      	ldr	r2, [pc, #92]	; (8003e30 <HAL_TIM_Base_Start+0xac>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d004      	beq.n	8003de0 <HAL_TIM_Base_Start+0x5c>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <HAL_TIM_Base_Start+0xb0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d111      	bne.n	8003e04 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b06      	cmp	r3, #6
 8003df0:	d010      	beq.n	8003e14 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0201 	orr.w	r2, r2, #1
 8003e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e02:	e007      	b.n	8003e14 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40010000 	.word	0x40010000
 8003e28:	40000400 	.word	0x40000400
 8003e2c:	40000800 	.word	0x40000800
 8003e30:	40000c00 	.word	0x40000c00
 8003e34:	40014000 	.word	0x40014000

08003e38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e42:	2300      	movs	r3, #0
 8003e44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_TIM_ConfigClockSource+0x1c>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e0b4      	b.n	8003fbe <HAL_TIM_ConfigClockSource+0x186>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e8c:	d03e      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0xd4>
 8003e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e92:	f200 8087 	bhi.w	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9a:	f000 8086 	beq.w	8003faa <HAL_TIM_ConfigClockSource+0x172>
 8003e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea2:	d87f      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea4:	2b70      	cmp	r3, #112	; 0x70
 8003ea6:	d01a      	beq.n	8003ede <HAL_TIM_ConfigClockSource+0xa6>
 8003ea8:	2b70      	cmp	r3, #112	; 0x70
 8003eaa:	d87b      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003eac:	2b60      	cmp	r3, #96	; 0x60
 8003eae:	d050      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x11a>
 8003eb0:	2b60      	cmp	r3, #96	; 0x60
 8003eb2:	d877      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb4:	2b50      	cmp	r3, #80	; 0x50
 8003eb6:	d03c      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0xfa>
 8003eb8:	2b50      	cmp	r3, #80	; 0x50
 8003eba:	d873      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ebc:	2b40      	cmp	r3, #64	; 0x40
 8003ebe:	d058      	beq.n	8003f72 <HAL_TIM_ConfigClockSource+0x13a>
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d86f      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec4:	2b30      	cmp	r3, #48	; 0x30
 8003ec6:	d064      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x15a>
 8003ec8:	2b30      	cmp	r3, #48	; 0x30
 8003eca:	d86b      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d060      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x15a>
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d867      	bhi.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d05c      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x15a>
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	d05a      	beq.n	8003f92 <HAL_TIM_ConfigClockSource+0x15a>
 8003edc:	e062      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eee:	f000 f971 	bl	80041d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	609a      	str	r2, [r3, #8]
      break;
 8003f0a:	e04f      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f1c:	f000 f95a 	bl	80041d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f2e:	609a      	str	r2, [r3, #8]
      break;
 8003f30:	e03c      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f000 f8ce 	bl	80040e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2150      	movs	r1, #80	; 0x50
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f927 	bl	800419e <TIM_ITRx_SetConfig>
      break;
 8003f50:	e02c      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f000 f8ed 	bl	800413e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2160      	movs	r1, #96	; 0x60
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f917 	bl	800419e <TIM_ITRx_SetConfig>
      break;
 8003f70:	e01c      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f000 f8ae 	bl	80040e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2140      	movs	r1, #64	; 0x40
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 f907 	bl	800419e <TIM_ITRx_SetConfig>
      break;
 8003f90:	e00c      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	f000 f8fe 	bl	800419e <TIM_ITRx_SetConfig>
      break;
 8003fa2:	e003      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa8:	e000      	b.n	8003fac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003faa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a3a      	ldr	r2, [pc, #232]	; (80040c4 <TIM_Base_SetConfig+0xfc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00f      	beq.n	8004000 <TIM_Base_SetConfig+0x38>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe6:	d00b      	beq.n	8004000 <TIM_Base_SetConfig+0x38>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a37      	ldr	r2, [pc, #220]	; (80040c8 <TIM_Base_SetConfig+0x100>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d007      	beq.n	8004000 <TIM_Base_SetConfig+0x38>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a36      	ldr	r2, [pc, #216]	; (80040cc <TIM_Base_SetConfig+0x104>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <TIM_Base_SetConfig+0x38>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a35      	ldr	r2, [pc, #212]	; (80040d0 <TIM_Base_SetConfig+0x108>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d108      	bne.n	8004012 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a2b      	ldr	r2, [pc, #172]	; (80040c4 <TIM_Base_SetConfig+0xfc>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d01b      	beq.n	8004052 <TIM_Base_SetConfig+0x8a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004020:	d017      	beq.n	8004052 <TIM_Base_SetConfig+0x8a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a28      	ldr	r2, [pc, #160]	; (80040c8 <TIM_Base_SetConfig+0x100>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <TIM_Base_SetConfig+0x8a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a27      	ldr	r2, [pc, #156]	; (80040cc <TIM_Base_SetConfig+0x104>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d00f      	beq.n	8004052 <TIM_Base_SetConfig+0x8a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a26      	ldr	r2, [pc, #152]	; (80040d0 <TIM_Base_SetConfig+0x108>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d00b      	beq.n	8004052 <TIM_Base_SetConfig+0x8a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a25      	ldr	r2, [pc, #148]	; (80040d4 <TIM_Base_SetConfig+0x10c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d007      	beq.n	8004052 <TIM_Base_SetConfig+0x8a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a24      	ldr	r2, [pc, #144]	; (80040d8 <TIM_Base_SetConfig+0x110>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d003      	beq.n	8004052 <TIM_Base_SetConfig+0x8a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a23      	ldr	r2, [pc, #140]	; (80040dc <TIM_Base_SetConfig+0x114>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d108      	bne.n	8004064 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a0e      	ldr	r2, [pc, #56]	; (80040c4 <TIM_Base_SetConfig+0xfc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d103      	bne.n	8004098 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d105      	bne.n	80040b6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f023 0201 	bic.w	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	611a      	str	r2, [r3, #16]
  }
}
 80040b6:	bf00      	nop
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40010000 	.word	0x40010000
 80040c8:	40000400 	.word	0x40000400
 80040cc:	40000800 	.word	0x40000800
 80040d0:	40000c00 	.word	0x40000c00
 80040d4:	40014000 	.word	0x40014000
 80040d8:	40014400 	.word	0x40014400
 80040dc:	40014800 	.word	0x40014800

080040e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f023 0201 	bic.w	r2, r3, #1
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800410a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	011b      	lsls	r3, r3, #4
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f023 030a 	bic.w	r3, r3, #10
 800411c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800413e:	b480      	push	{r7}
 8004140:	b087      	sub	sp, #28
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	f023 0210 	bic.w	r2, r3, #16
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004168:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	031b      	lsls	r3, r3, #12
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800417a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800419e:	b480      	push	{r7}
 80041a0:	b085      	sub	sp, #20
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f043 0307 	orr.w	r3, r3, #7
 80041c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	609a      	str	r2, [r3, #8]
}
 80041c8:	bf00      	nop
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	021a      	lsls	r2, r3, #8
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	609a      	str	r2, [r3, #8]
}
 8004208:	bf00      	nop
 800420a:	371c      	adds	r7, #28
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004228:	2302      	movs	r3, #2
 800422a:	e050      	b.n	80042ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1c      	ldr	r2, [pc, #112]	; (80042dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d018      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004278:	d013      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a18      	ldr	r2, [pc, #96]	; (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00e      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d009      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a15      	ldr	r2, [pc, #84]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d004      	beq.n	80042a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a13      	ldr	r2, [pc, #76]	; (80042ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d10c      	bne.n	80042bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40010000 	.word	0x40010000
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40000800 	.word	0x40000800
 80042e8:	40000c00 	.word	0x40000c00
 80042ec:	40014000 	.word	0x40014000

080042f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e042      	b.n	8004388 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fc fe54 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2224      	movs	r2, #36	; 0x24
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004332:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f973 	bl	8004620 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695a      	ldr	r2, [r3, #20]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004358:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004368:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08a      	sub	sp, #40	; 0x28
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	4613      	mov	r3, r2
 800439e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b20      	cmp	r3, #32
 80043ae:	d175      	bne.n	800449c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <HAL_UART_Transmit+0x2c>
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e06e      	b.n	800449e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2221      	movs	r2, #33	; 0x21
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ce:	f7fc ffbb 	bl	8001348 <HAL_GetTick>
 80043d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	88fa      	ldrh	r2, [r7, #6]
 80043d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	88fa      	ldrh	r2, [r7, #6]
 80043de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e8:	d108      	bne.n	80043fc <HAL_UART_Transmit+0x6c>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d104      	bne.n	80043fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	e003      	b.n	8004404 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004400:	2300      	movs	r3, #0
 8004402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004404:	e02e      	b.n	8004464 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2200      	movs	r2, #0
 800440e:	2180      	movs	r1, #128	; 0x80
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f848 	bl	80044a6 <UART_WaitOnFlagUntilTimeout>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e03a      	b.n	800449e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10b      	bne.n	8004446 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800443c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	3302      	adds	r3, #2
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	e007      	b.n	8004456 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	781a      	ldrb	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	3301      	adds	r3, #1
 8004454:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1cb      	bne.n	8004406 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2200      	movs	r2, #0
 8004476:	2140      	movs	r1, #64	; 0x40
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f814 	bl	80044a6 <UART_WaitOnFlagUntilTimeout>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e006      	b.n	800449e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	e000      	b.n	800449e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800449c:	2302      	movs	r3, #2
  }
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b086      	sub	sp, #24
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	603b      	str	r3, [r7, #0]
 80044b2:	4613      	mov	r3, r2
 80044b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b6:	e03b      	b.n	8004530 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044be:	d037      	beq.n	8004530 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c0:	f7fc ff42 	bl	8001348 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	6a3a      	ldr	r2, [r7, #32]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d302      	bcc.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e03a      	b.n	8004550 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d023      	beq.n	8004530 <UART_WaitOnFlagUntilTimeout+0x8a>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b80      	cmp	r3, #128	; 0x80
 80044ec:	d020      	beq.n	8004530 <UART_WaitOnFlagUntilTimeout+0x8a>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b40      	cmp	r3, #64	; 0x40
 80044f2:	d01d      	beq.n	8004530 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0308 	and.w	r3, r3, #8
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d116      	bne.n	8004530 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f81d 	bl	8004558 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2208      	movs	r2, #8
 8004522:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e00f      	b.n	8004550 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	4013      	ands	r3, r2
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	429a      	cmp	r2, r3
 800453e:	bf0c      	ite	eq
 8004540:	2301      	moveq	r3, #1
 8004542:	2300      	movne	r3, #0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	429a      	cmp	r2, r3
 800454c:	d0b4      	beq.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004558:	b480      	push	{r7}
 800455a:	b095      	sub	sp, #84	; 0x54
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800456a:	e853 3f00 	ldrex	r3, [r3]
 800456e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004580:	643a      	str	r2, [r7, #64]	; 0x40
 8004582:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004586:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004588:	e841 2300 	strex	r3, r2, [r1]
 800458c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800458e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e5      	bne.n	8004560 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3314      	adds	r3, #20
 800459a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	e853 3f00 	ldrex	r3, [r3]
 80045a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f023 0301 	bic.w	r3, r3, #1
 80045aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3314      	adds	r3, #20
 80045b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045bc:	e841 2300 	strex	r3, r2, [r1]
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e5      	bne.n	8004594 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d119      	bne.n	8004604 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	330c      	adds	r3, #12
 80045d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	e853 3f00 	ldrex	r3, [r3]
 80045de:	60bb      	str	r3, [r7, #8]
   return(result);
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f023 0310 	bic.w	r3, r3, #16
 80045e6:	647b      	str	r3, [r7, #68]	; 0x44
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	330c      	adds	r3, #12
 80045ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045f0:	61ba      	str	r2, [r7, #24]
 80045f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f4:	6979      	ldr	r1, [r7, #20]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	e841 2300 	strex	r3, r2, [r1]
 80045fc:	613b      	str	r3, [r7, #16]
   return(result);
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e5      	bne.n	80045d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004612:	bf00      	nop
 8004614:	3754      	adds	r7, #84	; 0x54
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
	...

08004620 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004624:	b0c0      	sub	sp, #256	; 0x100
 8004626:	af00      	add	r7, sp, #0
 8004628:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800463c:	68d9      	ldr	r1, [r3, #12]
 800463e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	ea40 0301 	orr.w	r3, r0, r1
 8004648:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800464a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	431a      	orrs	r2, r3
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	431a      	orrs	r2, r3
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	4313      	orrs	r3, r2
 8004668:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800466c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004678:	f021 010c 	bic.w	r1, r1, #12
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004686:	430b      	orrs	r3, r1
 8004688:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800468a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469a:	6999      	ldr	r1, [r3, #24]
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	ea40 0301 	orr.w	r3, r0, r1
 80046a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	4b8f      	ldr	r3, [pc, #572]	; (80048ec <UART_SetConfig+0x2cc>)
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d005      	beq.n	80046c0 <UART_SetConfig+0xa0>
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	4b8d      	ldr	r3, [pc, #564]	; (80048f0 <UART_SetConfig+0x2d0>)
 80046bc:	429a      	cmp	r2, r3
 80046be:	d104      	bne.n	80046ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046c0:	f7ff fafc 	bl	8003cbc <HAL_RCC_GetPCLK2Freq>
 80046c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046c8:	e003      	b.n	80046d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046ca:	f7ff fae3 	bl	8003c94 <HAL_RCC_GetPCLK1Freq>
 80046ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046dc:	f040 810c 	bne.w	80048f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046e4:	2200      	movs	r2, #0
 80046e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046f2:	4622      	mov	r2, r4
 80046f4:	462b      	mov	r3, r5
 80046f6:	1891      	adds	r1, r2, r2
 80046f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80046fa:	415b      	adcs	r3, r3
 80046fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004702:	4621      	mov	r1, r4
 8004704:	eb12 0801 	adds.w	r8, r2, r1
 8004708:	4629      	mov	r1, r5
 800470a:	eb43 0901 	adc.w	r9, r3, r1
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800471a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800471e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004722:	4690      	mov	r8, r2
 8004724:	4699      	mov	r9, r3
 8004726:	4623      	mov	r3, r4
 8004728:	eb18 0303 	adds.w	r3, r8, r3
 800472c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004730:	462b      	mov	r3, r5
 8004732:	eb49 0303 	adc.w	r3, r9, r3
 8004736:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800473a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004746:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800474a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800474e:	460b      	mov	r3, r1
 8004750:	18db      	adds	r3, r3, r3
 8004752:	653b      	str	r3, [r7, #80]	; 0x50
 8004754:	4613      	mov	r3, r2
 8004756:	eb42 0303 	adc.w	r3, r2, r3
 800475a:	657b      	str	r3, [r7, #84]	; 0x54
 800475c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004760:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004764:	f7fb fd8c 	bl	8000280 <__aeabi_uldivmod>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	4b61      	ldr	r3, [pc, #388]	; (80048f4 <UART_SetConfig+0x2d4>)
 800476e:	fba3 2302 	umull	r2, r3, r3, r2
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	011c      	lsls	r4, r3, #4
 8004776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800477a:	2200      	movs	r2, #0
 800477c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004780:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004784:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004788:	4642      	mov	r2, r8
 800478a:	464b      	mov	r3, r9
 800478c:	1891      	adds	r1, r2, r2
 800478e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004790:	415b      	adcs	r3, r3
 8004792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004794:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004798:	4641      	mov	r1, r8
 800479a:	eb12 0a01 	adds.w	sl, r2, r1
 800479e:	4649      	mov	r1, r9
 80047a0:	eb43 0b01 	adc.w	fp, r3, r1
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047b8:	4692      	mov	sl, r2
 80047ba:	469b      	mov	fp, r3
 80047bc:	4643      	mov	r3, r8
 80047be:	eb1a 0303 	adds.w	r3, sl, r3
 80047c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047c6:	464b      	mov	r3, r9
 80047c8:	eb4b 0303 	adc.w	r3, fp, r3
 80047cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047e4:	460b      	mov	r3, r1
 80047e6:	18db      	adds	r3, r3, r3
 80047e8:	643b      	str	r3, [r7, #64]	; 0x40
 80047ea:	4613      	mov	r3, r2
 80047ec:	eb42 0303 	adc.w	r3, r2, r3
 80047f0:	647b      	str	r3, [r7, #68]	; 0x44
 80047f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047fa:	f7fb fd41 	bl	8000280 <__aeabi_uldivmod>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4611      	mov	r1, r2
 8004804:	4b3b      	ldr	r3, [pc, #236]	; (80048f4 <UART_SetConfig+0x2d4>)
 8004806:	fba3 2301 	umull	r2, r3, r3, r1
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	2264      	movs	r2, #100	; 0x64
 800480e:	fb02 f303 	mul.w	r3, r2, r3
 8004812:	1acb      	subs	r3, r1, r3
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800481a:	4b36      	ldr	r3, [pc, #216]	; (80048f4 <UART_SetConfig+0x2d4>)
 800481c:	fba3 2302 	umull	r2, r3, r3, r2
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004828:	441c      	add	r4, r3
 800482a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800482e:	2200      	movs	r2, #0
 8004830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004834:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004838:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800483c:	4642      	mov	r2, r8
 800483e:	464b      	mov	r3, r9
 8004840:	1891      	adds	r1, r2, r2
 8004842:	63b9      	str	r1, [r7, #56]	; 0x38
 8004844:	415b      	adcs	r3, r3
 8004846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004848:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800484c:	4641      	mov	r1, r8
 800484e:	1851      	adds	r1, r2, r1
 8004850:	6339      	str	r1, [r7, #48]	; 0x30
 8004852:	4649      	mov	r1, r9
 8004854:	414b      	adcs	r3, r1
 8004856:	637b      	str	r3, [r7, #52]	; 0x34
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004864:	4659      	mov	r1, fp
 8004866:	00cb      	lsls	r3, r1, #3
 8004868:	4651      	mov	r1, sl
 800486a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800486e:	4651      	mov	r1, sl
 8004870:	00ca      	lsls	r2, r1, #3
 8004872:	4610      	mov	r0, r2
 8004874:	4619      	mov	r1, r3
 8004876:	4603      	mov	r3, r0
 8004878:	4642      	mov	r2, r8
 800487a:	189b      	adds	r3, r3, r2
 800487c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004880:	464b      	mov	r3, r9
 8004882:	460a      	mov	r2, r1
 8004884:	eb42 0303 	adc.w	r3, r2, r3
 8004888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004898:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800489c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048a0:	460b      	mov	r3, r1
 80048a2:	18db      	adds	r3, r3, r3
 80048a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80048a6:	4613      	mov	r3, r2
 80048a8:	eb42 0303 	adc.w	r3, r2, r3
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80048b6:	f7fb fce3 	bl	8000280 <__aeabi_uldivmod>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <UART_SetConfig+0x2d4>)
 80048c0:	fba3 1302 	umull	r1, r3, r3, r2
 80048c4:	095b      	lsrs	r3, r3, #5
 80048c6:	2164      	movs	r1, #100	; 0x64
 80048c8:	fb01 f303 	mul.w	r3, r1, r3
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	3332      	adds	r3, #50	; 0x32
 80048d2:	4a08      	ldr	r2, [pc, #32]	; (80048f4 <UART_SetConfig+0x2d4>)
 80048d4:	fba2 2303 	umull	r2, r3, r2, r3
 80048d8:	095b      	lsrs	r3, r3, #5
 80048da:	f003 0207 	and.w	r2, r3, #7
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4422      	add	r2, r4
 80048e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048e8:	e106      	b.n	8004af8 <UART_SetConfig+0x4d8>
 80048ea:	bf00      	nop
 80048ec:	40011000 	.word	0x40011000
 80048f0:	40011400 	.word	0x40011400
 80048f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048fc:	2200      	movs	r2, #0
 80048fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004902:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004906:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800490a:	4642      	mov	r2, r8
 800490c:	464b      	mov	r3, r9
 800490e:	1891      	adds	r1, r2, r2
 8004910:	6239      	str	r1, [r7, #32]
 8004912:	415b      	adcs	r3, r3
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
 8004916:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800491a:	4641      	mov	r1, r8
 800491c:	1854      	adds	r4, r2, r1
 800491e:	4649      	mov	r1, r9
 8004920:	eb43 0501 	adc.w	r5, r3, r1
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	00eb      	lsls	r3, r5, #3
 800492e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004932:	00e2      	lsls	r2, r4, #3
 8004934:	4614      	mov	r4, r2
 8004936:	461d      	mov	r5, r3
 8004938:	4643      	mov	r3, r8
 800493a:	18e3      	adds	r3, r4, r3
 800493c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004940:	464b      	mov	r3, r9
 8004942:	eb45 0303 	adc.w	r3, r5, r3
 8004946:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800494a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004956:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004966:	4629      	mov	r1, r5
 8004968:	008b      	lsls	r3, r1, #2
 800496a:	4621      	mov	r1, r4
 800496c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004970:	4621      	mov	r1, r4
 8004972:	008a      	lsls	r2, r1, #2
 8004974:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004978:	f7fb fc82 	bl	8000280 <__aeabi_uldivmod>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4b60      	ldr	r3, [pc, #384]	; (8004b04 <UART_SetConfig+0x4e4>)
 8004982:	fba3 2302 	umull	r2, r3, r3, r2
 8004986:	095b      	lsrs	r3, r3, #5
 8004988:	011c      	lsls	r4, r3, #4
 800498a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800498e:	2200      	movs	r2, #0
 8004990:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004994:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004998:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800499c:	4642      	mov	r2, r8
 800499e:	464b      	mov	r3, r9
 80049a0:	1891      	adds	r1, r2, r2
 80049a2:	61b9      	str	r1, [r7, #24]
 80049a4:	415b      	adcs	r3, r3
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ac:	4641      	mov	r1, r8
 80049ae:	1851      	adds	r1, r2, r1
 80049b0:	6139      	str	r1, [r7, #16]
 80049b2:	4649      	mov	r1, r9
 80049b4:	414b      	adcs	r3, r1
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	f04f 0200 	mov.w	r2, #0
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049c4:	4659      	mov	r1, fp
 80049c6:	00cb      	lsls	r3, r1, #3
 80049c8:	4651      	mov	r1, sl
 80049ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ce:	4651      	mov	r1, sl
 80049d0:	00ca      	lsls	r2, r1, #3
 80049d2:	4610      	mov	r0, r2
 80049d4:	4619      	mov	r1, r3
 80049d6:	4603      	mov	r3, r0
 80049d8:	4642      	mov	r2, r8
 80049da:	189b      	adds	r3, r3, r2
 80049dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049e0:	464b      	mov	r3, r9
 80049e2:	460a      	mov	r2, r1
 80049e4:	eb42 0303 	adc.w	r3, r2, r3
 80049e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80049f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a04:	4649      	mov	r1, r9
 8004a06:	008b      	lsls	r3, r1, #2
 8004a08:	4641      	mov	r1, r8
 8004a0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a0e:	4641      	mov	r1, r8
 8004a10:	008a      	lsls	r2, r1, #2
 8004a12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a16:	f7fb fc33 	bl	8000280 <__aeabi_uldivmod>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4611      	mov	r1, r2
 8004a20:	4b38      	ldr	r3, [pc, #224]	; (8004b04 <UART_SetConfig+0x4e4>)
 8004a22:	fba3 2301 	umull	r2, r3, r3, r1
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	2264      	movs	r2, #100	; 0x64
 8004a2a:	fb02 f303 	mul.w	r3, r2, r3
 8004a2e:	1acb      	subs	r3, r1, r3
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	3332      	adds	r3, #50	; 0x32
 8004a34:	4a33      	ldr	r2, [pc, #204]	; (8004b04 <UART_SetConfig+0x4e4>)
 8004a36:	fba2 2303 	umull	r2, r3, r2, r3
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a40:	441c      	add	r4, r3
 8004a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a46:	2200      	movs	r2, #0
 8004a48:	673b      	str	r3, [r7, #112]	; 0x70
 8004a4a:	677a      	str	r2, [r7, #116]	; 0x74
 8004a4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a50:	4642      	mov	r2, r8
 8004a52:	464b      	mov	r3, r9
 8004a54:	1891      	adds	r1, r2, r2
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	415b      	adcs	r3, r3
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a60:	4641      	mov	r1, r8
 8004a62:	1851      	adds	r1, r2, r1
 8004a64:	6039      	str	r1, [r7, #0]
 8004a66:	4649      	mov	r1, r9
 8004a68:	414b      	adcs	r3, r1
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a78:	4659      	mov	r1, fp
 8004a7a:	00cb      	lsls	r3, r1, #3
 8004a7c:	4651      	mov	r1, sl
 8004a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a82:	4651      	mov	r1, sl
 8004a84:	00ca      	lsls	r2, r1, #3
 8004a86:	4610      	mov	r0, r2
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	189b      	adds	r3, r3, r2
 8004a90:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a92:	464b      	mov	r3, r9
 8004a94:	460a      	mov	r2, r1
 8004a96:	eb42 0303 	adc.w	r3, r2, r3
 8004a9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	663b      	str	r3, [r7, #96]	; 0x60
 8004aa6:	667a      	str	r2, [r7, #100]	; 0x64
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ab4:	4649      	mov	r1, r9
 8004ab6:	008b      	lsls	r3, r1, #2
 8004ab8:	4641      	mov	r1, r8
 8004aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004abe:	4641      	mov	r1, r8
 8004ac0:	008a      	lsls	r2, r1, #2
 8004ac2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ac6:	f7fb fbdb 	bl	8000280 <__aeabi_uldivmod>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4b0d      	ldr	r3, [pc, #52]	; (8004b04 <UART_SetConfig+0x4e4>)
 8004ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	2164      	movs	r1, #100	; 0x64
 8004ad8:	fb01 f303 	mul.w	r3, r1, r3
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	3332      	adds	r3, #50	; 0x32
 8004ae2:	4a08      	ldr	r2, [pc, #32]	; (8004b04 <UART_SetConfig+0x4e4>)
 8004ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae8:	095b      	lsrs	r3, r3, #5
 8004aea:	f003 020f 	and.w	r2, r3, #15
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4422      	add	r2, r4
 8004af6:	609a      	str	r2, [r3, #8]
}
 8004af8:	bf00      	nop
 8004afa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004afe:	46bd      	mov	sp, r7
 8004b00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b04:	51eb851f 	.word	0x51eb851f

08004b08 <std>:
 8004b08:	2300      	movs	r3, #0
 8004b0a:	b510      	push	{r4, lr}
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8004b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b16:	6083      	str	r3, [r0, #8]
 8004b18:	8181      	strh	r1, [r0, #12]
 8004b1a:	6643      	str	r3, [r0, #100]	; 0x64
 8004b1c:	81c2      	strh	r2, [r0, #14]
 8004b1e:	6183      	str	r3, [r0, #24]
 8004b20:	4619      	mov	r1, r3
 8004b22:	2208      	movs	r2, #8
 8004b24:	305c      	adds	r0, #92	; 0x5c
 8004b26:	f000 fa17 	bl	8004f58 <memset>
 8004b2a:	4b0d      	ldr	r3, [pc, #52]	; (8004b60 <std+0x58>)
 8004b2c:	6263      	str	r3, [r4, #36]	; 0x24
 8004b2e:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <std+0x5c>)
 8004b30:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b32:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <std+0x60>)
 8004b34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b36:	4b0d      	ldr	r3, [pc, #52]	; (8004b6c <std+0x64>)
 8004b38:	6323      	str	r3, [r4, #48]	; 0x30
 8004b3a:	4b0d      	ldr	r3, [pc, #52]	; (8004b70 <std+0x68>)
 8004b3c:	6224      	str	r4, [r4, #32]
 8004b3e:	429c      	cmp	r4, r3
 8004b40:	d006      	beq.n	8004b50 <std+0x48>
 8004b42:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004b46:	4294      	cmp	r4, r2
 8004b48:	d002      	beq.n	8004b50 <std+0x48>
 8004b4a:	33d0      	adds	r3, #208	; 0xd0
 8004b4c:	429c      	cmp	r4, r3
 8004b4e:	d105      	bne.n	8004b5c <std+0x54>
 8004b50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b58:	f000 ba76 	b.w	8005048 <__retarget_lock_init_recursive>
 8004b5c:	bd10      	pop	{r4, pc}
 8004b5e:	bf00      	nop
 8004b60:	08004da9 	.word	0x08004da9
 8004b64:	08004dcb 	.word	0x08004dcb
 8004b68:	08004e03 	.word	0x08004e03
 8004b6c:	08004e27 	.word	0x08004e27
 8004b70:	20000220 	.word	0x20000220

08004b74 <stdio_exit_handler>:
 8004b74:	4a02      	ldr	r2, [pc, #8]	; (8004b80 <stdio_exit_handler+0xc>)
 8004b76:	4903      	ldr	r1, [pc, #12]	; (8004b84 <stdio_exit_handler+0x10>)
 8004b78:	4803      	ldr	r0, [pc, #12]	; (8004b88 <stdio_exit_handler+0x14>)
 8004b7a:	f000 b869 	b.w	8004c50 <_fwalk_sglue>
 8004b7e:	bf00      	nop
 8004b80:	2000000c 	.word	0x2000000c
 8004b84:	08005ba5 	.word	0x08005ba5
 8004b88:	20000018 	.word	0x20000018

08004b8c <cleanup_stdio>:
 8004b8c:	6841      	ldr	r1, [r0, #4]
 8004b8e:	4b0c      	ldr	r3, [pc, #48]	; (8004bc0 <cleanup_stdio+0x34>)
 8004b90:	4299      	cmp	r1, r3
 8004b92:	b510      	push	{r4, lr}
 8004b94:	4604      	mov	r4, r0
 8004b96:	d001      	beq.n	8004b9c <cleanup_stdio+0x10>
 8004b98:	f001 f804 	bl	8005ba4 <_fflush_r>
 8004b9c:	68a1      	ldr	r1, [r4, #8]
 8004b9e:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <cleanup_stdio+0x38>)
 8004ba0:	4299      	cmp	r1, r3
 8004ba2:	d002      	beq.n	8004baa <cleanup_stdio+0x1e>
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f000 fffd 	bl	8005ba4 <_fflush_r>
 8004baa:	68e1      	ldr	r1, [r4, #12]
 8004bac:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <cleanup_stdio+0x3c>)
 8004bae:	4299      	cmp	r1, r3
 8004bb0:	d004      	beq.n	8004bbc <cleanup_stdio+0x30>
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bb8:	f000 bff4 	b.w	8005ba4 <_fflush_r>
 8004bbc:	bd10      	pop	{r4, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000220 	.word	0x20000220
 8004bc4:	20000288 	.word	0x20000288
 8004bc8:	200002f0 	.word	0x200002f0

08004bcc <global_stdio_init.part.0>:
 8004bcc:	b510      	push	{r4, lr}
 8004bce:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <global_stdio_init.part.0+0x30>)
 8004bd0:	4c0b      	ldr	r4, [pc, #44]	; (8004c00 <global_stdio_init.part.0+0x34>)
 8004bd2:	4a0c      	ldr	r2, [pc, #48]	; (8004c04 <global_stdio_init.part.0+0x38>)
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	2200      	movs	r2, #0
 8004bda:	2104      	movs	r1, #4
 8004bdc:	f7ff ff94 	bl	8004b08 <std>
 8004be0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004be4:	2201      	movs	r2, #1
 8004be6:	2109      	movs	r1, #9
 8004be8:	f7ff ff8e 	bl	8004b08 <std>
 8004bec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bf6:	2112      	movs	r1, #18
 8004bf8:	f7ff bf86 	b.w	8004b08 <std>
 8004bfc:	20000358 	.word	0x20000358
 8004c00:	20000220 	.word	0x20000220
 8004c04:	08004b75 	.word	0x08004b75

08004c08 <__sfp_lock_acquire>:
 8004c08:	4801      	ldr	r0, [pc, #4]	; (8004c10 <__sfp_lock_acquire+0x8>)
 8004c0a:	f000 ba1e 	b.w	800504a <__retarget_lock_acquire_recursive>
 8004c0e:	bf00      	nop
 8004c10:	20000361 	.word	0x20000361

08004c14 <__sfp_lock_release>:
 8004c14:	4801      	ldr	r0, [pc, #4]	; (8004c1c <__sfp_lock_release+0x8>)
 8004c16:	f000 ba19 	b.w	800504c <__retarget_lock_release_recursive>
 8004c1a:	bf00      	nop
 8004c1c:	20000361 	.word	0x20000361

08004c20 <__sinit>:
 8004c20:	b510      	push	{r4, lr}
 8004c22:	4604      	mov	r4, r0
 8004c24:	f7ff fff0 	bl	8004c08 <__sfp_lock_acquire>
 8004c28:	6a23      	ldr	r3, [r4, #32]
 8004c2a:	b11b      	cbz	r3, 8004c34 <__sinit+0x14>
 8004c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c30:	f7ff bff0 	b.w	8004c14 <__sfp_lock_release>
 8004c34:	4b04      	ldr	r3, [pc, #16]	; (8004c48 <__sinit+0x28>)
 8004c36:	6223      	str	r3, [r4, #32]
 8004c38:	4b04      	ldr	r3, [pc, #16]	; (8004c4c <__sinit+0x2c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1f5      	bne.n	8004c2c <__sinit+0xc>
 8004c40:	f7ff ffc4 	bl	8004bcc <global_stdio_init.part.0>
 8004c44:	e7f2      	b.n	8004c2c <__sinit+0xc>
 8004c46:	bf00      	nop
 8004c48:	08004b8d 	.word	0x08004b8d
 8004c4c:	20000358 	.word	0x20000358

08004c50 <_fwalk_sglue>:
 8004c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c54:	4607      	mov	r7, r0
 8004c56:	4688      	mov	r8, r1
 8004c58:	4614      	mov	r4, r2
 8004c5a:	2600      	movs	r6, #0
 8004c5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c60:	f1b9 0901 	subs.w	r9, r9, #1
 8004c64:	d505      	bpl.n	8004c72 <_fwalk_sglue+0x22>
 8004c66:	6824      	ldr	r4, [r4, #0]
 8004c68:	2c00      	cmp	r4, #0
 8004c6a:	d1f7      	bne.n	8004c5c <_fwalk_sglue+0xc>
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c72:	89ab      	ldrh	r3, [r5, #12]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d907      	bls.n	8004c88 <_fwalk_sglue+0x38>
 8004c78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	d003      	beq.n	8004c88 <_fwalk_sglue+0x38>
 8004c80:	4629      	mov	r1, r5
 8004c82:	4638      	mov	r0, r7
 8004c84:	47c0      	blx	r8
 8004c86:	4306      	orrs	r6, r0
 8004c88:	3568      	adds	r5, #104	; 0x68
 8004c8a:	e7e9      	b.n	8004c60 <_fwalk_sglue+0x10>

08004c8c <iprintf>:
 8004c8c:	b40f      	push	{r0, r1, r2, r3}
 8004c8e:	b507      	push	{r0, r1, r2, lr}
 8004c90:	4906      	ldr	r1, [pc, #24]	; (8004cac <iprintf+0x20>)
 8004c92:	ab04      	add	r3, sp, #16
 8004c94:	6808      	ldr	r0, [r1, #0]
 8004c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c9a:	6881      	ldr	r1, [r0, #8]
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	f000 fc51 	bl	8005544 <_vfiprintf_r>
 8004ca2:	b003      	add	sp, #12
 8004ca4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ca8:	b004      	add	sp, #16
 8004caa:	4770      	bx	lr
 8004cac:	20000064 	.word	0x20000064

08004cb0 <_puts_r>:
 8004cb0:	6a03      	ldr	r3, [r0, #32]
 8004cb2:	b570      	push	{r4, r5, r6, lr}
 8004cb4:	6884      	ldr	r4, [r0, #8]
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	460e      	mov	r6, r1
 8004cba:	b90b      	cbnz	r3, 8004cc0 <_puts_r+0x10>
 8004cbc:	f7ff ffb0 	bl	8004c20 <__sinit>
 8004cc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cc2:	07db      	lsls	r3, r3, #31
 8004cc4:	d405      	bmi.n	8004cd2 <_puts_r+0x22>
 8004cc6:	89a3      	ldrh	r3, [r4, #12]
 8004cc8:	0598      	lsls	r0, r3, #22
 8004cca:	d402      	bmi.n	8004cd2 <_puts_r+0x22>
 8004ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cce:	f000 f9bc 	bl	800504a <__retarget_lock_acquire_recursive>
 8004cd2:	89a3      	ldrh	r3, [r4, #12]
 8004cd4:	0719      	lsls	r1, r3, #28
 8004cd6:	d513      	bpl.n	8004d00 <_puts_r+0x50>
 8004cd8:	6923      	ldr	r3, [r4, #16]
 8004cda:	b18b      	cbz	r3, 8004d00 <_puts_r+0x50>
 8004cdc:	3e01      	subs	r6, #1
 8004cde:	68a3      	ldr	r3, [r4, #8]
 8004ce0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	60a3      	str	r3, [r4, #8]
 8004ce8:	b9e9      	cbnz	r1, 8004d26 <_puts_r+0x76>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	da2e      	bge.n	8004d4c <_puts_r+0x9c>
 8004cee:	4622      	mov	r2, r4
 8004cf0:	210a      	movs	r1, #10
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	f000 f89b 	bl	8004e2e <__swbuf_r>
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	d007      	beq.n	8004d0c <_puts_r+0x5c>
 8004cfc:	250a      	movs	r5, #10
 8004cfe:	e007      	b.n	8004d10 <_puts_r+0x60>
 8004d00:	4621      	mov	r1, r4
 8004d02:	4628      	mov	r0, r5
 8004d04:	f000 f8d0 	bl	8004ea8 <__swsetup_r>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d0e7      	beq.n	8004cdc <_puts_r+0x2c>
 8004d0c:	f04f 35ff 	mov.w	r5, #4294967295
 8004d10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d12:	07da      	lsls	r2, r3, #31
 8004d14:	d405      	bmi.n	8004d22 <_puts_r+0x72>
 8004d16:	89a3      	ldrh	r3, [r4, #12]
 8004d18:	059b      	lsls	r3, r3, #22
 8004d1a:	d402      	bmi.n	8004d22 <_puts_r+0x72>
 8004d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d1e:	f000 f995 	bl	800504c <__retarget_lock_release_recursive>
 8004d22:	4628      	mov	r0, r5
 8004d24:	bd70      	pop	{r4, r5, r6, pc}
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	da04      	bge.n	8004d34 <_puts_r+0x84>
 8004d2a:	69a2      	ldr	r2, [r4, #24]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	dc06      	bgt.n	8004d3e <_puts_r+0x8e>
 8004d30:	290a      	cmp	r1, #10
 8004d32:	d004      	beq.n	8004d3e <_puts_r+0x8e>
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	6022      	str	r2, [r4, #0]
 8004d3a:	7019      	strb	r1, [r3, #0]
 8004d3c:	e7cf      	b.n	8004cde <_puts_r+0x2e>
 8004d3e:	4622      	mov	r2, r4
 8004d40:	4628      	mov	r0, r5
 8004d42:	f000 f874 	bl	8004e2e <__swbuf_r>
 8004d46:	3001      	adds	r0, #1
 8004d48:	d1c9      	bne.n	8004cde <_puts_r+0x2e>
 8004d4a:	e7df      	b.n	8004d0c <_puts_r+0x5c>
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	250a      	movs	r5, #10
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	6022      	str	r2, [r4, #0]
 8004d54:	701d      	strb	r5, [r3, #0]
 8004d56:	e7db      	b.n	8004d10 <_puts_r+0x60>

08004d58 <puts>:
 8004d58:	4b02      	ldr	r3, [pc, #8]	; (8004d64 <puts+0xc>)
 8004d5a:	4601      	mov	r1, r0
 8004d5c:	6818      	ldr	r0, [r3, #0]
 8004d5e:	f7ff bfa7 	b.w	8004cb0 <_puts_r>
 8004d62:	bf00      	nop
 8004d64:	20000064 	.word	0x20000064

08004d68 <siprintf>:
 8004d68:	b40e      	push	{r1, r2, r3}
 8004d6a:	b500      	push	{lr}
 8004d6c:	b09c      	sub	sp, #112	; 0x70
 8004d6e:	ab1d      	add	r3, sp, #116	; 0x74
 8004d70:	9002      	str	r0, [sp, #8]
 8004d72:	9006      	str	r0, [sp, #24]
 8004d74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d78:	4809      	ldr	r0, [pc, #36]	; (8004da0 <siprintf+0x38>)
 8004d7a:	9107      	str	r1, [sp, #28]
 8004d7c:	9104      	str	r1, [sp, #16]
 8004d7e:	4909      	ldr	r1, [pc, #36]	; (8004da4 <siprintf+0x3c>)
 8004d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d84:	9105      	str	r1, [sp, #20]
 8004d86:	6800      	ldr	r0, [r0, #0]
 8004d88:	9301      	str	r3, [sp, #4]
 8004d8a:	a902      	add	r1, sp, #8
 8004d8c:	f000 fab2 	bl	80052f4 <_svfiprintf_r>
 8004d90:	9b02      	ldr	r3, [sp, #8]
 8004d92:	2200      	movs	r2, #0
 8004d94:	701a      	strb	r2, [r3, #0]
 8004d96:	b01c      	add	sp, #112	; 0x70
 8004d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d9c:	b003      	add	sp, #12
 8004d9e:	4770      	bx	lr
 8004da0:	20000064 	.word	0x20000064
 8004da4:	ffff0208 	.word	0xffff0208

08004da8 <__sread>:
 8004da8:	b510      	push	{r4, lr}
 8004daa:	460c      	mov	r4, r1
 8004dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db0:	f000 f8fc 	bl	8004fac <_read_r>
 8004db4:	2800      	cmp	r0, #0
 8004db6:	bfab      	itete	ge
 8004db8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004dba:	89a3      	ldrhlt	r3, [r4, #12]
 8004dbc:	181b      	addge	r3, r3, r0
 8004dbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dc2:	bfac      	ite	ge
 8004dc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004dc6:	81a3      	strhlt	r3, [r4, #12]
 8004dc8:	bd10      	pop	{r4, pc}

08004dca <__swrite>:
 8004dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dce:	461f      	mov	r7, r3
 8004dd0:	898b      	ldrh	r3, [r1, #12]
 8004dd2:	05db      	lsls	r3, r3, #23
 8004dd4:	4605      	mov	r5, r0
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	4616      	mov	r6, r2
 8004dda:	d505      	bpl.n	8004de8 <__swrite+0x1e>
 8004ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de0:	2302      	movs	r3, #2
 8004de2:	2200      	movs	r2, #0
 8004de4:	f000 f8d0 	bl	8004f88 <_lseek_r>
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004df2:	81a3      	strh	r3, [r4, #12]
 8004df4:	4632      	mov	r2, r6
 8004df6:	463b      	mov	r3, r7
 8004df8:	4628      	mov	r0, r5
 8004dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dfe:	f000 b8e7 	b.w	8004fd0 <_write_r>

08004e02 <__sseek>:
 8004e02:	b510      	push	{r4, lr}
 8004e04:	460c      	mov	r4, r1
 8004e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0a:	f000 f8bd 	bl	8004f88 <_lseek_r>
 8004e0e:	1c43      	adds	r3, r0, #1
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	bf15      	itete	ne
 8004e14:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e1e:	81a3      	strheq	r3, [r4, #12]
 8004e20:	bf18      	it	ne
 8004e22:	81a3      	strhne	r3, [r4, #12]
 8004e24:	bd10      	pop	{r4, pc}

08004e26 <__sclose>:
 8004e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e2a:	f000 b89d 	b.w	8004f68 <_close_r>

08004e2e <__swbuf_r>:
 8004e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e30:	460e      	mov	r6, r1
 8004e32:	4614      	mov	r4, r2
 8004e34:	4605      	mov	r5, r0
 8004e36:	b118      	cbz	r0, 8004e40 <__swbuf_r+0x12>
 8004e38:	6a03      	ldr	r3, [r0, #32]
 8004e3a:	b90b      	cbnz	r3, 8004e40 <__swbuf_r+0x12>
 8004e3c:	f7ff fef0 	bl	8004c20 <__sinit>
 8004e40:	69a3      	ldr	r3, [r4, #24]
 8004e42:	60a3      	str	r3, [r4, #8]
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	071a      	lsls	r2, r3, #28
 8004e48:	d525      	bpl.n	8004e96 <__swbuf_r+0x68>
 8004e4a:	6923      	ldr	r3, [r4, #16]
 8004e4c:	b31b      	cbz	r3, 8004e96 <__swbuf_r+0x68>
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	6922      	ldr	r2, [r4, #16]
 8004e52:	1a98      	subs	r0, r3, r2
 8004e54:	6963      	ldr	r3, [r4, #20]
 8004e56:	b2f6      	uxtb	r6, r6
 8004e58:	4283      	cmp	r3, r0
 8004e5a:	4637      	mov	r7, r6
 8004e5c:	dc04      	bgt.n	8004e68 <__swbuf_r+0x3a>
 8004e5e:	4621      	mov	r1, r4
 8004e60:	4628      	mov	r0, r5
 8004e62:	f000 fe9f 	bl	8005ba4 <_fflush_r>
 8004e66:	b9e0      	cbnz	r0, 8004ea2 <__swbuf_r+0x74>
 8004e68:	68a3      	ldr	r3, [r4, #8]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	60a3      	str	r3, [r4, #8]
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	6022      	str	r2, [r4, #0]
 8004e74:	701e      	strb	r6, [r3, #0]
 8004e76:	6962      	ldr	r2, [r4, #20]
 8004e78:	1c43      	adds	r3, r0, #1
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d004      	beq.n	8004e88 <__swbuf_r+0x5a>
 8004e7e:	89a3      	ldrh	r3, [r4, #12]
 8004e80:	07db      	lsls	r3, r3, #31
 8004e82:	d506      	bpl.n	8004e92 <__swbuf_r+0x64>
 8004e84:	2e0a      	cmp	r6, #10
 8004e86:	d104      	bne.n	8004e92 <__swbuf_r+0x64>
 8004e88:	4621      	mov	r1, r4
 8004e8a:	4628      	mov	r0, r5
 8004e8c:	f000 fe8a 	bl	8005ba4 <_fflush_r>
 8004e90:	b938      	cbnz	r0, 8004ea2 <__swbuf_r+0x74>
 8004e92:	4638      	mov	r0, r7
 8004e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e96:	4621      	mov	r1, r4
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f000 f805 	bl	8004ea8 <__swsetup_r>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d0d5      	beq.n	8004e4e <__swbuf_r+0x20>
 8004ea2:	f04f 37ff 	mov.w	r7, #4294967295
 8004ea6:	e7f4      	b.n	8004e92 <__swbuf_r+0x64>

08004ea8 <__swsetup_r>:
 8004ea8:	b538      	push	{r3, r4, r5, lr}
 8004eaa:	4b2a      	ldr	r3, [pc, #168]	; (8004f54 <__swsetup_r+0xac>)
 8004eac:	4605      	mov	r5, r0
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	b118      	cbz	r0, 8004ebc <__swsetup_r+0x14>
 8004eb4:	6a03      	ldr	r3, [r0, #32]
 8004eb6:	b90b      	cbnz	r3, 8004ebc <__swsetup_r+0x14>
 8004eb8:	f7ff feb2 	bl	8004c20 <__sinit>
 8004ebc:	89a3      	ldrh	r3, [r4, #12]
 8004ebe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ec2:	0718      	lsls	r0, r3, #28
 8004ec4:	d422      	bmi.n	8004f0c <__swsetup_r+0x64>
 8004ec6:	06d9      	lsls	r1, r3, #27
 8004ec8:	d407      	bmi.n	8004eda <__swsetup_r+0x32>
 8004eca:	2309      	movs	r3, #9
 8004ecc:	602b      	str	r3, [r5, #0]
 8004ece:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ed2:	81a3      	strh	r3, [r4, #12]
 8004ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed8:	e034      	b.n	8004f44 <__swsetup_r+0x9c>
 8004eda:	0758      	lsls	r0, r3, #29
 8004edc:	d512      	bpl.n	8004f04 <__swsetup_r+0x5c>
 8004ede:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ee0:	b141      	cbz	r1, 8004ef4 <__swsetup_r+0x4c>
 8004ee2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ee6:	4299      	cmp	r1, r3
 8004ee8:	d002      	beq.n	8004ef0 <__swsetup_r+0x48>
 8004eea:	4628      	mov	r0, r5
 8004eec:	f000 f8b0 	bl	8005050 <_free_r>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	6363      	str	r3, [r4, #52]	; 0x34
 8004ef4:	89a3      	ldrh	r3, [r4, #12]
 8004ef6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004efa:	81a3      	strh	r3, [r4, #12]
 8004efc:	2300      	movs	r3, #0
 8004efe:	6063      	str	r3, [r4, #4]
 8004f00:	6923      	ldr	r3, [r4, #16]
 8004f02:	6023      	str	r3, [r4, #0]
 8004f04:	89a3      	ldrh	r3, [r4, #12]
 8004f06:	f043 0308 	orr.w	r3, r3, #8
 8004f0a:	81a3      	strh	r3, [r4, #12]
 8004f0c:	6923      	ldr	r3, [r4, #16]
 8004f0e:	b94b      	cbnz	r3, 8004f24 <__swsetup_r+0x7c>
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f1a:	d003      	beq.n	8004f24 <__swsetup_r+0x7c>
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f000 fe8e 	bl	8005c40 <__smakebuf_r>
 8004f24:	89a0      	ldrh	r0, [r4, #12]
 8004f26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f2a:	f010 0301 	ands.w	r3, r0, #1
 8004f2e:	d00a      	beq.n	8004f46 <__swsetup_r+0x9e>
 8004f30:	2300      	movs	r3, #0
 8004f32:	60a3      	str	r3, [r4, #8]
 8004f34:	6963      	ldr	r3, [r4, #20]
 8004f36:	425b      	negs	r3, r3
 8004f38:	61a3      	str	r3, [r4, #24]
 8004f3a:	6923      	ldr	r3, [r4, #16]
 8004f3c:	b943      	cbnz	r3, 8004f50 <__swsetup_r+0xa8>
 8004f3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f42:	d1c4      	bne.n	8004ece <__swsetup_r+0x26>
 8004f44:	bd38      	pop	{r3, r4, r5, pc}
 8004f46:	0781      	lsls	r1, r0, #30
 8004f48:	bf58      	it	pl
 8004f4a:	6963      	ldrpl	r3, [r4, #20]
 8004f4c:	60a3      	str	r3, [r4, #8]
 8004f4e:	e7f4      	b.n	8004f3a <__swsetup_r+0x92>
 8004f50:	2000      	movs	r0, #0
 8004f52:	e7f7      	b.n	8004f44 <__swsetup_r+0x9c>
 8004f54:	20000064 	.word	0x20000064

08004f58 <memset>:
 8004f58:	4402      	add	r2, r0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d100      	bne.n	8004f62 <memset+0xa>
 8004f60:	4770      	bx	lr
 8004f62:	f803 1b01 	strb.w	r1, [r3], #1
 8004f66:	e7f9      	b.n	8004f5c <memset+0x4>

08004f68 <_close_r>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	4d06      	ldr	r5, [pc, #24]	; (8004f84 <_close_r+0x1c>)
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	4604      	mov	r4, r0
 8004f70:	4608      	mov	r0, r1
 8004f72:	602b      	str	r3, [r5, #0]
 8004f74:	f7fc f8db 	bl	800112e <_close>
 8004f78:	1c43      	adds	r3, r0, #1
 8004f7a:	d102      	bne.n	8004f82 <_close_r+0x1a>
 8004f7c:	682b      	ldr	r3, [r5, #0]
 8004f7e:	b103      	cbz	r3, 8004f82 <_close_r+0x1a>
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	bd38      	pop	{r3, r4, r5, pc}
 8004f84:	2000035c 	.word	0x2000035c

08004f88 <_lseek_r>:
 8004f88:	b538      	push	{r3, r4, r5, lr}
 8004f8a:	4d07      	ldr	r5, [pc, #28]	; (8004fa8 <_lseek_r+0x20>)
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	4608      	mov	r0, r1
 8004f90:	4611      	mov	r1, r2
 8004f92:	2200      	movs	r2, #0
 8004f94:	602a      	str	r2, [r5, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	f7fc f8f0 	bl	800117c <_lseek>
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	d102      	bne.n	8004fa6 <_lseek_r+0x1e>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	b103      	cbz	r3, 8004fa6 <_lseek_r+0x1e>
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	bd38      	pop	{r3, r4, r5, pc}
 8004fa8:	2000035c 	.word	0x2000035c

08004fac <_read_r>:
 8004fac:	b538      	push	{r3, r4, r5, lr}
 8004fae:	4d07      	ldr	r5, [pc, #28]	; (8004fcc <_read_r+0x20>)
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	4608      	mov	r0, r1
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	602a      	str	r2, [r5, #0]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f7fc f87e 	bl	80010bc <_read>
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d102      	bne.n	8004fca <_read_r+0x1e>
 8004fc4:	682b      	ldr	r3, [r5, #0]
 8004fc6:	b103      	cbz	r3, 8004fca <_read_r+0x1e>
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
 8004fcc:	2000035c 	.word	0x2000035c

08004fd0 <_write_r>:
 8004fd0:	b538      	push	{r3, r4, r5, lr}
 8004fd2:	4d07      	ldr	r5, [pc, #28]	; (8004ff0 <_write_r+0x20>)
 8004fd4:	4604      	mov	r4, r0
 8004fd6:	4608      	mov	r0, r1
 8004fd8:	4611      	mov	r1, r2
 8004fda:	2200      	movs	r2, #0
 8004fdc:	602a      	str	r2, [r5, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f7fc f889 	bl	80010f6 <_write>
 8004fe4:	1c43      	adds	r3, r0, #1
 8004fe6:	d102      	bne.n	8004fee <_write_r+0x1e>
 8004fe8:	682b      	ldr	r3, [r5, #0]
 8004fea:	b103      	cbz	r3, 8004fee <_write_r+0x1e>
 8004fec:	6023      	str	r3, [r4, #0]
 8004fee:	bd38      	pop	{r3, r4, r5, pc}
 8004ff0:	2000035c 	.word	0x2000035c

08004ff4 <__errno>:
 8004ff4:	4b01      	ldr	r3, [pc, #4]	; (8004ffc <__errno+0x8>)
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	20000064 	.word	0x20000064

08005000 <__libc_init_array>:
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	4d0d      	ldr	r5, [pc, #52]	; (8005038 <__libc_init_array+0x38>)
 8005004:	4c0d      	ldr	r4, [pc, #52]	; (800503c <__libc_init_array+0x3c>)
 8005006:	1b64      	subs	r4, r4, r5
 8005008:	10a4      	asrs	r4, r4, #2
 800500a:	2600      	movs	r6, #0
 800500c:	42a6      	cmp	r6, r4
 800500e:	d109      	bne.n	8005024 <__libc_init_array+0x24>
 8005010:	4d0b      	ldr	r5, [pc, #44]	; (8005040 <__libc_init_array+0x40>)
 8005012:	4c0c      	ldr	r4, [pc, #48]	; (8005044 <__libc_init_array+0x44>)
 8005014:	f000 fee2 	bl	8005ddc <_init>
 8005018:	1b64      	subs	r4, r4, r5
 800501a:	10a4      	asrs	r4, r4, #2
 800501c:	2600      	movs	r6, #0
 800501e:	42a6      	cmp	r6, r4
 8005020:	d105      	bne.n	800502e <__libc_init_array+0x2e>
 8005022:	bd70      	pop	{r4, r5, r6, pc}
 8005024:	f855 3b04 	ldr.w	r3, [r5], #4
 8005028:	4798      	blx	r3
 800502a:	3601      	adds	r6, #1
 800502c:	e7ee      	b.n	800500c <__libc_init_array+0xc>
 800502e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005032:	4798      	blx	r3
 8005034:	3601      	adds	r6, #1
 8005036:	e7f2      	b.n	800501e <__libc_init_array+0x1e>
 8005038:	08005ec4 	.word	0x08005ec4
 800503c:	08005ec4 	.word	0x08005ec4
 8005040:	08005ec4 	.word	0x08005ec4
 8005044:	08005ec8 	.word	0x08005ec8

08005048 <__retarget_lock_init_recursive>:
 8005048:	4770      	bx	lr

0800504a <__retarget_lock_acquire_recursive>:
 800504a:	4770      	bx	lr

0800504c <__retarget_lock_release_recursive>:
 800504c:	4770      	bx	lr
	...

08005050 <_free_r>:
 8005050:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005052:	2900      	cmp	r1, #0
 8005054:	d044      	beq.n	80050e0 <_free_r+0x90>
 8005056:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800505a:	9001      	str	r0, [sp, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f1a1 0404 	sub.w	r4, r1, #4
 8005062:	bfb8      	it	lt
 8005064:	18e4      	addlt	r4, r4, r3
 8005066:	f000 f8df 	bl	8005228 <__malloc_lock>
 800506a:	4a1e      	ldr	r2, [pc, #120]	; (80050e4 <_free_r+0x94>)
 800506c:	9801      	ldr	r0, [sp, #4]
 800506e:	6813      	ldr	r3, [r2, #0]
 8005070:	b933      	cbnz	r3, 8005080 <_free_r+0x30>
 8005072:	6063      	str	r3, [r4, #4]
 8005074:	6014      	str	r4, [r2, #0]
 8005076:	b003      	add	sp, #12
 8005078:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800507c:	f000 b8da 	b.w	8005234 <__malloc_unlock>
 8005080:	42a3      	cmp	r3, r4
 8005082:	d908      	bls.n	8005096 <_free_r+0x46>
 8005084:	6825      	ldr	r5, [r4, #0]
 8005086:	1961      	adds	r1, r4, r5
 8005088:	428b      	cmp	r3, r1
 800508a:	bf01      	itttt	eq
 800508c:	6819      	ldreq	r1, [r3, #0]
 800508e:	685b      	ldreq	r3, [r3, #4]
 8005090:	1949      	addeq	r1, r1, r5
 8005092:	6021      	streq	r1, [r4, #0]
 8005094:	e7ed      	b.n	8005072 <_free_r+0x22>
 8005096:	461a      	mov	r2, r3
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	b10b      	cbz	r3, 80050a0 <_free_r+0x50>
 800509c:	42a3      	cmp	r3, r4
 800509e:	d9fa      	bls.n	8005096 <_free_r+0x46>
 80050a0:	6811      	ldr	r1, [r2, #0]
 80050a2:	1855      	adds	r5, r2, r1
 80050a4:	42a5      	cmp	r5, r4
 80050a6:	d10b      	bne.n	80050c0 <_free_r+0x70>
 80050a8:	6824      	ldr	r4, [r4, #0]
 80050aa:	4421      	add	r1, r4
 80050ac:	1854      	adds	r4, r2, r1
 80050ae:	42a3      	cmp	r3, r4
 80050b0:	6011      	str	r1, [r2, #0]
 80050b2:	d1e0      	bne.n	8005076 <_free_r+0x26>
 80050b4:	681c      	ldr	r4, [r3, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	6053      	str	r3, [r2, #4]
 80050ba:	440c      	add	r4, r1
 80050bc:	6014      	str	r4, [r2, #0]
 80050be:	e7da      	b.n	8005076 <_free_r+0x26>
 80050c0:	d902      	bls.n	80050c8 <_free_r+0x78>
 80050c2:	230c      	movs	r3, #12
 80050c4:	6003      	str	r3, [r0, #0]
 80050c6:	e7d6      	b.n	8005076 <_free_r+0x26>
 80050c8:	6825      	ldr	r5, [r4, #0]
 80050ca:	1961      	adds	r1, r4, r5
 80050cc:	428b      	cmp	r3, r1
 80050ce:	bf04      	itt	eq
 80050d0:	6819      	ldreq	r1, [r3, #0]
 80050d2:	685b      	ldreq	r3, [r3, #4]
 80050d4:	6063      	str	r3, [r4, #4]
 80050d6:	bf04      	itt	eq
 80050d8:	1949      	addeq	r1, r1, r5
 80050da:	6021      	streq	r1, [r4, #0]
 80050dc:	6054      	str	r4, [r2, #4]
 80050de:	e7ca      	b.n	8005076 <_free_r+0x26>
 80050e0:	b003      	add	sp, #12
 80050e2:	bd30      	pop	{r4, r5, pc}
 80050e4:	20000364 	.word	0x20000364

080050e8 <sbrk_aligned>:
 80050e8:	b570      	push	{r4, r5, r6, lr}
 80050ea:	4e0e      	ldr	r6, [pc, #56]	; (8005124 <sbrk_aligned+0x3c>)
 80050ec:	460c      	mov	r4, r1
 80050ee:	6831      	ldr	r1, [r6, #0]
 80050f0:	4605      	mov	r5, r0
 80050f2:	b911      	cbnz	r1, 80050fa <sbrk_aligned+0x12>
 80050f4:	f000 fe1c 	bl	8005d30 <_sbrk_r>
 80050f8:	6030      	str	r0, [r6, #0]
 80050fa:	4621      	mov	r1, r4
 80050fc:	4628      	mov	r0, r5
 80050fe:	f000 fe17 	bl	8005d30 <_sbrk_r>
 8005102:	1c43      	adds	r3, r0, #1
 8005104:	d00a      	beq.n	800511c <sbrk_aligned+0x34>
 8005106:	1cc4      	adds	r4, r0, #3
 8005108:	f024 0403 	bic.w	r4, r4, #3
 800510c:	42a0      	cmp	r0, r4
 800510e:	d007      	beq.n	8005120 <sbrk_aligned+0x38>
 8005110:	1a21      	subs	r1, r4, r0
 8005112:	4628      	mov	r0, r5
 8005114:	f000 fe0c 	bl	8005d30 <_sbrk_r>
 8005118:	3001      	adds	r0, #1
 800511a:	d101      	bne.n	8005120 <sbrk_aligned+0x38>
 800511c:	f04f 34ff 	mov.w	r4, #4294967295
 8005120:	4620      	mov	r0, r4
 8005122:	bd70      	pop	{r4, r5, r6, pc}
 8005124:	20000368 	.word	0x20000368

08005128 <_malloc_r>:
 8005128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800512c:	1ccd      	adds	r5, r1, #3
 800512e:	f025 0503 	bic.w	r5, r5, #3
 8005132:	3508      	adds	r5, #8
 8005134:	2d0c      	cmp	r5, #12
 8005136:	bf38      	it	cc
 8005138:	250c      	movcc	r5, #12
 800513a:	2d00      	cmp	r5, #0
 800513c:	4607      	mov	r7, r0
 800513e:	db01      	blt.n	8005144 <_malloc_r+0x1c>
 8005140:	42a9      	cmp	r1, r5
 8005142:	d905      	bls.n	8005150 <_malloc_r+0x28>
 8005144:	230c      	movs	r3, #12
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	2600      	movs	r6, #0
 800514a:	4630      	mov	r0, r6
 800514c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005150:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005224 <_malloc_r+0xfc>
 8005154:	f000 f868 	bl	8005228 <__malloc_lock>
 8005158:	f8d8 3000 	ldr.w	r3, [r8]
 800515c:	461c      	mov	r4, r3
 800515e:	bb5c      	cbnz	r4, 80051b8 <_malloc_r+0x90>
 8005160:	4629      	mov	r1, r5
 8005162:	4638      	mov	r0, r7
 8005164:	f7ff ffc0 	bl	80050e8 <sbrk_aligned>
 8005168:	1c43      	adds	r3, r0, #1
 800516a:	4604      	mov	r4, r0
 800516c:	d155      	bne.n	800521a <_malloc_r+0xf2>
 800516e:	f8d8 4000 	ldr.w	r4, [r8]
 8005172:	4626      	mov	r6, r4
 8005174:	2e00      	cmp	r6, #0
 8005176:	d145      	bne.n	8005204 <_malloc_r+0xdc>
 8005178:	2c00      	cmp	r4, #0
 800517a:	d048      	beq.n	800520e <_malloc_r+0xe6>
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	4631      	mov	r1, r6
 8005180:	4638      	mov	r0, r7
 8005182:	eb04 0903 	add.w	r9, r4, r3
 8005186:	f000 fdd3 	bl	8005d30 <_sbrk_r>
 800518a:	4581      	cmp	r9, r0
 800518c:	d13f      	bne.n	800520e <_malloc_r+0xe6>
 800518e:	6821      	ldr	r1, [r4, #0]
 8005190:	1a6d      	subs	r5, r5, r1
 8005192:	4629      	mov	r1, r5
 8005194:	4638      	mov	r0, r7
 8005196:	f7ff ffa7 	bl	80050e8 <sbrk_aligned>
 800519a:	3001      	adds	r0, #1
 800519c:	d037      	beq.n	800520e <_malloc_r+0xe6>
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	442b      	add	r3, r5
 80051a2:	6023      	str	r3, [r4, #0]
 80051a4:	f8d8 3000 	ldr.w	r3, [r8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d038      	beq.n	800521e <_malloc_r+0xf6>
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	42a2      	cmp	r2, r4
 80051b0:	d12b      	bne.n	800520a <_malloc_r+0xe2>
 80051b2:	2200      	movs	r2, #0
 80051b4:	605a      	str	r2, [r3, #4]
 80051b6:	e00f      	b.n	80051d8 <_malloc_r+0xb0>
 80051b8:	6822      	ldr	r2, [r4, #0]
 80051ba:	1b52      	subs	r2, r2, r5
 80051bc:	d41f      	bmi.n	80051fe <_malloc_r+0xd6>
 80051be:	2a0b      	cmp	r2, #11
 80051c0:	d917      	bls.n	80051f2 <_malloc_r+0xca>
 80051c2:	1961      	adds	r1, r4, r5
 80051c4:	42a3      	cmp	r3, r4
 80051c6:	6025      	str	r5, [r4, #0]
 80051c8:	bf18      	it	ne
 80051ca:	6059      	strne	r1, [r3, #4]
 80051cc:	6863      	ldr	r3, [r4, #4]
 80051ce:	bf08      	it	eq
 80051d0:	f8c8 1000 	streq.w	r1, [r8]
 80051d4:	5162      	str	r2, [r4, r5]
 80051d6:	604b      	str	r3, [r1, #4]
 80051d8:	4638      	mov	r0, r7
 80051da:	f104 060b 	add.w	r6, r4, #11
 80051de:	f000 f829 	bl	8005234 <__malloc_unlock>
 80051e2:	f026 0607 	bic.w	r6, r6, #7
 80051e6:	1d23      	adds	r3, r4, #4
 80051e8:	1af2      	subs	r2, r6, r3
 80051ea:	d0ae      	beq.n	800514a <_malloc_r+0x22>
 80051ec:	1b9b      	subs	r3, r3, r6
 80051ee:	50a3      	str	r3, [r4, r2]
 80051f0:	e7ab      	b.n	800514a <_malloc_r+0x22>
 80051f2:	42a3      	cmp	r3, r4
 80051f4:	6862      	ldr	r2, [r4, #4]
 80051f6:	d1dd      	bne.n	80051b4 <_malloc_r+0x8c>
 80051f8:	f8c8 2000 	str.w	r2, [r8]
 80051fc:	e7ec      	b.n	80051d8 <_malloc_r+0xb0>
 80051fe:	4623      	mov	r3, r4
 8005200:	6864      	ldr	r4, [r4, #4]
 8005202:	e7ac      	b.n	800515e <_malloc_r+0x36>
 8005204:	4634      	mov	r4, r6
 8005206:	6876      	ldr	r6, [r6, #4]
 8005208:	e7b4      	b.n	8005174 <_malloc_r+0x4c>
 800520a:	4613      	mov	r3, r2
 800520c:	e7cc      	b.n	80051a8 <_malloc_r+0x80>
 800520e:	230c      	movs	r3, #12
 8005210:	603b      	str	r3, [r7, #0]
 8005212:	4638      	mov	r0, r7
 8005214:	f000 f80e 	bl	8005234 <__malloc_unlock>
 8005218:	e797      	b.n	800514a <_malloc_r+0x22>
 800521a:	6025      	str	r5, [r4, #0]
 800521c:	e7dc      	b.n	80051d8 <_malloc_r+0xb0>
 800521e:	605b      	str	r3, [r3, #4]
 8005220:	deff      	udf	#255	; 0xff
 8005222:	bf00      	nop
 8005224:	20000364 	.word	0x20000364

08005228 <__malloc_lock>:
 8005228:	4801      	ldr	r0, [pc, #4]	; (8005230 <__malloc_lock+0x8>)
 800522a:	f7ff bf0e 	b.w	800504a <__retarget_lock_acquire_recursive>
 800522e:	bf00      	nop
 8005230:	20000360 	.word	0x20000360

08005234 <__malloc_unlock>:
 8005234:	4801      	ldr	r0, [pc, #4]	; (800523c <__malloc_unlock+0x8>)
 8005236:	f7ff bf09 	b.w	800504c <__retarget_lock_release_recursive>
 800523a:	bf00      	nop
 800523c:	20000360 	.word	0x20000360

08005240 <__ssputs_r>:
 8005240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005244:	688e      	ldr	r6, [r1, #8]
 8005246:	461f      	mov	r7, r3
 8005248:	42be      	cmp	r6, r7
 800524a:	680b      	ldr	r3, [r1, #0]
 800524c:	4682      	mov	sl, r0
 800524e:	460c      	mov	r4, r1
 8005250:	4690      	mov	r8, r2
 8005252:	d82c      	bhi.n	80052ae <__ssputs_r+0x6e>
 8005254:	898a      	ldrh	r2, [r1, #12]
 8005256:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800525a:	d026      	beq.n	80052aa <__ssputs_r+0x6a>
 800525c:	6965      	ldr	r5, [r4, #20]
 800525e:	6909      	ldr	r1, [r1, #16]
 8005260:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005264:	eba3 0901 	sub.w	r9, r3, r1
 8005268:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800526c:	1c7b      	adds	r3, r7, #1
 800526e:	444b      	add	r3, r9
 8005270:	106d      	asrs	r5, r5, #1
 8005272:	429d      	cmp	r5, r3
 8005274:	bf38      	it	cc
 8005276:	461d      	movcc	r5, r3
 8005278:	0553      	lsls	r3, r2, #21
 800527a:	d527      	bpl.n	80052cc <__ssputs_r+0x8c>
 800527c:	4629      	mov	r1, r5
 800527e:	f7ff ff53 	bl	8005128 <_malloc_r>
 8005282:	4606      	mov	r6, r0
 8005284:	b360      	cbz	r0, 80052e0 <__ssputs_r+0xa0>
 8005286:	6921      	ldr	r1, [r4, #16]
 8005288:	464a      	mov	r2, r9
 800528a:	f000 fd61 	bl	8005d50 <memcpy>
 800528e:	89a3      	ldrh	r3, [r4, #12]
 8005290:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005298:	81a3      	strh	r3, [r4, #12]
 800529a:	6126      	str	r6, [r4, #16]
 800529c:	6165      	str	r5, [r4, #20]
 800529e:	444e      	add	r6, r9
 80052a0:	eba5 0509 	sub.w	r5, r5, r9
 80052a4:	6026      	str	r6, [r4, #0]
 80052a6:	60a5      	str	r5, [r4, #8]
 80052a8:	463e      	mov	r6, r7
 80052aa:	42be      	cmp	r6, r7
 80052ac:	d900      	bls.n	80052b0 <__ssputs_r+0x70>
 80052ae:	463e      	mov	r6, r7
 80052b0:	6820      	ldr	r0, [r4, #0]
 80052b2:	4632      	mov	r2, r6
 80052b4:	4641      	mov	r1, r8
 80052b6:	f000 fcff 	bl	8005cb8 <memmove>
 80052ba:	68a3      	ldr	r3, [r4, #8]
 80052bc:	1b9b      	subs	r3, r3, r6
 80052be:	60a3      	str	r3, [r4, #8]
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	4433      	add	r3, r6
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	2000      	movs	r0, #0
 80052c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052cc:	462a      	mov	r2, r5
 80052ce:	f000 fd4d 	bl	8005d6c <_realloc_r>
 80052d2:	4606      	mov	r6, r0
 80052d4:	2800      	cmp	r0, #0
 80052d6:	d1e0      	bne.n	800529a <__ssputs_r+0x5a>
 80052d8:	6921      	ldr	r1, [r4, #16]
 80052da:	4650      	mov	r0, sl
 80052dc:	f7ff feb8 	bl	8005050 <_free_r>
 80052e0:	230c      	movs	r3, #12
 80052e2:	f8ca 3000 	str.w	r3, [sl]
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ec:	81a3      	strh	r3, [r4, #12]
 80052ee:	f04f 30ff 	mov.w	r0, #4294967295
 80052f2:	e7e9      	b.n	80052c8 <__ssputs_r+0x88>

080052f4 <_svfiprintf_r>:
 80052f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f8:	4698      	mov	r8, r3
 80052fa:	898b      	ldrh	r3, [r1, #12]
 80052fc:	061b      	lsls	r3, r3, #24
 80052fe:	b09d      	sub	sp, #116	; 0x74
 8005300:	4607      	mov	r7, r0
 8005302:	460d      	mov	r5, r1
 8005304:	4614      	mov	r4, r2
 8005306:	d50e      	bpl.n	8005326 <_svfiprintf_r+0x32>
 8005308:	690b      	ldr	r3, [r1, #16]
 800530a:	b963      	cbnz	r3, 8005326 <_svfiprintf_r+0x32>
 800530c:	2140      	movs	r1, #64	; 0x40
 800530e:	f7ff ff0b 	bl	8005128 <_malloc_r>
 8005312:	6028      	str	r0, [r5, #0]
 8005314:	6128      	str	r0, [r5, #16]
 8005316:	b920      	cbnz	r0, 8005322 <_svfiprintf_r+0x2e>
 8005318:	230c      	movs	r3, #12
 800531a:	603b      	str	r3, [r7, #0]
 800531c:	f04f 30ff 	mov.w	r0, #4294967295
 8005320:	e0d0      	b.n	80054c4 <_svfiprintf_r+0x1d0>
 8005322:	2340      	movs	r3, #64	; 0x40
 8005324:	616b      	str	r3, [r5, #20]
 8005326:	2300      	movs	r3, #0
 8005328:	9309      	str	r3, [sp, #36]	; 0x24
 800532a:	2320      	movs	r3, #32
 800532c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005330:	f8cd 800c 	str.w	r8, [sp, #12]
 8005334:	2330      	movs	r3, #48	; 0x30
 8005336:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80054dc <_svfiprintf_r+0x1e8>
 800533a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800533e:	f04f 0901 	mov.w	r9, #1
 8005342:	4623      	mov	r3, r4
 8005344:	469a      	mov	sl, r3
 8005346:	f813 2b01 	ldrb.w	r2, [r3], #1
 800534a:	b10a      	cbz	r2, 8005350 <_svfiprintf_r+0x5c>
 800534c:	2a25      	cmp	r2, #37	; 0x25
 800534e:	d1f9      	bne.n	8005344 <_svfiprintf_r+0x50>
 8005350:	ebba 0b04 	subs.w	fp, sl, r4
 8005354:	d00b      	beq.n	800536e <_svfiprintf_r+0x7a>
 8005356:	465b      	mov	r3, fp
 8005358:	4622      	mov	r2, r4
 800535a:	4629      	mov	r1, r5
 800535c:	4638      	mov	r0, r7
 800535e:	f7ff ff6f 	bl	8005240 <__ssputs_r>
 8005362:	3001      	adds	r0, #1
 8005364:	f000 80a9 	beq.w	80054ba <_svfiprintf_r+0x1c6>
 8005368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800536a:	445a      	add	r2, fp
 800536c:	9209      	str	r2, [sp, #36]	; 0x24
 800536e:	f89a 3000 	ldrb.w	r3, [sl]
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 80a1 	beq.w	80054ba <_svfiprintf_r+0x1c6>
 8005378:	2300      	movs	r3, #0
 800537a:	f04f 32ff 	mov.w	r2, #4294967295
 800537e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005382:	f10a 0a01 	add.w	sl, sl, #1
 8005386:	9304      	str	r3, [sp, #16]
 8005388:	9307      	str	r3, [sp, #28]
 800538a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800538e:	931a      	str	r3, [sp, #104]	; 0x68
 8005390:	4654      	mov	r4, sl
 8005392:	2205      	movs	r2, #5
 8005394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005398:	4850      	ldr	r0, [pc, #320]	; (80054dc <_svfiprintf_r+0x1e8>)
 800539a:	f7fa ff21 	bl	80001e0 <memchr>
 800539e:	9a04      	ldr	r2, [sp, #16]
 80053a0:	b9d8      	cbnz	r0, 80053da <_svfiprintf_r+0xe6>
 80053a2:	06d0      	lsls	r0, r2, #27
 80053a4:	bf44      	itt	mi
 80053a6:	2320      	movmi	r3, #32
 80053a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053ac:	0711      	lsls	r1, r2, #28
 80053ae:	bf44      	itt	mi
 80053b0:	232b      	movmi	r3, #43	; 0x2b
 80053b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053b6:	f89a 3000 	ldrb.w	r3, [sl]
 80053ba:	2b2a      	cmp	r3, #42	; 0x2a
 80053bc:	d015      	beq.n	80053ea <_svfiprintf_r+0xf6>
 80053be:	9a07      	ldr	r2, [sp, #28]
 80053c0:	4654      	mov	r4, sl
 80053c2:	2000      	movs	r0, #0
 80053c4:	f04f 0c0a 	mov.w	ip, #10
 80053c8:	4621      	mov	r1, r4
 80053ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053ce:	3b30      	subs	r3, #48	; 0x30
 80053d0:	2b09      	cmp	r3, #9
 80053d2:	d94d      	bls.n	8005470 <_svfiprintf_r+0x17c>
 80053d4:	b1b0      	cbz	r0, 8005404 <_svfiprintf_r+0x110>
 80053d6:	9207      	str	r2, [sp, #28]
 80053d8:	e014      	b.n	8005404 <_svfiprintf_r+0x110>
 80053da:	eba0 0308 	sub.w	r3, r0, r8
 80053de:	fa09 f303 	lsl.w	r3, r9, r3
 80053e2:	4313      	orrs	r3, r2
 80053e4:	9304      	str	r3, [sp, #16]
 80053e6:	46a2      	mov	sl, r4
 80053e8:	e7d2      	b.n	8005390 <_svfiprintf_r+0x9c>
 80053ea:	9b03      	ldr	r3, [sp, #12]
 80053ec:	1d19      	adds	r1, r3, #4
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	9103      	str	r1, [sp, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	bfbb      	ittet	lt
 80053f6:	425b      	neglt	r3, r3
 80053f8:	f042 0202 	orrlt.w	r2, r2, #2
 80053fc:	9307      	strge	r3, [sp, #28]
 80053fe:	9307      	strlt	r3, [sp, #28]
 8005400:	bfb8      	it	lt
 8005402:	9204      	strlt	r2, [sp, #16]
 8005404:	7823      	ldrb	r3, [r4, #0]
 8005406:	2b2e      	cmp	r3, #46	; 0x2e
 8005408:	d10c      	bne.n	8005424 <_svfiprintf_r+0x130>
 800540a:	7863      	ldrb	r3, [r4, #1]
 800540c:	2b2a      	cmp	r3, #42	; 0x2a
 800540e:	d134      	bne.n	800547a <_svfiprintf_r+0x186>
 8005410:	9b03      	ldr	r3, [sp, #12]
 8005412:	1d1a      	adds	r2, r3, #4
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	9203      	str	r2, [sp, #12]
 8005418:	2b00      	cmp	r3, #0
 800541a:	bfb8      	it	lt
 800541c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005420:	3402      	adds	r4, #2
 8005422:	9305      	str	r3, [sp, #20]
 8005424:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80054ec <_svfiprintf_r+0x1f8>
 8005428:	7821      	ldrb	r1, [r4, #0]
 800542a:	2203      	movs	r2, #3
 800542c:	4650      	mov	r0, sl
 800542e:	f7fa fed7 	bl	80001e0 <memchr>
 8005432:	b138      	cbz	r0, 8005444 <_svfiprintf_r+0x150>
 8005434:	9b04      	ldr	r3, [sp, #16]
 8005436:	eba0 000a 	sub.w	r0, r0, sl
 800543a:	2240      	movs	r2, #64	; 0x40
 800543c:	4082      	lsls	r2, r0
 800543e:	4313      	orrs	r3, r2
 8005440:	3401      	adds	r4, #1
 8005442:	9304      	str	r3, [sp, #16]
 8005444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005448:	4825      	ldr	r0, [pc, #148]	; (80054e0 <_svfiprintf_r+0x1ec>)
 800544a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800544e:	2206      	movs	r2, #6
 8005450:	f7fa fec6 	bl	80001e0 <memchr>
 8005454:	2800      	cmp	r0, #0
 8005456:	d038      	beq.n	80054ca <_svfiprintf_r+0x1d6>
 8005458:	4b22      	ldr	r3, [pc, #136]	; (80054e4 <_svfiprintf_r+0x1f0>)
 800545a:	bb1b      	cbnz	r3, 80054a4 <_svfiprintf_r+0x1b0>
 800545c:	9b03      	ldr	r3, [sp, #12]
 800545e:	3307      	adds	r3, #7
 8005460:	f023 0307 	bic.w	r3, r3, #7
 8005464:	3308      	adds	r3, #8
 8005466:	9303      	str	r3, [sp, #12]
 8005468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800546a:	4433      	add	r3, r6
 800546c:	9309      	str	r3, [sp, #36]	; 0x24
 800546e:	e768      	b.n	8005342 <_svfiprintf_r+0x4e>
 8005470:	fb0c 3202 	mla	r2, ip, r2, r3
 8005474:	460c      	mov	r4, r1
 8005476:	2001      	movs	r0, #1
 8005478:	e7a6      	b.n	80053c8 <_svfiprintf_r+0xd4>
 800547a:	2300      	movs	r3, #0
 800547c:	3401      	adds	r4, #1
 800547e:	9305      	str	r3, [sp, #20]
 8005480:	4619      	mov	r1, r3
 8005482:	f04f 0c0a 	mov.w	ip, #10
 8005486:	4620      	mov	r0, r4
 8005488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800548c:	3a30      	subs	r2, #48	; 0x30
 800548e:	2a09      	cmp	r2, #9
 8005490:	d903      	bls.n	800549a <_svfiprintf_r+0x1a6>
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0c6      	beq.n	8005424 <_svfiprintf_r+0x130>
 8005496:	9105      	str	r1, [sp, #20]
 8005498:	e7c4      	b.n	8005424 <_svfiprintf_r+0x130>
 800549a:	fb0c 2101 	mla	r1, ip, r1, r2
 800549e:	4604      	mov	r4, r0
 80054a0:	2301      	movs	r3, #1
 80054a2:	e7f0      	b.n	8005486 <_svfiprintf_r+0x192>
 80054a4:	ab03      	add	r3, sp, #12
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	462a      	mov	r2, r5
 80054aa:	4b0f      	ldr	r3, [pc, #60]	; (80054e8 <_svfiprintf_r+0x1f4>)
 80054ac:	a904      	add	r1, sp, #16
 80054ae:	4638      	mov	r0, r7
 80054b0:	f3af 8000 	nop.w
 80054b4:	1c42      	adds	r2, r0, #1
 80054b6:	4606      	mov	r6, r0
 80054b8:	d1d6      	bne.n	8005468 <_svfiprintf_r+0x174>
 80054ba:	89ab      	ldrh	r3, [r5, #12]
 80054bc:	065b      	lsls	r3, r3, #25
 80054be:	f53f af2d 	bmi.w	800531c <_svfiprintf_r+0x28>
 80054c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054c4:	b01d      	add	sp, #116	; 0x74
 80054c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ca:	ab03      	add	r3, sp, #12
 80054cc:	9300      	str	r3, [sp, #0]
 80054ce:	462a      	mov	r2, r5
 80054d0:	4b05      	ldr	r3, [pc, #20]	; (80054e8 <_svfiprintf_r+0x1f4>)
 80054d2:	a904      	add	r1, sp, #16
 80054d4:	4638      	mov	r0, r7
 80054d6:	f000 f9bd 	bl	8005854 <_printf_i>
 80054da:	e7eb      	b.n	80054b4 <_svfiprintf_r+0x1c0>
 80054dc:	08005e88 	.word	0x08005e88
 80054e0:	08005e92 	.word	0x08005e92
 80054e4:	00000000 	.word	0x00000000
 80054e8:	08005241 	.word	0x08005241
 80054ec:	08005e8e 	.word	0x08005e8e

080054f0 <__sfputc_r>:
 80054f0:	6893      	ldr	r3, [r2, #8]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	b410      	push	{r4}
 80054f8:	6093      	str	r3, [r2, #8]
 80054fa:	da08      	bge.n	800550e <__sfputc_r+0x1e>
 80054fc:	6994      	ldr	r4, [r2, #24]
 80054fe:	42a3      	cmp	r3, r4
 8005500:	db01      	blt.n	8005506 <__sfputc_r+0x16>
 8005502:	290a      	cmp	r1, #10
 8005504:	d103      	bne.n	800550e <__sfputc_r+0x1e>
 8005506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800550a:	f7ff bc90 	b.w	8004e2e <__swbuf_r>
 800550e:	6813      	ldr	r3, [r2, #0]
 8005510:	1c58      	adds	r0, r3, #1
 8005512:	6010      	str	r0, [r2, #0]
 8005514:	7019      	strb	r1, [r3, #0]
 8005516:	4608      	mov	r0, r1
 8005518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800551c:	4770      	bx	lr

0800551e <__sfputs_r>:
 800551e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005520:	4606      	mov	r6, r0
 8005522:	460f      	mov	r7, r1
 8005524:	4614      	mov	r4, r2
 8005526:	18d5      	adds	r5, r2, r3
 8005528:	42ac      	cmp	r4, r5
 800552a:	d101      	bne.n	8005530 <__sfputs_r+0x12>
 800552c:	2000      	movs	r0, #0
 800552e:	e007      	b.n	8005540 <__sfputs_r+0x22>
 8005530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005534:	463a      	mov	r2, r7
 8005536:	4630      	mov	r0, r6
 8005538:	f7ff ffda 	bl	80054f0 <__sfputc_r>
 800553c:	1c43      	adds	r3, r0, #1
 800553e:	d1f3      	bne.n	8005528 <__sfputs_r+0xa>
 8005540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005544 <_vfiprintf_r>:
 8005544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005548:	460d      	mov	r5, r1
 800554a:	b09d      	sub	sp, #116	; 0x74
 800554c:	4614      	mov	r4, r2
 800554e:	4698      	mov	r8, r3
 8005550:	4606      	mov	r6, r0
 8005552:	b118      	cbz	r0, 800555c <_vfiprintf_r+0x18>
 8005554:	6a03      	ldr	r3, [r0, #32]
 8005556:	b90b      	cbnz	r3, 800555c <_vfiprintf_r+0x18>
 8005558:	f7ff fb62 	bl	8004c20 <__sinit>
 800555c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800555e:	07d9      	lsls	r1, r3, #31
 8005560:	d405      	bmi.n	800556e <_vfiprintf_r+0x2a>
 8005562:	89ab      	ldrh	r3, [r5, #12]
 8005564:	059a      	lsls	r2, r3, #22
 8005566:	d402      	bmi.n	800556e <_vfiprintf_r+0x2a>
 8005568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800556a:	f7ff fd6e 	bl	800504a <__retarget_lock_acquire_recursive>
 800556e:	89ab      	ldrh	r3, [r5, #12]
 8005570:	071b      	lsls	r3, r3, #28
 8005572:	d501      	bpl.n	8005578 <_vfiprintf_r+0x34>
 8005574:	692b      	ldr	r3, [r5, #16]
 8005576:	b99b      	cbnz	r3, 80055a0 <_vfiprintf_r+0x5c>
 8005578:	4629      	mov	r1, r5
 800557a:	4630      	mov	r0, r6
 800557c:	f7ff fc94 	bl	8004ea8 <__swsetup_r>
 8005580:	b170      	cbz	r0, 80055a0 <_vfiprintf_r+0x5c>
 8005582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005584:	07dc      	lsls	r4, r3, #31
 8005586:	d504      	bpl.n	8005592 <_vfiprintf_r+0x4e>
 8005588:	f04f 30ff 	mov.w	r0, #4294967295
 800558c:	b01d      	add	sp, #116	; 0x74
 800558e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005592:	89ab      	ldrh	r3, [r5, #12]
 8005594:	0598      	lsls	r0, r3, #22
 8005596:	d4f7      	bmi.n	8005588 <_vfiprintf_r+0x44>
 8005598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800559a:	f7ff fd57 	bl	800504c <__retarget_lock_release_recursive>
 800559e:	e7f3      	b.n	8005588 <_vfiprintf_r+0x44>
 80055a0:	2300      	movs	r3, #0
 80055a2:	9309      	str	r3, [sp, #36]	; 0x24
 80055a4:	2320      	movs	r3, #32
 80055a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80055ae:	2330      	movs	r3, #48	; 0x30
 80055b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005764 <_vfiprintf_r+0x220>
 80055b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055b8:	f04f 0901 	mov.w	r9, #1
 80055bc:	4623      	mov	r3, r4
 80055be:	469a      	mov	sl, r3
 80055c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055c4:	b10a      	cbz	r2, 80055ca <_vfiprintf_r+0x86>
 80055c6:	2a25      	cmp	r2, #37	; 0x25
 80055c8:	d1f9      	bne.n	80055be <_vfiprintf_r+0x7a>
 80055ca:	ebba 0b04 	subs.w	fp, sl, r4
 80055ce:	d00b      	beq.n	80055e8 <_vfiprintf_r+0xa4>
 80055d0:	465b      	mov	r3, fp
 80055d2:	4622      	mov	r2, r4
 80055d4:	4629      	mov	r1, r5
 80055d6:	4630      	mov	r0, r6
 80055d8:	f7ff ffa1 	bl	800551e <__sfputs_r>
 80055dc:	3001      	adds	r0, #1
 80055de:	f000 80a9 	beq.w	8005734 <_vfiprintf_r+0x1f0>
 80055e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055e4:	445a      	add	r2, fp
 80055e6:	9209      	str	r2, [sp, #36]	; 0x24
 80055e8:	f89a 3000 	ldrb.w	r3, [sl]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 80a1 	beq.w	8005734 <_vfiprintf_r+0x1f0>
 80055f2:	2300      	movs	r3, #0
 80055f4:	f04f 32ff 	mov.w	r2, #4294967295
 80055f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055fc:	f10a 0a01 	add.w	sl, sl, #1
 8005600:	9304      	str	r3, [sp, #16]
 8005602:	9307      	str	r3, [sp, #28]
 8005604:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005608:	931a      	str	r3, [sp, #104]	; 0x68
 800560a:	4654      	mov	r4, sl
 800560c:	2205      	movs	r2, #5
 800560e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005612:	4854      	ldr	r0, [pc, #336]	; (8005764 <_vfiprintf_r+0x220>)
 8005614:	f7fa fde4 	bl	80001e0 <memchr>
 8005618:	9a04      	ldr	r2, [sp, #16]
 800561a:	b9d8      	cbnz	r0, 8005654 <_vfiprintf_r+0x110>
 800561c:	06d1      	lsls	r1, r2, #27
 800561e:	bf44      	itt	mi
 8005620:	2320      	movmi	r3, #32
 8005622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005626:	0713      	lsls	r3, r2, #28
 8005628:	bf44      	itt	mi
 800562a:	232b      	movmi	r3, #43	; 0x2b
 800562c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005630:	f89a 3000 	ldrb.w	r3, [sl]
 8005634:	2b2a      	cmp	r3, #42	; 0x2a
 8005636:	d015      	beq.n	8005664 <_vfiprintf_r+0x120>
 8005638:	9a07      	ldr	r2, [sp, #28]
 800563a:	4654      	mov	r4, sl
 800563c:	2000      	movs	r0, #0
 800563e:	f04f 0c0a 	mov.w	ip, #10
 8005642:	4621      	mov	r1, r4
 8005644:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005648:	3b30      	subs	r3, #48	; 0x30
 800564a:	2b09      	cmp	r3, #9
 800564c:	d94d      	bls.n	80056ea <_vfiprintf_r+0x1a6>
 800564e:	b1b0      	cbz	r0, 800567e <_vfiprintf_r+0x13a>
 8005650:	9207      	str	r2, [sp, #28]
 8005652:	e014      	b.n	800567e <_vfiprintf_r+0x13a>
 8005654:	eba0 0308 	sub.w	r3, r0, r8
 8005658:	fa09 f303 	lsl.w	r3, r9, r3
 800565c:	4313      	orrs	r3, r2
 800565e:	9304      	str	r3, [sp, #16]
 8005660:	46a2      	mov	sl, r4
 8005662:	e7d2      	b.n	800560a <_vfiprintf_r+0xc6>
 8005664:	9b03      	ldr	r3, [sp, #12]
 8005666:	1d19      	adds	r1, r3, #4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	9103      	str	r1, [sp, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	bfbb      	ittet	lt
 8005670:	425b      	neglt	r3, r3
 8005672:	f042 0202 	orrlt.w	r2, r2, #2
 8005676:	9307      	strge	r3, [sp, #28]
 8005678:	9307      	strlt	r3, [sp, #28]
 800567a:	bfb8      	it	lt
 800567c:	9204      	strlt	r2, [sp, #16]
 800567e:	7823      	ldrb	r3, [r4, #0]
 8005680:	2b2e      	cmp	r3, #46	; 0x2e
 8005682:	d10c      	bne.n	800569e <_vfiprintf_r+0x15a>
 8005684:	7863      	ldrb	r3, [r4, #1]
 8005686:	2b2a      	cmp	r3, #42	; 0x2a
 8005688:	d134      	bne.n	80056f4 <_vfiprintf_r+0x1b0>
 800568a:	9b03      	ldr	r3, [sp, #12]
 800568c:	1d1a      	adds	r2, r3, #4
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	9203      	str	r2, [sp, #12]
 8005692:	2b00      	cmp	r3, #0
 8005694:	bfb8      	it	lt
 8005696:	f04f 33ff 	movlt.w	r3, #4294967295
 800569a:	3402      	adds	r4, #2
 800569c:	9305      	str	r3, [sp, #20]
 800569e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005774 <_vfiprintf_r+0x230>
 80056a2:	7821      	ldrb	r1, [r4, #0]
 80056a4:	2203      	movs	r2, #3
 80056a6:	4650      	mov	r0, sl
 80056a8:	f7fa fd9a 	bl	80001e0 <memchr>
 80056ac:	b138      	cbz	r0, 80056be <_vfiprintf_r+0x17a>
 80056ae:	9b04      	ldr	r3, [sp, #16]
 80056b0:	eba0 000a 	sub.w	r0, r0, sl
 80056b4:	2240      	movs	r2, #64	; 0x40
 80056b6:	4082      	lsls	r2, r0
 80056b8:	4313      	orrs	r3, r2
 80056ba:	3401      	adds	r4, #1
 80056bc:	9304      	str	r3, [sp, #16]
 80056be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056c2:	4829      	ldr	r0, [pc, #164]	; (8005768 <_vfiprintf_r+0x224>)
 80056c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056c8:	2206      	movs	r2, #6
 80056ca:	f7fa fd89 	bl	80001e0 <memchr>
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d03f      	beq.n	8005752 <_vfiprintf_r+0x20e>
 80056d2:	4b26      	ldr	r3, [pc, #152]	; (800576c <_vfiprintf_r+0x228>)
 80056d4:	bb1b      	cbnz	r3, 800571e <_vfiprintf_r+0x1da>
 80056d6:	9b03      	ldr	r3, [sp, #12]
 80056d8:	3307      	adds	r3, #7
 80056da:	f023 0307 	bic.w	r3, r3, #7
 80056de:	3308      	adds	r3, #8
 80056e0:	9303      	str	r3, [sp, #12]
 80056e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e4:	443b      	add	r3, r7
 80056e6:	9309      	str	r3, [sp, #36]	; 0x24
 80056e8:	e768      	b.n	80055bc <_vfiprintf_r+0x78>
 80056ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80056ee:	460c      	mov	r4, r1
 80056f0:	2001      	movs	r0, #1
 80056f2:	e7a6      	b.n	8005642 <_vfiprintf_r+0xfe>
 80056f4:	2300      	movs	r3, #0
 80056f6:	3401      	adds	r4, #1
 80056f8:	9305      	str	r3, [sp, #20]
 80056fa:	4619      	mov	r1, r3
 80056fc:	f04f 0c0a 	mov.w	ip, #10
 8005700:	4620      	mov	r0, r4
 8005702:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005706:	3a30      	subs	r2, #48	; 0x30
 8005708:	2a09      	cmp	r2, #9
 800570a:	d903      	bls.n	8005714 <_vfiprintf_r+0x1d0>
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0c6      	beq.n	800569e <_vfiprintf_r+0x15a>
 8005710:	9105      	str	r1, [sp, #20]
 8005712:	e7c4      	b.n	800569e <_vfiprintf_r+0x15a>
 8005714:	fb0c 2101 	mla	r1, ip, r1, r2
 8005718:	4604      	mov	r4, r0
 800571a:	2301      	movs	r3, #1
 800571c:	e7f0      	b.n	8005700 <_vfiprintf_r+0x1bc>
 800571e:	ab03      	add	r3, sp, #12
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	462a      	mov	r2, r5
 8005724:	4b12      	ldr	r3, [pc, #72]	; (8005770 <_vfiprintf_r+0x22c>)
 8005726:	a904      	add	r1, sp, #16
 8005728:	4630      	mov	r0, r6
 800572a:	f3af 8000 	nop.w
 800572e:	4607      	mov	r7, r0
 8005730:	1c78      	adds	r0, r7, #1
 8005732:	d1d6      	bne.n	80056e2 <_vfiprintf_r+0x19e>
 8005734:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005736:	07d9      	lsls	r1, r3, #31
 8005738:	d405      	bmi.n	8005746 <_vfiprintf_r+0x202>
 800573a:	89ab      	ldrh	r3, [r5, #12]
 800573c:	059a      	lsls	r2, r3, #22
 800573e:	d402      	bmi.n	8005746 <_vfiprintf_r+0x202>
 8005740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005742:	f7ff fc83 	bl	800504c <__retarget_lock_release_recursive>
 8005746:	89ab      	ldrh	r3, [r5, #12]
 8005748:	065b      	lsls	r3, r3, #25
 800574a:	f53f af1d 	bmi.w	8005588 <_vfiprintf_r+0x44>
 800574e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005750:	e71c      	b.n	800558c <_vfiprintf_r+0x48>
 8005752:	ab03      	add	r3, sp, #12
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	462a      	mov	r2, r5
 8005758:	4b05      	ldr	r3, [pc, #20]	; (8005770 <_vfiprintf_r+0x22c>)
 800575a:	a904      	add	r1, sp, #16
 800575c:	4630      	mov	r0, r6
 800575e:	f000 f879 	bl	8005854 <_printf_i>
 8005762:	e7e4      	b.n	800572e <_vfiprintf_r+0x1ea>
 8005764:	08005e88 	.word	0x08005e88
 8005768:	08005e92 	.word	0x08005e92
 800576c:	00000000 	.word	0x00000000
 8005770:	0800551f 	.word	0x0800551f
 8005774:	08005e8e 	.word	0x08005e8e

08005778 <_printf_common>:
 8005778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800577c:	4616      	mov	r6, r2
 800577e:	4699      	mov	r9, r3
 8005780:	688a      	ldr	r2, [r1, #8]
 8005782:	690b      	ldr	r3, [r1, #16]
 8005784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005788:	4293      	cmp	r3, r2
 800578a:	bfb8      	it	lt
 800578c:	4613      	movlt	r3, r2
 800578e:	6033      	str	r3, [r6, #0]
 8005790:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005794:	4607      	mov	r7, r0
 8005796:	460c      	mov	r4, r1
 8005798:	b10a      	cbz	r2, 800579e <_printf_common+0x26>
 800579a:	3301      	adds	r3, #1
 800579c:	6033      	str	r3, [r6, #0]
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	0699      	lsls	r1, r3, #26
 80057a2:	bf42      	ittt	mi
 80057a4:	6833      	ldrmi	r3, [r6, #0]
 80057a6:	3302      	addmi	r3, #2
 80057a8:	6033      	strmi	r3, [r6, #0]
 80057aa:	6825      	ldr	r5, [r4, #0]
 80057ac:	f015 0506 	ands.w	r5, r5, #6
 80057b0:	d106      	bne.n	80057c0 <_printf_common+0x48>
 80057b2:	f104 0a19 	add.w	sl, r4, #25
 80057b6:	68e3      	ldr	r3, [r4, #12]
 80057b8:	6832      	ldr	r2, [r6, #0]
 80057ba:	1a9b      	subs	r3, r3, r2
 80057bc:	42ab      	cmp	r3, r5
 80057be:	dc26      	bgt.n	800580e <_printf_common+0x96>
 80057c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057c4:	1e13      	subs	r3, r2, #0
 80057c6:	6822      	ldr	r2, [r4, #0]
 80057c8:	bf18      	it	ne
 80057ca:	2301      	movne	r3, #1
 80057cc:	0692      	lsls	r2, r2, #26
 80057ce:	d42b      	bmi.n	8005828 <_printf_common+0xb0>
 80057d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057d4:	4649      	mov	r1, r9
 80057d6:	4638      	mov	r0, r7
 80057d8:	47c0      	blx	r8
 80057da:	3001      	adds	r0, #1
 80057dc:	d01e      	beq.n	800581c <_printf_common+0xa4>
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	6922      	ldr	r2, [r4, #16]
 80057e2:	f003 0306 	and.w	r3, r3, #6
 80057e6:	2b04      	cmp	r3, #4
 80057e8:	bf02      	ittt	eq
 80057ea:	68e5      	ldreq	r5, [r4, #12]
 80057ec:	6833      	ldreq	r3, [r6, #0]
 80057ee:	1aed      	subeq	r5, r5, r3
 80057f0:	68a3      	ldr	r3, [r4, #8]
 80057f2:	bf0c      	ite	eq
 80057f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057f8:	2500      	movne	r5, #0
 80057fa:	4293      	cmp	r3, r2
 80057fc:	bfc4      	itt	gt
 80057fe:	1a9b      	subgt	r3, r3, r2
 8005800:	18ed      	addgt	r5, r5, r3
 8005802:	2600      	movs	r6, #0
 8005804:	341a      	adds	r4, #26
 8005806:	42b5      	cmp	r5, r6
 8005808:	d11a      	bne.n	8005840 <_printf_common+0xc8>
 800580a:	2000      	movs	r0, #0
 800580c:	e008      	b.n	8005820 <_printf_common+0xa8>
 800580e:	2301      	movs	r3, #1
 8005810:	4652      	mov	r2, sl
 8005812:	4649      	mov	r1, r9
 8005814:	4638      	mov	r0, r7
 8005816:	47c0      	blx	r8
 8005818:	3001      	adds	r0, #1
 800581a:	d103      	bne.n	8005824 <_printf_common+0xac>
 800581c:	f04f 30ff 	mov.w	r0, #4294967295
 8005820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005824:	3501      	adds	r5, #1
 8005826:	e7c6      	b.n	80057b6 <_printf_common+0x3e>
 8005828:	18e1      	adds	r1, r4, r3
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	2030      	movs	r0, #48	; 0x30
 800582e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005832:	4422      	add	r2, r4
 8005834:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005838:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800583c:	3302      	adds	r3, #2
 800583e:	e7c7      	b.n	80057d0 <_printf_common+0x58>
 8005840:	2301      	movs	r3, #1
 8005842:	4622      	mov	r2, r4
 8005844:	4649      	mov	r1, r9
 8005846:	4638      	mov	r0, r7
 8005848:	47c0      	blx	r8
 800584a:	3001      	adds	r0, #1
 800584c:	d0e6      	beq.n	800581c <_printf_common+0xa4>
 800584e:	3601      	adds	r6, #1
 8005850:	e7d9      	b.n	8005806 <_printf_common+0x8e>
	...

08005854 <_printf_i>:
 8005854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005858:	7e0f      	ldrb	r7, [r1, #24]
 800585a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800585c:	2f78      	cmp	r7, #120	; 0x78
 800585e:	4691      	mov	r9, r2
 8005860:	4680      	mov	r8, r0
 8005862:	460c      	mov	r4, r1
 8005864:	469a      	mov	sl, r3
 8005866:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800586a:	d807      	bhi.n	800587c <_printf_i+0x28>
 800586c:	2f62      	cmp	r7, #98	; 0x62
 800586e:	d80a      	bhi.n	8005886 <_printf_i+0x32>
 8005870:	2f00      	cmp	r7, #0
 8005872:	f000 80d4 	beq.w	8005a1e <_printf_i+0x1ca>
 8005876:	2f58      	cmp	r7, #88	; 0x58
 8005878:	f000 80c0 	beq.w	80059fc <_printf_i+0x1a8>
 800587c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005884:	e03a      	b.n	80058fc <_printf_i+0xa8>
 8005886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800588a:	2b15      	cmp	r3, #21
 800588c:	d8f6      	bhi.n	800587c <_printf_i+0x28>
 800588e:	a101      	add	r1, pc, #4	; (adr r1, 8005894 <_printf_i+0x40>)
 8005890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005894:	080058ed 	.word	0x080058ed
 8005898:	08005901 	.word	0x08005901
 800589c:	0800587d 	.word	0x0800587d
 80058a0:	0800587d 	.word	0x0800587d
 80058a4:	0800587d 	.word	0x0800587d
 80058a8:	0800587d 	.word	0x0800587d
 80058ac:	08005901 	.word	0x08005901
 80058b0:	0800587d 	.word	0x0800587d
 80058b4:	0800587d 	.word	0x0800587d
 80058b8:	0800587d 	.word	0x0800587d
 80058bc:	0800587d 	.word	0x0800587d
 80058c0:	08005a05 	.word	0x08005a05
 80058c4:	0800592d 	.word	0x0800592d
 80058c8:	080059bf 	.word	0x080059bf
 80058cc:	0800587d 	.word	0x0800587d
 80058d0:	0800587d 	.word	0x0800587d
 80058d4:	08005a27 	.word	0x08005a27
 80058d8:	0800587d 	.word	0x0800587d
 80058dc:	0800592d 	.word	0x0800592d
 80058e0:	0800587d 	.word	0x0800587d
 80058e4:	0800587d 	.word	0x0800587d
 80058e8:	080059c7 	.word	0x080059c7
 80058ec:	682b      	ldr	r3, [r5, #0]
 80058ee:	1d1a      	adds	r2, r3, #4
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	602a      	str	r2, [r5, #0]
 80058f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058fc:	2301      	movs	r3, #1
 80058fe:	e09f      	b.n	8005a40 <_printf_i+0x1ec>
 8005900:	6820      	ldr	r0, [r4, #0]
 8005902:	682b      	ldr	r3, [r5, #0]
 8005904:	0607      	lsls	r7, r0, #24
 8005906:	f103 0104 	add.w	r1, r3, #4
 800590a:	6029      	str	r1, [r5, #0]
 800590c:	d501      	bpl.n	8005912 <_printf_i+0xbe>
 800590e:	681e      	ldr	r6, [r3, #0]
 8005910:	e003      	b.n	800591a <_printf_i+0xc6>
 8005912:	0646      	lsls	r6, r0, #25
 8005914:	d5fb      	bpl.n	800590e <_printf_i+0xba>
 8005916:	f9b3 6000 	ldrsh.w	r6, [r3]
 800591a:	2e00      	cmp	r6, #0
 800591c:	da03      	bge.n	8005926 <_printf_i+0xd2>
 800591e:	232d      	movs	r3, #45	; 0x2d
 8005920:	4276      	negs	r6, r6
 8005922:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005926:	485a      	ldr	r0, [pc, #360]	; (8005a90 <_printf_i+0x23c>)
 8005928:	230a      	movs	r3, #10
 800592a:	e012      	b.n	8005952 <_printf_i+0xfe>
 800592c:	682b      	ldr	r3, [r5, #0]
 800592e:	6820      	ldr	r0, [r4, #0]
 8005930:	1d19      	adds	r1, r3, #4
 8005932:	6029      	str	r1, [r5, #0]
 8005934:	0605      	lsls	r5, r0, #24
 8005936:	d501      	bpl.n	800593c <_printf_i+0xe8>
 8005938:	681e      	ldr	r6, [r3, #0]
 800593a:	e002      	b.n	8005942 <_printf_i+0xee>
 800593c:	0641      	lsls	r1, r0, #25
 800593e:	d5fb      	bpl.n	8005938 <_printf_i+0xe4>
 8005940:	881e      	ldrh	r6, [r3, #0]
 8005942:	4853      	ldr	r0, [pc, #332]	; (8005a90 <_printf_i+0x23c>)
 8005944:	2f6f      	cmp	r7, #111	; 0x6f
 8005946:	bf0c      	ite	eq
 8005948:	2308      	moveq	r3, #8
 800594a:	230a      	movne	r3, #10
 800594c:	2100      	movs	r1, #0
 800594e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005952:	6865      	ldr	r5, [r4, #4]
 8005954:	60a5      	str	r5, [r4, #8]
 8005956:	2d00      	cmp	r5, #0
 8005958:	bfa2      	ittt	ge
 800595a:	6821      	ldrge	r1, [r4, #0]
 800595c:	f021 0104 	bicge.w	r1, r1, #4
 8005960:	6021      	strge	r1, [r4, #0]
 8005962:	b90e      	cbnz	r6, 8005968 <_printf_i+0x114>
 8005964:	2d00      	cmp	r5, #0
 8005966:	d04b      	beq.n	8005a00 <_printf_i+0x1ac>
 8005968:	4615      	mov	r5, r2
 800596a:	fbb6 f1f3 	udiv	r1, r6, r3
 800596e:	fb03 6711 	mls	r7, r3, r1, r6
 8005972:	5dc7      	ldrb	r7, [r0, r7]
 8005974:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005978:	4637      	mov	r7, r6
 800597a:	42bb      	cmp	r3, r7
 800597c:	460e      	mov	r6, r1
 800597e:	d9f4      	bls.n	800596a <_printf_i+0x116>
 8005980:	2b08      	cmp	r3, #8
 8005982:	d10b      	bne.n	800599c <_printf_i+0x148>
 8005984:	6823      	ldr	r3, [r4, #0]
 8005986:	07de      	lsls	r6, r3, #31
 8005988:	d508      	bpl.n	800599c <_printf_i+0x148>
 800598a:	6923      	ldr	r3, [r4, #16]
 800598c:	6861      	ldr	r1, [r4, #4]
 800598e:	4299      	cmp	r1, r3
 8005990:	bfde      	ittt	le
 8005992:	2330      	movle	r3, #48	; 0x30
 8005994:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005998:	f105 35ff 	addle.w	r5, r5, #4294967295
 800599c:	1b52      	subs	r2, r2, r5
 800599e:	6122      	str	r2, [r4, #16]
 80059a0:	f8cd a000 	str.w	sl, [sp]
 80059a4:	464b      	mov	r3, r9
 80059a6:	aa03      	add	r2, sp, #12
 80059a8:	4621      	mov	r1, r4
 80059aa:	4640      	mov	r0, r8
 80059ac:	f7ff fee4 	bl	8005778 <_printf_common>
 80059b0:	3001      	adds	r0, #1
 80059b2:	d14a      	bne.n	8005a4a <_printf_i+0x1f6>
 80059b4:	f04f 30ff 	mov.w	r0, #4294967295
 80059b8:	b004      	add	sp, #16
 80059ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	f043 0320 	orr.w	r3, r3, #32
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	4833      	ldr	r0, [pc, #204]	; (8005a94 <_printf_i+0x240>)
 80059c8:	2778      	movs	r7, #120	; 0x78
 80059ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	6829      	ldr	r1, [r5, #0]
 80059d2:	061f      	lsls	r7, r3, #24
 80059d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80059d8:	d402      	bmi.n	80059e0 <_printf_i+0x18c>
 80059da:	065f      	lsls	r7, r3, #25
 80059dc:	bf48      	it	mi
 80059de:	b2b6      	uxthmi	r6, r6
 80059e0:	07df      	lsls	r7, r3, #31
 80059e2:	bf48      	it	mi
 80059e4:	f043 0320 	orrmi.w	r3, r3, #32
 80059e8:	6029      	str	r1, [r5, #0]
 80059ea:	bf48      	it	mi
 80059ec:	6023      	strmi	r3, [r4, #0]
 80059ee:	b91e      	cbnz	r6, 80059f8 <_printf_i+0x1a4>
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	f023 0320 	bic.w	r3, r3, #32
 80059f6:	6023      	str	r3, [r4, #0]
 80059f8:	2310      	movs	r3, #16
 80059fa:	e7a7      	b.n	800594c <_printf_i+0xf8>
 80059fc:	4824      	ldr	r0, [pc, #144]	; (8005a90 <_printf_i+0x23c>)
 80059fe:	e7e4      	b.n	80059ca <_printf_i+0x176>
 8005a00:	4615      	mov	r5, r2
 8005a02:	e7bd      	b.n	8005980 <_printf_i+0x12c>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	6826      	ldr	r6, [r4, #0]
 8005a08:	6961      	ldr	r1, [r4, #20]
 8005a0a:	1d18      	adds	r0, r3, #4
 8005a0c:	6028      	str	r0, [r5, #0]
 8005a0e:	0635      	lsls	r5, r6, #24
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	d501      	bpl.n	8005a18 <_printf_i+0x1c4>
 8005a14:	6019      	str	r1, [r3, #0]
 8005a16:	e002      	b.n	8005a1e <_printf_i+0x1ca>
 8005a18:	0670      	lsls	r0, r6, #25
 8005a1a:	d5fb      	bpl.n	8005a14 <_printf_i+0x1c0>
 8005a1c:	8019      	strh	r1, [r3, #0]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	6123      	str	r3, [r4, #16]
 8005a22:	4615      	mov	r5, r2
 8005a24:	e7bc      	b.n	80059a0 <_printf_i+0x14c>
 8005a26:	682b      	ldr	r3, [r5, #0]
 8005a28:	1d1a      	adds	r2, r3, #4
 8005a2a:	602a      	str	r2, [r5, #0]
 8005a2c:	681d      	ldr	r5, [r3, #0]
 8005a2e:	6862      	ldr	r2, [r4, #4]
 8005a30:	2100      	movs	r1, #0
 8005a32:	4628      	mov	r0, r5
 8005a34:	f7fa fbd4 	bl	80001e0 <memchr>
 8005a38:	b108      	cbz	r0, 8005a3e <_printf_i+0x1ea>
 8005a3a:	1b40      	subs	r0, r0, r5
 8005a3c:	6060      	str	r0, [r4, #4]
 8005a3e:	6863      	ldr	r3, [r4, #4]
 8005a40:	6123      	str	r3, [r4, #16]
 8005a42:	2300      	movs	r3, #0
 8005a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a48:	e7aa      	b.n	80059a0 <_printf_i+0x14c>
 8005a4a:	6923      	ldr	r3, [r4, #16]
 8005a4c:	462a      	mov	r2, r5
 8005a4e:	4649      	mov	r1, r9
 8005a50:	4640      	mov	r0, r8
 8005a52:	47d0      	blx	sl
 8005a54:	3001      	adds	r0, #1
 8005a56:	d0ad      	beq.n	80059b4 <_printf_i+0x160>
 8005a58:	6823      	ldr	r3, [r4, #0]
 8005a5a:	079b      	lsls	r3, r3, #30
 8005a5c:	d413      	bmi.n	8005a86 <_printf_i+0x232>
 8005a5e:	68e0      	ldr	r0, [r4, #12]
 8005a60:	9b03      	ldr	r3, [sp, #12]
 8005a62:	4298      	cmp	r0, r3
 8005a64:	bfb8      	it	lt
 8005a66:	4618      	movlt	r0, r3
 8005a68:	e7a6      	b.n	80059b8 <_printf_i+0x164>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	4632      	mov	r2, r6
 8005a6e:	4649      	mov	r1, r9
 8005a70:	4640      	mov	r0, r8
 8005a72:	47d0      	blx	sl
 8005a74:	3001      	adds	r0, #1
 8005a76:	d09d      	beq.n	80059b4 <_printf_i+0x160>
 8005a78:	3501      	adds	r5, #1
 8005a7a:	68e3      	ldr	r3, [r4, #12]
 8005a7c:	9903      	ldr	r1, [sp, #12]
 8005a7e:	1a5b      	subs	r3, r3, r1
 8005a80:	42ab      	cmp	r3, r5
 8005a82:	dcf2      	bgt.n	8005a6a <_printf_i+0x216>
 8005a84:	e7eb      	b.n	8005a5e <_printf_i+0x20a>
 8005a86:	2500      	movs	r5, #0
 8005a88:	f104 0619 	add.w	r6, r4, #25
 8005a8c:	e7f5      	b.n	8005a7a <_printf_i+0x226>
 8005a8e:	bf00      	nop
 8005a90:	08005e99 	.word	0x08005e99
 8005a94:	08005eaa 	.word	0x08005eaa

08005a98 <__sflush_r>:
 8005a98:	898a      	ldrh	r2, [r1, #12]
 8005a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9e:	4605      	mov	r5, r0
 8005aa0:	0710      	lsls	r0, r2, #28
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	d458      	bmi.n	8005b58 <__sflush_r+0xc0>
 8005aa6:	684b      	ldr	r3, [r1, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	dc05      	bgt.n	8005ab8 <__sflush_r+0x20>
 8005aac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	dc02      	bgt.n	8005ab8 <__sflush_r+0x20>
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005aba:	2e00      	cmp	r6, #0
 8005abc:	d0f9      	beq.n	8005ab2 <__sflush_r+0x1a>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ac4:	682f      	ldr	r7, [r5, #0]
 8005ac6:	6a21      	ldr	r1, [r4, #32]
 8005ac8:	602b      	str	r3, [r5, #0]
 8005aca:	d032      	beq.n	8005b32 <__sflush_r+0x9a>
 8005acc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	075a      	lsls	r2, r3, #29
 8005ad2:	d505      	bpl.n	8005ae0 <__sflush_r+0x48>
 8005ad4:	6863      	ldr	r3, [r4, #4]
 8005ad6:	1ac0      	subs	r0, r0, r3
 8005ad8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ada:	b10b      	cbz	r3, 8005ae0 <__sflush_r+0x48>
 8005adc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ade:	1ac0      	subs	r0, r0, r3
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ae6:	6a21      	ldr	r1, [r4, #32]
 8005ae8:	4628      	mov	r0, r5
 8005aea:	47b0      	blx	r6
 8005aec:	1c43      	adds	r3, r0, #1
 8005aee:	89a3      	ldrh	r3, [r4, #12]
 8005af0:	d106      	bne.n	8005b00 <__sflush_r+0x68>
 8005af2:	6829      	ldr	r1, [r5, #0]
 8005af4:	291d      	cmp	r1, #29
 8005af6:	d82b      	bhi.n	8005b50 <__sflush_r+0xb8>
 8005af8:	4a29      	ldr	r2, [pc, #164]	; (8005ba0 <__sflush_r+0x108>)
 8005afa:	410a      	asrs	r2, r1
 8005afc:	07d6      	lsls	r6, r2, #31
 8005afe:	d427      	bmi.n	8005b50 <__sflush_r+0xb8>
 8005b00:	2200      	movs	r2, #0
 8005b02:	6062      	str	r2, [r4, #4]
 8005b04:	04d9      	lsls	r1, r3, #19
 8005b06:	6922      	ldr	r2, [r4, #16]
 8005b08:	6022      	str	r2, [r4, #0]
 8005b0a:	d504      	bpl.n	8005b16 <__sflush_r+0x7e>
 8005b0c:	1c42      	adds	r2, r0, #1
 8005b0e:	d101      	bne.n	8005b14 <__sflush_r+0x7c>
 8005b10:	682b      	ldr	r3, [r5, #0]
 8005b12:	b903      	cbnz	r3, 8005b16 <__sflush_r+0x7e>
 8005b14:	6560      	str	r0, [r4, #84]	; 0x54
 8005b16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b18:	602f      	str	r7, [r5, #0]
 8005b1a:	2900      	cmp	r1, #0
 8005b1c:	d0c9      	beq.n	8005ab2 <__sflush_r+0x1a>
 8005b1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b22:	4299      	cmp	r1, r3
 8005b24:	d002      	beq.n	8005b2c <__sflush_r+0x94>
 8005b26:	4628      	mov	r0, r5
 8005b28:	f7ff fa92 	bl	8005050 <_free_r>
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	6360      	str	r0, [r4, #52]	; 0x34
 8005b30:	e7c0      	b.n	8005ab4 <__sflush_r+0x1c>
 8005b32:	2301      	movs	r3, #1
 8005b34:	4628      	mov	r0, r5
 8005b36:	47b0      	blx	r6
 8005b38:	1c41      	adds	r1, r0, #1
 8005b3a:	d1c8      	bne.n	8005ace <__sflush_r+0x36>
 8005b3c:	682b      	ldr	r3, [r5, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0c5      	beq.n	8005ace <__sflush_r+0x36>
 8005b42:	2b1d      	cmp	r3, #29
 8005b44:	d001      	beq.n	8005b4a <__sflush_r+0xb2>
 8005b46:	2b16      	cmp	r3, #22
 8005b48:	d101      	bne.n	8005b4e <__sflush_r+0xb6>
 8005b4a:	602f      	str	r7, [r5, #0]
 8005b4c:	e7b1      	b.n	8005ab2 <__sflush_r+0x1a>
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b54:	81a3      	strh	r3, [r4, #12]
 8005b56:	e7ad      	b.n	8005ab4 <__sflush_r+0x1c>
 8005b58:	690f      	ldr	r7, [r1, #16]
 8005b5a:	2f00      	cmp	r7, #0
 8005b5c:	d0a9      	beq.n	8005ab2 <__sflush_r+0x1a>
 8005b5e:	0793      	lsls	r3, r2, #30
 8005b60:	680e      	ldr	r6, [r1, #0]
 8005b62:	bf08      	it	eq
 8005b64:	694b      	ldreq	r3, [r1, #20]
 8005b66:	600f      	str	r7, [r1, #0]
 8005b68:	bf18      	it	ne
 8005b6a:	2300      	movne	r3, #0
 8005b6c:	eba6 0807 	sub.w	r8, r6, r7
 8005b70:	608b      	str	r3, [r1, #8]
 8005b72:	f1b8 0f00 	cmp.w	r8, #0
 8005b76:	dd9c      	ble.n	8005ab2 <__sflush_r+0x1a>
 8005b78:	6a21      	ldr	r1, [r4, #32]
 8005b7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005b7c:	4643      	mov	r3, r8
 8005b7e:	463a      	mov	r2, r7
 8005b80:	4628      	mov	r0, r5
 8005b82:	47b0      	blx	r6
 8005b84:	2800      	cmp	r0, #0
 8005b86:	dc06      	bgt.n	8005b96 <__sflush_r+0xfe>
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b8e:	81a3      	strh	r3, [r4, #12]
 8005b90:	f04f 30ff 	mov.w	r0, #4294967295
 8005b94:	e78e      	b.n	8005ab4 <__sflush_r+0x1c>
 8005b96:	4407      	add	r7, r0
 8005b98:	eba8 0800 	sub.w	r8, r8, r0
 8005b9c:	e7e9      	b.n	8005b72 <__sflush_r+0xda>
 8005b9e:	bf00      	nop
 8005ba0:	dfbffffe 	.word	0xdfbffffe

08005ba4 <_fflush_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	690b      	ldr	r3, [r1, #16]
 8005ba8:	4605      	mov	r5, r0
 8005baa:	460c      	mov	r4, r1
 8005bac:	b913      	cbnz	r3, 8005bb4 <_fflush_r+0x10>
 8005bae:	2500      	movs	r5, #0
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	b118      	cbz	r0, 8005bbe <_fflush_r+0x1a>
 8005bb6:	6a03      	ldr	r3, [r0, #32]
 8005bb8:	b90b      	cbnz	r3, 8005bbe <_fflush_r+0x1a>
 8005bba:	f7ff f831 	bl	8004c20 <__sinit>
 8005bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0f3      	beq.n	8005bae <_fflush_r+0xa>
 8005bc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005bc8:	07d0      	lsls	r0, r2, #31
 8005bca:	d404      	bmi.n	8005bd6 <_fflush_r+0x32>
 8005bcc:	0599      	lsls	r1, r3, #22
 8005bce:	d402      	bmi.n	8005bd6 <_fflush_r+0x32>
 8005bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bd2:	f7ff fa3a 	bl	800504a <__retarget_lock_acquire_recursive>
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	4621      	mov	r1, r4
 8005bda:	f7ff ff5d 	bl	8005a98 <__sflush_r>
 8005bde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005be0:	07da      	lsls	r2, r3, #31
 8005be2:	4605      	mov	r5, r0
 8005be4:	d4e4      	bmi.n	8005bb0 <_fflush_r+0xc>
 8005be6:	89a3      	ldrh	r3, [r4, #12]
 8005be8:	059b      	lsls	r3, r3, #22
 8005bea:	d4e1      	bmi.n	8005bb0 <_fflush_r+0xc>
 8005bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bee:	f7ff fa2d 	bl	800504c <__retarget_lock_release_recursive>
 8005bf2:	e7dd      	b.n	8005bb0 <_fflush_r+0xc>

08005bf4 <__swhatbuf_r>:
 8005bf4:	b570      	push	{r4, r5, r6, lr}
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bfc:	2900      	cmp	r1, #0
 8005bfe:	b096      	sub	sp, #88	; 0x58
 8005c00:	4615      	mov	r5, r2
 8005c02:	461e      	mov	r6, r3
 8005c04:	da0d      	bge.n	8005c22 <__swhatbuf_r+0x2e>
 8005c06:	89a3      	ldrh	r3, [r4, #12]
 8005c08:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c0c:	f04f 0100 	mov.w	r1, #0
 8005c10:	bf0c      	ite	eq
 8005c12:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005c16:	2340      	movne	r3, #64	; 0x40
 8005c18:	2000      	movs	r0, #0
 8005c1a:	6031      	str	r1, [r6, #0]
 8005c1c:	602b      	str	r3, [r5, #0]
 8005c1e:	b016      	add	sp, #88	; 0x58
 8005c20:	bd70      	pop	{r4, r5, r6, pc}
 8005c22:	466a      	mov	r2, sp
 8005c24:	f000 f862 	bl	8005cec <_fstat_r>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	dbec      	blt.n	8005c06 <__swhatbuf_r+0x12>
 8005c2c:	9901      	ldr	r1, [sp, #4]
 8005c2e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005c32:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005c36:	4259      	negs	r1, r3
 8005c38:	4159      	adcs	r1, r3
 8005c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c3e:	e7eb      	b.n	8005c18 <__swhatbuf_r+0x24>

08005c40 <__smakebuf_r>:
 8005c40:	898b      	ldrh	r3, [r1, #12]
 8005c42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c44:	079d      	lsls	r5, r3, #30
 8005c46:	4606      	mov	r6, r0
 8005c48:	460c      	mov	r4, r1
 8005c4a:	d507      	bpl.n	8005c5c <__smakebuf_r+0x1c>
 8005c4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	6123      	str	r3, [r4, #16]
 8005c54:	2301      	movs	r3, #1
 8005c56:	6163      	str	r3, [r4, #20]
 8005c58:	b002      	add	sp, #8
 8005c5a:	bd70      	pop	{r4, r5, r6, pc}
 8005c5c:	ab01      	add	r3, sp, #4
 8005c5e:	466a      	mov	r2, sp
 8005c60:	f7ff ffc8 	bl	8005bf4 <__swhatbuf_r>
 8005c64:	9900      	ldr	r1, [sp, #0]
 8005c66:	4605      	mov	r5, r0
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f7ff fa5d 	bl	8005128 <_malloc_r>
 8005c6e:	b948      	cbnz	r0, 8005c84 <__smakebuf_r+0x44>
 8005c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c74:	059a      	lsls	r2, r3, #22
 8005c76:	d4ef      	bmi.n	8005c58 <__smakebuf_r+0x18>
 8005c78:	f023 0303 	bic.w	r3, r3, #3
 8005c7c:	f043 0302 	orr.w	r3, r3, #2
 8005c80:	81a3      	strh	r3, [r4, #12]
 8005c82:	e7e3      	b.n	8005c4c <__smakebuf_r+0xc>
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	6020      	str	r0, [r4, #0]
 8005c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c8c:	81a3      	strh	r3, [r4, #12]
 8005c8e:	9b00      	ldr	r3, [sp, #0]
 8005c90:	6163      	str	r3, [r4, #20]
 8005c92:	9b01      	ldr	r3, [sp, #4]
 8005c94:	6120      	str	r0, [r4, #16]
 8005c96:	b15b      	cbz	r3, 8005cb0 <__smakebuf_r+0x70>
 8005c98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	f000 f837 	bl	8005d10 <_isatty_r>
 8005ca2:	b128      	cbz	r0, 8005cb0 <__smakebuf_r+0x70>
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	f023 0303 	bic.w	r3, r3, #3
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	81a3      	strh	r3, [r4, #12]
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	431d      	orrs	r5, r3
 8005cb4:	81a5      	strh	r5, [r4, #12]
 8005cb6:	e7cf      	b.n	8005c58 <__smakebuf_r+0x18>

08005cb8 <memmove>:
 8005cb8:	4288      	cmp	r0, r1
 8005cba:	b510      	push	{r4, lr}
 8005cbc:	eb01 0402 	add.w	r4, r1, r2
 8005cc0:	d902      	bls.n	8005cc8 <memmove+0x10>
 8005cc2:	4284      	cmp	r4, r0
 8005cc4:	4623      	mov	r3, r4
 8005cc6:	d807      	bhi.n	8005cd8 <memmove+0x20>
 8005cc8:	1e43      	subs	r3, r0, #1
 8005cca:	42a1      	cmp	r1, r4
 8005ccc:	d008      	beq.n	8005ce0 <memmove+0x28>
 8005cce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cd6:	e7f8      	b.n	8005cca <memmove+0x12>
 8005cd8:	4402      	add	r2, r0
 8005cda:	4601      	mov	r1, r0
 8005cdc:	428a      	cmp	r2, r1
 8005cde:	d100      	bne.n	8005ce2 <memmove+0x2a>
 8005ce0:	bd10      	pop	{r4, pc}
 8005ce2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ce6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005cea:	e7f7      	b.n	8005cdc <memmove+0x24>

08005cec <_fstat_r>:
 8005cec:	b538      	push	{r3, r4, r5, lr}
 8005cee:	4d07      	ldr	r5, [pc, #28]	; (8005d0c <_fstat_r+0x20>)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	4608      	mov	r0, r1
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	602b      	str	r3, [r5, #0]
 8005cfa:	f7fb fa24 	bl	8001146 <_fstat>
 8005cfe:	1c43      	adds	r3, r0, #1
 8005d00:	d102      	bne.n	8005d08 <_fstat_r+0x1c>
 8005d02:	682b      	ldr	r3, [r5, #0]
 8005d04:	b103      	cbz	r3, 8005d08 <_fstat_r+0x1c>
 8005d06:	6023      	str	r3, [r4, #0]
 8005d08:	bd38      	pop	{r3, r4, r5, pc}
 8005d0a:	bf00      	nop
 8005d0c:	2000035c 	.word	0x2000035c

08005d10 <_isatty_r>:
 8005d10:	b538      	push	{r3, r4, r5, lr}
 8005d12:	4d06      	ldr	r5, [pc, #24]	; (8005d2c <_isatty_r+0x1c>)
 8005d14:	2300      	movs	r3, #0
 8005d16:	4604      	mov	r4, r0
 8005d18:	4608      	mov	r0, r1
 8005d1a:	602b      	str	r3, [r5, #0]
 8005d1c:	f7fb fa23 	bl	8001166 <_isatty>
 8005d20:	1c43      	adds	r3, r0, #1
 8005d22:	d102      	bne.n	8005d2a <_isatty_r+0x1a>
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	b103      	cbz	r3, 8005d2a <_isatty_r+0x1a>
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	bd38      	pop	{r3, r4, r5, pc}
 8005d2c:	2000035c 	.word	0x2000035c

08005d30 <_sbrk_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4d06      	ldr	r5, [pc, #24]	; (8005d4c <_sbrk_r+0x1c>)
 8005d34:	2300      	movs	r3, #0
 8005d36:	4604      	mov	r4, r0
 8005d38:	4608      	mov	r0, r1
 8005d3a:	602b      	str	r3, [r5, #0]
 8005d3c:	f7fb fa2c 	bl	8001198 <_sbrk>
 8005d40:	1c43      	adds	r3, r0, #1
 8005d42:	d102      	bne.n	8005d4a <_sbrk_r+0x1a>
 8005d44:	682b      	ldr	r3, [r5, #0]
 8005d46:	b103      	cbz	r3, 8005d4a <_sbrk_r+0x1a>
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	bd38      	pop	{r3, r4, r5, pc}
 8005d4c:	2000035c 	.word	0x2000035c

08005d50 <memcpy>:
 8005d50:	440a      	add	r2, r1
 8005d52:	4291      	cmp	r1, r2
 8005d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d58:	d100      	bne.n	8005d5c <memcpy+0xc>
 8005d5a:	4770      	bx	lr
 8005d5c:	b510      	push	{r4, lr}
 8005d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d66:	4291      	cmp	r1, r2
 8005d68:	d1f9      	bne.n	8005d5e <memcpy+0xe>
 8005d6a:	bd10      	pop	{r4, pc}

08005d6c <_realloc_r>:
 8005d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d70:	4680      	mov	r8, r0
 8005d72:	4614      	mov	r4, r2
 8005d74:	460e      	mov	r6, r1
 8005d76:	b921      	cbnz	r1, 8005d82 <_realloc_r+0x16>
 8005d78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	f7ff b9d3 	b.w	8005128 <_malloc_r>
 8005d82:	b92a      	cbnz	r2, 8005d90 <_realloc_r+0x24>
 8005d84:	f7ff f964 	bl	8005050 <_free_r>
 8005d88:	4625      	mov	r5, r4
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d90:	f000 f81b 	bl	8005dca <_malloc_usable_size_r>
 8005d94:	4284      	cmp	r4, r0
 8005d96:	4607      	mov	r7, r0
 8005d98:	d802      	bhi.n	8005da0 <_realloc_r+0x34>
 8005d9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d9e:	d812      	bhi.n	8005dc6 <_realloc_r+0x5a>
 8005da0:	4621      	mov	r1, r4
 8005da2:	4640      	mov	r0, r8
 8005da4:	f7ff f9c0 	bl	8005128 <_malloc_r>
 8005da8:	4605      	mov	r5, r0
 8005daa:	2800      	cmp	r0, #0
 8005dac:	d0ed      	beq.n	8005d8a <_realloc_r+0x1e>
 8005dae:	42bc      	cmp	r4, r7
 8005db0:	4622      	mov	r2, r4
 8005db2:	4631      	mov	r1, r6
 8005db4:	bf28      	it	cs
 8005db6:	463a      	movcs	r2, r7
 8005db8:	f7ff ffca 	bl	8005d50 <memcpy>
 8005dbc:	4631      	mov	r1, r6
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	f7ff f946 	bl	8005050 <_free_r>
 8005dc4:	e7e1      	b.n	8005d8a <_realloc_r+0x1e>
 8005dc6:	4635      	mov	r5, r6
 8005dc8:	e7df      	b.n	8005d8a <_realloc_r+0x1e>

08005dca <_malloc_usable_size_r>:
 8005dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dce:	1f18      	subs	r0, r3, #4
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	bfbc      	itt	lt
 8005dd4:	580b      	ldrlt	r3, [r1, r0]
 8005dd6:	18c0      	addlt	r0, r0, r3
 8005dd8:	4770      	bx	lr
	...

08005ddc <_init>:
 8005ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dde:	bf00      	nop
 8005de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005de2:	bc08      	pop	{r3}
 8005de4:	469e      	mov	lr, r3
 8005de6:	4770      	bx	lr

08005de8 <_fini>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	bf00      	nop
 8005dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dee:	bc08      	pop	{r3}
 8005df0:	469e      	mov	lr, r3
 8005df2:	4770      	bx	lr
