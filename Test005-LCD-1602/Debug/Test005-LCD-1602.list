
Test005-LCD-1602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004304  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080044a4  080044a4  000144a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004580  08004580  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08004580  08004580  00014580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004588  08004588  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004588  08004588  00014588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800458c  0800458c  0001458c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  080045f8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  080045f8  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b3af  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ce0  00000000  00000000  0002b48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a40  00000000  00000000  0002d170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007f0  00000000  00000000  0002dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016aa7  00000000  00000000  0002e3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d341  00000000  00000000  00044e47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089e04  00000000  00000000  00052188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000332c  00000000  00000000  000dbf8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000df2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800448c 	.word	0x0800448c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800448c 	.word	0x0800448c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <__io_putchar>:
//#include "C:\Users\user\STM32Cube\Repository\STM32Cube_FW_F4_V1.28.1\Drivers\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_i2c.h"
extern UART_HandleTypeDef huart2;


int __io_putchar(int ch)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000584:	1d39      	adds	r1, r7, #4
 8000586:	230a      	movs	r3, #10
 8000588:	2201      	movs	r2, #1
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <__io_putchar+0x20>)
 800058c:	f002 fa58 	bl	8002a40 <HAL_UART_Transmit>
	return(ch);
 8000590:	687b      	ldr	r3, [r7, #4]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	200000dc 	.word	0x200000dc

080005a0 <StandBy>:

void StandBy()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	while(HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin));
 80005a4:	bf00      	nop
 80005a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <StandBy+0x1c>)
 80005ac:	f000 ff62 	bl	8001474 <HAL_GPIO_ReadPin>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d1f7      	bne.n	80005a6 <StandBy+0x6>
}
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40020800 	.word	0x40020800

080005c0 <ProgramStart>:

void ProgramStart(char * str)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	cls();
 80005c8:	f000 f820 	bl	800060c <cls>
	Cursor(0,0);
 80005cc:	2100      	movs	r1, #0
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 f826 	bl	8000620 <Cursor>
	printf("\033[2J");//화면 clear
 80005d4:	4809      	ldr	r0, [pc, #36]	; (80005fc <ProgramStart+0x3c>)
 80005d6:	f002 feb1 	bl	800333c <iprintf>
	printf("\033[0;0H"); //cursor다시 이동
 80005da:	4809      	ldr	r0, [pc, #36]	; (8000600 <ProgramStart+0x40>)
 80005dc:	f002 feae 	bl	800333c <iprintf>
	printf("Program Start - %s\r\n", str);
 80005e0:	6879      	ldr	r1, [r7, #4]
 80005e2:	4808      	ldr	r0, [pc, #32]	; (8000604 <ProgramStart+0x44>)
 80005e4:	f002 feaa 	bl	800333c <iprintf>
	printf("Press Blue-button(B1) to Start...\r\n");
 80005e8:	4807      	ldr	r0, [pc, #28]	; (8000608 <ProgramStart+0x48>)
 80005ea:	f002 ff0d 	bl	8003408 <puts>
	StandBy();
 80005ee:	f7ff ffd7 	bl	80005a0 <StandBy>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	080044a4 	.word	0x080044a4
 8000600:	080044ac 	.word	0x080044ac
 8000604:	080044b4 	.word	0x080044b4
 8000608:	080044cc 	.word	0x080044cc

0800060c <cls>:


void cls()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	printf("\033[2J");//화면 clear
 8000610:	4802      	ldr	r0, [pc, #8]	; (800061c <cls+0x10>)
 8000612:	f002 fe93 	bl	800333c <iprintf>
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	080044a4 	.word	0x080044a4

08000620 <Cursor>:



void Cursor(int x,int y)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
	char buf[20];
	sprintf(buf,"\033[%d;%dH",y,x);
 800062a:	f107 000c 	add.w	r0, r7, #12
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	4906      	ldr	r1, [pc, #24]	; (800064c <Cursor+0x2c>)
 8000634:	f002 fef0 	bl	8003418 <siprintf>
	puts(buf);//문자열 출력함수
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fee3 	bl	8003408 <puts>
}
 8000642:	bf00      	nop
 8000644:	3720      	adds	r7, #32
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	080044f0 	.word	0x080044f0

08000650 <lcd_command>:

I2C_HandleTypeDef *hi2c=NULL;


void lcd_command(char cmd)// cmd_bit : abcd efgh
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	char n1, n2,n3,n4, dd[4];
	n1 = cmd & 0xf0; //n1: abcd 0000 upper nibble
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	f023 030f 	bic.w	r3, r3, #15
 8000660:	73fb      	strb	r3, [r7, #15]
	n2 = (cmd <<4); // n2: efgh 0000
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	011b      	lsls	r3, r3, #4
 8000666:	73bb      	strb	r3, [r7, #14]
	n3 = (1<<3)|(1<<2)|0|0;//(RW|EN_1|NC|RS) 0x0c
 8000668:	230c      	movs	r3, #12
 800066a:	737b      	strb	r3, [r7, #13]
	n4 = (1<<3)|0|0|0;//(RW|EN_0|NC|RS) 0x08
 800066c:	2308      	movs	r3, #8
 800066e:	733b      	strb	r3, [r7, #12]
	dd[0] = n1 | n3;
 8000670:	7bfa      	ldrb	r2, [r7, #15]
 8000672:	7b7b      	ldrb	r3, [r7, #13]
 8000674:	4313      	orrs	r3, r2
 8000676:	b2db      	uxtb	r3, r3
 8000678:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;// enable, disable, valid data(keep data)
 800067a:	7bfa      	ldrb	r2, [r7, #15]
 800067c:	7b3b      	ldrb	r3, [r7, #12]
 800067e:	4313      	orrs	r3, r2
 8000680:	b2db      	uxtb	r3, r3
 8000682:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 8000684:	7bba      	ldrb	r2, [r7, #14]
 8000686:	7b7b      	ldrb	r3, [r7, #13]
 8000688:	4313      	orrs	r3, r2
 800068a:	b2db      	uxtb	r3, r3
 800068c:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;// enable, disable, valid data(keep data)
 800068e:	7bba      	ldrb	r2, [r7, #14]
 8000690:	7b3b      	ldrb	r3, [r7, #12]
 8000692:	4313      	orrs	r3, r2
 8000694:	b2db      	uxtb	r3, r3
 8000696:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, I2C_ADDR, dd, 4, 10);// 4byte, timeout 10
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <lcd_command+0x64>)
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	f107 0208 	add.w	r2, r7, #8
 80006a0:	230a      	movs	r3, #10
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2304      	movs	r3, #4
 80006a6:	214e      	movs	r1, #78	; 0x4e
 80006a8:	f001 f85a 	bl	8001760 <HAL_I2C_Master_Transmit>
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000084 	.word	0x20000084

080006b8 <lcd_data>:

void lcd_data(char ch)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af02      	add	r7, sp, #8
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	char n1, n2,n3,n4, dd[4];
	n1 = ch & 0xf0; //n1: abcd 0000 upper nibble
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	73fb      	strb	r3, [r7, #15]
	n2 = (ch <<4); // n2: efgh 0000
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	011b      	lsls	r3, r3, #4
 80006ce:	73bb      	strb	r3, [r7, #14]
	n3 = (1<<3)|(1<<2)|0|(1<<0);//(RW|EN_1|NC|RS) 0x0d
 80006d0:	230d      	movs	r3, #13
 80006d2:	737b      	strb	r3, [r7, #13]
	n4 = (1<<3)|0|0|(1<<0);//(RW|EN_0|NC|RS) 0x09
 80006d4:	2309      	movs	r3, #9
 80006d6:	733b      	strb	r3, [r7, #12]
	dd[0] = n1 | n3;
 80006d8:	7bfa      	ldrb	r2, [r7, #15]
 80006da:	7b7b      	ldrb	r3, [r7, #13]
 80006dc:	4313      	orrs	r3, r2
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	723b      	strb	r3, [r7, #8]
	dd[1] = n1 | n4;// enable, disable, valid data(keep data)
 80006e2:	7bfa      	ldrb	r2, [r7, #15]
 80006e4:	7b3b      	ldrb	r3, [r7, #12]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	727b      	strb	r3, [r7, #9]
	dd[2] = n2 | n3;
 80006ec:	7bba      	ldrb	r2, [r7, #14]
 80006ee:	7b7b      	ldrb	r3, [r7, #13]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	72bb      	strb	r3, [r7, #10]
	dd[3] = n2 | n4;// enable, disable, valid data(keep data)
 80006f6:	7bba      	ldrb	r2, [r7, #14]
 80006f8:	7b3b      	ldrb	r3, [r7, #12]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(hi2c, I2C_ADDR, dd, 4, 10);// 4byte, timeout 10
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <lcd_data+0x64>)
 8000702:	6818      	ldr	r0, [r3, #0]
 8000704:	f107 0208 	add.w	r2, r7, #8
 8000708:	230a      	movs	r3, #10
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2304      	movs	r3, #4
 800070e:	214e      	movs	r1, #78	; 0x4e
 8000710:	f001 f826 	bl	8001760 <HAL_I2C_Master_Transmit>
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000084 	.word	0x20000084

08000720 <lcd_init>:

void lcd_init()
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	lcd_command(0x01); // screen clear
 8000724:	2001      	movs	r0, #1
 8000726:	f7ff ff93 	bl	8000650 <lcd_command>
	lcd_command(0x02); // cursor home
 800072a:	2002      	movs	r0, #2
 800072c:	f7ff ff90 	bl	8000650 <lcd_command>
	lcd_command(0x06); //
 8000730:	2006      	movs	r0, #6
 8000732:	f7ff ff8d 	bl	8000650 <lcd_command>
	lcd_command(0x0f);
 8000736:	200f      	movs	r0, #15
 8000738:	f7ff ff8a 	bl	8000650 <lcd_command>
	HAL_Delay(10);
 800073c:	200a      	movs	r0, #10
 800073e:	f000 fc0b 	bl	8000f58 <HAL_Delay>
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <i2c_init>:

int i2c_init(I2C_HandleTypeDef *p)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	hi2c = p;
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <i2c_init+0x1c>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6013      	str	r3, [r2, #0]
}
 8000756:	bf00      	nop
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	20000084 	.word	0x20000084

08000768 <lcd_printEx>:

void lcd_printEx(char *str, int ln)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
	if(ln == 0) lcd_command(0x80);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d102      	bne.n	800077e <lcd_printEx+0x16>
 8000778:	2080      	movs	r0, #128	; 0x80
 800077a:	f7ff ff69 	bl	8000650 <lcd_command>
	if(ln == 1) lcd_command(0xc0);
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d102      	bne.n	800078a <lcd_printEx+0x22>
 8000784:	20c0      	movs	r0, #192	; 0xc0
 8000786:	f7ff ff63 	bl	8000650 <lcd_command>
	lcd_print(str);
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f000 f804 	bl	8000798 <lcd_print>
}
 8000790:	bf00      	nop
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <lcd_print>:

void lcd_print(char *str)//character parameter pointer
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	while(*str) lcd_data(*str++);
 80007a0:	e006      	b.n	80007b0 <lcd_print+0x18>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	1c5a      	adds	r2, r3, #1
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ff84 	bl	80006b8 <lcd_data>
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d1f4      	bne.n	80007a2 <lcd_print+0xa>
}
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <i2c_scan>:

int i2c_scan()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
	if(hi2c == NULL) return;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <i2c_scan+0x64>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d024      	beq.n	800081c <i2c_scan+0x58>
	for(int addr=0;addr<128;addr++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	e01d      	b.n	8000814 <i2c_scan+0x50>
	{
		if(HAL_I2C_IsDeviceReady(hi2c, addr, 1, 10) == HAL_OK)
 80007d8:	4b13      	ldr	r3, [pc, #76]	; (8000828 <i2c_scan+0x64>)
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	b299      	uxth	r1, r3
 80007e0:	230a      	movs	r3, #10
 80007e2:	2201      	movs	r2, #1
 80007e4:	f001 f8ba 	bl	800195c <HAL_I2C_IsDeviceReady>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d104      	bne.n	80007f8 <i2c_scan+0x34>
		{
			printf("  %02x ", addr);
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	480e      	ldr	r0, [pc, #56]	; (800082c <i2c_scan+0x68>)
 80007f2:	f002 fda3 	bl	800333c <iprintf>
 80007f6:	e002      	b.n	80007fe <i2c_scan+0x3a>
		}
		else
		{
			printf("   . ");
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <i2c_scan+0x6c>)
 80007fa:	f002 fd9f 	bl	800333c <iprintf>
		}
		if((addr % 16) == 0) printf("\r\n");
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f003 030f 	and.w	r3, r3, #15
 8000804:	2b00      	cmp	r3, #0
 8000806:	d102      	bne.n	800080e <i2c_scan+0x4a>
 8000808:	480a      	ldr	r0, [pc, #40]	; (8000834 <i2c_scan+0x70>)
 800080a:	f002 fdfd 	bl	8003408 <puts>
	for(int addr=0;addr<128;addr++)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3301      	adds	r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b7f      	cmp	r3, #127	; 0x7f
 8000818:	ddde      	ble.n	80007d8 <i2c_scan+0x14>
 800081a:	e000      	b.n	800081e <i2c_scan+0x5a>
	if(hi2c == NULL) return;
 800081c:	bf00      	nop
	}
}
 800081e:	4618      	mov	r0, r3
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000084 	.word	0x20000084
 800082c:	080044fc 	.word	0x080044fc
 8000830:	08004504 	.word	0x08004504
 8000834:	0800450c 	.word	0x0800450c

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083c:	f000 fb1a 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000840:	f000 f820 	bl	8000884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000844:	f000 f8e0 	bl	8000a08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000848:	f000 f8b4 	bl	80009b4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800084c:	f000 f884 	bl	8000958 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */

  ProgramStart("LCD (1602)");
 8000850:	4808      	ldr	r0, [pc, #32]	; (8000874 <main+0x3c>)
 8000852:	f7ff feb5 	bl	80005c0 <ProgramStart>

  i2c_init(&hi2c1);
 8000856:	4808      	ldr	r0, [pc, #32]	; (8000878 <main+0x40>)
 8000858:	f7ff ff76 	bl	8000748 <i2c_init>
  i2c_scan();
 800085c:	f7ff ffb2 	bl	80007c4 <i2c_scan>

  lcd_init();
 8000860:	f7ff ff5e 	bl	8000720 <lcd_init>
  lcd_print("Hello");
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <main+0x44>)
 8000866:	f7ff ff97 	bl	8000798 <lcd_print>
  lcd_printEx("Good afternoon", 1);
 800086a:	2101      	movs	r1, #1
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <main+0x48>)
 800086e:	f7ff ff7b 	bl	8000768 <lcd_printEx>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000872:	e7fe      	b.n	8000872 <main+0x3a>
 8000874:	08004510 	.word	0x08004510
 8000878:	20000088 	.word	0x20000088
 800087c:	0800451c 	.word	0x0800451c
 8000880:	08004524 	.word	0x08004524

08000884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b094      	sub	sp, #80	; 0x50
 8000888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	2230      	movs	r2, #48	; 0x30
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f002 feb8 	bl	8003608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	4b28      	ldr	r3, [pc, #160]	; (8000950 <SystemClock_Config+0xcc>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	4a27      	ldr	r2, [pc, #156]	; (8000950 <SystemClock_Config+0xcc>)
 80008b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b6:	6413      	str	r3, [r2, #64]	; 0x40
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <SystemClock_Config+0xcc>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <SystemClock_Config+0xd0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <SystemClock_Config+0xd0>)
 80008ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <SystemClock_Config+0xd0>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e0:	2302      	movs	r3, #2
 80008e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e4:	2301      	movs	r3, #1
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e8:	2310      	movs	r3, #16
 80008ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ec:	2302      	movs	r3, #2
 80008ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008f0:	2300      	movs	r3, #0
 80008f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008f4:	2310      	movs	r3, #16
 80008f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008fe:	2304      	movs	r3, #4
 8000900:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000902:	2304      	movs	r3, #4
 8000904:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	4618      	mov	r0, r3
 800090c:	f001 fbb0 	bl	8002070 <HAL_RCC_OscConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000916:	f000 f8e5 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091a:	230f      	movs	r3, #15
 800091c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2302      	movs	r3, #2
 8000920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2102      	movs	r1, #2
 8000936:	4618      	mov	r0, r3
 8000938:	f001 fe12 	bl	8002560 <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000942:	f000 f8cf 	bl	8000ae4 <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3750      	adds	r7, #80	; 0x50
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_I2C1_Init+0x50>)
 800095e:	4a13      	ldr	r2, [pc, #76]	; (80009ac <MX_I2C1_Init+0x54>)
 8000960:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000964:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <MX_I2C1_Init+0x58>)
 8000966:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_I2C1_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000976:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800097a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_I2C1_Init+0x50>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_I2C1_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000990:	2200      	movs	r2, #0
 8000992:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_I2C1_Init+0x50>)
 8000996:	f000 fd9f 	bl	80014d8 <HAL_I2C_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009a0:	f000 f8a0 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000088 	.word	0x20000088
 80009ac:	40005400 	.word	0x40005400
 80009b0:	000186a0 	.word	0x000186a0

080009b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <MX_USART2_UART_Init+0x50>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_USART2_UART_Init+0x4c>)
 80009ec:	f001 ffd8 	bl	80029a0 <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009f6:	f000 f875 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000dc 	.word	0x200000dc
 8000a04:	40004400 	.word	0x40004400

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a2c      	ldr	r2, [pc, #176]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0304 	and.w	r3, r3, #4
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a25      	ldr	r2, [pc, #148]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a17      	ldr	r2, [pc, #92]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_GPIO_Init+0xd0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2120      	movs	r1, #32
 8000a92:	4812      	ldr	r0, [pc, #72]	; (8000adc <MX_GPIO_Init+0xd4>)
 8000a94:	f000 fd06 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a9e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <MX_GPIO_Init+0xd8>)
 8000ab0:	f000 fb5c 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ab4:	2320      	movs	r3, #32
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_GPIO_Init+0xd4>)
 8000acc:	f000 fb4e 	bl	800116c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	; 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020800 	.word	0x40020800

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b2e:	2007      	movs	r0, #7
 8000b30:	f000 fae8 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_I2C_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12c      	bne.n	8000bbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b84:	2312      	movs	r3, #18
 8000b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b90:	2304      	movs	r3, #4
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480c      	ldr	r0, [pc, #48]	; (8000bcc <HAL_I2C_MspInit+0x8c>)
 8000b9c:	f000 fae6 	bl	800116c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000baa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	3728      	adds	r7, #40	; 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020400 	.word	0x40020400

08000bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	; (8000c54 <HAL_UART_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12b      	bne.n	8000c4a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_UART_MspInit+0x88>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c3a:	2307      	movs	r3, #7
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <HAL_UART_MspInit+0x8c>)
 8000c46:	f000 fa91 	bl	800116c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	; 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40004400 	.word	0x40004400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cac:	f000 f934 	bl	8000f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	e00a      	b.n	8000cdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cc6:	f3af 8000 	nop.w
 8000cca:	4601      	mov	r1, r0
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	60ba      	str	r2, [r7, #8]
 8000cd2:	b2ca      	uxtb	r2, r1
 8000cd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	dbf0      	blt.n	8000cc6 <_read+0x12>
  }

  return len;
 8000ce4:	687b      	ldr	r3, [r7, #4]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b086      	sub	sp, #24
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	60f8      	str	r0, [r7, #12]
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	e009      	b.n	8000d14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	60ba      	str	r2, [r7, #8]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fc37 	bl	800057c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3301      	adds	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	dbf1      	blt.n	8000d00 <_write+0x12>
  }
  return len;
 8000d1c:	687b      	ldr	r3, [r7, #4]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_close>:

int _close(int file)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d4e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <_isatty>:

int _isatty(int file)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d66:	2301      	movs	r3, #1
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <_sbrk+0x5c>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <_sbrk+0x60>)
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <_sbrk+0x64>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <_sbrk+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d207      	bcs.n	8000dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc0:	f002 fc70 	bl	80036a4 <__errno>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	e009      	b.n	8000de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <_sbrk+0x64>)
 8000de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20020000 	.word	0x20020000
 8000df0:	00000400 	.word	0x00000400
 8000df4:	20000124 	.word	0x20000124
 8000df8:	20000278 	.word	0x20000278

08000dfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <SystemInit+0x20>)
 8000e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <SystemInit+0x20>)
 8000e08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e24:	f7ff ffea 	bl	8000dfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e2a:	490d      	ldr	r1, [pc, #52]	; (8000e60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e40:	4c0a      	ldr	r4, [pc, #40]	; (8000e6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4e:	f002 fc2f 	bl	80036b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e52:	f7ff fcf1 	bl	8000838 <main>
  bx  lr    
 8000e56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e64:	08004590 	.word	0x08004590
  ldr r2, =_sbss
 8000e68:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e6c:	20000278 	.word	0x20000278

08000e70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e78:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <HAL_Init+0x40>)
 8000e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_Init+0x40>)
 8000e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_Init+0x40>)
 8000e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 f931 	bl	8001104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f000 f808 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea8:	f7ff fe22 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023c00 	.word	0x40023c00

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x54>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x58>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f93b 	bl	8001152 <HAL_SYSTICK_Config>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00e      	b.n	8000f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d80a      	bhi.n	8000f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f000 f911 	bl	800111a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef8:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <HAL_InitTick+0x5c>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	20000008 	.word	0x20000008
 8000f14:	20000004 	.word	0x20000004

08000f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <HAL_IncTick+0x20>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x24>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4413      	add	r3, r2
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <HAL_IncTick+0x24>)
 8000f2a:	6013      	str	r3, [r2, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000128 	.word	0x20000128

08000f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return uwTick;
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_GetTick+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000128 	.word	0x20000128

08000f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f60:	f7ff ffee 	bl	8000f40 <HAL_GetTick>
 8000f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f70:	d005      	beq.n	8000f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <HAL_Delay+0x44>)
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f7e:	bf00      	nop
 8000f80:	f7ff ffde 	bl	8000f40 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d8f7      	bhi.n	8000f80 <HAL_Delay+0x28>
  {
  }
}
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	6039      	str	r1, [r7, #0]
 800100e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	2b00      	cmp	r3, #0
 8001016:	db0a      	blt.n	800102e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	490c      	ldr	r1, [pc, #48]	; (8001050 <__NVIC_SetPriority+0x4c>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	440b      	add	r3, r1
 8001028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800102c:	e00a      	b.n	8001044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4908      	ldr	r1, [pc, #32]	; (8001054 <__NVIC_SetPriority+0x50>)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	f003 030f 	and.w	r3, r3, #15
 800103a:	3b04      	subs	r3, #4
 800103c:	0112      	lsls	r2, r2, #4
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	440b      	add	r3, r1
 8001042:	761a      	strb	r2, [r3, #24]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000e100 	.word	0xe000e100
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001058:	b480      	push	{r7}
 800105a:	b089      	sub	sp, #36	; 0x24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f1c3 0307 	rsb	r3, r3, #7
 8001072:	2b04      	cmp	r3, #4
 8001074:	bf28      	it	cs
 8001076:	2304      	movcs	r3, #4
 8001078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3304      	adds	r3, #4
 800107e:	2b06      	cmp	r3, #6
 8001080:	d902      	bls.n	8001088 <NVIC_EncodePriority+0x30>
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3b03      	subs	r3, #3
 8001086:	e000      	b.n	800108a <NVIC_EncodePriority+0x32>
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43da      	mvns	r2, r3
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	401a      	ands	r2, r3
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43d9      	mvns	r1, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	4313      	orrs	r3, r2
         );
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3724      	adds	r7, #36	; 0x24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d0:	d301      	bcc.n	80010d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00f      	b.n	80010f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d6:	4a0a      	ldr	r2, [pc, #40]	; (8001100 <SysTick_Config+0x40>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010de:	210f      	movs	r1, #15
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f7ff ff8e 	bl	8001004 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <SysTick_Config+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <SysTick_Config+0x40>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ff47 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112c:	f7ff ff5c 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 8001130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68b9      	ldr	r1, [r7, #8]
 8001136:	6978      	ldr	r0, [r7, #20]
 8001138:	f7ff ff8e 	bl	8001058 <NVIC_EncodePriority>
 800113c:	4602      	mov	r2, r0
 800113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff5d 	bl	8001004 <__NVIC_SetPriority>
}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffb0 	bl	80010c0 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e159      	b.n	800143c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f040 8148 	bne.w	8001436 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d005      	beq.n	80011be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d130      	bne.n	8001220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	f003 0201 	and.w	r2, r3, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b03      	cmp	r3, #3
 800122a:	d017      	beq.n	800125c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d123      	bne.n	80012b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	69b9      	ldr	r1, [r7, #24]
 80012ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0203 	and.w	r2, r3, #3
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80a2 	beq.w	8001436 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b57      	ldr	r3, [pc, #348]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a56      	ldr	r2, [pc, #344]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b54      	ldr	r3, [pc, #336]	; (8001454 <HAL_GPIO_Init+0x2e8>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130e:	4a52      	ldr	r2, [pc, #328]	; (8001458 <HAL_GPIO_Init+0x2ec>)
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a49      	ldr	r2, [pc, #292]	; (800145c <HAL_GPIO_Init+0x2f0>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d019      	beq.n	800136e <HAL_GPIO_Init+0x202>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a48      	ldr	r2, [pc, #288]	; (8001460 <HAL_GPIO_Init+0x2f4>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d013      	beq.n	800136a <HAL_GPIO_Init+0x1fe>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a47      	ldr	r2, [pc, #284]	; (8001464 <HAL_GPIO_Init+0x2f8>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d00d      	beq.n	8001366 <HAL_GPIO_Init+0x1fa>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a46      	ldr	r2, [pc, #280]	; (8001468 <HAL_GPIO_Init+0x2fc>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d007      	beq.n	8001362 <HAL_GPIO_Init+0x1f6>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a45      	ldr	r2, [pc, #276]	; (800146c <HAL_GPIO_Init+0x300>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d101      	bne.n	800135e <HAL_GPIO_Init+0x1f2>
 800135a:	2304      	movs	r3, #4
 800135c:	e008      	b.n	8001370 <HAL_GPIO_Init+0x204>
 800135e:	2307      	movs	r3, #7
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x204>
 8001362:	2303      	movs	r3, #3
 8001364:	e004      	b.n	8001370 <HAL_GPIO_Init+0x204>
 8001366:	2302      	movs	r3, #2
 8001368:	e002      	b.n	8001370 <HAL_GPIO_Init+0x204>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_GPIO_Init+0x204>
 800136e:	2300      	movs	r3, #0
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	f002 0203 	and.w	r2, r2, #3
 8001376:	0092      	lsls	r2, r2, #2
 8001378:	4093      	lsls	r3, r2
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001380:	4935      	ldr	r1, [pc, #212]	; (8001458 <HAL_GPIO_Init+0x2ec>)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800138e:	4b38      	ldr	r3, [pc, #224]	; (8001470 <HAL_GPIO_Init+0x304>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013b2:	4a2f      	ldr	r2, [pc, #188]	; (8001470 <HAL_GPIO_Init+0x304>)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b8:	4b2d      	ldr	r3, [pc, #180]	; (8001470 <HAL_GPIO_Init+0x304>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013dc:	4a24      	ldr	r2, [pc, #144]	; (8001470 <HAL_GPIO_Init+0x304>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013e2:	4b23      	ldr	r3, [pc, #140]	; (8001470 <HAL_GPIO_Init+0x304>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001406:	4a1a      	ldr	r2, [pc, #104]	; (8001470 <HAL_GPIO_Init+0x304>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800140c:	4b18      	ldr	r3, [pc, #96]	; (8001470 <HAL_GPIO_Init+0x304>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001430:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <HAL_GPIO_Init+0x304>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3301      	adds	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	2b0f      	cmp	r3, #15
 8001440:	f67f aea2 	bls.w	8001188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	3724      	adds	r7, #36	; 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	40013800 	.word	0x40013800
 800145c:	40020000 	.word	0x40020000
 8001460:	40020400 	.word	0x40020400
 8001464:	40020800 	.word	0x40020800
 8001468:	40020c00 	.word	0x40020c00
 800146c:	40021000 	.word	0x40021000
 8001470:	40013c00 	.word	0x40013c00

08001474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691a      	ldr	r2, [r3, #16]
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	e001      	b.n	8001496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c0:	e003      	b.n	80014ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	041a      	lsls	r2, r3, #16
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	619a      	str	r2, [r3, #24]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e12b      	b.n	8001742 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d106      	bne.n	8001504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff fb1e 	bl	8000b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2224      	movs	r2, #36	; 0x24
 8001508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0201 	bic.w	r2, r2, #1
 800151a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800152a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800153a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800153c:	f001 fa08 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 8001540:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	4a81      	ldr	r2, [pc, #516]	; (800174c <HAL_I2C_Init+0x274>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d807      	bhi.n	800155c <HAL_I2C_Init+0x84>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4a80      	ldr	r2, [pc, #512]	; (8001750 <HAL_I2C_Init+0x278>)
 8001550:	4293      	cmp	r3, r2
 8001552:	bf94      	ite	ls
 8001554:	2301      	movls	r3, #1
 8001556:	2300      	movhi	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	e006      	b.n	800156a <HAL_I2C_Init+0x92>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4a7d      	ldr	r2, [pc, #500]	; (8001754 <HAL_I2C_Init+0x27c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	bf94      	ite	ls
 8001564:	2301      	movls	r3, #1
 8001566:	2300      	movhi	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e0e7      	b.n	8001742 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4a78      	ldr	r2, [pc, #480]	; (8001758 <HAL_I2C_Init+0x280>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0c9b      	lsrs	r3, r3, #18
 800157c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	430a      	orrs	r2, r1
 8001590:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	4a6a      	ldr	r2, [pc, #424]	; (800174c <HAL_I2C_Init+0x274>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d802      	bhi.n	80015ac <HAL_I2C_Init+0xd4>
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	3301      	adds	r3, #1
 80015aa:	e009      	b.n	80015c0 <HAL_I2C_Init+0xe8>
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015b2:	fb02 f303 	mul.w	r3, r2, r3
 80015b6:	4a69      	ldr	r2, [pc, #420]	; (800175c <HAL_I2C_Init+0x284>)
 80015b8:	fba2 2303 	umull	r2, r3, r2, r3
 80015bc:	099b      	lsrs	r3, r3, #6
 80015be:	3301      	adds	r3, #1
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	430b      	orrs	r3, r1
 80015c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	495c      	ldr	r1, [pc, #368]	; (800174c <HAL_I2C_Init+0x274>)
 80015dc:	428b      	cmp	r3, r1
 80015de:	d819      	bhi.n	8001614 <HAL_I2C_Init+0x13c>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1e59      	subs	r1, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80015ee:	1c59      	adds	r1, r3, #1
 80015f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015f4:	400b      	ands	r3, r1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00a      	beq.n	8001610 <HAL_I2C_Init+0x138>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1e59      	subs	r1, r3, #1
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fbb1 f3f3 	udiv	r3, r1, r3
 8001608:	3301      	adds	r3, #1
 800160a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160e:	e051      	b.n	80016b4 <HAL_I2C_Init+0x1dc>
 8001610:	2304      	movs	r3, #4
 8001612:	e04f      	b.n	80016b4 <HAL_I2C_Init+0x1dc>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d111      	bne.n	8001640 <HAL_I2C_Init+0x168>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1e58      	subs	r0, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6859      	ldr	r1, [r3, #4]
 8001624:	460b      	mov	r3, r1
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	440b      	add	r3, r1
 800162a:	fbb0 f3f3 	udiv	r3, r0, r3
 800162e:	3301      	adds	r3, #1
 8001630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf0c      	ite	eq
 8001638:	2301      	moveq	r3, #1
 800163a:	2300      	movne	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	e012      	b.n	8001666 <HAL_I2C_Init+0x18e>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1e58      	subs	r0, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6859      	ldr	r1, [r3, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	0099      	lsls	r1, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	fbb0 f3f3 	udiv	r3, r0, r3
 8001656:	3301      	adds	r3, #1
 8001658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf0c      	ite	eq
 8001660:	2301      	moveq	r3, #1
 8001662:	2300      	movne	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_I2C_Init+0x196>
 800166a:	2301      	movs	r3, #1
 800166c:	e022      	b.n	80016b4 <HAL_I2C_Init+0x1dc>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10e      	bne.n	8001694 <HAL_I2C_Init+0x1bc>
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1e58      	subs	r0, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6859      	ldr	r1, [r3, #4]
 800167e:	460b      	mov	r3, r1
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	440b      	add	r3, r1
 8001684:	fbb0 f3f3 	udiv	r3, r0, r3
 8001688:	3301      	adds	r3, #1
 800168a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800168e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001692:	e00f      	b.n	80016b4 <HAL_I2C_Init+0x1dc>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	1e58      	subs	r0, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6859      	ldr	r1, [r3, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	440b      	add	r3, r1
 80016a2:	0099      	lsls	r1, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016aa:	3301      	adds	r3, #1
 80016ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	6809      	ldr	r1, [r1, #0]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69da      	ldr	r2, [r3, #28]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6911      	ldr	r1, [r2, #16]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68d2      	ldr	r2, [r2, #12]
 80016ee:	4311      	orrs	r1, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	430b      	orrs	r3, r1
 80016f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0201 	orr.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2220      	movs	r2, #32
 800172e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	000186a0 	.word	0x000186a0
 8001750:	001e847f 	.word	0x001e847f
 8001754:	003d08ff 	.word	0x003d08ff
 8001758:	431bde83 	.word	0x431bde83
 800175c:	10624dd3 	.word	0x10624dd3

08001760 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af02      	add	r7, sp, #8
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	461a      	mov	r2, r3
 800176c:	460b      	mov	r3, r1
 800176e:	817b      	strh	r3, [r7, #10]
 8001770:	4613      	mov	r3, r2
 8001772:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff fbe4 	bl	8000f40 <HAL_GetTick>
 8001778:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b20      	cmp	r3, #32
 8001784:	f040 80e0 	bne.w	8001948 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	2319      	movs	r3, #25
 800178e:	2201      	movs	r2, #1
 8001790:	4970      	ldr	r1, [pc, #448]	; (8001954 <HAL_I2C_Master_Transmit+0x1f4>)
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 fa92 	bl	8001cbc <I2C_WaitOnFlagUntilTimeout>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800179e:	2302      	movs	r3, #2
 80017a0:	e0d3      	b.n	800194a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d101      	bne.n	80017b0 <HAL_I2C_Master_Transmit+0x50>
 80017ac:	2302      	movs	r3, #2
 80017ae:	e0cc      	b.n	800194a <HAL_I2C_Master_Transmit+0x1ea>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d007      	beq.n	80017d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 0201 	orr.w	r2, r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2221      	movs	r2, #33	; 0x21
 80017ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2210      	movs	r2, #16
 80017f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2200      	movs	r2, #0
 80017fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	893a      	ldrh	r2, [r7, #8]
 8001806:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180c:	b29a      	uxth	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4a50      	ldr	r2, [pc, #320]	; (8001958 <HAL_I2C_Master_Transmit+0x1f8>)
 8001816:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001818:	8979      	ldrh	r1, [r7, #10]
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	6a3a      	ldr	r2, [r7, #32]
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 f9ca 	bl	8001bb8 <I2C_MasterRequestWrite>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e08d      	b.n	800194a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001844:	e066      	b.n	8001914 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	6a39      	ldr	r1, [r7, #32]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 fb50 	bl	8001ef0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00d      	beq.n	8001872 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	2b04      	cmp	r3, #4
 800185c:	d107      	bne.n	800186e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800186c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e06b      	b.n	800194a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	781a      	ldrb	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188c:	b29b      	uxth	r3, r3
 800188e:	3b01      	subs	r3, #1
 8001890:	b29a      	uxth	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189a:	3b01      	subs	r3, #1
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d11b      	bne.n	80018e8 <HAL_I2C_Master_Transmit+0x188>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d017      	beq.n	80018e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	781a      	ldrb	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	3b01      	subs	r3, #1
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e0:	3b01      	subs	r3, #1
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	6a39      	ldr	r1, [r7, #32]
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 fb47 	bl	8001f80 <I2C_WaitOnBTFFlagUntilTimeout>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00d      	beq.n	8001914 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d107      	bne.n	8001910 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800190e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e01a      	b.n	800194a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001918:	2b00      	cmp	r3, #0
 800191a:	d194      	bne.n	8001846 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2220      	movs	r2, #32
 8001930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	e000      	b.n	800194a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001948:	2302      	movs	r3, #2
  }
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	00100002 	.word	0x00100002
 8001958:	ffff0000 	.word	0xffff0000

0800195c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af02      	add	r7, sp, #8
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	460b      	mov	r3, r1
 800196a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff fae8 	bl	8000f40 <HAL_GetTick>
 8001970:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b20      	cmp	r3, #32
 8001980:	f040 8111 	bne.w	8001ba6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2319      	movs	r3, #25
 800198a:	2201      	movs	r2, #1
 800198c:	4988      	ldr	r1, [pc, #544]	; (8001bb0 <HAL_I2C_IsDeviceReady+0x254>)
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 f994 	bl	8001cbc <I2C_WaitOnFlagUntilTimeout>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800199a:	2302      	movs	r3, #2
 800199c:	e104      	b.n	8001ba8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_I2C_IsDeviceReady+0x50>
 80019a8:	2302      	movs	r3, #2
 80019aa:	e0fd      	b.n	8001ba8 <HAL_I2C_IsDeviceReady+0x24c>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d007      	beq.n	80019d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f042 0201 	orr.w	r2, r2, #1
 80019d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2224      	movs	r2, #36	; 0x24
 80019e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2200      	movs	r2, #0
 80019ee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4a70      	ldr	r2, [pc, #448]	; (8001bb4 <HAL_I2C_IsDeviceReady+0x258>)
 80019f4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a04:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 f952 	bl	8001cbc <I2C_WaitOnFlagUntilTimeout>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00d      	beq.n	8001a3a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a2c:	d103      	bne.n	8001a36 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e0b6      	b.n	8001ba8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a3a:	897b      	ldrh	r3, [r7, #10]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a48:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fa79 	bl	8000f40 <HAL_GetTick>
 8001a4e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	bf0c      	ite	eq
 8001a5e:	2301      	moveq	r3, #1
 8001a60:	2300      	movne	r3, #0
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a74:	bf0c      	ite	eq
 8001a76:	2301      	moveq	r3, #1
 8001a78:	2300      	movne	r3, #0
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001a7e:	e025      	b.n	8001acc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a80:	f7ff fa5e 	bl	8000f40 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d302      	bcc.n	8001a96 <HAL_I2C_IsDeviceReady+0x13a>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d103      	bne.n	8001a9e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	22a0      	movs	r2, #160	; 0xa0
 8001a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	bf0c      	ite	eq
 8001aac:	2301      	moveq	r3, #1
 8001aae:	2300      	movne	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac2:	bf0c      	ite	eq
 8001ac4:	2301      	moveq	r3, #1
 8001ac6:	2300      	movne	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2ba0      	cmp	r3, #160	; 0xa0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_I2C_IsDeviceReady+0x188>
 8001ad8:	7dfb      	ldrb	r3, [r7, #23]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d102      	bne.n	8001ae4 <HAL_I2C_IsDeviceReady+0x188>
 8001ade:	7dbb      	ldrb	r3, [r7, #22]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0cd      	beq.n	8001a80 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d129      	bne.n	8001b4e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b08:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	2319      	movs	r3, #25
 8001b26:	2201      	movs	r2, #1
 8001b28:	4921      	ldr	r1, [pc, #132]	; (8001bb0 <HAL_I2C_IsDeviceReady+0x254>)
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f8c6 	bl	8001cbc <I2C_WaitOnFlagUntilTimeout>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e036      	b.n	8001ba8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e02c      	b.n	8001ba8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b66:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2319      	movs	r3, #25
 8001b6e:	2201      	movs	r2, #1
 8001b70:	490f      	ldr	r1, [pc, #60]	; (8001bb0 <HAL_I2C_IsDeviceReady+0x254>)
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f000 f8a2 	bl	8001cbc <I2C_WaitOnFlagUntilTimeout>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e012      	b.n	8001ba8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	3301      	adds	r3, #1
 8001b86:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	f4ff af32 	bcc.w	80019f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2220      	movs	r2, #32
 8001b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001ba6:	2302      	movs	r3, #2
  }
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	00100002 	.word	0x00100002
 8001bb4:	ffff0000 	.word	0xffff0000

08001bb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d006      	beq.n	8001be2 <I2C_MasterRequestWrite+0x2a>
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d003      	beq.n	8001be2 <I2C_MasterRequestWrite+0x2a>
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001be0:	d108      	bne.n	8001bf4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bf0:	601a      	str	r2, [r3, #0]
 8001bf2:	e00b      	b.n	8001c0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	2b12      	cmp	r3, #18
 8001bfa:	d107      	bne.n	8001c0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 f84f 	bl	8001cbc <I2C_WaitOnFlagUntilTimeout>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00d      	beq.n	8001c40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c32:	d103      	bne.n	8001c3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e035      	b.n	8001cac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c48:	d108      	bne.n	8001c5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c4a:	897b      	ldrh	r3, [r7, #10]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461a      	mov	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c58:	611a      	str	r2, [r3, #16]
 8001c5a:	e01b      	b.n	8001c94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c5c:	897b      	ldrh	r3, [r7, #10]
 8001c5e:	11db      	asrs	r3, r3, #7
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f003 0306 	and.w	r3, r3, #6
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	f063 030f 	orn	r3, r3, #15
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	490e      	ldr	r1, [pc, #56]	; (8001cb4 <I2C_MasterRequestWrite+0xfc>)
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 f898 	bl	8001db0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e010      	b.n	8001cac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001c8a:	897b      	ldrh	r3, [r7, #10]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4907      	ldr	r1, [pc, #28]	; (8001cb8 <I2C_MasterRequestWrite+0x100>)
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 f888 	bl	8001db0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	00010008 	.word	0x00010008
 8001cb8:	00010002 	.word	0x00010002

08001cbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ccc:	e048      	b.n	8001d60 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd4:	d044      	beq.n	8001d60 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cd6:	f7ff f933 	bl	8000f40 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d302      	bcc.n	8001cec <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d139      	bne.n	8001d60 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	0c1b      	lsrs	r3, r3, #16
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d10d      	bne.n	8001d12 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	43da      	mvns	r2, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	4013      	ands	r3, r2
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	e00c      	b.n	8001d2c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	43da      	mvns	r2, r3
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf0c      	ite	eq
 8001d24:	2301      	moveq	r3, #1
 8001d26:	2300      	movne	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d116      	bne.n	8001d60 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f043 0220 	orr.w	r2, r3, #32
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e023      	b.n	8001da8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	0c1b      	lsrs	r3, r3, #16
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d10d      	bne.n	8001d86 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	43da      	mvns	r2, r3
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	4013      	ands	r3, r2
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf0c      	ite	eq
 8001d7c:	2301      	moveq	r3, #1
 8001d7e:	2300      	movne	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	e00c      	b.n	8001da0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	43da      	mvns	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	4013      	ands	r3, r2
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	461a      	mov	r2, r3
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d093      	beq.n	8001cce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dbe:	e071      	b.n	8001ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dce:	d123      	bne.n	8001e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dde:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001de8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2220      	movs	r2, #32
 8001df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	f043 0204 	orr.w	r2, r3, #4
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e067      	b.n	8001ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1e:	d041      	beq.n	8001ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e20:	f7ff f88e 	bl	8000f40 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d302      	bcc.n	8001e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d136      	bne.n	8001ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	0c1b      	lsrs	r3, r3, #16
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d10c      	bne.n	8001e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf14      	ite	ne
 8001e52:	2301      	movne	r3, #1
 8001e54:	2300      	moveq	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	e00b      	b.n	8001e72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	43da      	mvns	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	4013      	ands	r3, r2
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf14      	ite	ne
 8001e6c:	2301      	movne	r3, #1
 8001e6e:	2300      	moveq	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d016      	beq.n	8001ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	f043 0220 	orr.w	r2, r3, #32
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e021      	b.n	8001ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	0c1b      	lsrs	r3, r3, #16
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d10c      	bne.n	8001ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf14      	ite	ne
 8001ec0:	2301      	movne	r3, #1
 8001ec2:	2300      	moveq	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	e00b      	b.n	8001ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	bf14      	ite	ne
 8001eda:	2301      	movne	r3, #1
 8001edc:	2300      	moveq	r3, #0
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f47f af6d 	bne.w	8001dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001efc:	e034      	b.n	8001f68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 f886 	bl	8002010 <I2C_IsAcknowledgeFailed>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e034      	b.n	8001f78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f14:	d028      	beq.n	8001f68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f16:	f7ff f813 	bl	8000f40 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d302      	bcc.n	8001f2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d11d      	bne.n	8001f68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f36:	2b80      	cmp	r3, #128	; 0x80
 8001f38:	d016      	beq.n	8001f68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f043 0220 	orr.w	r2, r3, #32
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e007      	b.n	8001f78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f72:	2b80      	cmp	r3, #128	; 0x80
 8001f74:	d1c3      	bne.n	8001efe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f8c:	e034      	b.n	8001ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 f83e 	bl	8002010 <I2C_IsAcknowledgeFailed>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e034      	b.n	8002008 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d028      	beq.n	8001ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa6:	f7fe ffcb 	bl	8000f40 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d302      	bcc.n	8001fbc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d11d      	bne.n	8001ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d016      	beq.n	8001ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	f043 0220 	orr.w	r2, r3, #32
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e007      	b.n	8002008 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b04      	cmp	r3, #4
 8002004:	d1c3      	bne.n	8001f8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002026:	d11b      	bne.n	8002060 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002030:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204c:	f043 0204 	orr.w	r2, r3, #4
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e267      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d075      	beq.n	800217a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800208e:	4b88      	ldr	r3, [pc, #544]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b04      	cmp	r3, #4
 8002098:	d00c      	beq.n	80020b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800209a:	4b85      	ldr	r3, [pc, #532]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d112      	bne.n	80020cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020a6:	4b82      	ldr	r3, [pc, #520]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020b2:	d10b      	bne.n	80020cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	4b7e      	ldr	r3, [pc, #504]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d05b      	beq.n	8002178 <HAL_RCC_OscConfig+0x108>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d157      	bne.n	8002178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e242      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d4:	d106      	bne.n	80020e4 <HAL_RCC_OscConfig+0x74>
 80020d6:	4b76      	ldr	r3, [pc, #472]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a75      	ldr	r2, [pc, #468]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e01d      	b.n	8002120 <HAL_RCC_OscConfig+0xb0>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x98>
 80020ee:	4b70      	ldr	r3, [pc, #448]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a6f      	ldr	r2, [pc, #444]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b6d      	ldr	r3, [pc, #436]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a6c      	ldr	r2, [pc, #432]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e00b      	b.n	8002120 <HAL_RCC_OscConfig+0xb0>
 8002108:	4b69      	ldr	r3, [pc, #420]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a68      	ldr	r2, [pc, #416]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 800210e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	4b66      	ldr	r3, [pc, #408]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a65      	ldr	r2, [pc, #404]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 800211a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d013      	beq.n	8002150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7fe ff0a 	bl	8000f40 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002130:	f7fe ff06 	bl	8000f40 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	; 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e207      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002142:	4b5b      	ldr	r3, [pc, #364]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0xc0>
 800214e:	e014      	b.n	800217a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7fe fef6 	bl	8000f40 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002158:	f7fe fef2 	bl	8000f40 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	; 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e1f3      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216a:	4b51      	ldr	r3, [pc, #324]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0xe8>
 8002176:	e000      	b.n	800217a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d063      	beq.n	800224e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002186:	4b4a      	ldr	r3, [pc, #296]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00b      	beq.n	80021aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800219a:	2b08      	cmp	r3, #8
 800219c:	d11c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800219e:	4b44      	ldr	r3, [pc, #272]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d116      	bne.n	80021d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_RCC_OscConfig+0x152>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e1c7      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c2:	4b3b      	ldr	r3, [pc, #236]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4937      	ldr	r1, [pc, #220]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d6:	e03a      	b.n	800224e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d020      	beq.n	8002222 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e0:	4b34      	ldr	r3, [pc, #208]	; (80022b4 <HAL_RCC_OscConfig+0x244>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7fe feab 	bl	8000f40 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ee:	f7fe fea7 	bl	8000f40 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e1a8      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002200:	4b2b      	ldr	r3, [pc, #172]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220c:	4b28      	ldr	r3, [pc, #160]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	4925      	ldr	r1, [pc, #148]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 800221c:	4313      	orrs	r3, r2
 800221e:	600b      	str	r3, [r1, #0]
 8002220:	e015      	b.n	800224e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002222:	4b24      	ldr	r3, [pc, #144]	; (80022b4 <HAL_RCC_OscConfig+0x244>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe fe8a 	bl	8000f40 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002230:	f7fe fe86 	bl	8000f40 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e187      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002242:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d036      	beq.n	80022c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d016      	beq.n	8002290 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <HAL_RCC_OscConfig+0x248>)
 8002264:	2201      	movs	r2, #1
 8002266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002268:	f7fe fe6a 	bl	8000f40 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226e:	e008      	b.n	8002282 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002270:	f7fe fe66 	bl	8000f40 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e167      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_OscConfig+0x240>)
 8002284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0f0      	beq.n	8002270 <HAL_RCC_OscConfig+0x200>
 800228e:	e01b      	b.n	80022c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <HAL_RCC_OscConfig+0x248>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002296:	f7fe fe53 	bl	8000f40 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229c:	e00e      	b.n	80022bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229e:	f7fe fe4f 	bl	8000f40 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d907      	bls.n	80022bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e150      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
 80022b0:	40023800 	.word	0x40023800
 80022b4:	42470000 	.word	0x42470000
 80022b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022bc:	4b88      	ldr	r3, [pc, #544]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 80022be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1ea      	bne.n	800229e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8097 	beq.w	8002404 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022da:	4b81      	ldr	r3, [pc, #516]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10f      	bne.n	8002306 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	4b7d      	ldr	r3, [pc, #500]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	4a7c      	ldr	r2, [pc, #496]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 80022f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f4:	6413      	str	r3, [r2, #64]	; 0x40
 80022f6:	4b7a      	ldr	r3, [pc, #488]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002302:	2301      	movs	r3, #1
 8002304:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002306:	4b77      	ldr	r3, [pc, #476]	; (80024e4 <HAL_RCC_OscConfig+0x474>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d118      	bne.n	8002344 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002312:	4b74      	ldr	r3, [pc, #464]	; (80024e4 <HAL_RCC_OscConfig+0x474>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a73      	ldr	r2, [pc, #460]	; (80024e4 <HAL_RCC_OscConfig+0x474>)
 8002318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231e:	f7fe fe0f 	bl	8000f40 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002326:	f7fe fe0b 	bl	8000f40 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e10c      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <HAL_RCC_OscConfig+0x474>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d106      	bne.n	800235a <HAL_RCC_OscConfig+0x2ea>
 800234c:	4b64      	ldr	r3, [pc, #400]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 800234e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002350:	4a63      	ldr	r2, [pc, #396]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	6713      	str	r3, [r2, #112]	; 0x70
 8002358:	e01c      	b.n	8002394 <HAL_RCC_OscConfig+0x324>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	2b05      	cmp	r3, #5
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x30c>
 8002362:	4b5f      	ldr	r3, [pc, #380]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002366:	4a5e      	ldr	r2, [pc, #376]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002368:	f043 0304 	orr.w	r3, r3, #4
 800236c:	6713      	str	r3, [r2, #112]	; 0x70
 800236e:	4b5c      	ldr	r3, [pc, #368]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002372:	4a5b      	ldr	r2, [pc, #364]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002374:	f043 0301 	orr.w	r3, r3, #1
 8002378:	6713      	str	r3, [r2, #112]	; 0x70
 800237a:	e00b      	b.n	8002394 <HAL_RCC_OscConfig+0x324>
 800237c:	4b58      	ldr	r3, [pc, #352]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 800237e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002380:	4a57      	ldr	r2, [pc, #348]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	6713      	str	r3, [r2, #112]	; 0x70
 8002388:	4b55      	ldr	r3, [pc, #340]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	4a54      	ldr	r2, [pc, #336]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 800238e:	f023 0304 	bic.w	r3, r3, #4
 8002392:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d015      	beq.n	80023c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239c:	f7fe fdd0 	bl	8000f40 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a4:	f7fe fdcc 	bl	8000f40 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e0cb      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ba:	4b49      	ldr	r3, [pc, #292]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 80023bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0ee      	beq.n	80023a4 <HAL_RCC_OscConfig+0x334>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c8:	f7fe fdba 	bl	8000f40 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ce:	e00a      	b.n	80023e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023d0:	f7fe fdb6 	bl	8000f40 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	f241 3288 	movw	r2, #5000	; 0x1388
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e0b5      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e6:	4b3e      	ldr	r3, [pc, #248]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1ee      	bne.n	80023d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023f2:	7dfb      	ldrb	r3, [r7, #23]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d105      	bne.n	8002404 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f8:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	4a38      	ldr	r2, [pc, #224]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 80023fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002402:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80a1 	beq.w	8002550 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800240e:	4b34      	ldr	r3, [pc, #208]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b08      	cmp	r3, #8
 8002418:	d05c      	beq.n	80024d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d141      	bne.n	80024a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002422:	4b31      	ldr	r3, [pc, #196]	; (80024e8 <HAL_RCC_OscConfig+0x478>)
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7fe fd8a 	bl	8000f40 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002430:	f7fe fd86 	bl	8000f40 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e087      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002442:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f0      	bne.n	8002430 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69da      	ldr	r2, [r3, #28]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	019b      	lsls	r3, r3, #6
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	085b      	lsrs	r3, r3, #1
 8002466:	3b01      	subs	r3, #1
 8002468:	041b      	lsls	r3, r3, #16
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	061b      	lsls	r3, r3, #24
 8002472:	491b      	ldr	r1, [pc, #108]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002478:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_RCC_OscConfig+0x478>)
 800247a:	2201      	movs	r2, #1
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7fe fd5f 	bl	8000f40 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002486:	f7fe fd5b 	bl	8000f40 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e05c      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002498:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x416>
 80024a4:	e054      	b.n	8002550 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <HAL_RCC_OscConfig+0x478>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7fe fd48 	bl	8000f40 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b4:	f7fe fd44 	bl	8000f40 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e045      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_RCC_OscConfig+0x470>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x444>
 80024d2:	e03d      	b.n	8002550 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d107      	bne.n	80024ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e038      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40007000 	.word	0x40007000
 80024e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024ec:	4b1b      	ldr	r3, [pc, #108]	; (800255c <HAL_RCC_OscConfig+0x4ec>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d028      	beq.n	800254c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d121      	bne.n	800254c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d11a      	bne.n	800254c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800251c:	4013      	ands	r3, r2
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002522:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002524:	4293      	cmp	r3, r2
 8002526:	d111      	bne.n	800254c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	3b01      	subs	r3, #1
 8002536:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d107      	bne.n	800254c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800

08002560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e0cc      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b68      	ldr	r3, [pc, #416]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d90c      	bls.n	800259c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b65      	ldr	r3, [pc, #404]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b63      	ldr	r3, [pc, #396]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0b8      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d020      	beq.n	80025ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b4:	4b59      	ldr	r3, [pc, #356]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	4a58      	ldr	r2, [pc, #352]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025cc:	4b53      	ldr	r3, [pc, #332]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	4a52      	ldr	r2, [pc, #328]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d8:	4b50      	ldr	r3, [pc, #320]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	494d      	ldr	r1, [pc, #308]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d044      	beq.n	8002680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d107      	bne.n	800260e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	4b47      	ldr	r3, [pc, #284]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d119      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e07f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d003      	beq.n	800261e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800261a:	2b03      	cmp	r3, #3
 800261c:	d107      	bne.n	800262e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261e:	4b3f      	ldr	r3, [pc, #252]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e06f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262e:	4b3b      	ldr	r3, [pc, #236]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e067      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800263e:	4b37      	ldr	r3, [pc, #220]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f023 0203 	bic.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4934      	ldr	r1, [pc, #208]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	4313      	orrs	r3, r2
 800264e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002650:	f7fe fc76 	bl	8000f40 <HAL_GetTick>
 8002654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	e00a      	b.n	800266e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002658:	f7fe fc72 	bl	8000f40 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	f241 3288 	movw	r2, #5000	; 0x1388
 8002666:	4293      	cmp	r3, r2
 8002668:	d901      	bls.n	800266e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e04f      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	4b2b      	ldr	r3, [pc, #172]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 020c 	and.w	r2, r3, #12
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	429a      	cmp	r2, r3
 800267e:	d1eb      	bne.n	8002658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002680:	4b25      	ldr	r3, [pc, #148]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d20c      	bcs.n	80026a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268e:	4b22      	ldr	r3, [pc, #136]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002696:	4b20      	ldr	r3, [pc, #128]	; (8002718 <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e032      	b.n	800270e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4916      	ldr	r1, [pc, #88]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	490e      	ldr	r1, [pc, #56]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026e6:	f000 f821 	bl	800272c <HAL_RCC_GetSysClockFreq>
 80026ea:	4602      	mov	r2, r0
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 030f 	and.w	r3, r3, #15
 80026f6:	490a      	ldr	r1, [pc, #40]	; (8002720 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	5ccb      	ldrb	r3, [r1, r3]
 80026fa:	fa22 f303 	lsr.w	r3, r2, r3
 80026fe:	4a09      	ldr	r2, [pc, #36]	; (8002724 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_RCC_ClockConfig+0x1c8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fbd6 	bl	8000eb8 <HAL_InitTick>

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023c00 	.word	0x40023c00
 800271c:	40023800 	.word	0x40023800
 8002720:	08004534 	.word	0x08004534
 8002724:	20000000 	.word	0x20000000
 8002728:	20000004 	.word	0x20000004

0800272c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800272c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002730:	b094      	sub	sp, #80	; 0x50
 8002732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002744:	4b79      	ldr	r3, [pc, #484]	; (800292c <HAL_RCC_GetSysClockFreq+0x200>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b08      	cmp	r3, #8
 800274e:	d00d      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x40>
 8002750:	2b08      	cmp	r3, #8
 8002752:	f200 80e1 	bhi.w	8002918 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0x34>
 800275a:	2b04      	cmp	r3, #4
 800275c:	d003      	beq.n	8002766 <HAL_RCC_GetSysClockFreq+0x3a>
 800275e:	e0db      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002760:	4b73      	ldr	r3, [pc, #460]	; (8002930 <HAL_RCC_GetSysClockFreq+0x204>)
 8002762:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002764:	e0db      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002766:	4b73      	ldr	r3, [pc, #460]	; (8002934 <HAL_RCC_GetSysClockFreq+0x208>)
 8002768:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800276a:	e0d8      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800276c:	4b6f      	ldr	r3, [pc, #444]	; (800292c <HAL_RCC_GetSysClockFreq+0x200>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002774:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002776:	4b6d      	ldr	r3, [pc, #436]	; (800292c <HAL_RCC_GetSysClockFreq+0x200>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d063      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002782:	4b6a      	ldr	r3, [pc, #424]	; (800292c <HAL_RCC_GetSysClockFreq+0x200>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	099b      	lsrs	r3, r3, #6
 8002788:	2200      	movs	r2, #0
 800278a:	63bb      	str	r3, [r7, #56]	; 0x38
 800278c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800278e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002794:	633b      	str	r3, [r7, #48]	; 0x30
 8002796:	2300      	movs	r3, #0
 8002798:	637b      	str	r3, [r7, #52]	; 0x34
 800279a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800279e:	4622      	mov	r2, r4
 80027a0:	462b      	mov	r3, r5
 80027a2:	f04f 0000 	mov.w	r0, #0
 80027a6:	f04f 0100 	mov.w	r1, #0
 80027aa:	0159      	lsls	r1, r3, #5
 80027ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b0:	0150      	lsls	r0, r2, #5
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4621      	mov	r1, r4
 80027b8:	1a51      	subs	r1, r2, r1
 80027ba:	6139      	str	r1, [r7, #16]
 80027bc:	4629      	mov	r1, r5
 80027be:	eb63 0301 	sbc.w	r3, r3, r1
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027d0:	4659      	mov	r1, fp
 80027d2:	018b      	lsls	r3, r1, #6
 80027d4:	4651      	mov	r1, sl
 80027d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027da:	4651      	mov	r1, sl
 80027dc:	018a      	lsls	r2, r1, #6
 80027de:	4651      	mov	r1, sl
 80027e0:	ebb2 0801 	subs.w	r8, r2, r1
 80027e4:	4659      	mov	r1, fp
 80027e6:	eb63 0901 	sbc.w	r9, r3, r1
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027fe:	4690      	mov	r8, r2
 8002800:	4699      	mov	r9, r3
 8002802:	4623      	mov	r3, r4
 8002804:	eb18 0303 	adds.w	r3, r8, r3
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	462b      	mov	r3, r5
 800280c:	eb49 0303 	adc.w	r3, r9, r3
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800281e:	4629      	mov	r1, r5
 8002820:	024b      	lsls	r3, r1, #9
 8002822:	4621      	mov	r1, r4
 8002824:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002828:	4621      	mov	r1, r4
 800282a:	024a      	lsls	r2, r1, #9
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002832:	2200      	movs	r2, #0
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
 8002836:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002838:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800283c:	f7fd fd20 	bl	8000280 <__aeabi_uldivmod>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4613      	mov	r3, r2
 8002846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002848:	e058      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284a:	4b38      	ldr	r3, [pc, #224]	; (800292c <HAL_RCC_GetSysClockFreq+0x200>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	099b      	lsrs	r3, r3, #6
 8002850:	2200      	movs	r2, #0
 8002852:	4618      	mov	r0, r3
 8002854:	4611      	mov	r1, r2
 8002856:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800285a:	623b      	str	r3, [r7, #32]
 800285c:	2300      	movs	r3, #0
 800285e:	627b      	str	r3, [r7, #36]	; 0x24
 8002860:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002864:	4642      	mov	r2, r8
 8002866:	464b      	mov	r3, r9
 8002868:	f04f 0000 	mov.w	r0, #0
 800286c:	f04f 0100 	mov.w	r1, #0
 8002870:	0159      	lsls	r1, r3, #5
 8002872:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002876:	0150      	lsls	r0, r2, #5
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4641      	mov	r1, r8
 800287e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002882:	4649      	mov	r1, r9
 8002884:	eb63 0b01 	sbc.w	fp, r3, r1
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002894:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002898:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800289c:	ebb2 040a 	subs.w	r4, r2, sl
 80028a0:	eb63 050b 	sbc.w	r5, r3, fp
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	00eb      	lsls	r3, r5, #3
 80028ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028b2:	00e2      	lsls	r2, r4, #3
 80028b4:	4614      	mov	r4, r2
 80028b6:	461d      	mov	r5, r3
 80028b8:	4643      	mov	r3, r8
 80028ba:	18e3      	adds	r3, r4, r3
 80028bc:	603b      	str	r3, [r7, #0]
 80028be:	464b      	mov	r3, r9
 80028c0:	eb45 0303 	adc.w	r3, r5, r3
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028d2:	4629      	mov	r1, r5
 80028d4:	028b      	lsls	r3, r1, #10
 80028d6:	4621      	mov	r1, r4
 80028d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028dc:	4621      	mov	r1, r4
 80028de:	028a      	lsls	r2, r1, #10
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028e6:	2200      	movs	r2, #0
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	61fa      	str	r2, [r7, #28]
 80028ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028f0:	f7fd fcc6 	bl	8000280 <__aeabi_uldivmod>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4613      	mov	r3, r2
 80028fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <HAL_RCC_GetSysClockFreq+0x200>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	3301      	adds	r3, #1
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800290c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800290e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002916:	e002      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_RCC_GetSysClockFreq+0x204>)
 800291a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800291c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800291e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002920:	4618      	mov	r0, r3
 8002922:	3750      	adds	r7, #80	; 0x50
 8002924:	46bd      	mov	sp, r7
 8002926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	00f42400 	.word	0x00f42400
 8002934:	007a1200 	.word	0x007a1200

08002938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800293c:	4b03      	ldr	r3, [pc, #12]	; (800294c <HAL_RCC_GetHCLKFreq+0x14>)
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	20000000 	.word	0x20000000

08002950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002954:	f7ff fff0 	bl	8002938 <HAL_RCC_GetHCLKFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b05      	ldr	r3, [pc, #20]	; (8002970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	0a9b      	lsrs	r3, r3, #10
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	4903      	ldr	r1, [pc, #12]	; (8002974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800296c:	4618      	mov	r0, r3
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40023800 	.word	0x40023800
 8002974:	08004544 	.word	0x08004544

08002978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800297c:	f7ff ffdc 	bl	8002938 <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	0b5b      	lsrs	r3, r3, #13
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4903      	ldr	r1, [pc, #12]	; (800299c <HAL_RCC_GetPCLK2Freq+0x24>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	08004544 	.word	0x08004544

080029a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e042      	b.n	8002a38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe f902 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2224      	movs	r2, #36	; 0x24
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f973 	bl	8002cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695a      	ldr	r2, [r3, #20]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68da      	ldr	r2, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	; 0x28
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d175      	bne.n	8002b4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_UART_Transmit+0x2c>
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e06e      	b.n	8002b4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2221      	movs	r2, #33	; 0x21
 8002a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a7e:	f7fe fa5f 	bl	8000f40 <HAL_GetTick>
 8002a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	88fa      	ldrh	r2, [r7, #6]
 8002a88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	88fa      	ldrh	r2, [r7, #6]
 8002a8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a98:	d108      	bne.n	8002aac <HAL_UART_Transmit+0x6c>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d104      	bne.n	8002aac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	61bb      	str	r3, [r7, #24]
 8002aaa:	e003      	b.n	8002ab4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ab4:	e02e      	b.n	8002b14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2200      	movs	r2, #0
 8002abe:	2180      	movs	r1, #128	; 0x80
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f848 	bl	8002b56 <UART_WaitOnFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e03a      	b.n	8002b4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10b      	bne.n	8002af6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	881b      	ldrh	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	3302      	adds	r3, #2
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	e007      	b.n	8002b06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	781a      	ldrb	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	3301      	adds	r3, #1
 8002b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1cb      	bne.n	8002ab6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2200      	movs	r2, #0
 8002b26:	2140      	movs	r1, #64	; 0x40
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f814 	bl	8002b56 <UART_WaitOnFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2220      	movs	r2, #32
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e006      	b.n	8002b4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e000      	b.n	8002b4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002b4c:	2302      	movs	r3, #2
  }
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b086      	sub	sp, #24
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	4613      	mov	r3, r2
 8002b64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b66:	e03b      	b.n	8002be0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6e:	d037      	beq.n	8002be0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b70:	f7fe f9e6 	bl	8000f40 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	6a3a      	ldr	r2, [r7, #32]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d302      	bcc.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e03a      	b.n	8002c00 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d023      	beq.n	8002be0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b80      	cmp	r3, #128	; 0x80
 8002b9c:	d020      	beq.n	8002be0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b40      	cmp	r3, #64	; 0x40
 8002ba2:	d01d      	beq.n	8002be0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d116      	bne.n	8002be0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f81d 	bl	8002c08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e00f      	b.n	8002c00 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	4013      	ands	r3, r2
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d0b4      	beq.n	8002b68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b095      	sub	sp, #84	; 0x54
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	330c      	adds	r3, #12
 8002c16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1a:	e853 3f00 	ldrex	r3, [r3]
 8002c1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c30:	643a      	str	r2, [r7, #64]	; 0x40
 8002c32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c38:	e841 2300 	strex	r3, r2, [r1]
 8002c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e5      	bne.n	8002c10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3314      	adds	r3, #20
 8002c4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	e853 3f00 	ldrex	r3, [r3]
 8002c52:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3314      	adds	r3, #20
 8002c62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c6c:	e841 2300 	strex	r3, r2, [r1]
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e5      	bne.n	8002c44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d119      	bne.n	8002cb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	330c      	adds	r3, #12
 8002c86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	e853 3f00 	ldrex	r3, [r3]
 8002c8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f023 0310 	bic.w	r3, r3, #16
 8002c96:	647b      	str	r3, [r7, #68]	; 0x44
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	330c      	adds	r3, #12
 8002c9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ca0:	61ba      	str	r2, [r7, #24]
 8002ca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca4:	6979      	ldr	r1, [r7, #20]
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	e841 2300 	strex	r3, r2, [r1]
 8002cac:	613b      	str	r3, [r7, #16]
   return(result);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1e5      	bne.n	8002c80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002cc2:	bf00      	nop
 8002cc4:	3754      	adds	r7, #84	; 0x54
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cd4:	b0c0      	sub	sp, #256	; 0x100
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cec:	68d9      	ldr	r1, [r3, #12]
 8002cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	ea40 0301 	orr.w	r3, r0, r1
 8002cf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	431a      	orrs	r2, r3
 8002d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d28:	f021 010c 	bic.w	r1, r1, #12
 8002d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d36:	430b      	orrs	r3, r1
 8002d38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4a:	6999      	ldr	r1, [r3, #24]
 8002d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	ea40 0301 	orr.w	r3, r0, r1
 8002d56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	4b8f      	ldr	r3, [pc, #572]	; (8002f9c <UART_SetConfig+0x2cc>)
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d005      	beq.n	8002d70 <UART_SetConfig+0xa0>
 8002d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	4b8d      	ldr	r3, [pc, #564]	; (8002fa0 <UART_SetConfig+0x2d0>)
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d104      	bne.n	8002d7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d70:	f7ff fe02 	bl	8002978 <HAL_RCC_GetPCLK2Freq>
 8002d74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d78:	e003      	b.n	8002d82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d7a:	f7ff fde9 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 8002d7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d8c:	f040 810c 	bne.w	8002fa8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d94:	2200      	movs	r2, #0
 8002d96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002da2:	4622      	mov	r2, r4
 8002da4:	462b      	mov	r3, r5
 8002da6:	1891      	adds	r1, r2, r2
 8002da8:	65b9      	str	r1, [r7, #88]	; 0x58
 8002daa:	415b      	adcs	r3, r3
 8002dac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002db2:	4621      	mov	r1, r4
 8002db4:	eb12 0801 	adds.w	r8, r2, r1
 8002db8:	4629      	mov	r1, r5
 8002dba:	eb43 0901 	adc.w	r9, r3, r1
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dd2:	4690      	mov	r8, r2
 8002dd4:	4699      	mov	r9, r3
 8002dd6:	4623      	mov	r3, r4
 8002dd8:	eb18 0303 	adds.w	r3, r8, r3
 8002ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002de0:	462b      	mov	r3, r5
 8002de2:	eb49 0303 	adc.w	r3, r9, r3
 8002de6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002df6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002dfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002dfe:	460b      	mov	r3, r1
 8002e00:	18db      	adds	r3, r3, r3
 8002e02:	653b      	str	r3, [r7, #80]	; 0x50
 8002e04:	4613      	mov	r3, r2
 8002e06:	eb42 0303 	adc.w	r3, r2, r3
 8002e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8002e0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e14:	f7fd fa34 	bl	8000280 <__aeabi_uldivmod>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <UART_SetConfig+0x2d4>)
 8002e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	011c      	lsls	r4, r3, #4
 8002e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e38:	4642      	mov	r2, r8
 8002e3a:	464b      	mov	r3, r9
 8002e3c:	1891      	adds	r1, r2, r2
 8002e3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e40:	415b      	adcs	r3, r3
 8002e42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e48:	4641      	mov	r1, r8
 8002e4a:	eb12 0a01 	adds.w	sl, r2, r1
 8002e4e:	4649      	mov	r1, r9
 8002e50:	eb43 0b01 	adc.w	fp, r3, r1
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e68:	4692      	mov	sl, r2
 8002e6a:	469b      	mov	fp, r3
 8002e6c:	4643      	mov	r3, r8
 8002e6e:	eb1a 0303 	adds.w	r3, sl, r3
 8002e72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e76:	464b      	mov	r3, r9
 8002e78:	eb4b 0303 	adc.w	r3, fp, r3
 8002e7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e94:	460b      	mov	r3, r1
 8002e96:	18db      	adds	r3, r3, r3
 8002e98:	643b      	str	r3, [r7, #64]	; 0x40
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ea2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ea6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002eaa:	f7fd f9e9 	bl	8000280 <__aeabi_uldivmod>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4b3b      	ldr	r3, [pc, #236]	; (8002fa4 <UART_SetConfig+0x2d4>)
 8002eb6:	fba3 2301 	umull	r2, r3, r3, r1
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	2264      	movs	r2, #100	; 0x64
 8002ebe:	fb02 f303 	mul.w	r3, r2, r3
 8002ec2:	1acb      	subs	r3, r1, r3
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002eca:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <UART_SetConfig+0x2d4>)
 8002ecc:	fba3 2302 	umull	r2, r3, r3, r2
 8002ed0:	095b      	lsrs	r3, r3, #5
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ed8:	441c      	add	r4, r3
 8002eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ee4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ee8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002eec:	4642      	mov	r2, r8
 8002eee:	464b      	mov	r3, r9
 8002ef0:	1891      	adds	r1, r2, r2
 8002ef2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ef4:	415b      	adcs	r3, r3
 8002ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ef8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002efc:	4641      	mov	r1, r8
 8002efe:	1851      	adds	r1, r2, r1
 8002f00:	6339      	str	r1, [r7, #48]	; 0x30
 8002f02:	4649      	mov	r1, r9
 8002f04:	414b      	adcs	r3, r1
 8002f06:	637b      	str	r3, [r7, #52]	; 0x34
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f14:	4659      	mov	r1, fp
 8002f16:	00cb      	lsls	r3, r1, #3
 8002f18:	4651      	mov	r1, sl
 8002f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f1e:	4651      	mov	r1, sl
 8002f20:	00ca      	lsls	r2, r1, #3
 8002f22:	4610      	mov	r0, r2
 8002f24:	4619      	mov	r1, r3
 8002f26:	4603      	mov	r3, r0
 8002f28:	4642      	mov	r2, r8
 8002f2a:	189b      	adds	r3, r3, r2
 8002f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f30:	464b      	mov	r3, r9
 8002f32:	460a      	mov	r2, r1
 8002f34:	eb42 0303 	adc.w	r3, r2, r3
 8002f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f50:	460b      	mov	r3, r1
 8002f52:	18db      	adds	r3, r3, r3
 8002f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f56:	4613      	mov	r3, r2
 8002f58:	eb42 0303 	adc.w	r3, r2, r3
 8002f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f66:	f7fd f98b 	bl	8000280 <__aeabi_uldivmod>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <UART_SetConfig+0x2d4>)
 8002f70:	fba3 1302 	umull	r1, r3, r3, r2
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	2164      	movs	r1, #100	; 0x64
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	3332      	adds	r3, #50	; 0x32
 8002f82:	4a08      	ldr	r2, [pc, #32]	; (8002fa4 <UART_SetConfig+0x2d4>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	095b      	lsrs	r3, r3, #5
 8002f8a:	f003 0207 	and.w	r2, r3, #7
 8002f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4422      	add	r2, r4
 8002f96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f98:	e106      	b.n	80031a8 <UART_SetConfig+0x4d8>
 8002f9a:	bf00      	nop
 8002f9c:	40011000 	.word	0x40011000
 8002fa0:	40011400 	.word	0x40011400
 8002fa4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fac:	2200      	movs	r2, #0
 8002fae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002fb2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002fb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002fba:	4642      	mov	r2, r8
 8002fbc:	464b      	mov	r3, r9
 8002fbe:	1891      	adds	r1, r2, r2
 8002fc0:	6239      	str	r1, [r7, #32]
 8002fc2:	415b      	adcs	r3, r3
 8002fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fca:	4641      	mov	r1, r8
 8002fcc:	1854      	adds	r4, r2, r1
 8002fce:	4649      	mov	r1, r9
 8002fd0:	eb43 0501 	adc.w	r5, r3, r1
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	00eb      	lsls	r3, r5, #3
 8002fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fe2:	00e2      	lsls	r2, r4, #3
 8002fe4:	4614      	mov	r4, r2
 8002fe6:	461d      	mov	r5, r3
 8002fe8:	4643      	mov	r3, r8
 8002fea:	18e3      	adds	r3, r4, r3
 8002fec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ff0:	464b      	mov	r3, r9
 8002ff2:	eb45 0303 	adc.w	r3, r5, r3
 8002ff6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003006:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003016:	4629      	mov	r1, r5
 8003018:	008b      	lsls	r3, r1, #2
 800301a:	4621      	mov	r1, r4
 800301c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003020:	4621      	mov	r1, r4
 8003022:	008a      	lsls	r2, r1, #2
 8003024:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003028:	f7fd f92a 	bl	8000280 <__aeabi_uldivmod>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4b60      	ldr	r3, [pc, #384]	; (80031b4 <UART_SetConfig+0x4e4>)
 8003032:	fba3 2302 	umull	r2, r3, r3, r2
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	011c      	lsls	r4, r3, #4
 800303a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800303e:	2200      	movs	r2, #0
 8003040:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003044:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003048:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800304c:	4642      	mov	r2, r8
 800304e:	464b      	mov	r3, r9
 8003050:	1891      	adds	r1, r2, r2
 8003052:	61b9      	str	r1, [r7, #24]
 8003054:	415b      	adcs	r3, r3
 8003056:	61fb      	str	r3, [r7, #28]
 8003058:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800305c:	4641      	mov	r1, r8
 800305e:	1851      	adds	r1, r2, r1
 8003060:	6139      	str	r1, [r7, #16]
 8003062:	4649      	mov	r1, r9
 8003064:	414b      	adcs	r3, r1
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003074:	4659      	mov	r1, fp
 8003076:	00cb      	lsls	r3, r1, #3
 8003078:	4651      	mov	r1, sl
 800307a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800307e:	4651      	mov	r1, sl
 8003080:	00ca      	lsls	r2, r1, #3
 8003082:	4610      	mov	r0, r2
 8003084:	4619      	mov	r1, r3
 8003086:	4603      	mov	r3, r0
 8003088:	4642      	mov	r2, r8
 800308a:	189b      	adds	r3, r3, r2
 800308c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003090:	464b      	mov	r3, r9
 8003092:	460a      	mov	r2, r1
 8003094:	eb42 0303 	adc.w	r3, r2, r3
 8003098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800309c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80030a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	f04f 0300 	mov.w	r3, #0
 80030b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80030b4:	4649      	mov	r1, r9
 80030b6:	008b      	lsls	r3, r1, #2
 80030b8:	4641      	mov	r1, r8
 80030ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030be:	4641      	mov	r1, r8
 80030c0:	008a      	lsls	r2, r1, #2
 80030c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80030c6:	f7fd f8db 	bl	8000280 <__aeabi_uldivmod>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4611      	mov	r1, r2
 80030d0:	4b38      	ldr	r3, [pc, #224]	; (80031b4 <UART_SetConfig+0x4e4>)
 80030d2:	fba3 2301 	umull	r2, r3, r3, r1
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	2264      	movs	r2, #100	; 0x64
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	1acb      	subs	r3, r1, r3
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	3332      	adds	r3, #50	; 0x32
 80030e4:	4a33      	ldr	r2, [pc, #204]	; (80031b4 <UART_SetConfig+0x4e4>)
 80030e6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030f0:	441c      	add	r4, r3
 80030f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030f6:	2200      	movs	r2, #0
 80030f8:	673b      	str	r3, [r7, #112]	; 0x70
 80030fa:	677a      	str	r2, [r7, #116]	; 0x74
 80030fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003100:	4642      	mov	r2, r8
 8003102:	464b      	mov	r3, r9
 8003104:	1891      	adds	r1, r2, r2
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	415b      	adcs	r3, r3
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003110:	4641      	mov	r1, r8
 8003112:	1851      	adds	r1, r2, r1
 8003114:	6039      	str	r1, [r7, #0]
 8003116:	4649      	mov	r1, r9
 8003118:	414b      	adcs	r3, r1
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003128:	4659      	mov	r1, fp
 800312a:	00cb      	lsls	r3, r1, #3
 800312c:	4651      	mov	r1, sl
 800312e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003132:	4651      	mov	r1, sl
 8003134:	00ca      	lsls	r2, r1, #3
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	4603      	mov	r3, r0
 800313c:	4642      	mov	r2, r8
 800313e:	189b      	adds	r3, r3, r2
 8003140:	66bb      	str	r3, [r7, #104]	; 0x68
 8003142:	464b      	mov	r3, r9
 8003144:	460a      	mov	r2, r1
 8003146:	eb42 0303 	adc.w	r3, r2, r3
 800314a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	663b      	str	r3, [r7, #96]	; 0x60
 8003156:	667a      	str	r2, [r7, #100]	; 0x64
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003164:	4649      	mov	r1, r9
 8003166:	008b      	lsls	r3, r1, #2
 8003168:	4641      	mov	r1, r8
 800316a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800316e:	4641      	mov	r1, r8
 8003170:	008a      	lsls	r2, r1, #2
 8003172:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003176:	f7fd f883 	bl	8000280 <__aeabi_uldivmod>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <UART_SetConfig+0x4e4>)
 8003180:	fba3 1302 	umull	r1, r3, r3, r2
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	2164      	movs	r1, #100	; 0x64
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	3332      	adds	r3, #50	; 0x32
 8003192:	4a08      	ldr	r2, [pc, #32]	; (80031b4 <UART_SetConfig+0x4e4>)
 8003194:	fba2 2303 	umull	r2, r3, r2, r3
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	f003 020f 	and.w	r2, r3, #15
 800319e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4422      	add	r2, r4
 80031a6:	609a      	str	r2, [r3, #8]
}
 80031a8:	bf00      	nop
 80031aa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80031ae:	46bd      	mov	sp, r7
 80031b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031b4:	51eb851f 	.word	0x51eb851f

080031b8 <std>:
 80031b8:	2300      	movs	r3, #0
 80031ba:	b510      	push	{r4, lr}
 80031bc:	4604      	mov	r4, r0
 80031be:	e9c0 3300 	strd	r3, r3, [r0]
 80031c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031c6:	6083      	str	r3, [r0, #8]
 80031c8:	8181      	strh	r1, [r0, #12]
 80031ca:	6643      	str	r3, [r0, #100]	; 0x64
 80031cc:	81c2      	strh	r2, [r0, #14]
 80031ce:	6183      	str	r3, [r0, #24]
 80031d0:	4619      	mov	r1, r3
 80031d2:	2208      	movs	r2, #8
 80031d4:	305c      	adds	r0, #92	; 0x5c
 80031d6:	f000 fa17 	bl	8003608 <memset>
 80031da:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <std+0x58>)
 80031dc:	6263      	str	r3, [r4, #36]	; 0x24
 80031de:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <std+0x5c>)
 80031e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80031e2:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <std+0x60>)
 80031e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031e6:	4b0d      	ldr	r3, [pc, #52]	; (800321c <std+0x64>)
 80031e8:	6323      	str	r3, [r4, #48]	; 0x30
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <std+0x68>)
 80031ec:	6224      	str	r4, [r4, #32]
 80031ee:	429c      	cmp	r4, r3
 80031f0:	d006      	beq.n	8003200 <std+0x48>
 80031f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80031f6:	4294      	cmp	r4, r2
 80031f8:	d002      	beq.n	8003200 <std+0x48>
 80031fa:	33d0      	adds	r3, #208	; 0xd0
 80031fc:	429c      	cmp	r4, r3
 80031fe:	d105      	bne.n	800320c <std+0x54>
 8003200:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003208:	f000 ba76 	b.w	80036f8 <__retarget_lock_init_recursive>
 800320c:	bd10      	pop	{r4, pc}
 800320e:	bf00      	nop
 8003210:	08003459 	.word	0x08003459
 8003214:	0800347b 	.word	0x0800347b
 8003218:	080034b3 	.word	0x080034b3
 800321c:	080034d7 	.word	0x080034d7
 8003220:	2000012c 	.word	0x2000012c

08003224 <stdio_exit_handler>:
 8003224:	4a02      	ldr	r2, [pc, #8]	; (8003230 <stdio_exit_handler+0xc>)
 8003226:	4903      	ldr	r1, [pc, #12]	; (8003234 <stdio_exit_handler+0x10>)
 8003228:	4803      	ldr	r0, [pc, #12]	; (8003238 <stdio_exit_handler+0x14>)
 800322a:	f000 b869 	b.w	8003300 <_fwalk_sglue>
 800322e:	bf00      	nop
 8003230:	2000000c 	.word	0x2000000c
 8003234:	08004255 	.word	0x08004255
 8003238:	20000018 	.word	0x20000018

0800323c <cleanup_stdio>:
 800323c:	6841      	ldr	r1, [r0, #4]
 800323e:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <cleanup_stdio+0x34>)
 8003240:	4299      	cmp	r1, r3
 8003242:	b510      	push	{r4, lr}
 8003244:	4604      	mov	r4, r0
 8003246:	d001      	beq.n	800324c <cleanup_stdio+0x10>
 8003248:	f001 f804 	bl	8004254 <_fflush_r>
 800324c:	68a1      	ldr	r1, [r4, #8]
 800324e:	4b09      	ldr	r3, [pc, #36]	; (8003274 <cleanup_stdio+0x38>)
 8003250:	4299      	cmp	r1, r3
 8003252:	d002      	beq.n	800325a <cleanup_stdio+0x1e>
 8003254:	4620      	mov	r0, r4
 8003256:	f000 fffd 	bl	8004254 <_fflush_r>
 800325a:	68e1      	ldr	r1, [r4, #12]
 800325c:	4b06      	ldr	r3, [pc, #24]	; (8003278 <cleanup_stdio+0x3c>)
 800325e:	4299      	cmp	r1, r3
 8003260:	d004      	beq.n	800326c <cleanup_stdio+0x30>
 8003262:	4620      	mov	r0, r4
 8003264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003268:	f000 bff4 	b.w	8004254 <_fflush_r>
 800326c:	bd10      	pop	{r4, pc}
 800326e:	bf00      	nop
 8003270:	2000012c 	.word	0x2000012c
 8003274:	20000194 	.word	0x20000194
 8003278:	200001fc 	.word	0x200001fc

0800327c <global_stdio_init.part.0>:
 800327c:	b510      	push	{r4, lr}
 800327e:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <global_stdio_init.part.0+0x30>)
 8003280:	4c0b      	ldr	r4, [pc, #44]	; (80032b0 <global_stdio_init.part.0+0x34>)
 8003282:	4a0c      	ldr	r2, [pc, #48]	; (80032b4 <global_stdio_init.part.0+0x38>)
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	4620      	mov	r0, r4
 8003288:	2200      	movs	r2, #0
 800328a:	2104      	movs	r1, #4
 800328c:	f7ff ff94 	bl	80031b8 <std>
 8003290:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003294:	2201      	movs	r2, #1
 8003296:	2109      	movs	r1, #9
 8003298:	f7ff ff8e 	bl	80031b8 <std>
 800329c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80032a0:	2202      	movs	r2, #2
 80032a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032a6:	2112      	movs	r1, #18
 80032a8:	f7ff bf86 	b.w	80031b8 <std>
 80032ac:	20000264 	.word	0x20000264
 80032b0:	2000012c 	.word	0x2000012c
 80032b4:	08003225 	.word	0x08003225

080032b8 <__sfp_lock_acquire>:
 80032b8:	4801      	ldr	r0, [pc, #4]	; (80032c0 <__sfp_lock_acquire+0x8>)
 80032ba:	f000 ba1e 	b.w	80036fa <__retarget_lock_acquire_recursive>
 80032be:	bf00      	nop
 80032c0:	2000026d 	.word	0x2000026d

080032c4 <__sfp_lock_release>:
 80032c4:	4801      	ldr	r0, [pc, #4]	; (80032cc <__sfp_lock_release+0x8>)
 80032c6:	f000 ba19 	b.w	80036fc <__retarget_lock_release_recursive>
 80032ca:	bf00      	nop
 80032cc:	2000026d 	.word	0x2000026d

080032d0 <__sinit>:
 80032d0:	b510      	push	{r4, lr}
 80032d2:	4604      	mov	r4, r0
 80032d4:	f7ff fff0 	bl	80032b8 <__sfp_lock_acquire>
 80032d8:	6a23      	ldr	r3, [r4, #32]
 80032da:	b11b      	cbz	r3, 80032e4 <__sinit+0x14>
 80032dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032e0:	f7ff bff0 	b.w	80032c4 <__sfp_lock_release>
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <__sinit+0x28>)
 80032e6:	6223      	str	r3, [r4, #32]
 80032e8:	4b04      	ldr	r3, [pc, #16]	; (80032fc <__sinit+0x2c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f5      	bne.n	80032dc <__sinit+0xc>
 80032f0:	f7ff ffc4 	bl	800327c <global_stdio_init.part.0>
 80032f4:	e7f2      	b.n	80032dc <__sinit+0xc>
 80032f6:	bf00      	nop
 80032f8:	0800323d 	.word	0x0800323d
 80032fc:	20000264 	.word	0x20000264

08003300 <_fwalk_sglue>:
 8003300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003304:	4607      	mov	r7, r0
 8003306:	4688      	mov	r8, r1
 8003308:	4614      	mov	r4, r2
 800330a:	2600      	movs	r6, #0
 800330c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003310:	f1b9 0901 	subs.w	r9, r9, #1
 8003314:	d505      	bpl.n	8003322 <_fwalk_sglue+0x22>
 8003316:	6824      	ldr	r4, [r4, #0]
 8003318:	2c00      	cmp	r4, #0
 800331a:	d1f7      	bne.n	800330c <_fwalk_sglue+0xc>
 800331c:	4630      	mov	r0, r6
 800331e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003322:	89ab      	ldrh	r3, [r5, #12]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d907      	bls.n	8003338 <_fwalk_sglue+0x38>
 8003328:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800332c:	3301      	adds	r3, #1
 800332e:	d003      	beq.n	8003338 <_fwalk_sglue+0x38>
 8003330:	4629      	mov	r1, r5
 8003332:	4638      	mov	r0, r7
 8003334:	47c0      	blx	r8
 8003336:	4306      	orrs	r6, r0
 8003338:	3568      	adds	r5, #104	; 0x68
 800333a:	e7e9      	b.n	8003310 <_fwalk_sglue+0x10>

0800333c <iprintf>:
 800333c:	b40f      	push	{r0, r1, r2, r3}
 800333e:	b507      	push	{r0, r1, r2, lr}
 8003340:	4906      	ldr	r1, [pc, #24]	; (800335c <iprintf+0x20>)
 8003342:	ab04      	add	r3, sp, #16
 8003344:	6808      	ldr	r0, [r1, #0]
 8003346:	f853 2b04 	ldr.w	r2, [r3], #4
 800334a:	6881      	ldr	r1, [r0, #8]
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	f000 fc51 	bl	8003bf4 <_vfiprintf_r>
 8003352:	b003      	add	sp, #12
 8003354:	f85d eb04 	ldr.w	lr, [sp], #4
 8003358:	b004      	add	sp, #16
 800335a:	4770      	bx	lr
 800335c:	20000064 	.word	0x20000064

08003360 <_puts_r>:
 8003360:	6a03      	ldr	r3, [r0, #32]
 8003362:	b570      	push	{r4, r5, r6, lr}
 8003364:	6884      	ldr	r4, [r0, #8]
 8003366:	4605      	mov	r5, r0
 8003368:	460e      	mov	r6, r1
 800336a:	b90b      	cbnz	r3, 8003370 <_puts_r+0x10>
 800336c:	f7ff ffb0 	bl	80032d0 <__sinit>
 8003370:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003372:	07db      	lsls	r3, r3, #31
 8003374:	d405      	bmi.n	8003382 <_puts_r+0x22>
 8003376:	89a3      	ldrh	r3, [r4, #12]
 8003378:	0598      	lsls	r0, r3, #22
 800337a:	d402      	bmi.n	8003382 <_puts_r+0x22>
 800337c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800337e:	f000 f9bc 	bl	80036fa <__retarget_lock_acquire_recursive>
 8003382:	89a3      	ldrh	r3, [r4, #12]
 8003384:	0719      	lsls	r1, r3, #28
 8003386:	d513      	bpl.n	80033b0 <_puts_r+0x50>
 8003388:	6923      	ldr	r3, [r4, #16]
 800338a:	b18b      	cbz	r3, 80033b0 <_puts_r+0x50>
 800338c:	3e01      	subs	r6, #1
 800338e:	68a3      	ldr	r3, [r4, #8]
 8003390:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003394:	3b01      	subs	r3, #1
 8003396:	60a3      	str	r3, [r4, #8]
 8003398:	b9e9      	cbnz	r1, 80033d6 <_puts_r+0x76>
 800339a:	2b00      	cmp	r3, #0
 800339c:	da2e      	bge.n	80033fc <_puts_r+0x9c>
 800339e:	4622      	mov	r2, r4
 80033a0:	210a      	movs	r1, #10
 80033a2:	4628      	mov	r0, r5
 80033a4:	f000 f89b 	bl	80034de <__swbuf_r>
 80033a8:	3001      	adds	r0, #1
 80033aa:	d007      	beq.n	80033bc <_puts_r+0x5c>
 80033ac:	250a      	movs	r5, #10
 80033ae:	e007      	b.n	80033c0 <_puts_r+0x60>
 80033b0:	4621      	mov	r1, r4
 80033b2:	4628      	mov	r0, r5
 80033b4:	f000 f8d0 	bl	8003558 <__swsetup_r>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	d0e7      	beq.n	800338c <_puts_r+0x2c>
 80033bc:	f04f 35ff 	mov.w	r5, #4294967295
 80033c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033c2:	07da      	lsls	r2, r3, #31
 80033c4:	d405      	bmi.n	80033d2 <_puts_r+0x72>
 80033c6:	89a3      	ldrh	r3, [r4, #12]
 80033c8:	059b      	lsls	r3, r3, #22
 80033ca:	d402      	bmi.n	80033d2 <_puts_r+0x72>
 80033cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033ce:	f000 f995 	bl	80036fc <__retarget_lock_release_recursive>
 80033d2:	4628      	mov	r0, r5
 80033d4:	bd70      	pop	{r4, r5, r6, pc}
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	da04      	bge.n	80033e4 <_puts_r+0x84>
 80033da:	69a2      	ldr	r2, [r4, #24]
 80033dc:	429a      	cmp	r2, r3
 80033de:	dc06      	bgt.n	80033ee <_puts_r+0x8e>
 80033e0:	290a      	cmp	r1, #10
 80033e2:	d004      	beq.n	80033ee <_puts_r+0x8e>
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	6022      	str	r2, [r4, #0]
 80033ea:	7019      	strb	r1, [r3, #0]
 80033ec:	e7cf      	b.n	800338e <_puts_r+0x2e>
 80033ee:	4622      	mov	r2, r4
 80033f0:	4628      	mov	r0, r5
 80033f2:	f000 f874 	bl	80034de <__swbuf_r>
 80033f6:	3001      	adds	r0, #1
 80033f8:	d1c9      	bne.n	800338e <_puts_r+0x2e>
 80033fa:	e7df      	b.n	80033bc <_puts_r+0x5c>
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	250a      	movs	r5, #10
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	6022      	str	r2, [r4, #0]
 8003404:	701d      	strb	r5, [r3, #0]
 8003406:	e7db      	b.n	80033c0 <_puts_r+0x60>

08003408 <puts>:
 8003408:	4b02      	ldr	r3, [pc, #8]	; (8003414 <puts+0xc>)
 800340a:	4601      	mov	r1, r0
 800340c:	6818      	ldr	r0, [r3, #0]
 800340e:	f7ff bfa7 	b.w	8003360 <_puts_r>
 8003412:	bf00      	nop
 8003414:	20000064 	.word	0x20000064

08003418 <siprintf>:
 8003418:	b40e      	push	{r1, r2, r3}
 800341a:	b500      	push	{lr}
 800341c:	b09c      	sub	sp, #112	; 0x70
 800341e:	ab1d      	add	r3, sp, #116	; 0x74
 8003420:	9002      	str	r0, [sp, #8]
 8003422:	9006      	str	r0, [sp, #24]
 8003424:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003428:	4809      	ldr	r0, [pc, #36]	; (8003450 <siprintf+0x38>)
 800342a:	9107      	str	r1, [sp, #28]
 800342c:	9104      	str	r1, [sp, #16]
 800342e:	4909      	ldr	r1, [pc, #36]	; (8003454 <siprintf+0x3c>)
 8003430:	f853 2b04 	ldr.w	r2, [r3], #4
 8003434:	9105      	str	r1, [sp, #20]
 8003436:	6800      	ldr	r0, [r0, #0]
 8003438:	9301      	str	r3, [sp, #4]
 800343a:	a902      	add	r1, sp, #8
 800343c:	f000 fab2 	bl	80039a4 <_svfiprintf_r>
 8003440:	9b02      	ldr	r3, [sp, #8]
 8003442:	2200      	movs	r2, #0
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	b01c      	add	sp, #112	; 0x70
 8003448:	f85d eb04 	ldr.w	lr, [sp], #4
 800344c:	b003      	add	sp, #12
 800344e:	4770      	bx	lr
 8003450:	20000064 	.word	0x20000064
 8003454:	ffff0208 	.word	0xffff0208

08003458 <__sread>:
 8003458:	b510      	push	{r4, lr}
 800345a:	460c      	mov	r4, r1
 800345c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003460:	f000 f8fc 	bl	800365c <_read_r>
 8003464:	2800      	cmp	r0, #0
 8003466:	bfab      	itete	ge
 8003468:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800346a:	89a3      	ldrhlt	r3, [r4, #12]
 800346c:	181b      	addge	r3, r3, r0
 800346e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003472:	bfac      	ite	ge
 8003474:	6563      	strge	r3, [r4, #84]	; 0x54
 8003476:	81a3      	strhlt	r3, [r4, #12]
 8003478:	bd10      	pop	{r4, pc}

0800347a <__swrite>:
 800347a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800347e:	461f      	mov	r7, r3
 8003480:	898b      	ldrh	r3, [r1, #12]
 8003482:	05db      	lsls	r3, r3, #23
 8003484:	4605      	mov	r5, r0
 8003486:	460c      	mov	r4, r1
 8003488:	4616      	mov	r6, r2
 800348a:	d505      	bpl.n	8003498 <__swrite+0x1e>
 800348c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003490:	2302      	movs	r3, #2
 8003492:	2200      	movs	r2, #0
 8003494:	f000 f8d0 	bl	8003638 <_lseek_r>
 8003498:	89a3      	ldrh	r3, [r4, #12]
 800349a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800349e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034a2:	81a3      	strh	r3, [r4, #12]
 80034a4:	4632      	mov	r2, r6
 80034a6:	463b      	mov	r3, r7
 80034a8:	4628      	mov	r0, r5
 80034aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034ae:	f000 b8e7 	b.w	8003680 <_write_r>

080034b2 <__sseek>:
 80034b2:	b510      	push	{r4, lr}
 80034b4:	460c      	mov	r4, r1
 80034b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034ba:	f000 f8bd 	bl	8003638 <_lseek_r>
 80034be:	1c43      	adds	r3, r0, #1
 80034c0:	89a3      	ldrh	r3, [r4, #12]
 80034c2:	bf15      	itete	ne
 80034c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80034c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80034ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80034ce:	81a3      	strheq	r3, [r4, #12]
 80034d0:	bf18      	it	ne
 80034d2:	81a3      	strhne	r3, [r4, #12]
 80034d4:	bd10      	pop	{r4, pc}

080034d6 <__sclose>:
 80034d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034da:	f000 b89d 	b.w	8003618 <_close_r>

080034de <__swbuf_r>:
 80034de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034e0:	460e      	mov	r6, r1
 80034e2:	4614      	mov	r4, r2
 80034e4:	4605      	mov	r5, r0
 80034e6:	b118      	cbz	r0, 80034f0 <__swbuf_r+0x12>
 80034e8:	6a03      	ldr	r3, [r0, #32]
 80034ea:	b90b      	cbnz	r3, 80034f0 <__swbuf_r+0x12>
 80034ec:	f7ff fef0 	bl	80032d0 <__sinit>
 80034f0:	69a3      	ldr	r3, [r4, #24]
 80034f2:	60a3      	str	r3, [r4, #8]
 80034f4:	89a3      	ldrh	r3, [r4, #12]
 80034f6:	071a      	lsls	r2, r3, #28
 80034f8:	d525      	bpl.n	8003546 <__swbuf_r+0x68>
 80034fa:	6923      	ldr	r3, [r4, #16]
 80034fc:	b31b      	cbz	r3, 8003546 <__swbuf_r+0x68>
 80034fe:	6823      	ldr	r3, [r4, #0]
 8003500:	6922      	ldr	r2, [r4, #16]
 8003502:	1a98      	subs	r0, r3, r2
 8003504:	6963      	ldr	r3, [r4, #20]
 8003506:	b2f6      	uxtb	r6, r6
 8003508:	4283      	cmp	r3, r0
 800350a:	4637      	mov	r7, r6
 800350c:	dc04      	bgt.n	8003518 <__swbuf_r+0x3a>
 800350e:	4621      	mov	r1, r4
 8003510:	4628      	mov	r0, r5
 8003512:	f000 fe9f 	bl	8004254 <_fflush_r>
 8003516:	b9e0      	cbnz	r0, 8003552 <__swbuf_r+0x74>
 8003518:	68a3      	ldr	r3, [r4, #8]
 800351a:	3b01      	subs	r3, #1
 800351c:	60a3      	str	r3, [r4, #8]
 800351e:	6823      	ldr	r3, [r4, #0]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	6022      	str	r2, [r4, #0]
 8003524:	701e      	strb	r6, [r3, #0]
 8003526:	6962      	ldr	r2, [r4, #20]
 8003528:	1c43      	adds	r3, r0, #1
 800352a:	429a      	cmp	r2, r3
 800352c:	d004      	beq.n	8003538 <__swbuf_r+0x5a>
 800352e:	89a3      	ldrh	r3, [r4, #12]
 8003530:	07db      	lsls	r3, r3, #31
 8003532:	d506      	bpl.n	8003542 <__swbuf_r+0x64>
 8003534:	2e0a      	cmp	r6, #10
 8003536:	d104      	bne.n	8003542 <__swbuf_r+0x64>
 8003538:	4621      	mov	r1, r4
 800353a:	4628      	mov	r0, r5
 800353c:	f000 fe8a 	bl	8004254 <_fflush_r>
 8003540:	b938      	cbnz	r0, 8003552 <__swbuf_r+0x74>
 8003542:	4638      	mov	r0, r7
 8003544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003546:	4621      	mov	r1, r4
 8003548:	4628      	mov	r0, r5
 800354a:	f000 f805 	bl	8003558 <__swsetup_r>
 800354e:	2800      	cmp	r0, #0
 8003550:	d0d5      	beq.n	80034fe <__swbuf_r+0x20>
 8003552:	f04f 37ff 	mov.w	r7, #4294967295
 8003556:	e7f4      	b.n	8003542 <__swbuf_r+0x64>

08003558 <__swsetup_r>:
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	4b2a      	ldr	r3, [pc, #168]	; (8003604 <__swsetup_r+0xac>)
 800355c:	4605      	mov	r5, r0
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	460c      	mov	r4, r1
 8003562:	b118      	cbz	r0, 800356c <__swsetup_r+0x14>
 8003564:	6a03      	ldr	r3, [r0, #32]
 8003566:	b90b      	cbnz	r3, 800356c <__swsetup_r+0x14>
 8003568:	f7ff feb2 	bl	80032d0 <__sinit>
 800356c:	89a3      	ldrh	r3, [r4, #12]
 800356e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003572:	0718      	lsls	r0, r3, #28
 8003574:	d422      	bmi.n	80035bc <__swsetup_r+0x64>
 8003576:	06d9      	lsls	r1, r3, #27
 8003578:	d407      	bmi.n	800358a <__swsetup_r+0x32>
 800357a:	2309      	movs	r3, #9
 800357c:	602b      	str	r3, [r5, #0]
 800357e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003582:	81a3      	strh	r3, [r4, #12]
 8003584:	f04f 30ff 	mov.w	r0, #4294967295
 8003588:	e034      	b.n	80035f4 <__swsetup_r+0x9c>
 800358a:	0758      	lsls	r0, r3, #29
 800358c:	d512      	bpl.n	80035b4 <__swsetup_r+0x5c>
 800358e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003590:	b141      	cbz	r1, 80035a4 <__swsetup_r+0x4c>
 8003592:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003596:	4299      	cmp	r1, r3
 8003598:	d002      	beq.n	80035a0 <__swsetup_r+0x48>
 800359a:	4628      	mov	r0, r5
 800359c:	f000 f8b0 	bl	8003700 <_free_r>
 80035a0:	2300      	movs	r3, #0
 80035a2:	6363      	str	r3, [r4, #52]	; 0x34
 80035a4:	89a3      	ldrh	r3, [r4, #12]
 80035a6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80035aa:	81a3      	strh	r3, [r4, #12]
 80035ac:	2300      	movs	r3, #0
 80035ae:	6063      	str	r3, [r4, #4]
 80035b0:	6923      	ldr	r3, [r4, #16]
 80035b2:	6023      	str	r3, [r4, #0]
 80035b4:	89a3      	ldrh	r3, [r4, #12]
 80035b6:	f043 0308 	orr.w	r3, r3, #8
 80035ba:	81a3      	strh	r3, [r4, #12]
 80035bc:	6923      	ldr	r3, [r4, #16]
 80035be:	b94b      	cbnz	r3, 80035d4 <__swsetup_r+0x7c>
 80035c0:	89a3      	ldrh	r3, [r4, #12]
 80035c2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ca:	d003      	beq.n	80035d4 <__swsetup_r+0x7c>
 80035cc:	4621      	mov	r1, r4
 80035ce:	4628      	mov	r0, r5
 80035d0:	f000 fe8e 	bl	80042f0 <__smakebuf_r>
 80035d4:	89a0      	ldrh	r0, [r4, #12]
 80035d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035da:	f010 0301 	ands.w	r3, r0, #1
 80035de:	d00a      	beq.n	80035f6 <__swsetup_r+0x9e>
 80035e0:	2300      	movs	r3, #0
 80035e2:	60a3      	str	r3, [r4, #8]
 80035e4:	6963      	ldr	r3, [r4, #20]
 80035e6:	425b      	negs	r3, r3
 80035e8:	61a3      	str	r3, [r4, #24]
 80035ea:	6923      	ldr	r3, [r4, #16]
 80035ec:	b943      	cbnz	r3, 8003600 <__swsetup_r+0xa8>
 80035ee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80035f2:	d1c4      	bne.n	800357e <__swsetup_r+0x26>
 80035f4:	bd38      	pop	{r3, r4, r5, pc}
 80035f6:	0781      	lsls	r1, r0, #30
 80035f8:	bf58      	it	pl
 80035fa:	6963      	ldrpl	r3, [r4, #20]
 80035fc:	60a3      	str	r3, [r4, #8]
 80035fe:	e7f4      	b.n	80035ea <__swsetup_r+0x92>
 8003600:	2000      	movs	r0, #0
 8003602:	e7f7      	b.n	80035f4 <__swsetup_r+0x9c>
 8003604:	20000064 	.word	0x20000064

08003608 <memset>:
 8003608:	4402      	add	r2, r0
 800360a:	4603      	mov	r3, r0
 800360c:	4293      	cmp	r3, r2
 800360e:	d100      	bne.n	8003612 <memset+0xa>
 8003610:	4770      	bx	lr
 8003612:	f803 1b01 	strb.w	r1, [r3], #1
 8003616:	e7f9      	b.n	800360c <memset+0x4>

08003618 <_close_r>:
 8003618:	b538      	push	{r3, r4, r5, lr}
 800361a:	4d06      	ldr	r5, [pc, #24]	; (8003634 <_close_r+0x1c>)
 800361c:	2300      	movs	r3, #0
 800361e:	4604      	mov	r4, r0
 8003620:	4608      	mov	r0, r1
 8003622:	602b      	str	r3, [r5, #0]
 8003624:	f7fd fb7f 	bl	8000d26 <_close>
 8003628:	1c43      	adds	r3, r0, #1
 800362a:	d102      	bne.n	8003632 <_close_r+0x1a>
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	b103      	cbz	r3, 8003632 <_close_r+0x1a>
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	bd38      	pop	{r3, r4, r5, pc}
 8003634:	20000268 	.word	0x20000268

08003638 <_lseek_r>:
 8003638:	b538      	push	{r3, r4, r5, lr}
 800363a:	4d07      	ldr	r5, [pc, #28]	; (8003658 <_lseek_r+0x20>)
 800363c:	4604      	mov	r4, r0
 800363e:	4608      	mov	r0, r1
 8003640:	4611      	mov	r1, r2
 8003642:	2200      	movs	r2, #0
 8003644:	602a      	str	r2, [r5, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	f7fd fb94 	bl	8000d74 <_lseek>
 800364c:	1c43      	adds	r3, r0, #1
 800364e:	d102      	bne.n	8003656 <_lseek_r+0x1e>
 8003650:	682b      	ldr	r3, [r5, #0]
 8003652:	b103      	cbz	r3, 8003656 <_lseek_r+0x1e>
 8003654:	6023      	str	r3, [r4, #0]
 8003656:	bd38      	pop	{r3, r4, r5, pc}
 8003658:	20000268 	.word	0x20000268

0800365c <_read_r>:
 800365c:	b538      	push	{r3, r4, r5, lr}
 800365e:	4d07      	ldr	r5, [pc, #28]	; (800367c <_read_r+0x20>)
 8003660:	4604      	mov	r4, r0
 8003662:	4608      	mov	r0, r1
 8003664:	4611      	mov	r1, r2
 8003666:	2200      	movs	r2, #0
 8003668:	602a      	str	r2, [r5, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	f7fd fb22 	bl	8000cb4 <_read>
 8003670:	1c43      	adds	r3, r0, #1
 8003672:	d102      	bne.n	800367a <_read_r+0x1e>
 8003674:	682b      	ldr	r3, [r5, #0]
 8003676:	b103      	cbz	r3, 800367a <_read_r+0x1e>
 8003678:	6023      	str	r3, [r4, #0]
 800367a:	bd38      	pop	{r3, r4, r5, pc}
 800367c:	20000268 	.word	0x20000268

08003680 <_write_r>:
 8003680:	b538      	push	{r3, r4, r5, lr}
 8003682:	4d07      	ldr	r5, [pc, #28]	; (80036a0 <_write_r+0x20>)
 8003684:	4604      	mov	r4, r0
 8003686:	4608      	mov	r0, r1
 8003688:	4611      	mov	r1, r2
 800368a:	2200      	movs	r2, #0
 800368c:	602a      	str	r2, [r5, #0]
 800368e:	461a      	mov	r2, r3
 8003690:	f7fd fb2d 	bl	8000cee <_write>
 8003694:	1c43      	adds	r3, r0, #1
 8003696:	d102      	bne.n	800369e <_write_r+0x1e>
 8003698:	682b      	ldr	r3, [r5, #0]
 800369a:	b103      	cbz	r3, 800369e <_write_r+0x1e>
 800369c:	6023      	str	r3, [r4, #0]
 800369e:	bd38      	pop	{r3, r4, r5, pc}
 80036a0:	20000268 	.word	0x20000268

080036a4 <__errno>:
 80036a4:	4b01      	ldr	r3, [pc, #4]	; (80036ac <__errno+0x8>)
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	20000064 	.word	0x20000064

080036b0 <__libc_init_array>:
 80036b0:	b570      	push	{r4, r5, r6, lr}
 80036b2:	4d0d      	ldr	r5, [pc, #52]	; (80036e8 <__libc_init_array+0x38>)
 80036b4:	4c0d      	ldr	r4, [pc, #52]	; (80036ec <__libc_init_array+0x3c>)
 80036b6:	1b64      	subs	r4, r4, r5
 80036b8:	10a4      	asrs	r4, r4, #2
 80036ba:	2600      	movs	r6, #0
 80036bc:	42a6      	cmp	r6, r4
 80036be:	d109      	bne.n	80036d4 <__libc_init_array+0x24>
 80036c0:	4d0b      	ldr	r5, [pc, #44]	; (80036f0 <__libc_init_array+0x40>)
 80036c2:	4c0c      	ldr	r4, [pc, #48]	; (80036f4 <__libc_init_array+0x44>)
 80036c4:	f000 fee2 	bl	800448c <_init>
 80036c8:	1b64      	subs	r4, r4, r5
 80036ca:	10a4      	asrs	r4, r4, #2
 80036cc:	2600      	movs	r6, #0
 80036ce:	42a6      	cmp	r6, r4
 80036d0:	d105      	bne.n	80036de <__libc_init_array+0x2e>
 80036d2:	bd70      	pop	{r4, r5, r6, pc}
 80036d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d8:	4798      	blx	r3
 80036da:	3601      	adds	r6, #1
 80036dc:	e7ee      	b.n	80036bc <__libc_init_array+0xc>
 80036de:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e2:	4798      	blx	r3
 80036e4:	3601      	adds	r6, #1
 80036e6:	e7f2      	b.n	80036ce <__libc_init_array+0x1e>
 80036e8:	08004588 	.word	0x08004588
 80036ec:	08004588 	.word	0x08004588
 80036f0:	08004588 	.word	0x08004588
 80036f4:	0800458c 	.word	0x0800458c

080036f8 <__retarget_lock_init_recursive>:
 80036f8:	4770      	bx	lr

080036fa <__retarget_lock_acquire_recursive>:
 80036fa:	4770      	bx	lr

080036fc <__retarget_lock_release_recursive>:
 80036fc:	4770      	bx	lr
	...

08003700 <_free_r>:
 8003700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003702:	2900      	cmp	r1, #0
 8003704:	d044      	beq.n	8003790 <_free_r+0x90>
 8003706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800370a:	9001      	str	r0, [sp, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f1a1 0404 	sub.w	r4, r1, #4
 8003712:	bfb8      	it	lt
 8003714:	18e4      	addlt	r4, r4, r3
 8003716:	f000 f8df 	bl	80038d8 <__malloc_lock>
 800371a:	4a1e      	ldr	r2, [pc, #120]	; (8003794 <_free_r+0x94>)
 800371c:	9801      	ldr	r0, [sp, #4]
 800371e:	6813      	ldr	r3, [r2, #0]
 8003720:	b933      	cbnz	r3, 8003730 <_free_r+0x30>
 8003722:	6063      	str	r3, [r4, #4]
 8003724:	6014      	str	r4, [r2, #0]
 8003726:	b003      	add	sp, #12
 8003728:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800372c:	f000 b8da 	b.w	80038e4 <__malloc_unlock>
 8003730:	42a3      	cmp	r3, r4
 8003732:	d908      	bls.n	8003746 <_free_r+0x46>
 8003734:	6825      	ldr	r5, [r4, #0]
 8003736:	1961      	adds	r1, r4, r5
 8003738:	428b      	cmp	r3, r1
 800373a:	bf01      	itttt	eq
 800373c:	6819      	ldreq	r1, [r3, #0]
 800373e:	685b      	ldreq	r3, [r3, #4]
 8003740:	1949      	addeq	r1, r1, r5
 8003742:	6021      	streq	r1, [r4, #0]
 8003744:	e7ed      	b.n	8003722 <_free_r+0x22>
 8003746:	461a      	mov	r2, r3
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	b10b      	cbz	r3, 8003750 <_free_r+0x50>
 800374c:	42a3      	cmp	r3, r4
 800374e:	d9fa      	bls.n	8003746 <_free_r+0x46>
 8003750:	6811      	ldr	r1, [r2, #0]
 8003752:	1855      	adds	r5, r2, r1
 8003754:	42a5      	cmp	r5, r4
 8003756:	d10b      	bne.n	8003770 <_free_r+0x70>
 8003758:	6824      	ldr	r4, [r4, #0]
 800375a:	4421      	add	r1, r4
 800375c:	1854      	adds	r4, r2, r1
 800375e:	42a3      	cmp	r3, r4
 8003760:	6011      	str	r1, [r2, #0]
 8003762:	d1e0      	bne.n	8003726 <_free_r+0x26>
 8003764:	681c      	ldr	r4, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	6053      	str	r3, [r2, #4]
 800376a:	440c      	add	r4, r1
 800376c:	6014      	str	r4, [r2, #0]
 800376e:	e7da      	b.n	8003726 <_free_r+0x26>
 8003770:	d902      	bls.n	8003778 <_free_r+0x78>
 8003772:	230c      	movs	r3, #12
 8003774:	6003      	str	r3, [r0, #0]
 8003776:	e7d6      	b.n	8003726 <_free_r+0x26>
 8003778:	6825      	ldr	r5, [r4, #0]
 800377a:	1961      	adds	r1, r4, r5
 800377c:	428b      	cmp	r3, r1
 800377e:	bf04      	itt	eq
 8003780:	6819      	ldreq	r1, [r3, #0]
 8003782:	685b      	ldreq	r3, [r3, #4]
 8003784:	6063      	str	r3, [r4, #4]
 8003786:	bf04      	itt	eq
 8003788:	1949      	addeq	r1, r1, r5
 800378a:	6021      	streq	r1, [r4, #0]
 800378c:	6054      	str	r4, [r2, #4]
 800378e:	e7ca      	b.n	8003726 <_free_r+0x26>
 8003790:	b003      	add	sp, #12
 8003792:	bd30      	pop	{r4, r5, pc}
 8003794:	20000270 	.word	0x20000270

08003798 <sbrk_aligned>:
 8003798:	b570      	push	{r4, r5, r6, lr}
 800379a:	4e0e      	ldr	r6, [pc, #56]	; (80037d4 <sbrk_aligned+0x3c>)
 800379c:	460c      	mov	r4, r1
 800379e:	6831      	ldr	r1, [r6, #0]
 80037a0:	4605      	mov	r5, r0
 80037a2:	b911      	cbnz	r1, 80037aa <sbrk_aligned+0x12>
 80037a4:	f000 fe1c 	bl	80043e0 <_sbrk_r>
 80037a8:	6030      	str	r0, [r6, #0]
 80037aa:	4621      	mov	r1, r4
 80037ac:	4628      	mov	r0, r5
 80037ae:	f000 fe17 	bl	80043e0 <_sbrk_r>
 80037b2:	1c43      	adds	r3, r0, #1
 80037b4:	d00a      	beq.n	80037cc <sbrk_aligned+0x34>
 80037b6:	1cc4      	adds	r4, r0, #3
 80037b8:	f024 0403 	bic.w	r4, r4, #3
 80037bc:	42a0      	cmp	r0, r4
 80037be:	d007      	beq.n	80037d0 <sbrk_aligned+0x38>
 80037c0:	1a21      	subs	r1, r4, r0
 80037c2:	4628      	mov	r0, r5
 80037c4:	f000 fe0c 	bl	80043e0 <_sbrk_r>
 80037c8:	3001      	adds	r0, #1
 80037ca:	d101      	bne.n	80037d0 <sbrk_aligned+0x38>
 80037cc:	f04f 34ff 	mov.w	r4, #4294967295
 80037d0:	4620      	mov	r0, r4
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
 80037d4:	20000274 	.word	0x20000274

080037d8 <_malloc_r>:
 80037d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037dc:	1ccd      	adds	r5, r1, #3
 80037de:	f025 0503 	bic.w	r5, r5, #3
 80037e2:	3508      	adds	r5, #8
 80037e4:	2d0c      	cmp	r5, #12
 80037e6:	bf38      	it	cc
 80037e8:	250c      	movcc	r5, #12
 80037ea:	2d00      	cmp	r5, #0
 80037ec:	4607      	mov	r7, r0
 80037ee:	db01      	blt.n	80037f4 <_malloc_r+0x1c>
 80037f0:	42a9      	cmp	r1, r5
 80037f2:	d905      	bls.n	8003800 <_malloc_r+0x28>
 80037f4:	230c      	movs	r3, #12
 80037f6:	603b      	str	r3, [r7, #0]
 80037f8:	2600      	movs	r6, #0
 80037fa:	4630      	mov	r0, r6
 80037fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003800:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80038d4 <_malloc_r+0xfc>
 8003804:	f000 f868 	bl	80038d8 <__malloc_lock>
 8003808:	f8d8 3000 	ldr.w	r3, [r8]
 800380c:	461c      	mov	r4, r3
 800380e:	bb5c      	cbnz	r4, 8003868 <_malloc_r+0x90>
 8003810:	4629      	mov	r1, r5
 8003812:	4638      	mov	r0, r7
 8003814:	f7ff ffc0 	bl	8003798 <sbrk_aligned>
 8003818:	1c43      	adds	r3, r0, #1
 800381a:	4604      	mov	r4, r0
 800381c:	d155      	bne.n	80038ca <_malloc_r+0xf2>
 800381e:	f8d8 4000 	ldr.w	r4, [r8]
 8003822:	4626      	mov	r6, r4
 8003824:	2e00      	cmp	r6, #0
 8003826:	d145      	bne.n	80038b4 <_malloc_r+0xdc>
 8003828:	2c00      	cmp	r4, #0
 800382a:	d048      	beq.n	80038be <_malloc_r+0xe6>
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	4631      	mov	r1, r6
 8003830:	4638      	mov	r0, r7
 8003832:	eb04 0903 	add.w	r9, r4, r3
 8003836:	f000 fdd3 	bl	80043e0 <_sbrk_r>
 800383a:	4581      	cmp	r9, r0
 800383c:	d13f      	bne.n	80038be <_malloc_r+0xe6>
 800383e:	6821      	ldr	r1, [r4, #0]
 8003840:	1a6d      	subs	r5, r5, r1
 8003842:	4629      	mov	r1, r5
 8003844:	4638      	mov	r0, r7
 8003846:	f7ff ffa7 	bl	8003798 <sbrk_aligned>
 800384a:	3001      	adds	r0, #1
 800384c:	d037      	beq.n	80038be <_malloc_r+0xe6>
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	442b      	add	r3, r5
 8003852:	6023      	str	r3, [r4, #0]
 8003854:	f8d8 3000 	ldr.w	r3, [r8]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d038      	beq.n	80038ce <_malloc_r+0xf6>
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	42a2      	cmp	r2, r4
 8003860:	d12b      	bne.n	80038ba <_malloc_r+0xe2>
 8003862:	2200      	movs	r2, #0
 8003864:	605a      	str	r2, [r3, #4]
 8003866:	e00f      	b.n	8003888 <_malloc_r+0xb0>
 8003868:	6822      	ldr	r2, [r4, #0]
 800386a:	1b52      	subs	r2, r2, r5
 800386c:	d41f      	bmi.n	80038ae <_malloc_r+0xd6>
 800386e:	2a0b      	cmp	r2, #11
 8003870:	d917      	bls.n	80038a2 <_malloc_r+0xca>
 8003872:	1961      	adds	r1, r4, r5
 8003874:	42a3      	cmp	r3, r4
 8003876:	6025      	str	r5, [r4, #0]
 8003878:	bf18      	it	ne
 800387a:	6059      	strne	r1, [r3, #4]
 800387c:	6863      	ldr	r3, [r4, #4]
 800387e:	bf08      	it	eq
 8003880:	f8c8 1000 	streq.w	r1, [r8]
 8003884:	5162      	str	r2, [r4, r5]
 8003886:	604b      	str	r3, [r1, #4]
 8003888:	4638      	mov	r0, r7
 800388a:	f104 060b 	add.w	r6, r4, #11
 800388e:	f000 f829 	bl	80038e4 <__malloc_unlock>
 8003892:	f026 0607 	bic.w	r6, r6, #7
 8003896:	1d23      	adds	r3, r4, #4
 8003898:	1af2      	subs	r2, r6, r3
 800389a:	d0ae      	beq.n	80037fa <_malloc_r+0x22>
 800389c:	1b9b      	subs	r3, r3, r6
 800389e:	50a3      	str	r3, [r4, r2]
 80038a0:	e7ab      	b.n	80037fa <_malloc_r+0x22>
 80038a2:	42a3      	cmp	r3, r4
 80038a4:	6862      	ldr	r2, [r4, #4]
 80038a6:	d1dd      	bne.n	8003864 <_malloc_r+0x8c>
 80038a8:	f8c8 2000 	str.w	r2, [r8]
 80038ac:	e7ec      	b.n	8003888 <_malloc_r+0xb0>
 80038ae:	4623      	mov	r3, r4
 80038b0:	6864      	ldr	r4, [r4, #4]
 80038b2:	e7ac      	b.n	800380e <_malloc_r+0x36>
 80038b4:	4634      	mov	r4, r6
 80038b6:	6876      	ldr	r6, [r6, #4]
 80038b8:	e7b4      	b.n	8003824 <_malloc_r+0x4c>
 80038ba:	4613      	mov	r3, r2
 80038bc:	e7cc      	b.n	8003858 <_malloc_r+0x80>
 80038be:	230c      	movs	r3, #12
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	4638      	mov	r0, r7
 80038c4:	f000 f80e 	bl	80038e4 <__malloc_unlock>
 80038c8:	e797      	b.n	80037fa <_malloc_r+0x22>
 80038ca:	6025      	str	r5, [r4, #0]
 80038cc:	e7dc      	b.n	8003888 <_malloc_r+0xb0>
 80038ce:	605b      	str	r3, [r3, #4]
 80038d0:	deff      	udf	#255	; 0xff
 80038d2:	bf00      	nop
 80038d4:	20000270 	.word	0x20000270

080038d8 <__malloc_lock>:
 80038d8:	4801      	ldr	r0, [pc, #4]	; (80038e0 <__malloc_lock+0x8>)
 80038da:	f7ff bf0e 	b.w	80036fa <__retarget_lock_acquire_recursive>
 80038de:	bf00      	nop
 80038e0:	2000026c 	.word	0x2000026c

080038e4 <__malloc_unlock>:
 80038e4:	4801      	ldr	r0, [pc, #4]	; (80038ec <__malloc_unlock+0x8>)
 80038e6:	f7ff bf09 	b.w	80036fc <__retarget_lock_release_recursive>
 80038ea:	bf00      	nop
 80038ec:	2000026c 	.word	0x2000026c

080038f0 <__ssputs_r>:
 80038f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f4:	688e      	ldr	r6, [r1, #8]
 80038f6:	461f      	mov	r7, r3
 80038f8:	42be      	cmp	r6, r7
 80038fa:	680b      	ldr	r3, [r1, #0]
 80038fc:	4682      	mov	sl, r0
 80038fe:	460c      	mov	r4, r1
 8003900:	4690      	mov	r8, r2
 8003902:	d82c      	bhi.n	800395e <__ssputs_r+0x6e>
 8003904:	898a      	ldrh	r2, [r1, #12]
 8003906:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800390a:	d026      	beq.n	800395a <__ssputs_r+0x6a>
 800390c:	6965      	ldr	r5, [r4, #20]
 800390e:	6909      	ldr	r1, [r1, #16]
 8003910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003914:	eba3 0901 	sub.w	r9, r3, r1
 8003918:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800391c:	1c7b      	adds	r3, r7, #1
 800391e:	444b      	add	r3, r9
 8003920:	106d      	asrs	r5, r5, #1
 8003922:	429d      	cmp	r5, r3
 8003924:	bf38      	it	cc
 8003926:	461d      	movcc	r5, r3
 8003928:	0553      	lsls	r3, r2, #21
 800392a:	d527      	bpl.n	800397c <__ssputs_r+0x8c>
 800392c:	4629      	mov	r1, r5
 800392e:	f7ff ff53 	bl	80037d8 <_malloc_r>
 8003932:	4606      	mov	r6, r0
 8003934:	b360      	cbz	r0, 8003990 <__ssputs_r+0xa0>
 8003936:	6921      	ldr	r1, [r4, #16]
 8003938:	464a      	mov	r2, r9
 800393a:	f000 fd61 	bl	8004400 <memcpy>
 800393e:	89a3      	ldrh	r3, [r4, #12]
 8003940:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003948:	81a3      	strh	r3, [r4, #12]
 800394a:	6126      	str	r6, [r4, #16]
 800394c:	6165      	str	r5, [r4, #20]
 800394e:	444e      	add	r6, r9
 8003950:	eba5 0509 	sub.w	r5, r5, r9
 8003954:	6026      	str	r6, [r4, #0]
 8003956:	60a5      	str	r5, [r4, #8]
 8003958:	463e      	mov	r6, r7
 800395a:	42be      	cmp	r6, r7
 800395c:	d900      	bls.n	8003960 <__ssputs_r+0x70>
 800395e:	463e      	mov	r6, r7
 8003960:	6820      	ldr	r0, [r4, #0]
 8003962:	4632      	mov	r2, r6
 8003964:	4641      	mov	r1, r8
 8003966:	f000 fcff 	bl	8004368 <memmove>
 800396a:	68a3      	ldr	r3, [r4, #8]
 800396c:	1b9b      	subs	r3, r3, r6
 800396e:	60a3      	str	r3, [r4, #8]
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	4433      	add	r3, r6
 8003974:	6023      	str	r3, [r4, #0]
 8003976:	2000      	movs	r0, #0
 8003978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800397c:	462a      	mov	r2, r5
 800397e:	f000 fd4d 	bl	800441c <_realloc_r>
 8003982:	4606      	mov	r6, r0
 8003984:	2800      	cmp	r0, #0
 8003986:	d1e0      	bne.n	800394a <__ssputs_r+0x5a>
 8003988:	6921      	ldr	r1, [r4, #16]
 800398a:	4650      	mov	r0, sl
 800398c:	f7ff feb8 	bl	8003700 <_free_r>
 8003990:	230c      	movs	r3, #12
 8003992:	f8ca 3000 	str.w	r3, [sl]
 8003996:	89a3      	ldrh	r3, [r4, #12]
 8003998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800399c:	81a3      	strh	r3, [r4, #12]
 800399e:	f04f 30ff 	mov.w	r0, #4294967295
 80039a2:	e7e9      	b.n	8003978 <__ssputs_r+0x88>

080039a4 <_svfiprintf_r>:
 80039a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a8:	4698      	mov	r8, r3
 80039aa:	898b      	ldrh	r3, [r1, #12]
 80039ac:	061b      	lsls	r3, r3, #24
 80039ae:	b09d      	sub	sp, #116	; 0x74
 80039b0:	4607      	mov	r7, r0
 80039b2:	460d      	mov	r5, r1
 80039b4:	4614      	mov	r4, r2
 80039b6:	d50e      	bpl.n	80039d6 <_svfiprintf_r+0x32>
 80039b8:	690b      	ldr	r3, [r1, #16]
 80039ba:	b963      	cbnz	r3, 80039d6 <_svfiprintf_r+0x32>
 80039bc:	2140      	movs	r1, #64	; 0x40
 80039be:	f7ff ff0b 	bl	80037d8 <_malloc_r>
 80039c2:	6028      	str	r0, [r5, #0]
 80039c4:	6128      	str	r0, [r5, #16]
 80039c6:	b920      	cbnz	r0, 80039d2 <_svfiprintf_r+0x2e>
 80039c8:	230c      	movs	r3, #12
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	f04f 30ff 	mov.w	r0, #4294967295
 80039d0:	e0d0      	b.n	8003b74 <_svfiprintf_r+0x1d0>
 80039d2:	2340      	movs	r3, #64	; 0x40
 80039d4:	616b      	str	r3, [r5, #20]
 80039d6:	2300      	movs	r3, #0
 80039d8:	9309      	str	r3, [sp, #36]	; 0x24
 80039da:	2320      	movs	r3, #32
 80039dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80039e4:	2330      	movs	r3, #48	; 0x30
 80039e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003b8c <_svfiprintf_r+0x1e8>
 80039ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039ee:	f04f 0901 	mov.w	r9, #1
 80039f2:	4623      	mov	r3, r4
 80039f4:	469a      	mov	sl, r3
 80039f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039fa:	b10a      	cbz	r2, 8003a00 <_svfiprintf_r+0x5c>
 80039fc:	2a25      	cmp	r2, #37	; 0x25
 80039fe:	d1f9      	bne.n	80039f4 <_svfiprintf_r+0x50>
 8003a00:	ebba 0b04 	subs.w	fp, sl, r4
 8003a04:	d00b      	beq.n	8003a1e <_svfiprintf_r+0x7a>
 8003a06:	465b      	mov	r3, fp
 8003a08:	4622      	mov	r2, r4
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	4638      	mov	r0, r7
 8003a0e:	f7ff ff6f 	bl	80038f0 <__ssputs_r>
 8003a12:	3001      	adds	r0, #1
 8003a14:	f000 80a9 	beq.w	8003b6a <_svfiprintf_r+0x1c6>
 8003a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a1a:	445a      	add	r2, fp
 8003a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8003a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80a1 	beq.w	8003b6a <_svfiprintf_r+0x1c6>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a32:	f10a 0a01 	add.w	sl, sl, #1
 8003a36:	9304      	str	r3, [sp, #16]
 8003a38:	9307      	str	r3, [sp, #28]
 8003a3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8003a40:	4654      	mov	r4, sl
 8003a42:	2205      	movs	r2, #5
 8003a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a48:	4850      	ldr	r0, [pc, #320]	; (8003b8c <_svfiprintf_r+0x1e8>)
 8003a4a:	f7fc fbc9 	bl	80001e0 <memchr>
 8003a4e:	9a04      	ldr	r2, [sp, #16]
 8003a50:	b9d8      	cbnz	r0, 8003a8a <_svfiprintf_r+0xe6>
 8003a52:	06d0      	lsls	r0, r2, #27
 8003a54:	bf44      	itt	mi
 8003a56:	2320      	movmi	r3, #32
 8003a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a5c:	0711      	lsls	r1, r2, #28
 8003a5e:	bf44      	itt	mi
 8003a60:	232b      	movmi	r3, #43	; 0x2b
 8003a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a66:	f89a 3000 	ldrb.w	r3, [sl]
 8003a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a6c:	d015      	beq.n	8003a9a <_svfiprintf_r+0xf6>
 8003a6e:	9a07      	ldr	r2, [sp, #28]
 8003a70:	4654      	mov	r4, sl
 8003a72:	2000      	movs	r0, #0
 8003a74:	f04f 0c0a 	mov.w	ip, #10
 8003a78:	4621      	mov	r1, r4
 8003a7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a7e:	3b30      	subs	r3, #48	; 0x30
 8003a80:	2b09      	cmp	r3, #9
 8003a82:	d94d      	bls.n	8003b20 <_svfiprintf_r+0x17c>
 8003a84:	b1b0      	cbz	r0, 8003ab4 <_svfiprintf_r+0x110>
 8003a86:	9207      	str	r2, [sp, #28]
 8003a88:	e014      	b.n	8003ab4 <_svfiprintf_r+0x110>
 8003a8a:	eba0 0308 	sub.w	r3, r0, r8
 8003a8e:	fa09 f303 	lsl.w	r3, r9, r3
 8003a92:	4313      	orrs	r3, r2
 8003a94:	9304      	str	r3, [sp, #16]
 8003a96:	46a2      	mov	sl, r4
 8003a98:	e7d2      	b.n	8003a40 <_svfiprintf_r+0x9c>
 8003a9a:	9b03      	ldr	r3, [sp, #12]
 8003a9c:	1d19      	adds	r1, r3, #4
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	9103      	str	r1, [sp, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	bfbb      	ittet	lt
 8003aa6:	425b      	neglt	r3, r3
 8003aa8:	f042 0202 	orrlt.w	r2, r2, #2
 8003aac:	9307      	strge	r3, [sp, #28]
 8003aae:	9307      	strlt	r3, [sp, #28]
 8003ab0:	bfb8      	it	lt
 8003ab2:	9204      	strlt	r2, [sp, #16]
 8003ab4:	7823      	ldrb	r3, [r4, #0]
 8003ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ab8:	d10c      	bne.n	8003ad4 <_svfiprintf_r+0x130>
 8003aba:	7863      	ldrb	r3, [r4, #1]
 8003abc:	2b2a      	cmp	r3, #42	; 0x2a
 8003abe:	d134      	bne.n	8003b2a <_svfiprintf_r+0x186>
 8003ac0:	9b03      	ldr	r3, [sp, #12]
 8003ac2:	1d1a      	adds	r2, r3, #4
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	9203      	str	r2, [sp, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bfb8      	it	lt
 8003acc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ad0:	3402      	adds	r4, #2
 8003ad2:	9305      	str	r3, [sp, #20]
 8003ad4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003b9c <_svfiprintf_r+0x1f8>
 8003ad8:	7821      	ldrb	r1, [r4, #0]
 8003ada:	2203      	movs	r2, #3
 8003adc:	4650      	mov	r0, sl
 8003ade:	f7fc fb7f 	bl	80001e0 <memchr>
 8003ae2:	b138      	cbz	r0, 8003af4 <_svfiprintf_r+0x150>
 8003ae4:	9b04      	ldr	r3, [sp, #16]
 8003ae6:	eba0 000a 	sub.w	r0, r0, sl
 8003aea:	2240      	movs	r2, #64	; 0x40
 8003aec:	4082      	lsls	r2, r0
 8003aee:	4313      	orrs	r3, r2
 8003af0:	3401      	adds	r4, #1
 8003af2:	9304      	str	r3, [sp, #16]
 8003af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003af8:	4825      	ldr	r0, [pc, #148]	; (8003b90 <_svfiprintf_r+0x1ec>)
 8003afa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003afe:	2206      	movs	r2, #6
 8003b00:	f7fc fb6e 	bl	80001e0 <memchr>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d038      	beq.n	8003b7a <_svfiprintf_r+0x1d6>
 8003b08:	4b22      	ldr	r3, [pc, #136]	; (8003b94 <_svfiprintf_r+0x1f0>)
 8003b0a:	bb1b      	cbnz	r3, 8003b54 <_svfiprintf_r+0x1b0>
 8003b0c:	9b03      	ldr	r3, [sp, #12]
 8003b0e:	3307      	adds	r3, #7
 8003b10:	f023 0307 	bic.w	r3, r3, #7
 8003b14:	3308      	adds	r3, #8
 8003b16:	9303      	str	r3, [sp, #12]
 8003b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b1a:	4433      	add	r3, r6
 8003b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b1e:	e768      	b.n	80039f2 <_svfiprintf_r+0x4e>
 8003b20:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b24:	460c      	mov	r4, r1
 8003b26:	2001      	movs	r0, #1
 8003b28:	e7a6      	b.n	8003a78 <_svfiprintf_r+0xd4>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	3401      	adds	r4, #1
 8003b2e:	9305      	str	r3, [sp, #20]
 8003b30:	4619      	mov	r1, r3
 8003b32:	f04f 0c0a 	mov.w	ip, #10
 8003b36:	4620      	mov	r0, r4
 8003b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b3c:	3a30      	subs	r2, #48	; 0x30
 8003b3e:	2a09      	cmp	r2, #9
 8003b40:	d903      	bls.n	8003b4a <_svfiprintf_r+0x1a6>
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0c6      	beq.n	8003ad4 <_svfiprintf_r+0x130>
 8003b46:	9105      	str	r1, [sp, #20]
 8003b48:	e7c4      	b.n	8003ad4 <_svfiprintf_r+0x130>
 8003b4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b4e:	4604      	mov	r4, r0
 8003b50:	2301      	movs	r3, #1
 8003b52:	e7f0      	b.n	8003b36 <_svfiprintf_r+0x192>
 8003b54:	ab03      	add	r3, sp, #12
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	462a      	mov	r2, r5
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <_svfiprintf_r+0x1f4>)
 8003b5c:	a904      	add	r1, sp, #16
 8003b5e:	4638      	mov	r0, r7
 8003b60:	f3af 8000 	nop.w
 8003b64:	1c42      	adds	r2, r0, #1
 8003b66:	4606      	mov	r6, r0
 8003b68:	d1d6      	bne.n	8003b18 <_svfiprintf_r+0x174>
 8003b6a:	89ab      	ldrh	r3, [r5, #12]
 8003b6c:	065b      	lsls	r3, r3, #25
 8003b6e:	f53f af2d 	bmi.w	80039cc <_svfiprintf_r+0x28>
 8003b72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b74:	b01d      	add	sp, #116	; 0x74
 8003b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b7a:	ab03      	add	r3, sp, #12
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	462a      	mov	r2, r5
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <_svfiprintf_r+0x1f4>)
 8003b82:	a904      	add	r1, sp, #16
 8003b84:	4638      	mov	r0, r7
 8003b86:	f000 f9bd 	bl	8003f04 <_printf_i>
 8003b8a:	e7eb      	b.n	8003b64 <_svfiprintf_r+0x1c0>
 8003b8c:	0800454c 	.word	0x0800454c
 8003b90:	08004556 	.word	0x08004556
 8003b94:	00000000 	.word	0x00000000
 8003b98:	080038f1 	.word	0x080038f1
 8003b9c:	08004552 	.word	0x08004552

08003ba0 <__sfputc_r>:
 8003ba0:	6893      	ldr	r3, [r2, #8]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	b410      	push	{r4}
 8003ba8:	6093      	str	r3, [r2, #8]
 8003baa:	da08      	bge.n	8003bbe <__sfputc_r+0x1e>
 8003bac:	6994      	ldr	r4, [r2, #24]
 8003bae:	42a3      	cmp	r3, r4
 8003bb0:	db01      	blt.n	8003bb6 <__sfputc_r+0x16>
 8003bb2:	290a      	cmp	r1, #10
 8003bb4:	d103      	bne.n	8003bbe <__sfputc_r+0x1e>
 8003bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bba:	f7ff bc90 	b.w	80034de <__swbuf_r>
 8003bbe:	6813      	ldr	r3, [r2, #0]
 8003bc0:	1c58      	adds	r0, r3, #1
 8003bc2:	6010      	str	r0, [r2, #0]
 8003bc4:	7019      	strb	r1, [r3, #0]
 8003bc6:	4608      	mov	r0, r1
 8003bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <__sfputs_r>:
 8003bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd0:	4606      	mov	r6, r0
 8003bd2:	460f      	mov	r7, r1
 8003bd4:	4614      	mov	r4, r2
 8003bd6:	18d5      	adds	r5, r2, r3
 8003bd8:	42ac      	cmp	r4, r5
 8003bda:	d101      	bne.n	8003be0 <__sfputs_r+0x12>
 8003bdc:	2000      	movs	r0, #0
 8003bde:	e007      	b.n	8003bf0 <__sfputs_r+0x22>
 8003be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003be4:	463a      	mov	r2, r7
 8003be6:	4630      	mov	r0, r6
 8003be8:	f7ff ffda 	bl	8003ba0 <__sfputc_r>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d1f3      	bne.n	8003bd8 <__sfputs_r+0xa>
 8003bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bf4 <_vfiprintf_r>:
 8003bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf8:	460d      	mov	r5, r1
 8003bfa:	b09d      	sub	sp, #116	; 0x74
 8003bfc:	4614      	mov	r4, r2
 8003bfe:	4698      	mov	r8, r3
 8003c00:	4606      	mov	r6, r0
 8003c02:	b118      	cbz	r0, 8003c0c <_vfiprintf_r+0x18>
 8003c04:	6a03      	ldr	r3, [r0, #32]
 8003c06:	b90b      	cbnz	r3, 8003c0c <_vfiprintf_r+0x18>
 8003c08:	f7ff fb62 	bl	80032d0 <__sinit>
 8003c0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c0e:	07d9      	lsls	r1, r3, #31
 8003c10:	d405      	bmi.n	8003c1e <_vfiprintf_r+0x2a>
 8003c12:	89ab      	ldrh	r3, [r5, #12]
 8003c14:	059a      	lsls	r2, r3, #22
 8003c16:	d402      	bmi.n	8003c1e <_vfiprintf_r+0x2a>
 8003c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c1a:	f7ff fd6e 	bl	80036fa <__retarget_lock_acquire_recursive>
 8003c1e:	89ab      	ldrh	r3, [r5, #12]
 8003c20:	071b      	lsls	r3, r3, #28
 8003c22:	d501      	bpl.n	8003c28 <_vfiprintf_r+0x34>
 8003c24:	692b      	ldr	r3, [r5, #16]
 8003c26:	b99b      	cbnz	r3, 8003c50 <_vfiprintf_r+0x5c>
 8003c28:	4629      	mov	r1, r5
 8003c2a:	4630      	mov	r0, r6
 8003c2c:	f7ff fc94 	bl	8003558 <__swsetup_r>
 8003c30:	b170      	cbz	r0, 8003c50 <_vfiprintf_r+0x5c>
 8003c32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c34:	07dc      	lsls	r4, r3, #31
 8003c36:	d504      	bpl.n	8003c42 <_vfiprintf_r+0x4e>
 8003c38:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3c:	b01d      	add	sp, #116	; 0x74
 8003c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c42:	89ab      	ldrh	r3, [r5, #12]
 8003c44:	0598      	lsls	r0, r3, #22
 8003c46:	d4f7      	bmi.n	8003c38 <_vfiprintf_r+0x44>
 8003c48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c4a:	f7ff fd57 	bl	80036fc <__retarget_lock_release_recursive>
 8003c4e:	e7f3      	b.n	8003c38 <_vfiprintf_r+0x44>
 8003c50:	2300      	movs	r3, #0
 8003c52:	9309      	str	r3, [sp, #36]	; 0x24
 8003c54:	2320      	movs	r3, #32
 8003c56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c5e:	2330      	movs	r3, #48	; 0x30
 8003c60:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003e14 <_vfiprintf_r+0x220>
 8003c64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c68:	f04f 0901 	mov.w	r9, #1
 8003c6c:	4623      	mov	r3, r4
 8003c6e:	469a      	mov	sl, r3
 8003c70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c74:	b10a      	cbz	r2, 8003c7a <_vfiprintf_r+0x86>
 8003c76:	2a25      	cmp	r2, #37	; 0x25
 8003c78:	d1f9      	bne.n	8003c6e <_vfiprintf_r+0x7a>
 8003c7a:	ebba 0b04 	subs.w	fp, sl, r4
 8003c7e:	d00b      	beq.n	8003c98 <_vfiprintf_r+0xa4>
 8003c80:	465b      	mov	r3, fp
 8003c82:	4622      	mov	r2, r4
 8003c84:	4629      	mov	r1, r5
 8003c86:	4630      	mov	r0, r6
 8003c88:	f7ff ffa1 	bl	8003bce <__sfputs_r>
 8003c8c:	3001      	adds	r0, #1
 8003c8e:	f000 80a9 	beq.w	8003de4 <_vfiprintf_r+0x1f0>
 8003c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c94:	445a      	add	r2, fp
 8003c96:	9209      	str	r2, [sp, #36]	; 0x24
 8003c98:	f89a 3000 	ldrb.w	r3, [sl]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80a1 	beq.w	8003de4 <_vfiprintf_r+0x1f0>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cac:	f10a 0a01 	add.w	sl, sl, #1
 8003cb0:	9304      	str	r3, [sp, #16]
 8003cb2:	9307      	str	r3, [sp, #28]
 8003cb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cb8:	931a      	str	r3, [sp, #104]	; 0x68
 8003cba:	4654      	mov	r4, sl
 8003cbc:	2205      	movs	r2, #5
 8003cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cc2:	4854      	ldr	r0, [pc, #336]	; (8003e14 <_vfiprintf_r+0x220>)
 8003cc4:	f7fc fa8c 	bl	80001e0 <memchr>
 8003cc8:	9a04      	ldr	r2, [sp, #16]
 8003cca:	b9d8      	cbnz	r0, 8003d04 <_vfiprintf_r+0x110>
 8003ccc:	06d1      	lsls	r1, r2, #27
 8003cce:	bf44      	itt	mi
 8003cd0:	2320      	movmi	r3, #32
 8003cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cd6:	0713      	lsls	r3, r2, #28
 8003cd8:	bf44      	itt	mi
 8003cda:	232b      	movmi	r3, #43	; 0x2b
 8003cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ce6:	d015      	beq.n	8003d14 <_vfiprintf_r+0x120>
 8003ce8:	9a07      	ldr	r2, [sp, #28]
 8003cea:	4654      	mov	r4, sl
 8003cec:	2000      	movs	r0, #0
 8003cee:	f04f 0c0a 	mov.w	ip, #10
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cf8:	3b30      	subs	r3, #48	; 0x30
 8003cfa:	2b09      	cmp	r3, #9
 8003cfc:	d94d      	bls.n	8003d9a <_vfiprintf_r+0x1a6>
 8003cfe:	b1b0      	cbz	r0, 8003d2e <_vfiprintf_r+0x13a>
 8003d00:	9207      	str	r2, [sp, #28]
 8003d02:	e014      	b.n	8003d2e <_vfiprintf_r+0x13a>
 8003d04:	eba0 0308 	sub.w	r3, r0, r8
 8003d08:	fa09 f303 	lsl.w	r3, r9, r3
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	9304      	str	r3, [sp, #16]
 8003d10:	46a2      	mov	sl, r4
 8003d12:	e7d2      	b.n	8003cba <_vfiprintf_r+0xc6>
 8003d14:	9b03      	ldr	r3, [sp, #12]
 8003d16:	1d19      	adds	r1, r3, #4
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	9103      	str	r1, [sp, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	bfbb      	ittet	lt
 8003d20:	425b      	neglt	r3, r3
 8003d22:	f042 0202 	orrlt.w	r2, r2, #2
 8003d26:	9307      	strge	r3, [sp, #28]
 8003d28:	9307      	strlt	r3, [sp, #28]
 8003d2a:	bfb8      	it	lt
 8003d2c:	9204      	strlt	r2, [sp, #16]
 8003d2e:	7823      	ldrb	r3, [r4, #0]
 8003d30:	2b2e      	cmp	r3, #46	; 0x2e
 8003d32:	d10c      	bne.n	8003d4e <_vfiprintf_r+0x15a>
 8003d34:	7863      	ldrb	r3, [r4, #1]
 8003d36:	2b2a      	cmp	r3, #42	; 0x2a
 8003d38:	d134      	bne.n	8003da4 <_vfiprintf_r+0x1b0>
 8003d3a:	9b03      	ldr	r3, [sp, #12]
 8003d3c:	1d1a      	adds	r2, r3, #4
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	9203      	str	r2, [sp, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	bfb8      	it	lt
 8003d46:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d4a:	3402      	adds	r4, #2
 8003d4c:	9305      	str	r3, [sp, #20]
 8003d4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003e24 <_vfiprintf_r+0x230>
 8003d52:	7821      	ldrb	r1, [r4, #0]
 8003d54:	2203      	movs	r2, #3
 8003d56:	4650      	mov	r0, sl
 8003d58:	f7fc fa42 	bl	80001e0 <memchr>
 8003d5c:	b138      	cbz	r0, 8003d6e <_vfiprintf_r+0x17a>
 8003d5e:	9b04      	ldr	r3, [sp, #16]
 8003d60:	eba0 000a 	sub.w	r0, r0, sl
 8003d64:	2240      	movs	r2, #64	; 0x40
 8003d66:	4082      	lsls	r2, r0
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	3401      	adds	r4, #1
 8003d6c:	9304      	str	r3, [sp, #16]
 8003d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d72:	4829      	ldr	r0, [pc, #164]	; (8003e18 <_vfiprintf_r+0x224>)
 8003d74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d78:	2206      	movs	r2, #6
 8003d7a:	f7fc fa31 	bl	80001e0 <memchr>
 8003d7e:	2800      	cmp	r0, #0
 8003d80:	d03f      	beq.n	8003e02 <_vfiprintf_r+0x20e>
 8003d82:	4b26      	ldr	r3, [pc, #152]	; (8003e1c <_vfiprintf_r+0x228>)
 8003d84:	bb1b      	cbnz	r3, 8003dce <_vfiprintf_r+0x1da>
 8003d86:	9b03      	ldr	r3, [sp, #12]
 8003d88:	3307      	adds	r3, #7
 8003d8a:	f023 0307 	bic.w	r3, r3, #7
 8003d8e:	3308      	adds	r3, #8
 8003d90:	9303      	str	r3, [sp, #12]
 8003d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d94:	443b      	add	r3, r7
 8003d96:	9309      	str	r3, [sp, #36]	; 0x24
 8003d98:	e768      	b.n	8003c6c <_vfiprintf_r+0x78>
 8003d9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d9e:	460c      	mov	r4, r1
 8003da0:	2001      	movs	r0, #1
 8003da2:	e7a6      	b.n	8003cf2 <_vfiprintf_r+0xfe>
 8003da4:	2300      	movs	r3, #0
 8003da6:	3401      	adds	r4, #1
 8003da8:	9305      	str	r3, [sp, #20]
 8003daa:	4619      	mov	r1, r3
 8003dac:	f04f 0c0a 	mov.w	ip, #10
 8003db0:	4620      	mov	r0, r4
 8003db2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003db6:	3a30      	subs	r2, #48	; 0x30
 8003db8:	2a09      	cmp	r2, #9
 8003dba:	d903      	bls.n	8003dc4 <_vfiprintf_r+0x1d0>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0c6      	beq.n	8003d4e <_vfiprintf_r+0x15a>
 8003dc0:	9105      	str	r1, [sp, #20]
 8003dc2:	e7c4      	b.n	8003d4e <_vfiprintf_r+0x15a>
 8003dc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dc8:	4604      	mov	r4, r0
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e7f0      	b.n	8003db0 <_vfiprintf_r+0x1bc>
 8003dce:	ab03      	add	r3, sp, #12
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	462a      	mov	r2, r5
 8003dd4:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <_vfiprintf_r+0x22c>)
 8003dd6:	a904      	add	r1, sp, #16
 8003dd8:	4630      	mov	r0, r6
 8003dda:	f3af 8000 	nop.w
 8003dde:	4607      	mov	r7, r0
 8003de0:	1c78      	adds	r0, r7, #1
 8003de2:	d1d6      	bne.n	8003d92 <_vfiprintf_r+0x19e>
 8003de4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003de6:	07d9      	lsls	r1, r3, #31
 8003de8:	d405      	bmi.n	8003df6 <_vfiprintf_r+0x202>
 8003dea:	89ab      	ldrh	r3, [r5, #12]
 8003dec:	059a      	lsls	r2, r3, #22
 8003dee:	d402      	bmi.n	8003df6 <_vfiprintf_r+0x202>
 8003df0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003df2:	f7ff fc83 	bl	80036fc <__retarget_lock_release_recursive>
 8003df6:	89ab      	ldrh	r3, [r5, #12]
 8003df8:	065b      	lsls	r3, r3, #25
 8003dfa:	f53f af1d 	bmi.w	8003c38 <_vfiprintf_r+0x44>
 8003dfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e00:	e71c      	b.n	8003c3c <_vfiprintf_r+0x48>
 8003e02:	ab03      	add	r3, sp, #12
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	462a      	mov	r2, r5
 8003e08:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <_vfiprintf_r+0x22c>)
 8003e0a:	a904      	add	r1, sp, #16
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	f000 f879 	bl	8003f04 <_printf_i>
 8003e12:	e7e4      	b.n	8003dde <_vfiprintf_r+0x1ea>
 8003e14:	0800454c 	.word	0x0800454c
 8003e18:	08004556 	.word	0x08004556
 8003e1c:	00000000 	.word	0x00000000
 8003e20:	08003bcf 	.word	0x08003bcf
 8003e24:	08004552 	.word	0x08004552

08003e28 <_printf_common>:
 8003e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e2c:	4616      	mov	r6, r2
 8003e2e:	4699      	mov	r9, r3
 8003e30:	688a      	ldr	r2, [r1, #8]
 8003e32:	690b      	ldr	r3, [r1, #16]
 8003e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	bfb8      	it	lt
 8003e3c:	4613      	movlt	r3, r2
 8003e3e:	6033      	str	r3, [r6, #0]
 8003e40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e44:	4607      	mov	r7, r0
 8003e46:	460c      	mov	r4, r1
 8003e48:	b10a      	cbz	r2, 8003e4e <_printf_common+0x26>
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	6033      	str	r3, [r6, #0]
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	0699      	lsls	r1, r3, #26
 8003e52:	bf42      	ittt	mi
 8003e54:	6833      	ldrmi	r3, [r6, #0]
 8003e56:	3302      	addmi	r3, #2
 8003e58:	6033      	strmi	r3, [r6, #0]
 8003e5a:	6825      	ldr	r5, [r4, #0]
 8003e5c:	f015 0506 	ands.w	r5, r5, #6
 8003e60:	d106      	bne.n	8003e70 <_printf_common+0x48>
 8003e62:	f104 0a19 	add.w	sl, r4, #25
 8003e66:	68e3      	ldr	r3, [r4, #12]
 8003e68:	6832      	ldr	r2, [r6, #0]
 8003e6a:	1a9b      	subs	r3, r3, r2
 8003e6c:	42ab      	cmp	r3, r5
 8003e6e:	dc26      	bgt.n	8003ebe <_printf_common+0x96>
 8003e70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e74:	1e13      	subs	r3, r2, #0
 8003e76:	6822      	ldr	r2, [r4, #0]
 8003e78:	bf18      	it	ne
 8003e7a:	2301      	movne	r3, #1
 8003e7c:	0692      	lsls	r2, r2, #26
 8003e7e:	d42b      	bmi.n	8003ed8 <_printf_common+0xb0>
 8003e80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e84:	4649      	mov	r1, r9
 8003e86:	4638      	mov	r0, r7
 8003e88:	47c0      	blx	r8
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	d01e      	beq.n	8003ecc <_printf_common+0xa4>
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	6922      	ldr	r2, [r4, #16]
 8003e92:	f003 0306 	and.w	r3, r3, #6
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	bf02      	ittt	eq
 8003e9a:	68e5      	ldreq	r5, [r4, #12]
 8003e9c:	6833      	ldreq	r3, [r6, #0]
 8003e9e:	1aed      	subeq	r5, r5, r3
 8003ea0:	68a3      	ldr	r3, [r4, #8]
 8003ea2:	bf0c      	ite	eq
 8003ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ea8:	2500      	movne	r5, #0
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	bfc4      	itt	gt
 8003eae:	1a9b      	subgt	r3, r3, r2
 8003eb0:	18ed      	addgt	r5, r5, r3
 8003eb2:	2600      	movs	r6, #0
 8003eb4:	341a      	adds	r4, #26
 8003eb6:	42b5      	cmp	r5, r6
 8003eb8:	d11a      	bne.n	8003ef0 <_printf_common+0xc8>
 8003eba:	2000      	movs	r0, #0
 8003ebc:	e008      	b.n	8003ed0 <_printf_common+0xa8>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	4652      	mov	r2, sl
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	47c0      	blx	r8
 8003ec8:	3001      	adds	r0, #1
 8003eca:	d103      	bne.n	8003ed4 <_printf_common+0xac>
 8003ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ed4:	3501      	adds	r5, #1
 8003ed6:	e7c6      	b.n	8003e66 <_printf_common+0x3e>
 8003ed8:	18e1      	adds	r1, r4, r3
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	2030      	movs	r0, #48	; 0x30
 8003ede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ee2:	4422      	add	r2, r4
 8003ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003eec:	3302      	adds	r3, #2
 8003eee:	e7c7      	b.n	8003e80 <_printf_common+0x58>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	4649      	mov	r1, r9
 8003ef6:	4638      	mov	r0, r7
 8003ef8:	47c0      	blx	r8
 8003efa:	3001      	adds	r0, #1
 8003efc:	d0e6      	beq.n	8003ecc <_printf_common+0xa4>
 8003efe:	3601      	adds	r6, #1
 8003f00:	e7d9      	b.n	8003eb6 <_printf_common+0x8e>
	...

08003f04 <_printf_i>:
 8003f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f08:	7e0f      	ldrb	r7, [r1, #24]
 8003f0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f0c:	2f78      	cmp	r7, #120	; 0x78
 8003f0e:	4691      	mov	r9, r2
 8003f10:	4680      	mov	r8, r0
 8003f12:	460c      	mov	r4, r1
 8003f14:	469a      	mov	sl, r3
 8003f16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f1a:	d807      	bhi.n	8003f2c <_printf_i+0x28>
 8003f1c:	2f62      	cmp	r7, #98	; 0x62
 8003f1e:	d80a      	bhi.n	8003f36 <_printf_i+0x32>
 8003f20:	2f00      	cmp	r7, #0
 8003f22:	f000 80d4 	beq.w	80040ce <_printf_i+0x1ca>
 8003f26:	2f58      	cmp	r7, #88	; 0x58
 8003f28:	f000 80c0 	beq.w	80040ac <_printf_i+0x1a8>
 8003f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f34:	e03a      	b.n	8003fac <_printf_i+0xa8>
 8003f36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f3a:	2b15      	cmp	r3, #21
 8003f3c:	d8f6      	bhi.n	8003f2c <_printf_i+0x28>
 8003f3e:	a101      	add	r1, pc, #4	; (adr r1, 8003f44 <_printf_i+0x40>)
 8003f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f44:	08003f9d 	.word	0x08003f9d
 8003f48:	08003fb1 	.word	0x08003fb1
 8003f4c:	08003f2d 	.word	0x08003f2d
 8003f50:	08003f2d 	.word	0x08003f2d
 8003f54:	08003f2d 	.word	0x08003f2d
 8003f58:	08003f2d 	.word	0x08003f2d
 8003f5c:	08003fb1 	.word	0x08003fb1
 8003f60:	08003f2d 	.word	0x08003f2d
 8003f64:	08003f2d 	.word	0x08003f2d
 8003f68:	08003f2d 	.word	0x08003f2d
 8003f6c:	08003f2d 	.word	0x08003f2d
 8003f70:	080040b5 	.word	0x080040b5
 8003f74:	08003fdd 	.word	0x08003fdd
 8003f78:	0800406f 	.word	0x0800406f
 8003f7c:	08003f2d 	.word	0x08003f2d
 8003f80:	08003f2d 	.word	0x08003f2d
 8003f84:	080040d7 	.word	0x080040d7
 8003f88:	08003f2d 	.word	0x08003f2d
 8003f8c:	08003fdd 	.word	0x08003fdd
 8003f90:	08003f2d 	.word	0x08003f2d
 8003f94:	08003f2d 	.word	0x08003f2d
 8003f98:	08004077 	.word	0x08004077
 8003f9c:	682b      	ldr	r3, [r5, #0]
 8003f9e:	1d1a      	adds	r2, r3, #4
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	602a      	str	r2, [r5, #0]
 8003fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fac:	2301      	movs	r3, #1
 8003fae:	e09f      	b.n	80040f0 <_printf_i+0x1ec>
 8003fb0:	6820      	ldr	r0, [r4, #0]
 8003fb2:	682b      	ldr	r3, [r5, #0]
 8003fb4:	0607      	lsls	r7, r0, #24
 8003fb6:	f103 0104 	add.w	r1, r3, #4
 8003fba:	6029      	str	r1, [r5, #0]
 8003fbc:	d501      	bpl.n	8003fc2 <_printf_i+0xbe>
 8003fbe:	681e      	ldr	r6, [r3, #0]
 8003fc0:	e003      	b.n	8003fca <_printf_i+0xc6>
 8003fc2:	0646      	lsls	r6, r0, #25
 8003fc4:	d5fb      	bpl.n	8003fbe <_printf_i+0xba>
 8003fc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003fca:	2e00      	cmp	r6, #0
 8003fcc:	da03      	bge.n	8003fd6 <_printf_i+0xd2>
 8003fce:	232d      	movs	r3, #45	; 0x2d
 8003fd0:	4276      	negs	r6, r6
 8003fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fd6:	485a      	ldr	r0, [pc, #360]	; (8004140 <_printf_i+0x23c>)
 8003fd8:	230a      	movs	r3, #10
 8003fda:	e012      	b.n	8004002 <_printf_i+0xfe>
 8003fdc:	682b      	ldr	r3, [r5, #0]
 8003fde:	6820      	ldr	r0, [r4, #0]
 8003fe0:	1d19      	adds	r1, r3, #4
 8003fe2:	6029      	str	r1, [r5, #0]
 8003fe4:	0605      	lsls	r5, r0, #24
 8003fe6:	d501      	bpl.n	8003fec <_printf_i+0xe8>
 8003fe8:	681e      	ldr	r6, [r3, #0]
 8003fea:	e002      	b.n	8003ff2 <_printf_i+0xee>
 8003fec:	0641      	lsls	r1, r0, #25
 8003fee:	d5fb      	bpl.n	8003fe8 <_printf_i+0xe4>
 8003ff0:	881e      	ldrh	r6, [r3, #0]
 8003ff2:	4853      	ldr	r0, [pc, #332]	; (8004140 <_printf_i+0x23c>)
 8003ff4:	2f6f      	cmp	r7, #111	; 0x6f
 8003ff6:	bf0c      	ite	eq
 8003ff8:	2308      	moveq	r3, #8
 8003ffa:	230a      	movne	r3, #10
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004002:	6865      	ldr	r5, [r4, #4]
 8004004:	60a5      	str	r5, [r4, #8]
 8004006:	2d00      	cmp	r5, #0
 8004008:	bfa2      	ittt	ge
 800400a:	6821      	ldrge	r1, [r4, #0]
 800400c:	f021 0104 	bicge.w	r1, r1, #4
 8004010:	6021      	strge	r1, [r4, #0]
 8004012:	b90e      	cbnz	r6, 8004018 <_printf_i+0x114>
 8004014:	2d00      	cmp	r5, #0
 8004016:	d04b      	beq.n	80040b0 <_printf_i+0x1ac>
 8004018:	4615      	mov	r5, r2
 800401a:	fbb6 f1f3 	udiv	r1, r6, r3
 800401e:	fb03 6711 	mls	r7, r3, r1, r6
 8004022:	5dc7      	ldrb	r7, [r0, r7]
 8004024:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004028:	4637      	mov	r7, r6
 800402a:	42bb      	cmp	r3, r7
 800402c:	460e      	mov	r6, r1
 800402e:	d9f4      	bls.n	800401a <_printf_i+0x116>
 8004030:	2b08      	cmp	r3, #8
 8004032:	d10b      	bne.n	800404c <_printf_i+0x148>
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	07de      	lsls	r6, r3, #31
 8004038:	d508      	bpl.n	800404c <_printf_i+0x148>
 800403a:	6923      	ldr	r3, [r4, #16]
 800403c:	6861      	ldr	r1, [r4, #4]
 800403e:	4299      	cmp	r1, r3
 8004040:	bfde      	ittt	le
 8004042:	2330      	movle	r3, #48	; 0x30
 8004044:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004048:	f105 35ff 	addle.w	r5, r5, #4294967295
 800404c:	1b52      	subs	r2, r2, r5
 800404e:	6122      	str	r2, [r4, #16]
 8004050:	f8cd a000 	str.w	sl, [sp]
 8004054:	464b      	mov	r3, r9
 8004056:	aa03      	add	r2, sp, #12
 8004058:	4621      	mov	r1, r4
 800405a:	4640      	mov	r0, r8
 800405c:	f7ff fee4 	bl	8003e28 <_printf_common>
 8004060:	3001      	adds	r0, #1
 8004062:	d14a      	bne.n	80040fa <_printf_i+0x1f6>
 8004064:	f04f 30ff 	mov.w	r0, #4294967295
 8004068:	b004      	add	sp, #16
 800406a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	f043 0320 	orr.w	r3, r3, #32
 8004074:	6023      	str	r3, [r4, #0]
 8004076:	4833      	ldr	r0, [pc, #204]	; (8004144 <_printf_i+0x240>)
 8004078:	2778      	movs	r7, #120	; 0x78
 800407a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	6829      	ldr	r1, [r5, #0]
 8004082:	061f      	lsls	r7, r3, #24
 8004084:	f851 6b04 	ldr.w	r6, [r1], #4
 8004088:	d402      	bmi.n	8004090 <_printf_i+0x18c>
 800408a:	065f      	lsls	r7, r3, #25
 800408c:	bf48      	it	mi
 800408e:	b2b6      	uxthmi	r6, r6
 8004090:	07df      	lsls	r7, r3, #31
 8004092:	bf48      	it	mi
 8004094:	f043 0320 	orrmi.w	r3, r3, #32
 8004098:	6029      	str	r1, [r5, #0]
 800409a:	bf48      	it	mi
 800409c:	6023      	strmi	r3, [r4, #0]
 800409e:	b91e      	cbnz	r6, 80040a8 <_printf_i+0x1a4>
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	f023 0320 	bic.w	r3, r3, #32
 80040a6:	6023      	str	r3, [r4, #0]
 80040a8:	2310      	movs	r3, #16
 80040aa:	e7a7      	b.n	8003ffc <_printf_i+0xf8>
 80040ac:	4824      	ldr	r0, [pc, #144]	; (8004140 <_printf_i+0x23c>)
 80040ae:	e7e4      	b.n	800407a <_printf_i+0x176>
 80040b0:	4615      	mov	r5, r2
 80040b2:	e7bd      	b.n	8004030 <_printf_i+0x12c>
 80040b4:	682b      	ldr	r3, [r5, #0]
 80040b6:	6826      	ldr	r6, [r4, #0]
 80040b8:	6961      	ldr	r1, [r4, #20]
 80040ba:	1d18      	adds	r0, r3, #4
 80040bc:	6028      	str	r0, [r5, #0]
 80040be:	0635      	lsls	r5, r6, #24
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	d501      	bpl.n	80040c8 <_printf_i+0x1c4>
 80040c4:	6019      	str	r1, [r3, #0]
 80040c6:	e002      	b.n	80040ce <_printf_i+0x1ca>
 80040c8:	0670      	lsls	r0, r6, #25
 80040ca:	d5fb      	bpl.n	80040c4 <_printf_i+0x1c0>
 80040cc:	8019      	strh	r1, [r3, #0]
 80040ce:	2300      	movs	r3, #0
 80040d0:	6123      	str	r3, [r4, #16]
 80040d2:	4615      	mov	r5, r2
 80040d4:	e7bc      	b.n	8004050 <_printf_i+0x14c>
 80040d6:	682b      	ldr	r3, [r5, #0]
 80040d8:	1d1a      	adds	r2, r3, #4
 80040da:	602a      	str	r2, [r5, #0]
 80040dc:	681d      	ldr	r5, [r3, #0]
 80040de:	6862      	ldr	r2, [r4, #4]
 80040e0:	2100      	movs	r1, #0
 80040e2:	4628      	mov	r0, r5
 80040e4:	f7fc f87c 	bl	80001e0 <memchr>
 80040e8:	b108      	cbz	r0, 80040ee <_printf_i+0x1ea>
 80040ea:	1b40      	subs	r0, r0, r5
 80040ec:	6060      	str	r0, [r4, #4]
 80040ee:	6863      	ldr	r3, [r4, #4]
 80040f0:	6123      	str	r3, [r4, #16]
 80040f2:	2300      	movs	r3, #0
 80040f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040f8:	e7aa      	b.n	8004050 <_printf_i+0x14c>
 80040fa:	6923      	ldr	r3, [r4, #16]
 80040fc:	462a      	mov	r2, r5
 80040fe:	4649      	mov	r1, r9
 8004100:	4640      	mov	r0, r8
 8004102:	47d0      	blx	sl
 8004104:	3001      	adds	r0, #1
 8004106:	d0ad      	beq.n	8004064 <_printf_i+0x160>
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	079b      	lsls	r3, r3, #30
 800410c:	d413      	bmi.n	8004136 <_printf_i+0x232>
 800410e:	68e0      	ldr	r0, [r4, #12]
 8004110:	9b03      	ldr	r3, [sp, #12]
 8004112:	4298      	cmp	r0, r3
 8004114:	bfb8      	it	lt
 8004116:	4618      	movlt	r0, r3
 8004118:	e7a6      	b.n	8004068 <_printf_i+0x164>
 800411a:	2301      	movs	r3, #1
 800411c:	4632      	mov	r2, r6
 800411e:	4649      	mov	r1, r9
 8004120:	4640      	mov	r0, r8
 8004122:	47d0      	blx	sl
 8004124:	3001      	adds	r0, #1
 8004126:	d09d      	beq.n	8004064 <_printf_i+0x160>
 8004128:	3501      	adds	r5, #1
 800412a:	68e3      	ldr	r3, [r4, #12]
 800412c:	9903      	ldr	r1, [sp, #12]
 800412e:	1a5b      	subs	r3, r3, r1
 8004130:	42ab      	cmp	r3, r5
 8004132:	dcf2      	bgt.n	800411a <_printf_i+0x216>
 8004134:	e7eb      	b.n	800410e <_printf_i+0x20a>
 8004136:	2500      	movs	r5, #0
 8004138:	f104 0619 	add.w	r6, r4, #25
 800413c:	e7f5      	b.n	800412a <_printf_i+0x226>
 800413e:	bf00      	nop
 8004140:	0800455d 	.word	0x0800455d
 8004144:	0800456e 	.word	0x0800456e

08004148 <__sflush_r>:
 8004148:	898a      	ldrh	r2, [r1, #12]
 800414a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800414e:	4605      	mov	r5, r0
 8004150:	0710      	lsls	r0, r2, #28
 8004152:	460c      	mov	r4, r1
 8004154:	d458      	bmi.n	8004208 <__sflush_r+0xc0>
 8004156:	684b      	ldr	r3, [r1, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	dc05      	bgt.n	8004168 <__sflush_r+0x20>
 800415c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800415e:	2b00      	cmp	r3, #0
 8004160:	dc02      	bgt.n	8004168 <__sflush_r+0x20>
 8004162:	2000      	movs	r0, #0
 8004164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800416a:	2e00      	cmp	r6, #0
 800416c:	d0f9      	beq.n	8004162 <__sflush_r+0x1a>
 800416e:	2300      	movs	r3, #0
 8004170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004174:	682f      	ldr	r7, [r5, #0]
 8004176:	6a21      	ldr	r1, [r4, #32]
 8004178:	602b      	str	r3, [r5, #0]
 800417a:	d032      	beq.n	80041e2 <__sflush_r+0x9a>
 800417c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800417e:	89a3      	ldrh	r3, [r4, #12]
 8004180:	075a      	lsls	r2, r3, #29
 8004182:	d505      	bpl.n	8004190 <__sflush_r+0x48>
 8004184:	6863      	ldr	r3, [r4, #4]
 8004186:	1ac0      	subs	r0, r0, r3
 8004188:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800418a:	b10b      	cbz	r3, 8004190 <__sflush_r+0x48>
 800418c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800418e:	1ac0      	subs	r0, r0, r3
 8004190:	2300      	movs	r3, #0
 8004192:	4602      	mov	r2, r0
 8004194:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004196:	6a21      	ldr	r1, [r4, #32]
 8004198:	4628      	mov	r0, r5
 800419a:	47b0      	blx	r6
 800419c:	1c43      	adds	r3, r0, #1
 800419e:	89a3      	ldrh	r3, [r4, #12]
 80041a0:	d106      	bne.n	80041b0 <__sflush_r+0x68>
 80041a2:	6829      	ldr	r1, [r5, #0]
 80041a4:	291d      	cmp	r1, #29
 80041a6:	d82b      	bhi.n	8004200 <__sflush_r+0xb8>
 80041a8:	4a29      	ldr	r2, [pc, #164]	; (8004250 <__sflush_r+0x108>)
 80041aa:	410a      	asrs	r2, r1
 80041ac:	07d6      	lsls	r6, r2, #31
 80041ae:	d427      	bmi.n	8004200 <__sflush_r+0xb8>
 80041b0:	2200      	movs	r2, #0
 80041b2:	6062      	str	r2, [r4, #4]
 80041b4:	04d9      	lsls	r1, r3, #19
 80041b6:	6922      	ldr	r2, [r4, #16]
 80041b8:	6022      	str	r2, [r4, #0]
 80041ba:	d504      	bpl.n	80041c6 <__sflush_r+0x7e>
 80041bc:	1c42      	adds	r2, r0, #1
 80041be:	d101      	bne.n	80041c4 <__sflush_r+0x7c>
 80041c0:	682b      	ldr	r3, [r5, #0]
 80041c2:	b903      	cbnz	r3, 80041c6 <__sflush_r+0x7e>
 80041c4:	6560      	str	r0, [r4, #84]	; 0x54
 80041c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041c8:	602f      	str	r7, [r5, #0]
 80041ca:	2900      	cmp	r1, #0
 80041cc:	d0c9      	beq.n	8004162 <__sflush_r+0x1a>
 80041ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041d2:	4299      	cmp	r1, r3
 80041d4:	d002      	beq.n	80041dc <__sflush_r+0x94>
 80041d6:	4628      	mov	r0, r5
 80041d8:	f7ff fa92 	bl	8003700 <_free_r>
 80041dc:	2000      	movs	r0, #0
 80041de:	6360      	str	r0, [r4, #52]	; 0x34
 80041e0:	e7c0      	b.n	8004164 <__sflush_r+0x1c>
 80041e2:	2301      	movs	r3, #1
 80041e4:	4628      	mov	r0, r5
 80041e6:	47b0      	blx	r6
 80041e8:	1c41      	adds	r1, r0, #1
 80041ea:	d1c8      	bne.n	800417e <__sflush_r+0x36>
 80041ec:	682b      	ldr	r3, [r5, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0c5      	beq.n	800417e <__sflush_r+0x36>
 80041f2:	2b1d      	cmp	r3, #29
 80041f4:	d001      	beq.n	80041fa <__sflush_r+0xb2>
 80041f6:	2b16      	cmp	r3, #22
 80041f8:	d101      	bne.n	80041fe <__sflush_r+0xb6>
 80041fa:	602f      	str	r7, [r5, #0]
 80041fc:	e7b1      	b.n	8004162 <__sflush_r+0x1a>
 80041fe:	89a3      	ldrh	r3, [r4, #12]
 8004200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004204:	81a3      	strh	r3, [r4, #12]
 8004206:	e7ad      	b.n	8004164 <__sflush_r+0x1c>
 8004208:	690f      	ldr	r7, [r1, #16]
 800420a:	2f00      	cmp	r7, #0
 800420c:	d0a9      	beq.n	8004162 <__sflush_r+0x1a>
 800420e:	0793      	lsls	r3, r2, #30
 8004210:	680e      	ldr	r6, [r1, #0]
 8004212:	bf08      	it	eq
 8004214:	694b      	ldreq	r3, [r1, #20]
 8004216:	600f      	str	r7, [r1, #0]
 8004218:	bf18      	it	ne
 800421a:	2300      	movne	r3, #0
 800421c:	eba6 0807 	sub.w	r8, r6, r7
 8004220:	608b      	str	r3, [r1, #8]
 8004222:	f1b8 0f00 	cmp.w	r8, #0
 8004226:	dd9c      	ble.n	8004162 <__sflush_r+0x1a>
 8004228:	6a21      	ldr	r1, [r4, #32]
 800422a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800422c:	4643      	mov	r3, r8
 800422e:	463a      	mov	r2, r7
 8004230:	4628      	mov	r0, r5
 8004232:	47b0      	blx	r6
 8004234:	2800      	cmp	r0, #0
 8004236:	dc06      	bgt.n	8004246 <__sflush_r+0xfe>
 8004238:	89a3      	ldrh	r3, [r4, #12]
 800423a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800423e:	81a3      	strh	r3, [r4, #12]
 8004240:	f04f 30ff 	mov.w	r0, #4294967295
 8004244:	e78e      	b.n	8004164 <__sflush_r+0x1c>
 8004246:	4407      	add	r7, r0
 8004248:	eba8 0800 	sub.w	r8, r8, r0
 800424c:	e7e9      	b.n	8004222 <__sflush_r+0xda>
 800424e:	bf00      	nop
 8004250:	dfbffffe 	.word	0xdfbffffe

08004254 <_fflush_r>:
 8004254:	b538      	push	{r3, r4, r5, lr}
 8004256:	690b      	ldr	r3, [r1, #16]
 8004258:	4605      	mov	r5, r0
 800425a:	460c      	mov	r4, r1
 800425c:	b913      	cbnz	r3, 8004264 <_fflush_r+0x10>
 800425e:	2500      	movs	r5, #0
 8004260:	4628      	mov	r0, r5
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	b118      	cbz	r0, 800426e <_fflush_r+0x1a>
 8004266:	6a03      	ldr	r3, [r0, #32]
 8004268:	b90b      	cbnz	r3, 800426e <_fflush_r+0x1a>
 800426a:	f7ff f831 	bl	80032d0 <__sinit>
 800426e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0f3      	beq.n	800425e <_fflush_r+0xa>
 8004276:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004278:	07d0      	lsls	r0, r2, #31
 800427a:	d404      	bmi.n	8004286 <_fflush_r+0x32>
 800427c:	0599      	lsls	r1, r3, #22
 800427e:	d402      	bmi.n	8004286 <_fflush_r+0x32>
 8004280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004282:	f7ff fa3a 	bl	80036fa <__retarget_lock_acquire_recursive>
 8004286:	4628      	mov	r0, r5
 8004288:	4621      	mov	r1, r4
 800428a:	f7ff ff5d 	bl	8004148 <__sflush_r>
 800428e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004290:	07da      	lsls	r2, r3, #31
 8004292:	4605      	mov	r5, r0
 8004294:	d4e4      	bmi.n	8004260 <_fflush_r+0xc>
 8004296:	89a3      	ldrh	r3, [r4, #12]
 8004298:	059b      	lsls	r3, r3, #22
 800429a:	d4e1      	bmi.n	8004260 <_fflush_r+0xc>
 800429c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800429e:	f7ff fa2d 	bl	80036fc <__retarget_lock_release_recursive>
 80042a2:	e7dd      	b.n	8004260 <_fflush_r+0xc>

080042a4 <__swhatbuf_r>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	460c      	mov	r4, r1
 80042a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ac:	2900      	cmp	r1, #0
 80042ae:	b096      	sub	sp, #88	; 0x58
 80042b0:	4615      	mov	r5, r2
 80042b2:	461e      	mov	r6, r3
 80042b4:	da0d      	bge.n	80042d2 <__swhatbuf_r+0x2e>
 80042b6:	89a3      	ldrh	r3, [r4, #12]
 80042b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80042bc:	f04f 0100 	mov.w	r1, #0
 80042c0:	bf0c      	ite	eq
 80042c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80042c6:	2340      	movne	r3, #64	; 0x40
 80042c8:	2000      	movs	r0, #0
 80042ca:	6031      	str	r1, [r6, #0]
 80042cc:	602b      	str	r3, [r5, #0]
 80042ce:	b016      	add	sp, #88	; 0x58
 80042d0:	bd70      	pop	{r4, r5, r6, pc}
 80042d2:	466a      	mov	r2, sp
 80042d4:	f000 f862 	bl	800439c <_fstat_r>
 80042d8:	2800      	cmp	r0, #0
 80042da:	dbec      	blt.n	80042b6 <__swhatbuf_r+0x12>
 80042dc:	9901      	ldr	r1, [sp, #4]
 80042de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80042e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80042e6:	4259      	negs	r1, r3
 80042e8:	4159      	adcs	r1, r3
 80042ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042ee:	e7eb      	b.n	80042c8 <__swhatbuf_r+0x24>

080042f0 <__smakebuf_r>:
 80042f0:	898b      	ldrh	r3, [r1, #12]
 80042f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042f4:	079d      	lsls	r5, r3, #30
 80042f6:	4606      	mov	r6, r0
 80042f8:	460c      	mov	r4, r1
 80042fa:	d507      	bpl.n	800430c <__smakebuf_r+0x1c>
 80042fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004300:	6023      	str	r3, [r4, #0]
 8004302:	6123      	str	r3, [r4, #16]
 8004304:	2301      	movs	r3, #1
 8004306:	6163      	str	r3, [r4, #20]
 8004308:	b002      	add	sp, #8
 800430a:	bd70      	pop	{r4, r5, r6, pc}
 800430c:	ab01      	add	r3, sp, #4
 800430e:	466a      	mov	r2, sp
 8004310:	f7ff ffc8 	bl	80042a4 <__swhatbuf_r>
 8004314:	9900      	ldr	r1, [sp, #0]
 8004316:	4605      	mov	r5, r0
 8004318:	4630      	mov	r0, r6
 800431a:	f7ff fa5d 	bl	80037d8 <_malloc_r>
 800431e:	b948      	cbnz	r0, 8004334 <__smakebuf_r+0x44>
 8004320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004324:	059a      	lsls	r2, r3, #22
 8004326:	d4ef      	bmi.n	8004308 <__smakebuf_r+0x18>
 8004328:	f023 0303 	bic.w	r3, r3, #3
 800432c:	f043 0302 	orr.w	r3, r3, #2
 8004330:	81a3      	strh	r3, [r4, #12]
 8004332:	e7e3      	b.n	80042fc <__smakebuf_r+0xc>
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	6020      	str	r0, [r4, #0]
 8004338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800433c:	81a3      	strh	r3, [r4, #12]
 800433e:	9b00      	ldr	r3, [sp, #0]
 8004340:	6163      	str	r3, [r4, #20]
 8004342:	9b01      	ldr	r3, [sp, #4]
 8004344:	6120      	str	r0, [r4, #16]
 8004346:	b15b      	cbz	r3, 8004360 <__smakebuf_r+0x70>
 8004348:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800434c:	4630      	mov	r0, r6
 800434e:	f000 f837 	bl	80043c0 <_isatty_r>
 8004352:	b128      	cbz	r0, 8004360 <__smakebuf_r+0x70>
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	81a3      	strh	r3, [r4, #12]
 8004360:	89a3      	ldrh	r3, [r4, #12]
 8004362:	431d      	orrs	r5, r3
 8004364:	81a5      	strh	r5, [r4, #12]
 8004366:	e7cf      	b.n	8004308 <__smakebuf_r+0x18>

08004368 <memmove>:
 8004368:	4288      	cmp	r0, r1
 800436a:	b510      	push	{r4, lr}
 800436c:	eb01 0402 	add.w	r4, r1, r2
 8004370:	d902      	bls.n	8004378 <memmove+0x10>
 8004372:	4284      	cmp	r4, r0
 8004374:	4623      	mov	r3, r4
 8004376:	d807      	bhi.n	8004388 <memmove+0x20>
 8004378:	1e43      	subs	r3, r0, #1
 800437a:	42a1      	cmp	r1, r4
 800437c:	d008      	beq.n	8004390 <memmove+0x28>
 800437e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004382:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004386:	e7f8      	b.n	800437a <memmove+0x12>
 8004388:	4402      	add	r2, r0
 800438a:	4601      	mov	r1, r0
 800438c:	428a      	cmp	r2, r1
 800438e:	d100      	bne.n	8004392 <memmove+0x2a>
 8004390:	bd10      	pop	{r4, pc}
 8004392:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004396:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800439a:	e7f7      	b.n	800438c <memmove+0x24>

0800439c <_fstat_r>:
 800439c:	b538      	push	{r3, r4, r5, lr}
 800439e:	4d07      	ldr	r5, [pc, #28]	; (80043bc <_fstat_r+0x20>)
 80043a0:	2300      	movs	r3, #0
 80043a2:	4604      	mov	r4, r0
 80043a4:	4608      	mov	r0, r1
 80043a6:	4611      	mov	r1, r2
 80043a8:	602b      	str	r3, [r5, #0]
 80043aa:	f7fc fcc8 	bl	8000d3e <_fstat>
 80043ae:	1c43      	adds	r3, r0, #1
 80043b0:	d102      	bne.n	80043b8 <_fstat_r+0x1c>
 80043b2:	682b      	ldr	r3, [r5, #0]
 80043b4:	b103      	cbz	r3, 80043b8 <_fstat_r+0x1c>
 80043b6:	6023      	str	r3, [r4, #0]
 80043b8:	bd38      	pop	{r3, r4, r5, pc}
 80043ba:	bf00      	nop
 80043bc:	20000268 	.word	0x20000268

080043c0 <_isatty_r>:
 80043c0:	b538      	push	{r3, r4, r5, lr}
 80043c2:	4d06      	ldr	r5, [pc, #24]	; (80043dc <_isatty_r+0x1c>)
 80043c4:	2300      	movs	r3, #0
 80043c6:	4604      	mov	r4, r0
 80043c8:	4608      	mov	r0, r1
 80043ca:	602b      	str	r3, [r5, #0]
 80043cc:	f7fc fcc7 	bl	8000d5e <_isatty>
 80043d0:	1c43      	adds	r3, r0, #1
 80043d2:	d102      	bne.n	80043da <_isatty_r+0x1a>
 80043d4:	682b      	ldr	r3, [r5, #0]
 80043d6:	b103      	cbz	r3, 80043da <_isatty_r+0x1a>
 80043d8:	6023      	str	r3, [r4, #0]
 80043da:	bd38      	pop	{r3, r4, r5, pc}
 80043dc:	20000268 	.word	0x20000268

080043e0 <_sbrk_r>:
 80043e0:	b538      	push	{r3, r4, r5, lr}
 80043e2:	4d06      	ldr	r5, [pc, #24]	; (80043fc <_sbrk_r+0x1c>)
 80043e4:	2300      	movs	r3, #0
 80043e6:	4604      	mov	r4, r0
 80043e8:	4608      	mov	r0, r1
 80043ea:	602b      	str	r3, [r5, #0]
 80043ec:	f7fc fcd0 	bl	8000d90 <_sbrk>
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	d102      	bne.n	80043fa <_sbrk_r+0x1a>
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	b103      	cbz	r3, 80043fa <_sbrk_r+0x1a>
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	bd38      	pop	{r3, r4, r5, pc}
 80043fc:	20000268 	.word	0x20000268

08004400 <memcpy>:
 8004400:	440a      	add	r2, r1
 8004402:	4291      	cmp	r1, r2
 8004404:	f100 33ff 	add.w	r3, r0, #4294967295
 8004408:	d100      	bne.n	800440c <memcpy+0xc>
 800440a:	4770      	bx	lr
 800440c:	b510      	push	{r4, lr}
 800440e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004412:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004416:	4291      	cmp	r1, r2
 8004418:	d1f9      	bne.n	800440e <memcpy+0xe>
 800441a:	bd10      	pop	{r4, pc}

0800441c <_realloc_r>:
 800441c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004420:	4680      	mov	r8, r0
 8004422:	4614      	mov	r4, r2
 8004424:	460e      	mov	r6, r1
 8004426:	b921      	cbnz	r1, 8004432 <_realloc_r+0x16>
 8004428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800442c:	4611      	mov	r1, r2
 800442e:	f7ff b9d3 	b.w	80037d8 <_malloc_r>
 8004432:	b92a      	cbnz	r2, 8004440 <_realloc_r+0x24>
 8004434:	f7ff f964 	bl	8003700 <_free_r>
 8004438:	4625      	mov	r5, r4
 800443a:	4628      	mov	r0, r5
 800443c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004440:	f000 f81b 	bl	800447a <_malloc_usable_size_r>
 8004444:	4284      	cmp	r4, r0
 8004446:	4607      	mov	r7, r0
 8004448:	d802      	bhi.n	8004450 <_realloc_r+0x34>
 800444a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800444e:	d812      	bhi.n	8004476 <_realloc_r+0x5a>
 8004450:	4621      	mov	r1, r4
 8004452:	4640      	mov	r0, r8
 8004454:	f7ff f9c0 	bl	80037d8 <_malloc_r>
 8004458:	4605      	mov	r5, r0
 800445a:	2800      	cmp	r0, #0
 800445c:	d0ed      	beq.n	800443a <_realloc_r+0x1e>
 800445e:	42bc      	cmp	r4, r7
 8004460:	4622      	mov	r2, r4
 8004462:	4631      	mov	r1, r6
 8004464:	bf28      	it	cs
 8004466:	463a      	movcs	r2, r7
 8004468:	f7ff ffca 	bl	8004400 <memcpy>
 800446c:	4631      	mov	r1, r6
 800446e:	4640      	mov	r0, r8
 8004470:	f7ff f946 	bl	8003700 <_free_r>
 8004474:	e7e1      	b.n	800443a <_realloc_r+0x1e>
 8004476:	4635      	mov	r5, r6
 8004478:	e7df      	b.n	800443a <_realloc_r+0x1e>

0800447a <_malloc_usable_size_r>:
 800447a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800447e:	1f18      	subs	r0, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	bfbc      	itt	lt
 8004484:	580b      	ldrlt	r3, [r1, r0]
 8004486:	18c0      	addlt	r0, r0, r3
 8004488:	4770      	bx	lr
	...

0800448c <_init>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	bf00      	nop
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr

08004498 <_fini>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	bf00      	nop
 800449c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800449e:	bc08      	pop	{r3}
 80044a0:	469e      	mov	lr, r3
 80044a2:	4770      	bx	lr
