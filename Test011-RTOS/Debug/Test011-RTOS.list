
Test011-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aeb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0800b050  0800b050  0001b050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5c8  0800b5c8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5c8  0800b5c8  0001b5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5d0  0800b5d0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5d0  0800b5d0  0001b5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5d4  0800b5d4  0001b5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800b5d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000425c  200001d8  0800b7b0  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004434  0800b7b0  00024434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000164ee  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e3  00000000  00000000  00036739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  00039c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e8e  00000000  00000000  0003aee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000193d2  00000000  00000000  0003bd6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000152ea  00000000  00000000  00055140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099195  00000000  00000000  0006a42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000063c8  00000000  00000000  001035c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00109988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b038 	.word	0x0800b038

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800b038 	.word	0x0800b038

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <__io_getchar>:
//#include "C:\Users\user\STM32Cube\Repository\STM32Cube_FW_F4_V1.28.1\Drivers\STM32F4xx_HAL_Driver\inc\stm32f4xx_hal_i2c.h"
extern UART_HandleTypeDef huart2;


int __io_getchar(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
   char ch;
   //데이터를 받을 때까지 기다려야 하므로 while을 사용해야 함
   while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 8001006:	bf00      	nop
 8001008:	1df9      	adds	r1, r7, #7
 800100a:	230a      	movs	r3, #10
 800100c:	2201      	movs	r2, #1
 800100e:	480d      	ldr	r0, [pc, #52]	; (8001044 <__io_getchar+0x44>)
 8001010:	f002 fb47 	bl	80036a2 <HAL_UART_Receive>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f6      	bne.n	8001008 <__io_getchar+0x8>
   HAL_UART_Transmit(&huart2, &ch, 1, 10); // echo: Serial 통신에서 받은 데이터를 그대로 돌려주는 것
 800101a:	1df9      	adds	r1, r7, #7
 800101c:	230a      	movs	r3, #10
 800101e:	2201      	movs	r2, #1
 8001020:	4808      	ldr	r0, [pc, #32]	; (8001044 <__io_getchar+0x44>)
 8001022:	f002 fab3 	bl	800358c <HAL_UART_Transmit>
   if(ch == '\r') HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	2b0d      	cmp	r3, #13
 800102a:	d105      	bne.n	8001038 <__io_getchar+0x38>
 800102c:	230a      	movs	r3, #10
 800102e:	2201      	movs	r2, #1
 8001030:	4905      	ldr	r1, [pc, #20]	; (8001048 <__io_getchar+0x48>)
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <__io_getchar+0x44>)
 8001034:	f002 faaa 	bl	800358c <HAL_UART_Transmit>
   return ch;
 8001038:	79fb      	ldrb	r3, [r7, #7]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200004dc 	.word	0x200004dc
 8001048:	0800b050 	.word	0x0800b050

0800104c <__io_putchar>:
int __io_putchar(int ch) // Lowest output Function
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10); // timeout: 10ms
 8001054:	1d39      	adds	r1, r7, #4
 8001056:	230a      	movs	r3, #10
 8001058:	2201      	movs	r2, #1
 800105a:	4804      	ldr	r0, [pc, #16]	; (800106c <__io_putchar+0x20>)
 800105c:	f002 fa96 	bl	800358c <HAL_UART_Transmit>
   return ch;
 8001060:	687b      	ldr	r3, [r7, #4]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	200004dc 	.word	0x200004dc

08001070 <ProgramStart>:
void ProgramStart(char *str)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
   //printf("\033[2J\033[0;0H"); // printf("\033[2J"); : 화면 Clear
   cls();
 8001078:	f000 f830 	bl	80010dc <cls>
   Cursor(0,0);
 800107c:	2100      	movs	r1, #0
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f836 	bl	80010f0 <Cursor>
   printf("Program Name - %s\r\n", str);
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	480a      	ldr	r0, [pc, #40]	; (80010b0 <ProgramStart+0x40>)
 8001088:	f006 f9c8 	bl	800741c <iprintf>
   printf("Press Blue-button(B1) to Start ...\r\n");
 800108c:	4809      	ldr	r0, [pc, #36]	; (80010b4 <ProgramStart+0x44>)
 800108e:	f006 fa2b 	bl	80074e8 <puts>
   StandBy();
 8001092:	f000 f813 	bl	80010bc <StandBy>
   setvbuf(stdin, NULL, _IONBF, 0);
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <ProgramStart+0x48>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6858      	ldr	r0, [r3, #4]
 800109c:	2300      	movs	r3, #0
 800109e:	2202      	movs	r2, #2
 80010a0:	2100      	movs	r1, #0
 80010a2:	f006 fa29 	bl	80074f8 <setvbuf>
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	0800b054 	.word	0x0800b054
 80010b4:	0800b068 	.word	0x0800b068
 80010b8:	20000068 	.word	0x20000068

080010bc <StandBy>:

void StandBy()
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 80010c0:	bf00      	nop
 80010c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c6:	4804      	ldr	r0, [pc, #16]	; (80010d8 <StandBy+0x1c>)
 80010c8:	f001 f868 	bl	800219c <HAL_GPIO_ReadPin>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f7      	bne.n	80010c2 <StandBy+0x6>
}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40020800 	.word	0x40020800

080010dc <cls>:

void cls() // 화면 clear
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
   printf("\033[2J");
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <cls+0x10>)
 80010e2:	f006 f99b 	bl	800741c <iprintf>
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	0800b08c 	.word	0x0800b08c

080010f0 <Cursor>:

void Cursor(int x, int y)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
   char buf[20];
   sprintf(buf, "\033[%d;%dH", y,x);
 80010fa:	f107 000c 	add.w	r0, r7, #12
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	683a      	ldr	r2, [r7, #0]
 8001102:	4906      	ldr	r1, [pc, #24]	; (800111c <Cursor+0x2c>)
 8001104:	f006 faa6 	bl	8007654 <siprintf>
   puts(buf);
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4618      	mov	r0, r3
 800110e:	f006 f9eb 	bl	80074e8 <puts>
}
 8001112:	bf00      	nop
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	0800b094 	.word	0x0800b094

08001120 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4a07      	ldr	r2, [pc, #28]	; (800114c <vApplicationGetIdleTaskMemory+0x2c>)
 8001130:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	4a06      	ldr	r2, [pc, #24]	; (8001150 <vApplicationGetIdleTaskMemory+0x30>)
 8001136:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	200001f4 	.word	0x200001f4
 8001150:	20000294 	.word	0x20000294

08001154 <microDelay>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void microDelay(int us) // us : micro second
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
   int t1 = htim2.Instance->CNT;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <microDelay+0x30>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	60fb      	str	r3, [r7, #12]
//   while(1)
//   {
//      if(htim2.Instance->CNT - t1 >= us) break;
//   }
   while(htim2.Instance->CNT - t1 < us);
 8001164:	bf00      	nop
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <microDelay+0x30>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	1ad2      	subs	r2, r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	429a      	cmp	r2, r3
 8001174:	d3f7      	bcc.n	8001166 <microDelay+0x12>
//   htim2.Instance->CNT = 0;
//   while(htim2.Instance->CNT < us);
}
 8001176:	bf00      	nop
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	20000494 	.word	0x20000494

08001188 <Trigger>:

void Trigger()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2140      	movs	r1, #64	; 0x40
 8001190:	480a      	ldr	r0, [pc, #40]	; (80011bc <Trigger+0x34>)
 8001192:	f001 f81b 	bl	80021cc <HAL_GPIO_WritePin>
   microDelay(10);
 8001196:	200a      	movs	r0, #10
 8001198:	f7ff ffdc 	bl	8001154 <microDelay>
   HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 1);
 800119c:	2201      	movs	r2, #1
 800119e:	2140      	movs	r1, #64	; 0x40
 80011a0:	4806      	ldr	r0, [pc, #24]	; (80011bc <Trigger+0x34>)
 80011a2:	f001 f813 	bl	80021cc <HAL_GPIO_WritePin>
   microDelay(10);
 80011a6:	200a      	movs	r0, #10
 80011a8:	f7ff ffd4 	bl	8001154 <microDelay>
   HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2140      	movs	r1, #64	; 0x40
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <Trigger+0x34>)
 80011b2:	f001 f80b 	bl	80021cc <HAL_GPIO_WritePin>
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40020400 	.word	0x40020400

080011c0 <HAL_GPIO_EXTI_Callback>:
int t0= 0; t1=0;
volatile int dist=0;// mm
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Echo_Pin)
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	2b80      	cmp	r3, #128	; 0x80
 80011ce:	d127      	bne.n	8001220 <HAL_GPIO_EXTI_Callback+0x60>
	{
		int tt = htim2.Instance->CNT;
 80011d0:	4b17      	ldr	r3, [pc, #92]	; (8001230 <HAL_GPIO_EXTI_Callback+0x70>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d6:	60fb      	str	r3, [r7, #12]
		//ㅑ
		if(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == 1)//rising
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	4816      	ldr	r0, [pc, #88]	; (8001234 <HAL_GPIO_EXTI_Callback+0x74>)
 80011dc:	f000 ffde 	bl	800219c <HAL_GPIO_ReadPin>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d103      	bne.n	80011ee <HAL_GPIO_EXTI_Callback+0x2e>
		{
			t0=tt;
 80011e6:	4a14      	ldr	r2, [pc, #80]	; (8001238 <HAL_GPIO_EXTI_Callback+0x78>)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6013      	str	r3, [r2, #0]
			t1=tt;
			dist=(double)0.17*(t1-t0);
		}

	}
}
 80011ec:	e018      	b.n	8001220 <HAL_GPIO_EXTI_Callback+0x60>
			t1=tt;
 80011ee:	4a13      	ldr	r2, [pc, #76]	; (800123c <HAL_GPIO_EXTI_Callback+0x7c>)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6013      	str	r3, [r2, #0]
			dist=(double)0.17*(t1-t0);
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_GPIO_EXTI_Callback+0x7c>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_GPIO_EXTI_Callback+0x78>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f998 	bl	8000534 <__aeabi_i2d>
 8001204:	a308      	add	r3, pc, #32	; (adr r3, 8001228 <HAL_GPIO_EXTI_Callback+0x68>)
 8001206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120a:	f7ff f9fd 	bl	8000608 <__aeabi_dmul>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fca7 	bl	8000b68 <__aeabi_d2iz>
 800121a:	4603      	mov	r3, r0
 800121c:	4a08      	ldr	r2, [pc, #32]	; (8001240 <HAL_GPIO_EXTI_Callback+0x80>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	5c28f5c3 	.word	0x5c28f5c3
 800122c:	3fc5c28f 	.word	0x3fc5c28f
 8001230:	20000494 	.word	0x20000494
 8001234:	40020000 	.word	0x40020000
 8001238:	20000538 	.word	0x20000538
 800123c:	2000053c 	.word	0x2000053c
 8001240:	20000540 	.word	0x20000540

08001244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001244:	b5b0      	push	{r4, r5, r7, lr}
 8001246:	b09e      	sub	sp, #120	; 0x78
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124a:	f000 fcdb 	bl	8001c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124e:	f000 f87d 	bl	800134c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001252:	f000 f95b 	bl	800150c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001256:	f000 f92f 	bl	80014b8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800125a:	f000 f8e1 	bl	8001420 <MX_TIM2_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 800125e:	2300      	movs	r3, #0
 8001260:	673b      	str	r3, [r7, #112]	; 0x70
 8001262:	2300      	movs	r3, #0
 8001264:	677b      	str	r3, [r7, #116]	; 0x74
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8001266:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800126a:	2101      	movs	r1, #1
 800126c:	4618      	mov	r0, r3
 800126e:	f002 fe70 	bl	8003f52 <osSemaphoreCreate>
 8001272:	4603      	mov	r3, r0
 8001274:	4a2a      	ldr	r2, [pc, #168]	; (8001320 <main+0xdc>)
 8001276:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityNormal, 0, 128);
 8001278:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <main+0xe0>)
 800127a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800127e:	461d      	mov	r5, r3
 8001280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001284:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001288:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 800128c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001290:	2100      	movs	r1, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f002 fdfd 	bl	8003e92 <osThreadCreate>
 8001298:	4603      	mov	r3, r0
 800129a:	4a23      	ldr	r2, [pc, #140]	; (8001328 <main+0xe4>)
 800129c:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityBelowNormal, 0, 128);
 800129e:	4b23      	ldr	r3, [pc, #140]	; (800132c <main+0xe8>)
 80012a0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80012a4:	461d      	mov	r5, r3
 80012a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80012b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 fdea 	bl	8003e92 <osThreadCreate>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <main+0xec>)
 80012c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityLow, 0, 128);
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <main+0xf0>)
 80012c6:	f107 041c 	add.w	r4, r7, #28
 80012ca:	461d      	mov	r5, r3
 80012cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 fdd7 	bl	8003e92 <osThreadCreate>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4a14      	ldr	r2, [pc, #80]	; (8001338 <main+0xf4>)
 80012e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <main+0xf8>)
 80012ec:	463c      	mov	r4, r7
 80012ee:	461d      	mov	r5, r3
 80012f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80012fc:	463b      	mov	r3, r7
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f002 fdc6 	bl	8003e92 <osThreadCreate>
 8001306:	4603      	mov	r3, r0
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <main+0xfc>)
 800130a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ProgramStart("RTOS-Mission");
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <main+0x100>)
 800130e:	f7ff feaf 	bl	8001070 <ProgramStart>
  HAL_TIM_Base_Start(&htim2);
 8001312:	480d      	ldr	r0, [pc, #52]	; (8001348 <main+0x104>)
 8001314:	f001 fca6 	bl	8002c64 <HAL_TIM_Base_Start>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001318:	f002 fdb4 	bl	8003e84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800131c:	e7fe      	b.n	800131c <main+0xd8>
 800131e:	bf00      	nop
 8001320:	20000534 	.word	0x20000534
 8001324:	0800b0bc 	.word	0x0800b0bc
 8001328:	20000524 	.word	0x20000524
 800132c:	0800b0e4 	.word	0x0800b0e4
 8001330:	20000528 	.word	0x20000528
 8001334:	0800b10c 	.word	0x0800b10c
 8001338:	2000052c 	.word	0x2000052c
 800133c:	0800b134 	.word	0x0800b134
 8001340:	20000530 	.word	0x20000530
 8001344:	0800b0a0 	.word	0x0800b0a0
 8001348:	20000494 	.word	0x20000494

0800134c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b094      	sub	sp, #80	; 0x50
 8001350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001352:	f107 0320 	add.w	r3, r7, #32
 8001356:	2230      	movs	r2, #48	; 0x30
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f006 fa72 	bl	8007844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <SystemClock_Config+0xcc>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	4a27      	ldr	r2, [pc, #156]	; (8001418 <SystemClock_Config+0xcc>)
 800137a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800137e:	6413      	str	r3, [r2, #64]	; 0x40
 8001380:	4b25      	ldr	r3, [pc, #148]	; (8001418 <SystemClock_Config+0xcc>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800138c:	2300      	movs	r3, #0
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <SystemClock_Config+0xd0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a21      	ldr	r2, [pc, #132]	; (800141c <SystemClock_Config+0xd0>)
 8001396:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <SystemClock_Config+0xd0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a8:	2302      	movs	r3, #2
 80013aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ac:	2301      	movs	r3, #1
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013b0:	2310      	movs	r3, #16
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b4:	2302      	movs	r3, #2
 80013b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013b8:	2300      	movs	r3, #0
 80013ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013bc:	2310      	movs	r3, #16
 80013be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013c6:	2304      	movs	r3, #4
 80013c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013ca:	2304      	movs	r3, #4
 80013cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ce:	f107 0320 	add.w	r3, r7, #32
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 ff2c 	bl	8002230 <HAL_RCC_OscConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013de:	f000 f9db 	bl	8001798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e2:	230f      	movs	r3, #15
 80013e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e6:	2302      	movs	r3, #2
 80013e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	2102      	movs	r1, #2
 80013fe:	4618      	mov	r0, r3
 8001400:	f001 f98e 	bl	8002720 <HAL_RCC_ClockConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800140a:	f000 f9c5 	bl	8001798 <Error_Handler>
  }
}
 800140e:	bf00      	nop
 8001410:	3750      	adds	r7, #80	; 0x50
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40007000 	.word	0x40007000

08001420 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001426:	f107 0308 	add.w	r3, r7, #8
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001434:	463b      	mov	r3, r7
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <MX_TIM2_Init+0x94>)
 800143e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001442:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001444:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <MX_TIM2_Init+0x94>)
 8001446:	2253      	movs	r2, #83	; 0x53
 8001448:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <MX_TIM2_Init+0x94>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001450:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <MX_TIM2_Init+0x94>)
 8001452:	f04f 32ff 	mov.w	r2, #4294967295
 8001456:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001458:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <MX_TIM2_Init+0x94>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <MX_TIM2_Init+0x94>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001464:	4813      	ldr	r0, [pc, #76]	; (80014b4 <MX_TIM2_Init+0x94>)
 8001466:	f001 fbad 	bl	8002bc4 <HAL_TIM_Base_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001470:	f000 f992 	bl	8001798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001478:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	4619      	mov	r1, r3
 8001480:	480c      	ldr	r0, [pc, #48]	; (80014b4 <MX_TIM2_Init+0x94>)
 8001482:	f001 fd9b 	bl	8002fbc <HAL_TIM_ConfigClockSource>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800148c:	f000 f984 	bl	8001798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001490:	2300      	movs	r3, #0
 8001492:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	4619      	mov	r1, r3
 800149c:	4805      	ldr	r0, [pc, #20]	; (80014b4 <MX_TIM2_Init+0x94>)
 800149e:	f001 ffa3 	bl	80033e8 <HAL_TIMEx_MasterConfigSynchronization>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014a8:	f000 f976 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000494 	.word	0x20000494

080014b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_USART2_UART_Init+0x4c>)
 80014be:	4a12      	ldr	r2, [pc, #72]	; (8001508 <MX_USART2_UART_Init+0x50>)
 80014c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_USART2_UART_Init+0x4c>)
 80014c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_USART2_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_USART2_UART_Init+0x4c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_USART2_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_USART2_UART_Init+0x4c>)
 80014de:	220c      	movs	r2, #12
 80014e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_USART2_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_USART2_UART_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_USART2_UART_Init+0x4c>)
 80014f0:	f001 fffc 	bl	80034ec <HAL_UART_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014fa:	f000 f94d 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200004dc 	.word	0x200004dc
 8001508:	40004400 	.word	0x40004400

0800150c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b42      	ldr	r3, [pc, #264]	; (8001630 <MX_GPIO_Init+0x124>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a41      	ldr	r2, [pc, #260]	; (8001630 <MX_GPIO_Init+0x124>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b3f      	ldr	r3, [pc, #252]	; (8001630 <MX_GPIO_Init+0x124>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b3b      	ldr	r3, [pc, #236]	; (8001630 <MX_GPIO_Init+0x124>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a3a      	ldr	r2, [pc, #232]	; (8001630 <MX_GPIO_Init+0x124>)
 8001548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <MX_GPIO_Init+0x124>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	4b34      	ldr	r3, [pc, #208]	; (8001630 <MX_GPIO_Init+0x124>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <MX_GPIO_Init+0x124>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b31      	ldr	r3, [pc, #196]	; (8001630 <MX_GPIO_Init+0x124>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <MX_GPIO_Init+0x124>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a2c      	ldr	r2, [pc, #176]	; (8001630 <MX_GPIO_Init+0x124>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <MX_GPIO_Init+0x124>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2120      	movs	r1, #32
 8001596:	4827      	ldr	r0, [pc, #156]	; (8001634 <MX_GPIO_Init+0x128>)
 8001598:	f000 fe18 	bl	80021cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN4_Pin|IN1_Pin|IN3_Pin|IN2_Pin
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 618f 	mov.w	r1, #1144	; 0x478
 80015a2:	4825      	ldr	r0, [pc, #148]	; (8001638 <MX_GPIO_Init+0x12c>)
 80015a4:	f000 fe12 	bl	80021cc <HAL_GPIO_WritePin>
                          |Trig_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	481f      	ldr	r0, [pc, #124]	; (800163c <MX_GPIO_Init+0x130>)
 80015c0:	f000 fc68 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80015c4:	2320      	movs	r3, #32
 80015c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4619      	mov	r1, r3
 80015da:	4816      	ldr	r0, [pc, #88]	; (8001634 <MX_GPIO_Init+0x128>)
 80015dc:	f000 fc5a 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80015e4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 0314 	add.w	r3, r7, #20
 80015f2:	4619      	mov	r1, r3
 80015f4:	480f      	ldr	r0, [pc, #60]	; (8001634 <MX_GPIO_Init+0x128>)
 80015f6:	f000 fc4d 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN4_Pin IN1_Pin IN3_Pin IN2_Pin
                           Trig_Pin */
  GPIO_InitStruct.Pin = IN4_Pin|IN1_Pin|IN3_Pin|IN2_Pin
 80015fa:	f44f 638f 	mov.w	r3, #1144	; 0x478
 80015fe:	617b      	str	r3, [r7, #20]
                          |Trig_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001600:	2301      	movs	r3, #1
 8001602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	4619      	mov	r1, r3
 8001612:	4809      	ldr	r0, [pc, #36]	; (8001638 <MX_GPIO_Init+0x12c>)
 8001614:	f000 fc3e 	bl	8001e94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	2017      	movs	r0, #23
 800161e:	f000 fc0f 	bl	8001e40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001622:	2017      	movs	r0, #23
 8001624:	f000 fc28 	bl	8001e78 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	; 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000
 8001638:	40020400 	.word	0x40020400
 800163c:	40020800 	.word	0x40020800

08001640 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	if(osSemaphoreWait(myBinarySem01Handle,0) == osOK)
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <StartTask01+0x38>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f002 fcb2 	bl	8003fb8 <osSemaphoreWait>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d109      	bne.n	800166e <StartTask01+0x2e>
	{
		Trigger(); HAL_Delay(60);//
 800165a:	f7ff fd95 	bl	8001188 <Trigger>
 800165e:	203c      	movs	r0, #60	; 0x3c
 8001660:	f000 fb12 	bl	8001c88 <HAL_Delay>
		osSemaphoreRelease(myBinarySem01Handle);
 8001664:	4b04      	ldr	r3, [pc, #16]	; (8001678 <StartTask01+0x38>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f002 fcf3 	bl	8004054 <osSemaphoreRelease>
	}
    osDelay(1);
 800166e:	2001      	movs	r0, #1
 8001670:	f002 fc5b 	bl	8003f2a <osDelay>
	if(osSemaphoreWait(myBinarySem01Handle,0) == osOK)
 8001674:	e7e8      	b.n	8001648 <StartTask01+0x8>
 8001676:	bf00      	nop
 8001678:	20000534 	.word	0x20000534

0800167c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	if(osSemaphoreWait(myBinarySem01Handle,0) == osOK)
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <StartTask02+0x2c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f002 fc94 	bl	8003fb8 <osSemaphoreWait>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d104      	bne.n	80016a0 <StartTask02+0x24>
	{
		osSemaphoreRelease(myBinarySem01Handle);
 8001696:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <StartTask02+0x2c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f002 fcda 	bl	8004054 <osSemaphoreRelease>
	}
    osDelay(1);
 80016a0:	2001      	movs	r0, #1
 80016a2:	f002 fc42 	bl	8003f2a <osDelay>
	if(osSemaphoreWait(myBinarySem01Handle,0) == osOK)
 80016a6:	e7ed      	b.n	8001684 <StartTask02+0x8>
 80016a8:	20000534 	.word	0x20000534

080016ac <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	if(osSemaphoreWait(myBinarySem01Handle,0) == osOK)
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <StartTask03+0x2c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f002 fc7c 	bl	8003fb8 <osSemaphoreWait>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d104      	bne.n	80016d0 <StartTask03+0x24>
	{
		osSemaphoreRelease(myBinarySem01Handle);
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <StartTask03+0x2c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 fcc2 	bl	8004054 <osSemaphoreRelease>
	}
    osDelay(1);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f002 fc2a 	bl	8003f2a <osDelay>
	if(osSemaphoreWait(myBinarySem01Handle,0) == osOK)
 80016d6:	e7ed      	b.n	80016b4 <StartTask03+0x8>
 80016d8:	20000534 	.word	0x20000534

080016dc <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af02      	add	r7, sp, #8
 80016e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	if(osSemaphoreWait(myBinarySem01Handle,0) == osOK)
 80016e4:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <StartTask04+0x7c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 fc64 	bl	8003fb8 <osSemaphoreWait>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d12c      	bne.n	8001750 <StartTask04+0x74>
	{
		int dm = dist / 1000;
 80016f6:	4b19      	ldr	r3, [pc, #100]	; (800175c <StartTask04+0x80>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a19      	ldr	r2, [pc, #100]	; (8001760 <StartTask04+0x84>)
 80016fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001700:	1192      	asrs	r2, r2, #6
 8001702:	17db      	asrs	r3, r3, #31
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	60fb      	str	r3, [r7, #12]
		int dc = ((int)(dist * 10))%100;
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <StartTask04+0x80>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4a13      	ldr	r2, [pc, #76]	; (8001764 <StartTask04+0x88>)
 8001716:	fb82 1203 	smull	r1, r2, r2, r3
 800171a:	1151      	asrs	r1, r2, #5
 800171c:	17da      	asrs	r2, r3, #31
 800171e:	1a8a      	subs	r2, r1, r2
 8001720:	2164      	movs	r1, #100	; 0x64
 8001722:	fb01 f202 	mul.w	r2, r1, r2
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	60bb      	str	r3, [r7, #8]
		printf("Current Distance : %d m %d cm (%d mm)(%d-%d)\r\n", dm, dc, dist,t1,t0);
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <StartTask04+0x80>)
 800172c:	6819      	ldr	r1, [r3, #0]
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <StartTask04+0x8c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a0e      	ldr	r2, [pc, #56]	; (800176c <StartTask04+0x90>)
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	9201      	str	r2, [sp, #4]
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	460b      	mov	r3, r1
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	68f9      	ldr	r1, [r7, #12]
 8001740:	480b      	ldr	r0, [pc, #44]	; (8001770 <StartTask04+0x94>)
 8001742:	f005 fe6b 	bl	800741c <iprintf>
		osSemaphoreRelease(myBinarySem01Handle);
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <StartTask04+0x7c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f002 fc82 	bl	8004054 <osSemaphoreRelease>
	}
    osDelay(1);
 8001750:	2001      	movs	r0, #1
 8001752:	f002 fbea 	bl	8003f2a <osDelay>
	if(osSemaphoreWait(myBinarySem01Handle,0) == osOK)
 8001756:	e7c5      	b.n	80016e4 <StartTask04+0x8>
 8001758:	20000534 	.word	0x20000534
 800175c:	20000540 	.word	0x20000540
 8001760:	10624dd3 	.word	0x10624dd3
 8001764:	51eb851f 	.word	0x51eb851f
 8001768:	2000053c 	.word	0x2000053c
 800176c:	20000538 	.word	0x20000538
 8001770:	0800b150 	.word	0x0800b150

08001774 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001786:	f000 fa5f 	bl	8001c48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40014400 	.word	0x40014400

08001798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800179c:	b672      	cpsid	i
}
 800179e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <Error_Handler+0x8>
	...

080017a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_MspInit+0x54>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a11      	ldr	r2, [pc, #68]	; (80017f8 <HAL_MspInit+0x54>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <HAL_MspInit+0x54>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_MspInit+0x54>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <HAL_MspInit+0x54>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <HAL_MspInit+0x54>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	210f      	movs	r1, #15
 80017e6:	f06f 0001 	mvn.w	r0, #1
 80017ea:	f000 fb29 	bl	8001e40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180c:	d10d      	bne.n	800182a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_TIM_Base_MspInit+0x3c>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <HAL_TIM_Base_MspInit+0x3c>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_TIM_Base_MspInit+0x3c>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800

0800183c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a19      	ldr	r2, [pc, #100]	; (80018c0 <HAL_UART_MspInit+0x84>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d12b      	bne.n	80018b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <HAL_UART_MspInit+0x88>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4a17      	ldr	r2, [pc, #92]	; (80018c4 <HAL_UART_MspInit+0x88>)
 8001868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186c:	6413      	str	r3, [r2, #64]	; 0x40
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_UART_MspInit+0x88>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_UART_MspInit+0x88>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <HAL_UART_MspInit+0x88>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_UART_MspInit+0x88>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001896:	230c      	movs	r3, #12
 8001898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a6:	2307      	movs	r3, #7
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <HAL_UART_MspInit+0x8c>)
 80018b2:	f000 faef 	bl	8001e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018b6:	bf00      	nop
 80018b8:	3728      	adds	r7, #40	; 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40004400 	.word	0x40004400
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020000 	.word	0x40020000

080018cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08c      	sub	sp, #48	; 0x30
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	4b2e      	ldr	r3, [pc, #184]	; (800199c <HAL_InitTick+0xd0>)
 80018e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e4:	4a2d      	ldr	r2, [pc, #180]	; (800199c <HAL_InitTick+0xd0>)
 80018e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ea:	6453      	str	r3, [r2, #68]	; 0x44
 80018ec:	4b2b      	ldr	r3, [pc, #172]	; (800199c <HAL_InitTick+0xd0>)
 80018ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018f8:	f107 020c 	add.w	r2, r7, #12
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f001 f92c 	bl	8002b60 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001908:	f001 f916 	bl	8002b38 <HAL_RCC_GetPCLK2Freq>
 800190c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800190e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001910:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <HAL_InitTick+0xd4>)
 8001912:	fba2 2303 	umull	r2, r3, r2, r3
 8001916:	0c9b      	lsrs	r3, r3, #18
 8001918:	3b01      	subs	r3, #1
 800191a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <HAL_InitTick+0xd8>)
 800191e:	4a22      	ldr	r2, [pc, #136]	; (80019a8 <HAL_InitTick+0xdc>)
 8001920:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_InitTick+0xd8>)
 8001924:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001928:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800192a:	4a1e      	ldr	r2, [pc, #120]	; (80019a4 <HAL_InitTick+0xd8>)
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001930:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <HAL_InitTick+0xd8>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001936:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_InitTick+0xd8>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_InitTick+0xd8>)
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001942:	4818      	ldr	r0, [pc, #96]	; (80019a4 <HAL_InitTick+0xd8>)
 8001944:	f001 f93e 	bl	8002bc4 <HAL_TIM_Base_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800194e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001952:	2b00      	cmp	r3, #0
 8001954:	d11b      	bne.n	800198e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001956:	4813      	ldr	r0, [pc, #76]	; (80019a4 <HAL_InitTick+0xd8>)
 8001958:	f001 f9de 	bl	8002d18 <HAL_TIM_Base_Start_IT>
 800195c:	4603      	mov	r3, r0
 800195e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001966:	2b00      	cmp	r3, #0
 8001968:	d111      	bne.n	800198e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800196a:	2019      	movs	r0, #25
 800196c:	f000 fa84 	bl	8001e78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b0f      	cmp	r3, #15
 8001974:	d808      	bhi.n	8001988 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001976:	2200      	movs	r2, #0
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	2019      	movs	r0, #25
 800197c:	f000 fa60 	bl	8001e40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001980:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <HAL_InitTick+0xe0>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e002      	b.n	800198e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800198e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001992:	4618      	mov	r0, r3
 8001994:	3730      	adds	r7, #48	; 0x30
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	431bde83 	.word	0x431bde83
 80019a4:	20000544 	.word	0x20000544
 80019a8:	40014400 	.word	0x40014400
 80019ac:	20000004 	.word	0x20000004

080019b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b4:	e7fe      	b.n	80019b4 <NMI_Handler+0x4>

080019b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <MemManage_Handler+0x4>

080019c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <BusFault_Handler+0x4>

080019c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <UsageFault_Handler+0x4>

080019ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Echo_Pin);
 80019e0:	2080      	movs	r0, #128	; 0x80
 80019e2:	f000 fc0d 	bl	8002200 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80019f2:	f001 f9f3 	bl	8002ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000544 	.word	0x20000544

08001a00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return 1;
 8001a04:	2301      	movs	r3, #1
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <_kill>:

int _kill(int pid, int sig)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a1a:	f005 ffbb 	bl	8007994 <__errno>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2216      	movs	r2, #22
 8001a22:	601a      	str	r2, [r3, #0]
  return -1;
 8001a24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <_exit>:

void _exit (int status)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ffe7 	bl	8001a10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a42:	e7fe      	b.n	8001a42 <_exit+0x12>

08001a44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	e00a      	b.n	8001a6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a56:	f7ff fad3 	bl	8001000 <__io_getchar>
 8001a5a:	4601      	mov	r1, r0
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	60ba      	str	r2, [r7, #8]
 8001a62:	b2ca      	uxtb	r2, r1
 8001a64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	dbf0      	blt.n	8001a56 <_read+0x12>
  }

  return len;
 8001a74:	687b      	ldr	r3, [r7, #4]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	e009      	b.n	8001aa4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	60ba      	str	r2, [r7, #8]
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fad7 	bl	800104c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dbf1      	blt.n	8001a90 <_write+0x12>
  }
  return len;
 8001aac:	687b      	ldr	r3, [r7, #4]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <_close>:

int _close(int file)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ade:	605a      	str	r2, [r3, #4]
  return 0;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <_isatty>:

int _isatty(int file)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b28:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <_sbrk+0x5c>)
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <_sbrk+0x60>)
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <_sbrk+0x64>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d102      	bne.n	8001b42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <_sbrk+0x64>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <_sbrk+0x68>)
 8001b40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <_sbrk+0x64>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4413      	add	r3, r2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d207      	bcs.n	8001b60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b50:	f005 ff20 	bl	8007994 <__errno>
 8001b54:	4603      	mov	r3, r0
 8001b56:	220c      	movs	r2, #12
 8001b58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5e:	e009      	b.n	8001b74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b66:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <_sbrk+0x64>)
 8001b70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b72:	68fb      	ldr	r3, [r7, #12]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20020000 	.word	0x20020000
 8001b80:	00000400 	.word	0x00000400
 8001b84:	2000058c 	.word	0x2000058c
 8001b88:	20004438 	.word	0x20004438

08001b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <SystemInit+0x20>)
 8001b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b96:	4a05      	ldr	r2, [pc, #20]	; (8001bac <SystemInit+0x20>)
 8001b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001be8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bb4:	f7ff ffea 	bl	8001b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bb8:	480c      	ldr	r0, [pc, #48]	; (8001bec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bba:	490d      	ldr	r1, [pc, #52]	; (8001bf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc0:	e002      	b.n	8001bc8 <LoopCopyDataInit>

08001bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bc6:	3304      	adds	r3, #4

08001bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bcc:	d3f9      	bcc.n	8001bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bd0:	4c0a      	ldr	r4, [pc, #40]	; (8001bfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd4:	e001      	b.n	8001bda <LoopFillZerobss>

08001bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd8:	3204      	adds	r2, #4

08001bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bdc:	d3fb      	bcc.n	8001bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bde:	f005 fedf 	bl	80079a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001be2:	f7ff fb2f 	bl	8001244 <main>
  bx  lr    
 8001be6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001be8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001bf4:	0800b5d8 	.word	0x0800b5d8
  ldr r2, =_sbss
 8001bf8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001bfc:	20004434 	.word	0x20004434

08001c00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c00:	e7fe      	b.n	8001c00 <ADC_IRQHandler>
	...

08001c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c08:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <HAL_Init+0x40>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	; (8001c44 <HAL_Init+0x40>)
 8001c0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_Init+0x40>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0a      	ldr	r2, [pc, #40]	; (8001c44 <HAL_Init+0x40>)
 8001c1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_Init+0x40>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_Init+0x40>)
 8001c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f000 f8fc 	bl	8001e2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c32:	200f      	movs	r0, #15
 8001c34:	f7ff fe4a 	bl	80018cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c38:	f7ff fdb4 	bl	80017a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40023c00 	.word	0x40023c00

08001c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_IncTick+0x20>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_IncTick+0x24>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <HAL_IncTick+0x24>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	20000590 	.word	0x20000590

08001c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_GetTick+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000590 	.word	0x20000590

08001c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff ffee 	bl	8001c70 <HAL_GetTick>
 8001c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d005      	beq.n	8001cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_Delay+0x44>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cae:	bf00      	nop
 8001cb0:	f7ff ffde 	bl	8001c70 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d8f7      	bhi.n	8001cb0 <HAL_Delay+0x28>
  {
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000008 	.word	0x20000008

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d02:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	60d3      	str	r3, [r2, #12]
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4907      	ldr	r1, [pc, #28]	; (8001d6c <__NVIC_EnableIRQ+0x38>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2001      	movs	r0, #1
 8001d56:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	; (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ff4c 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e52:	f7ff ff61 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	68b9      	ldr	r1, [r7, #8]
 8001e5c:	6978      	ldr	r0, [r7, #20]
 8001e5e:	f7ff ffb1 	bl	8001dc4 <NVIC_EncodePriority>
 8001e62:	4602      	mov	r2, r0
 8001e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ff80 	bl	8001d70 <__NVIC_SetPriority>
}
 8001e70:	bf00      	nop
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff ff54 	bl	8001d34 <__NVIC_EnableIRQ>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	e159      	b.n	8002164 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	f040 8148 	bne.w	800215e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d005      	beq.n	8001ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d130      	bne.n	8001f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 0201 	and.w	r2, r3, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d017      	beq.n	8001f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	2203      	movs	r2, #3
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d123      	bne.n	8001fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	08da      	lsrs	r2, r3, #3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3208      	adds	r2, #8
 8001f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	220f      	movs	r2, #15
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	08da      	lsrs	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3208      	adds	r2, #8
 8001fd2:	69b9      	ldr	r1, [r7, #24]
 8001fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0203 	and.w	r2, r3, #3
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80a2 	beq.w	800215e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b57      	ldr	r3, [pc, #348]	; (800217c <HAL_GPIO_Init+0x2e8>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	4a56      	ldr	r2, [pc, #344]	; (800217c <HAL_GPIO_Init+0x2e8>)
 8002024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002028:	6453      	str	r3, [r2, #68]	; 0x44
 800202a:	4b54      	ldr	r3, [pc, #336]	; (800217c <HAL_GPIO_Init+0x2e8>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002036:	4a52      	ldr	r2, [pc, #328]	; (8002180 <HAL_GPIO_Init+0x2ec>)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a49      	ldr	r2, [pc, #292]	; (8002184 <HAL_GPIO_Init+0x2f0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d019      	beq.n	8002096 <HAL_GPIO_Init+0x202>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a48      	ldr	r2, [pc, #288]	; (8002188 <HAL_GPIO_Init+0x2f4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <HAL_GPIO_Init+0x1fe>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a47      	ldr	r2, [pc, #284]	; (800218c <HAL_GPIO_Init+0x2f8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00d      	beq.n	800208e <HAL_GPIO_Init+0x1fa>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a46      	ldr	r2, [pc, #280]	; (8002190 <HAL_GPIO_Init+0x2fc>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d007      	beq.n	800208a <HAL_GPIO_Init+0x1f6>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a45      	ldr	r2, [pc, #276]	; (8002194 <HAL_GPIO_Init+0x300>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d101      	bne.n	8002086 <HAL_GPIO_Init+0x1f2>
 8002082:	2304      	movs	r3, #4
 8002084:	e008      	b.n	8002098 <HAL_GPIO_Init+0x204>
 8002086:	2307      	movs	r3, #7
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x204>
 800208a:	2303      	movs	r3, #3
 800208c:	e004      	b.n	8002098 <HAL_GPIO_Init+0x204>
 800208e:	2302      	movs	r3, #2
 8002090:	e002      	b.n	8002098 <HAL_GPIO_Init+0x204>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_GPIO_Init+0x204>
 8002096:	2300      	movs	r3, #0
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	f002 0203 	and.w	r2, r2, #3
 800209e:	0092      	lsls	r2, r2, #2
 80020a0:	4093      	lsls	r3, r2
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a8:	4935      	ldr	r1, [pc, #212]	; (8002180 <HAL_GPIO_Init+0x2ec>)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	3302      	adds	r3, #2
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b6:	4b38      	ldr	r3, [pc, #224]	; (8002198 <HAL_GPIO_Init+0x304>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020da:	4a2f      	ldr	r2, [pc, #188]	; (8002198 <HAL_GPIO_Init+0x304>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e0:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_GPIO_Init+0x304>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002104:	4a24      	ldr	r2, [pc, #144]	; (8002198 <HAL_GPIO_Init+0x304>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800210a:	4b23      	ldr	r3, [pc, #140]	; (8002198 <HAL_GPIO_Init+0x304>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800212e:	4a1a      	ldr	r2, [pc, #104]	; (8002198 <HAL_GPIO_Init+0x304>)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <HAL_GPIO_Init+0x304>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002158:	4a0f      	ldr	r2, [pc, #60]	; (8002198 <HAL_GPIO_Init+0x304>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3301      	adds	r3, #1
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2b0f      	cmp	r3, #15
 8002168:	f67f aea2 	bls.w	8001eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3724      	adds	r7, #36	; 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
 8002180:	40013800 	.word	0x40013800
 8002184:	40020000 	.word	0x40020000
 8002188:	40020400 	.word	0x40020400
 800218c:	40020800 	.word	0x40020800
 8002190:	40020c00 	.word	0x40020c00
 8002194:	40021000 	.word	0x40021000
 8002198:	40013c00 	.word	0x40013c00

0800219c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	887b      	ldrh	r3, [r7, #2]
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d002      	beq.n	80021ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
 80021b8:	e001      	b.n	80021be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021be:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
 80021d8:	4613      	mov	r3, r2
 80021da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021dc:	787b      	ldrb	r3, [r7, #1]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021e8:	e003      	b.n	80021f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ea:	887b      	ldrh	r3, [r7, #2]
 80021ec:	041a      	lsls	r2, r3, #16
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	619a      	str	r2, [r3, #24]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	88fb      	ldrh	r3, [r7, #6]
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d006      	beq.n	8002224 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002216:	4a05      	ldr	r2, [pc, #20]	; (800222c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800221c:	88fb      	ldrh	r3, [r7, #6]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe ffce 	bl	80011c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40013c00 	.word	0x40013c00

08002230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e267      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d075      	beq.n	800233a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800224e:	4b88      	ldr	r3, [pc, #544]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b04      	cmp	r3, #4
 8002258:	d00c      	beq.n	8002274 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800225a:	4b85      	ldr	r3, [pc, #532]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002262:	2b08      	cmp	r3, #8
 8002264:	d112      	bne.n	800228c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002266:	4b82      	ldr	r3, [pc, #520]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002272:	d10b      	bne.n	800228c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002274:	4b7e      	ldr	r3, [pc, #504]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d05b      	beq.n	8002338 <HAL_RCC_OscConfig+0x108>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d157      	bne.n	8002338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e242      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002294:	d106      	bne.n	80022a4 <HAL_RCC_OscConfig+0x74>
 8002296:	4b76      	ldr	r3, [pc, #472]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a75      	ldr	r2, [pc, #468]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 800229c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e01d      	b.n	80022e0 <HAL_RCC_OscConfig+0xb0>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x98>
 80022ae:	4b70      	ldr	r3, [pc, #448]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a6f      	ldr	r2, [pc, #444]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	4b6d      	ldr	r3, [pc, #436]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a6c      	ldr	r2, [pc, #432]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e00b      	b.n	80022e0 <HAL_RCC_OscConfig+0xb0>
 80022c8:	4b69      	ldr	r3, [pc, #420]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a68      	ldr	r2, [pc, #416]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b66      	ldr	r3, [pc, #408]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a65      	ldr	r2, [pc, #404]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7ff fcc2 	bl	8001c70 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f0:	f7ff fcbe 	bl	8001c70 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e207      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	4b5b      	ldr	r3, [pc, #364]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0xc0>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7ff fcae 	bl	8001c70 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7ff fcaa 	bl	8001c70 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e1f3      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	4b51      	ldr	r3, [pc, #324]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0xe8>
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d063      	beq.n	800240e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002346:	4b4a      	ldr	r3, [pc, #296]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00b      	beq.n	800236a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002352:	4b47      	ldr	r3, [pc, #284]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800235a:	2b08      	cmp	r3, #8
 800235c:	d11c      	bne.n	8002398 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800235e:	4b44      	ldr	r3, [pc, #272]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d116      	bne.n	8002398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236a:	4b41      	ldr	r3, [pc, #260]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_RCC_OscConfig+0x152>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d001      	beq.n	8002382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e1c7      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002382:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4937      	ldr	r1, [pc, #220]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002396:	e03a      	b.n	800240e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a0:	4b34      	ldr	r3, [pc, #208]	; (8002474 <HAL_RCC_OscConfig+0x244>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7ff fc63 	bl	8001c70 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ae:	f7ff fc5f 	bl	8001c70 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e1a8      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c0:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023cc:	4b28      	ldr	r3, [pc, #160]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4925      	ldr	r1, [pc, #148]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	600b      	str	r3, [r1, #0]
 80023e0:	e015      	b.n	800240e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e2:	4b24      	ldr	r3, [pc, #144]	; (8002474 <HAL_RCC_OscConfig+0x244>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7ff fc42 	bl	8001c70 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f0:	f7ff fc3e 	bl	8001c70 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e187      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002402:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d036      	beq.n	8002488 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d016      	beq.n	8002450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <HAL_RCC_OscConfig+0x248>)
 8002424:	2201      	movs	r2, #1
 8002426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002428:	f7ff fc22 	bl	8001c70 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002430:	f7ff fc1e 	bl	8001c70 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e167      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x200>
 800244e:	e01b      	b.n	8002488 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_RCC_OscConfig+0x248>)
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002456:	f7ff fc0b 	bl	8001c70 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245c:	e00e      	b.n	800247c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800245e:	f7ff fc07 	bl	8001c70 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d907      	bls.n	800247c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e150      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
 8002470:	40023800 	.word	0x40023800
 8002474:	42470000 	.word	0x42470000
 8002478:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247c:	4b88      	ldr	r3, [pc, #544]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800247e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1ea      	bne.n	800245e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 8097 	beq.w	80025c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249a:	4b81      	ldr	r3, [pc, #516]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10f      	bne.n	80024c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	4b7d      	ldr	r3, [pc, #500]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	4a7c      	ldr	r2, [pc, #496]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80024b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b4:	6413      	str	r3, [r2, #64]	; 0x40
 80024b6:	4b7a      	ldr	r3, [pc, #488]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c2:	2301      	movs	r3, #1
 80024c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c6:	4b77      	ldr	r3, [pc, #476]	; (80026a4 <HAL_RCC_OscConfig+0x474>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d118      	bne.n	8002504 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d2:	4b74      	ldr	r3, [pc, #464]	; (80026a4 <HAL_RCC_OscConfig+0x474>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a73      	ldr	r2, [pc, #460]	; (80026a4 <HAL_RCC_OscConfig+0x474>)
 80024d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024de:	f7ff fbc7 	bl	8001c70 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e6:	f7ff fbc3 	bl	8001c70 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e10c      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f8:	4b6a      	ldr	r3, [pc, #424]	; (80026a4 <HAL_RCC_OscConfig+0x474>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x2ea>
 800250c:	4b64      	ldr	r3, [pc, #400]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	4a63      	ldr	r2, [pc, #396]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6713      	str	r3, [r2, #112]	; 0x70
 8002518:	e01c      	b.n	8002554 <HAL_RCC_OscConfig+0x324>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b05      	cmp	r3, #5
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0x30c>
 8002522:	4b5f      	ldr	r3, [pc, #380]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	4a5e      	ldr	r2, [pc, #376]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	6713      	str	r3, [r2, #112]	; 0x70
 800252e:	4b5c      	ldr	r3, [pc, #368]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	4a5b      	ldr	r2, [pc, #364]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6713      	str	r3, [r2, #112]	; 0x70
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0x324>
 800253c:	4b58      	ldr	r3, [pc, #352]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002540:	4a57      	ldr	r2, [pc, #348]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002542:	f023 0301 	bic.w	r3, r3, #1
 8002546:	6713      	str	r3, [r2, #112]	; 0x70
 8002548:	4b55      	ldr	r3, [pc, #340]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800254a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254c:	4a54      	ldr	r2, [pc, #336]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800254e:	f023 0304 	bic.w	r3, r3, #4
 8002552:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d015      	beq.n	8002588 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255c:	f7ff fb88 	bl	8001c70 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002562:	e00a      	b.n	800257a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002564:	f7ff fb84 	bl	8001c70 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e0cb      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257a:	4b49      	ldr	r3, [pc, #292]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0ee      	beq.n	8002564 <HAL_RCC_OscConfig+0x334>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002588:	f7ff fb72 	bl	8001c70 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002590:	f7ff fb6e 	bl	8001c70 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	; 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e0b5      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a6:	4b3e      	ldr	r3, [pc, #248]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1ee      	bne.n	8002590 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025b2:	7dfb      	ldrb	r3, [r7, #23]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d105      	bne.n	80025c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b8:	4b39      	ldr	r3, [pc, #228]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	4a38      	ldr	r2, [pc, #224]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80025be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80a1 	beq.w	8002710 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ce:	4b34      	ldr	r3, [pc, #208]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d05c      	beq.n	8002694 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d141      	bne.n	8002666 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e2:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <HAL_RCC_OscConfig+0x478>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7ff fb42 	bl	8001c70 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f0:	f7ff fb3e 	bl	8001c70 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e087      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002602:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69da      	ldr	r2, [r3, #28]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	019b      	lsls	r3, r3, #6
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	3b01      	subs	r3, #1
 8002628:	041b      	lsls	r3, r3, #16
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	061b      	lsls	r3, r3, #24
 8002632:	491b      	ldr	r1, [pc, #108]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002638:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <HAL_RCC_OscConfig+0x478>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263e:	f7ff fb17 	bl	8001c70 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002646:	f7ff fb13 	bl	8001c70 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e05c      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x416>
 8002664:	e054      	b.n	8002710 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_RCC_OscConfig+0x478>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7ff fb00 	bl	8001c70 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002674:	f7ff fafc 	bl	8001c70 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e045      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x444>
 8002692:	e03d      	b.n	8002710 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d107      	bne.n	80026ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e038      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40007000 	.word	0x40007000
 80026a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_RCC_OscConfig+0x4ec>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d028      	beq.n	800270c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d121      	bne.n	800270c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d11a      	bne.n	800270c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026dc:	4013      	ands	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d111      	bne.n	800270c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	3b01      	subs	r3, #1
 80026f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d107      	bne.n	800270c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800

08002720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0cc      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002734:	4b68      	ldr	r3, [pc, #416]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d90c      	bls.n	800275c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b65      	ldr	r3, [pc, #404]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b63      	ldr	r3, [pc, #396]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0b8      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002774:	4b59      	ldr	r3, [pc, #356]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4a58      	ldr	r2, [pc, #352]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800277e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800278c:	4b53      	ldr	r3, [pc, #332]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	4a52      	ldr	r2, [pc, #328]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002798:	4b50      	ldr	r3, [pc, #320]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	494d      	ldr	r1, [pc, #308]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d044      	beq.n	8002840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	4b47      	ldr	r3, [pc, #284]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d119      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e07f      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d003      	beq.n	80027de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027de:	4b3f      	ldr	r3, [pc, #252]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e06f      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ee:	4b3b      	ldr	r3, [pc, #236]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e067      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fe:	4b37      	ldr	r3, [pc, #220]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f023 0203 	bic.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4934      	ldr	r1, [pc, #208]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	4313      	orrs	r3, r2
 800280e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002810:	f7ff fa2e 	bl	8001c70 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	e00a      	b.n	800282e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002818:	f7ff fa2a 	bl	8001c70 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	; 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e04f      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 020c 	and.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	429a      	cmp	r2, r3
 800283e:	d1eb      	bne.n	8002818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002840:	4b25      	ldr	r3, [pc, #148]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d20c      	bcs.n	8002868 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e032      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002874:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4916      	ldr	r1, [pc, #88]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	490e      	ldr	r1, [pc, #56]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028a6:	f000 f821 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80028aa:	4602      	mov	r2, r0
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	490a      	ldr	r1, [pc, #40]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	5ccb      	ldrb	r3, [r1, r3]
 80028ba:	fa22 f303 	lsr.w	r3, r2, r3
 80028be:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff f800 	bl	80018cc <HAL_InitTick>

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023c00 	.word	0x40023c00
 80028dc:	40023800 	.word	0x40023800
 80028e0:	0800b188 	.word	0x0800b188
 80028e4:	20000000 	.word	0x20000000
 80028e8:	20000004 	.word	0x20000004

080028ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028f0:	b094      	sub	sp, #80	; 0x50
 80028f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002904:	4b79      	ldr	r3, [pc, #484]	; (8002aec <HAL_RCC_GetSysClockFreq+0x200>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d00d      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x40>
 8002910:	2b08      	cmp	r3, #8
 8002912:	f200 80e1 	bhi.w	8002ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x34>
 800291a:	2b04      	cmp	r3, #4
 800291c:	d003      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0x3a>
 800291e:	e0db      	b.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002920:	4b73      	ldr	r3, [pc, #460]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002922:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002924:	e0db      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002926:	4b73      	ldr	r3, [pc, #460]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002928:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800292a:	e0d8      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800292c:	4b6f      	ldr	r3, [pc, #444]	; (8002aec <HAL_RCC_GetSysClockFreq+0x200>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002934:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002936:	4b6d      	ldr	r3, [pc, #436]	; (8002aec <HAL_RCC_GetSysClockFreq+0x200>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d063      	beq.n	8002a0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002942:	4b6a      	ldr	r3, [pc, #424]	; (8002aec <HAL_RCC_GetSysClockFreq+0x200>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	099b      	lsrs	r3, r3, #6
 8002948:	2200      	movs	r2, #0
 800294a:	63bb      	str	r3, [r7, #56]	; 0x38
 800294c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002954:	633b      	str	r3, [r7, #48]	; 0x30
 8002956:	2300      	movs	r3, #0
 8002958:	637b      	str	r3, [r7, #52]	; 0x34
 800295a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800295e:	4622      	mov	r2, r4
 8002960:	462b      	mov	r3, r5
 8002962:	f04f 0000 	mov.w	r0, #0
 8002966:	f04f 0100 	mov.w	r1, #0
 800296a:	0159      	lsls	r1, r3, #5
 800296c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002970:	0150      	lsls	r0, r2, #5
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4621      	mov	r1, r4
 8002978:	1a51      	subs	r1, r2, r1
 800297a:	6139      	str	r1, [r7, #16]
 800297c:	4629      	mov	r1, r5
 800297e:	eb63 0301 	sbc.w	r3, r3, r1
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002990:	4659      	mov	r1, fp
 8002992:	018b      	lsls	r3, r1, #6
 8002994:	4651      	mov	r1, sl
 8002996:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800299a:	4651      	mov	r1, sl
 800299c:	018a      	lsls	r2, r1, #6
 800299e:	4651      	mov	r1, sl
 80029a0:	ebb2 0801 	subs.w	r8, r2, r1
 80029a4:	4659      	mov	r1, fp
 80029a6:	eb63 0901 	sbc.w	r9, r3, r1
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029be:	4690      	mov	r8, r2
 80029c0:	4699      	mov	r9, r3
 80029c2:	4623      	mov	r3, r4
 80029c4:	eb18 0303 	adds.w	r3, r8, r3
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	462b      	mov	r3, r5
 80029cc:	eb49 0303 	adc.w	r3, r9, r3
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029de:	4629      	mov	r1, r5
 80029e0:	024b      	lsls	r3, r1, #9
 80029e2:	4621      	mov	r1, r4
 80029e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029e8:	4621      	mov	r1, r4
 80029ea:	024a      	lsls	r2, r1, #9
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f2:	2200      	movs	r2, #0
 80029f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029fc:	f7fe f94c 	bl	8000c98 <__aeabi_uldivmod>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4613      	mov	r3, r2
 8002a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a08:	e058      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a0a:	4b38      	ldr	r3, [pc, #224]	; (8002aec <HAL_RCC_GetSysClockFreq+0x200>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	099b      	lsrs	r3, r3, #6
 8002a10:	2200      	movs	r2, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	4611      	mov	r1, r2
 8002a16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a1a:	623b      	str	r3, [r7, #32]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a24:	4642      	mov	r2, r8
 8002a26:	464b      	mov	r3, r9
 8002a28:	f04f 0000 	mov.w	r0, #0
 8002a2c:	f04f 0100 	mov.w	r1, #0
 8002a30:	0159      	lsls	r1, r3, #5
 8002a32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a36:	0150      	lsls	r0, r2, #5
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4641      	mov	r1, r8
 8002a3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a42:	4649      	mov	r1, r9
 8002a44:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a5c:	ebb2 040a 	subs.w	r4, r2, sl
 8002a60:	eb63 050b 	sbc.w	r5, r3, fp
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	00eb      	lsls	r3, r5, #3
 8002a6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a72:	00e2      	lsls	r2, r4, #3
 8002a74:	4614      	mov	r4, r2
 8002a76:	461d      	mov	r5, r3
 8002a78:	4643      	mov	r3, r8
 8002a7a:	18e3      	adds	r3, r4, r3
 8002a7c:	603b      	str	r3, [r7, #0]
 8002a7e:	464b      	mov	r3, r9
 8002a80:	eb45 0303 	adc.w	r3, r5, r3
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a92:	4629      	mov	r1, r5
 8002a94:	028b      	lsls	r3, r1, #10
 8002a96:	4621      	mov	r1, r4
 8002a98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a9c:	4621      	mov	r1, r4
 8002a9e:	028a      	lsls	r2, r1, #10
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	61bb      	str	r3, [r7, #24]
 8002aaa:	61fa      	str	r2, [r7, #28]
 8002aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ab0:	f7fe f8f2 	bl	8000c98 <__aeabi_uldivmod>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4613      	mov	r3, r2
 8002aba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <HAL_RCC_GetSysClockFreq+0x200>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	0c1b      	lsrs	r3, r3, #16
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002acc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ad6:	e002      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ada:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3750      	adds	r7, #80	; 0x50
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800
 8002af0:	00f42400 	.word	0x00f42400
 8002af4:	007a1200 	.word	0x007a1200

08002af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002afc:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20000000 	.word	0x20000000

08002b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b14:	f7ff fff0 	bl	8002af8 <HAL_RCC_GetHCLKFreq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	0a9b      	lsrs	r3, r3, #10
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	4903      	ldr	r1, [pc, #12]	; (8002b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b26:	5ccb      	ldrb	r3, [r1, r3]
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40023800 	.word	0x40023800
 8002b34:	0800b198 	.word	0x0800b198

08002b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b3c:	f7ff ffdc 	bl	8002af8 <HAL_RCC_GetHCLKFreq>
 8002b40:	4602      	mov	r2, r0
 8002b42:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	0b5b      	lsrs	r3, r3, #13
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	4903      	ldr	r1, [pc, #12]	; (8002b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b4e:	5ccb      	ldrb	r3, [r1, r3]
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	0800b198 	.word	0x0800b198

08002b60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <HAL_RCC_GetClockConfig+0x5c>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0203 	and.w	r2, r3, #3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <HAL_RCC_GetClockConfig+0x5c>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <HAL_RCC_GetClockConfig+0x5c>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <HAL_RCC_GetClockConfig+0x5c>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	08db      	lsrs	r3, r3, #3
 8002b9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ba2:	4b07      	ldr	r3, [pc, #28]	; (8002bc0 <HAL_RCC_GetClockConfig+0x60>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0207 	and.w	r2, r3, #7
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	601a      	str	r2, [r3, #0]
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40023c00 	.word	0x40023c00

08002bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e041      	b.n	8002c5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fe fe06 	bl	80017fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4610      	mov	r0, r2
 8002c04:	f000 faca 	bl	800319c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d001      	beq.n	8002c7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e03c      	b.n	8002cf6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1e      	ldr	r2, [pc, #120]	; (8002d04 <HAL_TIM_Base_Start+0xa0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d018      	beq.n	8002cc0 <HAL_TIM_Base_Start+0x5c>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c96:	d013      	beq.n	8002cc0 <HAL_TIM_Base_Start+0x5c>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1a      	ldr	r2, [pc, #104]	; (8002d08 <HAL_TIM_Base_Start+0xa4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d00e      	beq.n	8002cc0 <HAL_TIM_Base_Start+0x5c>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a19      	ldr	r2, [pc, #100]	; (8002d0c <HAL_TIM_Base_Start+0xa8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d009      	beq.n	8002cc0 <HAL_TIM_Base_Start+0x5c>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a17      	ldr	r2, [pc, #92]	; (8002d10 <HAL_TIM_Base_Start+0xac>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d004      	beq.n	8002cc0 <HAL_TIM_Base_Start+0x5c>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a16      	ldr	r2, [pc, #88]	; (8002d14 <HAL_TIM_Base_Start+0xb0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d111      	bne.n	8002ce4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b06      	cmp	r3, #6
 8002cd0:	d010      	beq.n	8002cf4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f042 0201 	orr.w	r2, r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce2:	e007      	b.n	8002cf4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40010000 	.word	0x40010000
 8002d08:	40000400 	.word	0x40000400
 8002d0c:	40000800 	.word	0x40000800
 8002d10:	40000c00 	.word	0x40000c00
 8002d14:	40014000 	.word	0x40014000

08002d18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d001      	beq.n	8002d30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e044      	b.n	8002dba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1e      	ldr	r2, [pc, #120]	; (8002dc8 <HAL_TIM_Base_Start_IT+0xb0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d018      	beq.n	8002d84 <HAL_TIM_Base_Start_IT+0x6c>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5a:	d013      	beq.n	8002d84 <HAL_TIM_Base_Start_IT+0x6c>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1a      	ldr	r2, [pc, #104]	; (8002dcc <HAL_TIM_Base_Start_IT+0xb4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00e      	beq.n	8002d84 <HAL_TIM_Base_Start_IT+0x6c>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a19      	ldr	r2, [pc, #100]	; (8002dd0 <HAL_TIM_Base_Start_IT+0xb8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d009      	beq.n	8002d84 <HAL_TIM_Base_Start_IT+0x6c>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a17      	ldr	r2, [pc, #92]	; (8002dd4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d004      	beq.n	8002d84 <HAL_TIM_Base_Start_IT+0x6c>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a16      	ldr	r2, [pc, #88]	; (8002dd8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d111      	bne.n	8002da8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b06      	cmp	r3, #6
 8002d94:	d010      	beq.n	8002db8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 0201 	orr.w	r2, r2, #1
 8002da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da6:	e007      	b.n	8002db8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	40000400 	.word	0x40000400
 8002dd0:	40000800 	.word	0x40000800
 8002dd4:	40000c00 	.word	0x40000c00
 8002dd8:	40014000 	.word	0x40014000

08002ddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d020      	beq.n	8002e40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d01b      	beq.n	8002e40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0202 	mvn.w	r2, #2
 8002e10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f999 	bl	800315e <HAL_TIM_IC_CaptureCallback>
 8002e2c:	e005      	b.n	8002e3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f98b 	bl	800314a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f99c 	bl	8003172 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d020      	beq.n	8002e8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d01b      	beq.n	8002e8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0204 	mvn.w	r2, #4
 8002e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2202      	movs	r2, #2
 8002e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f973 	bl	800315e <HAL_TIM_IC_CaptureCallback>
 8002e78:	e005      	b.n	8002e86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f965 	bl	800314a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f976 	bl	8003172 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d020      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01b      	beq.n	8002ed8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f06f 0208 	mvn.w	r2, #8
 8002ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2204      	movs	r2, #4
 8002eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f94d 	bl	800315e <HAL_TIM_IC_CaptureCallback>
 8002ec4:	e005      	b.n	8002ed2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 f93f 	bl	800314a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f950 	bl	8003172 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d020      	beq.n	8002f24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d01b      	beq.n	8002f24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0210 	mvn.w	r2, #16
 8002ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2208      	movs	r2, #8
 8002efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f927 	bl	800315e <HAL_TIM_IC_CaptureCallback>
 8002f10:	e005      	b.n	8002f1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f919 	bl	800314a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f92a 	bl	8003172 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00c      	beq.n	8002f48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d007      	beq.n	8002f48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0201 	mvn.w	r2, #1
 8002f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7fe fc16 	bl	8001774 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00c      	beq.n	8002f6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d007      	beq.n	8002f6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fab6 	bl	80034d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00c      	beq.n	8002f90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d007      	beq.n	8002f90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f8fb 	bl	8003186 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	f003 0320 	and.w	r3, r3, #32
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00c      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f003 0320 	and.w	r3, r3, #32
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d007      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f06f 0220 	mvn.w	r2, #32
 8002fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fa88 	bl	80034c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_TIM_ConfigClockSource+0x1c>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e0b4      	b.n	8003142 <HAL_TIM_ConfigClockSource+0x186>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ffe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003010:	d03e      	beq.n	8003090 <HAL_TIM_ConfigClockSource+0xd4>
 8003012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003016:	f200 8087 	bhi.w	8003128 <HAL_TIM_ConfigClockSource+0x16c>
 800301a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301e:	f000 8086 	beq.w	800312e <HAL_TIM_ConfigClockSource+0x172>
 8003022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003026:	d87f      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b70      	cmp	r3, #112	; 0x70
 800302a:	d01a      	beq.n	8003062 <HAL_TIM_ConfigClockSource+0xa6>
 800302c:	2b70      	cmp	r3, #112	; 0x70
 800302e:	d87b      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	2b60      	cmp	r3, #96	; 0x60
 8003032:	d050      	beq.n	80030d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003034:	2b60      	cmp	r3, #96	; 0x60
 8003036:	d877      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x16c>
 8003038:	2b50      	cmp	r3, #80	; 0x50
 800303a:	d03c      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0xfa>
 800303c:	2b50      	cmp	r3, #80	; 0x50
 800303e:	d873      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x16c>
 8003040:	2b40      	cmp	r3, #64	; 0x40
 8003042:	d058      	beq.n	80030f6 <HAL_TIM_ConfigClockSource+0x13a>
 8003044:	2b40      	cmp	r3, #64	; 0x40
 8003046:	d86f      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x16c>
 8003048:	2b30      	cmp	r3, #48	; 0x30
 800304a:	d064      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x15a>
 800304c:	2b30      	cmp	r3, #48	; 0x30
 800304e:	d86b      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x16c>
 8003050:	2b20      	cmp	r3, #32
 8003052:	d060      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x15a>
 8003054:	2b20      	cmp	r3, #32
 8003056:	d867      	bhi.n	8003128 <HAL_TIM_ConfigClockSource+0x16c>
 8003058:	2b00      	cmp	r3, #0
 800305a:	d05c      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x15a>
 800305c:	2b10      	cmp	r3, #16
 800305e:	d05a      	beq.n	8003116 <HAL_TIM_ConfigClockSource+0x15a>
 8003060:	e062      	b.n	8003128 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003072:	f000 f999 	bl	80033a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	609a      	str	r2, [r3, #8]
      break;
 800308e:	e04f      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030a0:	f000 f982 	bl	80033a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030b2:	609a      	str	r2, [r3, #8]
      break;
 80030b4:	e03c      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c2:	461a      	mov	r2, r3
 80030c4:	f000 f8f6 	bl	80032b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2150      	movs	r1, #80	; 0x50
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 f94f 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 80030d4:	e02c      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030e2:	461a      	mov	r2, r3
 80030e4:	f000 f915 	bl	8003312 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2160      	movs	r1, #96	; 0x60
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 f93f 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 80030f4:	e01c      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003102:	461a      	mov	r2, r3
 8003104:	f000 f8d6 	bl	80032b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2140      	movs	r1, #64	; 0x40
 800310e:	4618      	mov	r0, r3
 8003110:	f000 f92f 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 8003114:	e00c      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4619      	mov	r1, r3
 8003120:	4610      	mov	r0, r2
 8003122:	f000 f926 	bl	8003372 <TIM_ITRx_SetConfig>
      break;
 8003126:	e003      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
      break;
 800312c:	e000      	b.n	8003130 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800312e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003140:	7bfb      	ldrb	r3, [r7, #15]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a3a      	ldr	r2, [pc, #232]	; (8003298 <TIM_Base_SetConfig+0xfc>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00f      	beq.n	80031d4 <TIM_Base_SetConfig+0x38>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ba:	d00b      	beq.n	80031d4 <TIM_Base_SetConfig+0x38>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a37      	ldr	r2, [pc, #220]	; (800329c <TIM_Base_SetConfig+0x100>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d007      	beq.n	80031d4 <TIM_Base_SetConfig+0x38>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a36      	ldr	r2, [pc, #216]	; (80032a0 <TIM_Base_SetConfig+0x104>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d003      	beq.n	80031d4 <TIM_Base_SetConfig+0x38>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a35      	ldr	r2, [pc, #212]	; (80032a4 <TIM_Base_SetConfig+0x108>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d108      	bne.n	80031e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a2b      	ldr	r2, [pc, #172]	; (8003298 <TIM_Base_SetConfig+0xfc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01b      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f4:	d017      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a28      	ldr	r2, [pc, #160]	; (800329c <TIM_Base_SetConfig+0x100>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a27      	ldr	r2, [pc, #156]	; (80032a0 <TIM_Base_SetConfig+0x104>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00f      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a26      	ldr	r2, [pc, #152]	; (80032a4 <TIM_Base_SetConfig+0x108>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00b      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a25      	ldr	r2, [pc, #148]	; (80032a8 <TIM_Base_SetConfig+0x10c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a24      	ldr	r2, [pc, #144]	; (80032ac <TIM_Base_SetConfig+0x110>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d003      	beq.n	8003226 <TIM_Base_SetConfig+0x8a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a23      	ldr	r2, [pc, #140]	; (80032b0 <TIM_Base_SetConfig+0x114>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d108      	bne.n	8003238 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800322c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a0e      	ldr	r2, [pc, #56]	; (8003298 <TIM_Base_SetConfig+0xfc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d103      	bne.n	800326c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	691a      	ldr	r2, [r3, #16]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b01      	cmp	r3, #1
 800327c:	d105      	bne.n	800328a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f023 0201 	bic.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	611a      	str	r2, [r3, #16]
  }
}
 800328a:	bf00      	nop
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40010000 	.word	0x40010000
 800329c:	40000400 	.word	0x40000400
 80032a0:	40000800 	.word	0x40000800
 80032a4:	40000c00 	.word	0x40000c00
 80032a8:	40014000 	.word	0x40014000
 80032ac:	40014400 	.word	0x40014400
 80032b0:	40014800 	.word	0x40014800

080032b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f023 0201 	bic.w	r2, r3, #1
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f023 030a 	bic.w	r3, r3, #10
 80032f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	621a      	str	r2, [r3, #32]
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003312:	b480      	push	{r7}
 8003314:	b087      	sub	sp, #28
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	f023 0210 	bic.w	r2, r3, #16
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800333c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	031b      	lsls	r3, r3, #12
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800334e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	621a      	str	r2, [r3, #32]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003388:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	f043 0307 	orr.w	r3, r3, #7
 8003394:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	609a      	str	r2, [r3, #8]
}
 800339c:	bf00      	nop
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	021a      	lsls	r2, r3, #8
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	609a      	str	r2, [r3, #8]
}
 80033dc:	bf00      	nop
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e050      	b.n	80034a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1c      	ldr	r2, [pc, #112]	; (80034b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d018      	beq.n	8003476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800344c:	d013      	beq.n	8003476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a18      	ldr	r2, [pc, #96]	; (80034b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d00e      	beq.n	8003476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a16      	ldr	r2, [pc, #88]	; (80034b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d009      	beq.n	8003476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a15      	ldr	r2, [pc, #84]	; (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d004      	beq.n	8003476 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a13      	ldr	r2, [pc, #76]	; (80034c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d10c      	bne.n	8003490 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800347c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	4313      	orrs	r3, r2
 8003486:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40010000 	.word	0x40010000
 80034b4:	40000400 	.word	0x40000400
 80034b8:	40000800 	.word	0x40000800
 80034bc:	40000c00 	.word	0x40000c00
 80034c0:	40014000 	.word	0x40014000

080034c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e042      	b.n	8003584 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fe f992 	bl	800183c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2224      	movs	r2, #36	; 0x24
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800352e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fa09 	bl	8003948 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003544:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003554:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003564:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	4613      	mov	r3, r2
 800359a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	d175      	bne.n	8003698 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_UART_Transmit+0x2c>
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d101      	bne.n	80035bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e06e      	b.n	800369a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2221      	movs	r2, #33	; 0x21
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ca:	f7fe fb51 	bl	8001c70 <HAL_GetTick>
 80035ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	88fa      	ldrh	r2, [r7, #6]
 80035d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	88fa      	ldrh	r2, [r7, #6]
 80035da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e4:	d108      	bne.n	80035f8 <HAL_UART_Transmit+0x6c>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d104      	bne.n	80035f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	61bb      	str	r3, [r7, #24]
 80035f6:	e003      	b.n	8003600 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003600:	e02e      	b.n	8003660 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2200      	movs	r2, #0
 800360a:	2180      	movs	r1, #128	; 0x80
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f8df 	bl	80037d0 <UART_WaitOnFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e03a      	b.n	800369a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10b      	bne.n	8003642 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003638:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	3302      	adds	r3, #2
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	e007      	b.n	8003652 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	781a      	ldrb	r2, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	3301      	adds	r3, #1
 8003650:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1cb      	bne.n	8003602 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2200      	movs	r2, #0
 8003672:	2140      	movs	r1, #64	; 0x40
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f8ab 	bl	80037d0 <UART_WaitOnFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d005      	beq.n	800368c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e006      	b.n	800369a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	e000      	b.n	800369a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003698:	2302      	movs	r3, #2
  }
}
 800369a:	4618      	mov	r0, r3
 800369c:	3720      	adds	r7, #32
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b08a      	sub	sp, #40	; 0x28
 80036a6:	af02      	add	r7, sp, #8
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	4613      	mov	r3, r2
 80036b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b20      	cmp	r3, #32
 80036c0:	f040 8081 	bne.w	80037c6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_UART_Receive+0x2e>
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e079      	b.n	80037c8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2222      	movs	r2, #34	; 0x22
 80036de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036e8:	f7fe fac2 	bl	8001c70 <HAL_GetTick>
 80036ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	88fa      	ldrh	r2, [r7, #6]
 80036f2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	88fa      	ldrh	r2, [r7, #6]
 80036f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003702:	d108      	bne.n	8003716 <HAL_UART_Receive+0x74>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d104      	bne.n	8003716 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800370c:	2300      	movs	r3, #0
 800370e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	e003      	b.n	800371e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800371e:	e047      	b.n	80037b0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	2200      	movs	r2, #0
 8003728:	2120      	movs	r1, #32
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f850 	bl	80037d0 <UART_WaitOnFlagUntilTimeout>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2220      	movs	r2, #32
 800373a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e042      	b.n	80037c8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10c      	bne.n	8003762 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	b29b      	uxth	r3, r3
 8003750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003754:	b29a      	uxth	r2, r3
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	3302      	adds	r3, #2
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	e01f      	b.n	80037a2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376a:	d007      	beq.n	800377c <HAL_UART_Receive+0xda>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <HAL_UART_Receive+0xe8>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d106      	bne.n	800378a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	b2da      	uxtb	r2, r3
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	701a      	strb	r2, [r3, #0]
 8003788:	e008      	b.n	800379c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	b2db      	uxtb	r3, r3
 8003792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003796:	b2da      	uxtb	r2, r3
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	3301      	adds	r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1b2      	bne.n	8003720 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e000      	b.n	80037c8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80037c6:	2302      	movs	r3, #2
  }
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3720      	adds	r7, #32
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	603b      	str	r3, [r7, #0]
 80037dc:	4613      	mov	r3, r2
 80037de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037e0:	e03b      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e8:	d037      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ea:	f7fe fa41 	bl	8001c70 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	6a3a      	ldr	r2, [r7, #32]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d302      	bcc.n	8003800 <UART_WaitOnFlagUntilTimeout+0x30>
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e03a      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b00      	cmp	r3, #0
 8003810:	d023      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b80      	cmp	r3, #128	; 0x80
 8003816:	d020      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b40      	cmp	r3, #64	; 0x40
 800381c:	d01d      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b08      	cmp	r3, #8
 800382a:	d116      	bne.n	800385a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 f81d 	bl	8003882 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2208      	movs	r2, #8
 800384c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e00f      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4013      	ands	r3, r2
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	429a      	cmp	r2, r3
 8003868:	bf0c      	ite	eq
 800386a:	2301      	moveq	r3, #1
 800386c:	2300      	movne	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	429a      	cmp	r2, r3
 8003876:	d0b4      	beq.n	80037e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003882:	b480      	push	{r7}
 8003884:	b095      	sub	sp, #84	; 0x54
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	330c      	adds	r3, #12
 8003890:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003894:	e853 3f00 	ldrex	r3, [r3]
 8003898:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	330c      	adds	r3, #12
 80038a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80038aa:	643a      	str	r2, [r7, #64]	; 0x40
 80038ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038b2:	e841 2300 	strex	r3, r2, [r1]
 80038b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e5      	bne.n	800388a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3314      	adds	r3, #20
 80038c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	e853 3f00 	ldrex	r3, [r3]
 80038cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f023 0301 	bic.w	r3, r3, #1
 80038d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3314      	adds	r3, #20
 80038dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038e6:	e841 2300 	strex	r3, r2, [r1]
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1e5      	bne.n	80038be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d119      	bne.n	800392e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	330c      	adds	r3, #12
 8003900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	e853 3f00 	ldrex	r3, [r3]
 8003908:	60bb      	str	r3, [r7, #8]
   return(result);
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f023 0310 	bic.w	r3, r3, #16
 8003910:	647b      	str	r3, [r7, #68]	; 0x44
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	330c      	adds	r3, #12
 8003918:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800391a:	61ba      	str	r2, [r7, #24]
 800391c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391e:	6979      	ldr	r1, [r7, #20]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	e841 2300 	strex	r3, r2, [r1]
 8003926:	613b      	str	r3, [r7, #16]
   return(result);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1e5      	bne.n	80038fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800393c:	bf00      	nop
 800393e:	3754      	adds	r7, #84	; 0x54
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800394c:	b0c0      	sub	sp, #256	; 0x100
 800394e:	af00      	add	r7, sp, #0
 8003950:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003964:	68d9      	ldr	r1, [r3, #12]
 8003966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	ea40 0301 	orr.w	r3, r0, r1
 8003970:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	431a      	orrs	r2, r3
 8003980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	431a      	orrs	r2, r3
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039a0:	f021 010c 	bic.w	r1, r1, #12
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039ae:	430b      	orrs	r3, r1
 80039b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c2:	6999      	ldr	r1, [r3, #24]
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	ea40 0301 	orr.w	r3, r0, r1
 80039ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4b8f      	ldr	r3, [pc, #572]	; (8003c14 <UART_SetConfig+0x2cc>)
 80039d8:	429a      	cmp	r2, r3
 80039da:	d005      	beq.n	80039e8 <UART_SetConfig+0xa0>
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	4b8d      	ldr	r3, [pc, #564]	; (8003c18 <UART_SetConfig+0x2d0>)
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d104      	bne.n	80039f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039e8:	f7ff f8a6 	bl	8002b38 <HAL_RCC_GetPCLK2Freq>
 80039ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039f0:	e003      	b.n	80039fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039f2:	f7ff f88d 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
 80039f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a04:	f040 810c 	bne.w	8003c20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a1a:	4622      	mov	r2, r4
 8003a1c:	462b      	mov	r3, r5
 8003a1e:	1891      	adds	r1, r2, r2
 8003a20:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a22:	415b      	adcs	r3, r3
 8003a24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	eb12 0801 	adds.w	r8, r2, r1
 8003a30:	4629      	mov	r1, r5
 8003a32:	eb43 0901 	adc.w	r9, r3, r1
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a4a:	4690      	mov	r8, r2
 8003a4c:	4699      	mov	r9, r3
 8003a4e:	4623      	mov	r3, r4
 8003a50:	eb18 0303 	adds.w	r3, r8, r3
 8003a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a58:	462b      	mov	r3, r5
 8003a5a:	eb49 0303 	adc.w	r3, r9, r3
 8003a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a76:	460b      	mov	r3, r1
 8003a78:	18db      	adds	r3, r3, r3
 8003a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	eb42 0303 	adc.w	r3, r2, r3
 8003a82:	657b      	str	r3, [r7, #84]	; 0x54
 8003a84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a8c:	f7fd f904 	bl	8000c98 <__aeabi_uldivmod>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4b61      	ldr	r3, [pc, #388]	; (8003c1c <UART_SetConfig+0x2d4>)
 8003a96:	fba3 2302 	umull	r2, r3, r3, r2
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	011c      	lsls	r4, r3, #4
 8003a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003aa8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003aac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ab0:	4642      	mov	r2, r8
 8003ab2:	464b      	mov	r3, r9
 8003ab4:	1891      	adds	r1, r2, r2
 8003ab6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ab8:	415b      	adcs	r3, r3
 8003aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003abc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ac0:	4641      	mov	r1, r8
 8003ac2:	eb12 0a01 	adds.w	sl, r2, r1
 8003ac6:	4649      	mov	r1, r9
 8003ac8:	eb43 0b01 	adc.w	fp, r3, r1
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ad8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003adc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ae0:	4692      	mov	sl, r2
 8003ae2:	469b      	mov	fp, r3
 8003ae4:	4643      	mov	r3, r8
 8003ae6:	eb1a 0303 	adds.w	r3, sl, r3
 8003aea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003aee:	464b      	mov	r3, r9
 8003af0:	eb4b 0303 	adc.w	r3, fp, r3
 8003af4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	18db      	adds	r3, r3, r3
 8003b10:	643b      	str	r3, [r7, #64]	; 0x40
 8003b12:	4613      	mov	r3, r2
 8003b14:	eb42 0303 	adc.w	r3, r2, r3
 8003b18:	647b      	str	r3, [r7, #68]	; 0x44
 8003b1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b22:	f7fd f8b9 	bl	8000c98 <__aeabi_uldivmod>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4b3b      	ldr	r3, [pc, #236]	; (8003c1c <UART_SetConfig+0x2d4>)
 8003b2e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	2264      	movs	r2, #100	; 0x64
 8003b36:	fb02 f303 	mul.w	r3, r2, r3
 8003b3a:	1acb      	subs	r3, r1, r3
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b42:	4b36      	ldr	r3, [pc, #216]	; (8003c1c <UART_SetConfig+0x2d4>)
 8003b44:	fba3 2302 	umull	r2, r3, r3, r2
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b50:	441c      	add	r4, r3
 8003b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b56:	2200      	movs	r2, #0
 8003b58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b64:	4642      	mov	r2, r8
 8003b66:	464b      	mov	r3, r9
 8003b68:	1891      	adds	r1, r2, r2
 8003b6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b6c:	415b      	adcs	r3, r3
 8003b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b74:	4641      	mov	r1, r8
 8003b76:	1851      	adds	r1, r2, r1
 8003b78:	6339      	str	r1, [r7, #48]	; 0x30
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	414b      	adcs	r3, r1
 8003b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b8c:	4659      	mov	r1, fp
 8003b8e:	00cb      	lsls	r3, r1, #3
 8003b90:	4651      	mov	r1, sl
 8003b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b96:	4651      	mov	r1, sl
 8003b98:	00ca      	lsls	r2, r1, #3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	189b      	adds	r3, r3, r2
 8003ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ba8:	464b      	mov	r3, r9
 8003baa:	460a      	mov	r2, r1
 8003bac:	eb42 0303 	adc.w	r3, r2, r3
 8003bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bc0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bc8:	460b      	mov	r3, r1
 8003bca:	18db      	adds	r3, r3, r3
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bce:	4613      	mov	r3, r2
 8003bd0:	eb42 0303 	adc.w	r3, r2, r3
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bde:	f7fd f85b 	bl	8000c98 <__aeabi_uldivmod>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <UART_SetConfig+0x2d4>)
 8003be8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bec:	095b      	lsrs	r3, r3, #5
 8003bee:	2164      	movs	r1, #100	; 0x64
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	3332      	adds	r3, #50	; 0x32
 8003bfa:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <UART_SetConfig+0x2d4>)
 8003bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003c00:	095b      	lsrs	r3, r3, #5
 8003c02:	f003 0207 	and.w	r2, r3, #7
 8003c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4422      	add	r2, r4
 8003c0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c10:	e106      	b.n	8003e20 <UART_SetConfig+0x4d8>
 8003c12:	bf00      	nop
 8003c14:	40011000 	.word	0x40011000
 8003c18:	40011400 	.word	0x40011400
 8003c1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c24:	2200      	movs	r2, #0
 8003c26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c32:	4642      	mov	r2, r8
 8003c34:	464b      	mov	r3, r9
 8003c36:	1891      	adds	r1, r2, r2
 8003c38:	6239      	str	r1, [r7, #32]
 8003c3a:	415b      	adcs	r3, r3
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c42:	4641      	mov	r1, r8
 8003c44:	1854      	adds	r4, r2, r1
 8003c46:	4649      	mov	r1, r9
 8003c48:	eb43 0501 	adc.w	r5, r3, r1
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	00eb      	lsls	r3, r5, #3
 8003c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c5a:	00e2      	lsls	r2, r4, #3
 8003c5c:	4614      	mov	r4, r2
 8003c5e:	461d      	mov	r5, r3
 8003c60:	4643      	mov	r3, r8
 8003c62:	18e3      	adds	r3, r4, r3
 8003c64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c68:	464b      	mov	r3, r9
 8003c6a:	eb45 0303 	adc.w	r3, r5, r3
 8003c6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c8e:	4629      	mov	r1, r5
 8003c90:	008b      	lsls	r3, r1, #2
 8003c92:	4621      	mov	r1, r4
 8003c94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c98:	4621      	mov	r1, r4
 8003c9a:	008a      	lsls	r2, r1, #2
 8003c9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003ca0:	f7fc fffa 	bl	8000c98 <__aeabi_uldivmod>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4b60      	ldr	r3, [pc, #384]	; (8003e2c <UART_SetConfig+0x4e4>)
 8003caa:	fba3 2302 	umull	r2, r3, r3, r2
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	011c      	lsls	r4, r3, #4
 8003cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cc4:	4642      	mov	r2, r8
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	1891      	adds	r1, r2, r2
 8003cca:	61b9      	str	r1, [r7, #24]
 8003ccc:	415b      	adcs	r3, r3
 8003cce:	61fb      	str	r3, [r7, #28]
 8003cd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	1851      	adds	r1, r2, r1
 8003cd8:	6139      	str	r1, [r7, #16]
 8003cda:	4649      	mov	r1, r9
 8003cdc:	414b      	adcs	r3, r1
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cec:	4659      	mov	r1, fp
 8003cee:	00cb      	lsls	r3, r1, #3
 8003cf0:	4651      	mov	r1, sl
 8003cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cf6:	4651      	mov	r1, sl
 8003cf8:	00ca      	lsls	r2, r1, #3
 8003cfa:	4610      	mov	r0, r2
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4642      	mov	r2, r8
 8003d02:	189b      	adds	r3, r3, r2
 8003d04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d08:	464b      	mov	r3, r9
 8003d0a:	460a      	mov	r2, r1
 8003d0c:	eb42 0303 	adc.w	r3, r2, r3
 8003d10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d1e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d2c:	4649      	mov	r1, r9
 8003d2e:	008b      	lsls	r3, r1, #2
 8003d30:	4641      	mov	r1, r8
 8003d32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d36:	4641      	mov	r1, r8
 8003d38:	008a      	lsls	r2, r1, #2
 8003d3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d3e:	f7fc ffab 	bl	8000c98 <__aeabi_uldivmod>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4611      	mov	r1, r2
 8003d48:	4b38      	ldr	r3, [pc, #224]	; (8003e2c <UART_SetConfig+0x4e4>)
 8003d4a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	2264      	movs	r2, #100	; 0x64
 8003d52:	fb02 f303 	mul.w	r3, r2, r3
 8003d56:	1acb      	subs	r3, r1, r3
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	3332      	adds	r3, #50	; 0x32
 8003d5c:	4a33      	ldr	r2, [pc, #204]	; (8003e2c <UART_SetConfig+0x4e4>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d68:	441c      	add	r4, r3
 8003d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d6e:	2200      	movs	r2, #0
 8003d70:	673b      	str	r3, [r7, #112]	; 0x70
 8003d72:	677a      	str	r2, [r7, #116]	; 0x74
 8003d74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d78:	4642      	mov	r2, r8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	1891      	adds	r1, r2, r2
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	415b      	adcs	r3, r3
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d88:	4641      	mov	r1, r8
 8003d8a:	1851      	adds	r1, r2, r1
 8003d8c:	6039      	str	r1, [r7, #0]
 8003d8e:	4649      	mov	r1, r9
 8003d90:	414b      	adcs	r3, r1
 8003d92:	607b      	str	r3, [r7, #4]
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003da0:	4659      	mov	r1, fp
 8003da2:	00cb      	lsls	r3, r1, #3
 8003da4:	4651      	mov	r1, sl
 8003da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003daa:	4651      	mov	r1, sl
 8003dac:	00ca      	lsls	r2, r1, #3
 8003dae:	4610      	mov	r0, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	4642      	mov	r2, r8
 8003db6:	189b      	adds	r3, r3, r2
 8003db8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dba:	464b      	mov	r3, r9
 8003dbc:	460a      	mov	r2, r1
 8003dbe:	eb42 0303 	adc.w	r3, r2, r3
 8003dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8003dce:	667a      	str	r2, [r7, #100]	; 0x64
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003ddc:	4649      	mov	r1, r9
 8003dde:	008b      	lsls	r3, r1, #2
 8003de0:	4641      	mov	r1, r8
 8003de2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003de6:	4641      	mov	r1, r8
 8003de8:	008a      	lsls	r2, r1, #2
 8003dea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003dee:	f7fc ff53 	bl	8000c98 <__aeabi_uldivmod>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <UART_SetConfig+0x4e4>)
 8003df8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	2164      	movs	r1, #100	; 0x64
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	3332      	adds	r3, #50	; 0x32
 8003e0a:	4a08      	ldr	r2, [pc, #32]	; (8003e2c <UART_SetConfig+0x4e4>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	095b      	lsrs	r3, r3, #5
 8003e12:	f003 020f 	and.w	r2, r3, #15
 8003e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4422      	add	r2, r4
 8003e1e:	609a      	str	r2, [r3, #8]
}
 8003e20:	bf00      	nop
 8003e22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e26:	46bd      	mov	sp, r7
 8003e28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e2c:	51eb851f 	.word	0x51eb851f

08003e30 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e42:	2b84      	cmp	r3, #132	; 0x84
 8003e44:	d005      	beq.n	8003e52 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3303      	adds	r3, #3
 8003e50:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e52:	68fb      	ldr	r3, [r7, #12]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e66:	f3ef 8305 	mrs	r3, IPSR
 8003e6a:	607b      	str	r3, [r7, #4]
  return(result);
 8003e6c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	bf14      	ite	ne
 8003e72:	2301      	movne	r3, #1
 8003e74:	2300      	moveq	r3, #0
 8003e76:	b2db      	uxtb	r3, r3
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e88:	f001 f926 	bl	80050d8 <vTaskStartScheduler>
  
  return osOK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e94:	b089      	sub	sp, #36	; 0x24
 8003e96:	af04      	add	r7, sp, #16
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d020      	beq.n	8003ee6 <osThreadCreate+0x54>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d01c      	beq.n	8003ee6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685c      	ldr	r4, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691e      	ldr	r6, [r3, #16]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff ffb6 	bl	8003e30 <makeFreeRtosPriority>
 8003ec4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ece:	9202      	str	r2, [sp, #8]
 8003ed0:	9301      	str	r3, [sp, #4]
 8003ed2:	9100      	str	r1, [sp, #0]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	4632      	mov	r2, r6
 8003ed8:	4629      	mov	r1, r5
 8003eda:	4620      	mov	r0, r4
 8003edc:	f000 ff1e 	bl	8004d1c <xTaskCreateStatic>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	e01c      	b.n	8003f20 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685c      	ldr	r4, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ef2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff ff98 	bl	8003e30 <makeFreeRtosPriority>
 8003f00:	4602      	mov	r2, r0
 8003f02:	f107 030c 	add.w	r3, r7, #12
 8003f06:	9301      	str	r3, [sp, #4]
 8003f08:	9200      	str	r2, [sp, #0]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	4632      	mov	r2, r6
 8003f0e:	4629      	mov	r1, r5
 8003f10:	4620      	mov	r0, r4
 8003f12:	f000 ff60 	bl	8004dd6 <xTaskCreate>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d001      	beq.n	8003f20 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	e000      	b.n	8003f22 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003f20:	68fb      	ldr	r3, [r7, #12]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f2a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <osDelay+0x16>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	e000      	b.n	8003f42 <osDelay+0x18>
 8003f40:	2301      	movs	r3, #1
 8003f42:	4618      	mov	r0, r3
 8003f44:	f001 f894 	bl	8005070 <vTaskDelay>
  
  return osOK;
 8003f48:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b086      	sub	sp, #24
 8003f56:	af02      	add	r7, sp, #8
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00f      	beq.n	8003f84 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d10a      	bne.n	8003f80 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2203      	movs	r2, #3
 8003f70:	9200      	str	r2, [sp, #0]
 8003f72:	2200      	movs	r2, #0
 8003f74:	2100      	movs	r1, #0
 8003f76:	2001      	movs	r0, #1
 8003f78:	f000 f9be 	bl	80042f8 <xQueueGenericCreateStatic>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	e016      	b.n	8003fae <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	e014      	b.n	8003fae <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d110      	bne.n	8003fac <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	2001      	movs	r0, #1
 8003f90:	f000 fa2a 	bl	80043e8 <xQueueGenericCreate>
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <osSemaphoreCreate+0x56>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 fa7a 	bl	800449c <xQueueGenericSend>
      return sema;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	e000      	b.n	8003fae <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8003fac:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d101      	bne.n	8003fd0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8003fcc:	2380      	movs	r3, #128	; 0x80
 8003fce:	e03a      	b.n	8004046 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fda:	d103      	bne.n	8003fe4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8003fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e009      	b.n	8003ff8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d006      	beq.n	8003ff8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <osSemaphoreWait+0x40>
      ticks = 1;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003ff8:	f7ff ff32 	bl	8003e60 <inHandlerMode>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d017      	beq.n	8004032 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004002:	f107 0308 	add.w	r3, r7, #8
 8004006:	461a      	mov	r2, r3
 8004008:	2100      	movs	r1, #0
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fcde 	bl	80049cc <xQueueReceiveFromISR>
 8004010:	4603      	mov	r3, r0
 8004012:	2b01      	cmp	r3, #1
 8004014:	d001      	beq.n	800401a <osSemaphoreWait+0x62>
      return osErrorOS;
 8004016:	23ff      	movs	r3, #255	; 0xff
 8004018:	e015      	b.n	8004046 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d011      	beq.n	8004044 <osSemaphoreWait+0x8c>
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <osSemaphoreWait+0x98>)
 8004022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	e008      	b.n	8004044 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004032:	68f9      	ldr	r1, [r7, #12]
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fbbd 	bl	80047b4 <xQueueSemaphoreTake>
 800403a:	4603      	mov	r3, r0
 800403c:	2b01      	cmp	r3, #1
 800403e:	d001      	beq.n	8004044 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004040:	23ff      	movs	r3, #255	; 0xff
 8004042:	e000      	b.n	8004046 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	e000ed04 	.word	0xe000ed04

08004054 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800405c:	2300      	movs	r3, #0
 800405e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004060:	2300      	movs	r3, #0
 8004062:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004064:	f7ff fefc 	bl	8003e60 <inHandlerMode>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d016      	beq.n	800409c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800406e:	f107 0308 	add.w	r3, r7, #8
 8004072:	4619      	mov	r1, r3
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fb0f 	bl	8004698 <xQueueGiveFromISR>
 800407a:	4603      	mov	r3, r0
 800407c:	2b01      	cmp	r3, #1
 800407e:	d001      	beq.n	8004084 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004080:	23ff      	movs	r3, #255	; 0xff
 8004082:	e017      	b.n	80040b4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d013      	beq.n	80040b2 <osSemaphoreRelease+0x5e>
 800408a:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <osSemaphoreRelease+0x68>)
 800408c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	f3bf 8f4f 	dsb	sy
 8004096:	f3bf 8f6f 	isb	sy
 800409a:	e00a      	b.n	80040b2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800409c:	2300      	movs	r3, #0
 800409e:	2200      	movs	r2, #0
 80040a0:	2100      	movs	r1, #0
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f9fa 	bl	800449c <xQueueGenericSend>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d001      	beq.n	80040b2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80040ae:	23ff      	movs	r3, #255	; 0xff
 80040b0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80040b2:	68fb      	ldr	r3, [r7, #12]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	e000ed04 	.word	0xe000ed04

080040c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f103 0208 	add.w	r2, r3, #8
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f04f 32ff 	mov.w	r2, #4294967295
 80040d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f103 0208 	add.w	r2, r3, #8
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f103 0208 	add.w	r2, r3, #8
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800411a:	b480      	push	{r7}
 800411c:	b085      	sub	sp, #20
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
 8004122:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	601a      	str	r2, [r3, #0]
}
 8004156:	bf00      	nop
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004162:	b480      	push	{r7}
 8004164:	b085      	sub	sp, #20
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004178:	d103      	bne.n	8004182 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e00c      	b.n	800419c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3308      	adds	r3, #8
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	e002      	b.n	8004190 <vListInsert+0x2e>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68ba      	ldr	r2, [r7, #8]
 8004198:	429a      	cmp	r2, r3
 800419a:	d2f6      	bcs.n	800418a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	683a      	ldr	r2, [r7, #0]
 80041b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	601a      	str	r2, [r3, #0]
}
 80041c8:	bf00      	nop
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041d4:	b480      	push	{r7}
 80041d6:	b085      	sub	sp, #20
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6892      	ldr	r2, [r2, #8]
 80041ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6852      	ldr	r2, [r2, #4]
 80041f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d103      	bne.n	8004208 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	1e5a      	subs	r2, r3, #1
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800424e:	bf00      	nop
 8004250:	e7fe      	b.n	8004250 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004252:	f001 fe9f 	bl	8005f94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425e:	68f9      	ldr	r1, [r7, #12]
 8004260:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	441a      	add	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004282:	3b01      	subs	r3, #1
 8004284:	68f9      	ldr	r1, [r7, #12]
 8004286:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	441a      	add	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	22ff      	movs	r2, #255	; 0xff
 8004296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	22ff      	movs	r2, #255	; 0xff
 800429e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d114      	bne.n	80042d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01a      	beq.n	80042e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	3310      	adds	r3, #16
 80042b4:	4618      	mov	r0, r3
 80042b6:	f001 f961 	bl	800557c <xTaskRemoveFromEventList>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d012      	beq.n	80042e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <xQueueGenericReset+0xcc>)
 80042c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	e009      	b.n	80042e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3310      	adds	r3, #16
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fef2 	bl	80040c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3324      	adds	r3, #36	; 0x24
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff feed 	bl	80040c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042e6:	f001 fe85 	bl	8005ff4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042ea:	2301      	movs	r3, #1
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	e000ed04 	.word	0xe000ed04

080042f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08e      	sub	sp, #56	; 0x38
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10a      	bne.n	8004322 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800431e:	bf00      	nop
 8004320:	e7fe      	b.n	8004320 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
}
 800433a:	bf00      	nop
 800433c:	e7fe      	b.n	800433c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <xQueueGenericCreateStatic+0x52>
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <xQueueGenericCreateStatic+0x56>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <xQueueGenericCreateStatic+0x58>
 800434e:	2300      	movs	r3, #0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	623b      	str	r3, [r7, #32]
}
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <xQueueGenericCreateStatic+0x7e>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <xQueueGenericCreateStatic+0x82>
 8004376:	2301      	movs	r3, #1
 8004378:	e000      	b.n	800437c <xQueueGenericCreateStatic+0x84>
 800437a:	2300      	movs	r3, #0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	61fb      	str	r3, [r7, #28]
}
 8004392:	bf00      	nop
 8004394:	e7fe      	b.n	8004394 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004396:	2348      	movs	r3, #72	; 0x48
 8004398:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2b48      	cmp	r3, #72	; 0x48
 800439e:	d00a      	beq.n	80043b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	61bb      	str	r3, [r7, #24]
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00d      	beq.n	80043de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	4613      	mov	r3, r2
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f83f 	bl	800445c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80043de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3730      	adds	r7, #48	; 0x30
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08a      	sub	sp, #40	; 0x28
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	4613      	mov	r3, r2
 80043f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10a      	bne.n	8004412 <xQueueGenericCreate+0x2a>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	613b      	str	r3, [r7, #16]
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	3348      	adds	r3, #72	; 0x48
 8004420:	4618      	mov	r0, r3
 8004422:	f001 fed9 	bl	80061d8 <pvPortMalloc>
 8004426:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d011      	beq.n	8004452 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	3348      	adds	r3, #72	; 0x48
 8004436:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004440:	79fa      	ldrb	r2, [r7, #7]
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	4613      	mov	r3, r2
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f805 	bl	800445c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004452:	69bb      	ldr	r3, [r7, #24]
	}
 8004454:	4618      	mov	r0, r3
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d103      	bne.n	8004478 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	e002      	b.n	800447e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800448a:	2101      	movs	r1, #1
 800448c:	69b8      	ldr	r0, [r7, #24]
 800448e:	f7ff fecb 	bl	8004228 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004492:	bf00      	nop
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08e      	sub	sp, #56	; 0x38
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80044aa:	2300      	movs	r3, #0
 80044ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10a      	bne.n	80044ce <xQueueGenericSend+0x32>
	__asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80044ca:	bf00      	nop
 80044cc:	e7fe      	b.n	80044cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d103      	bne.n	80044dc <xQueueGenericSend+0x40>
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <xQueueGenericSend+0x44>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <xQueueGenericSend+0x46>
 80044e0:	2300      	movs	r3, #0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10a      	bne.n	80044fc <xQueueGenericSend+0x60>
	__asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044f8:	bf00      	nop
 80044fa:	e7fe      	b.n	80044fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d103      	bne.n	800450a <xQueueGenericSend+0x6e>
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <xQueueGenericSend+0x72>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <xQueueGenericSend+0x74>
 800450e:	2300      	movs	r3, #0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <xQueueGenericSend+0x8e>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	623b      	str	r3, [r7, #32]
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800452a:	f001 f9e7 	bl	80058fc <xTaskGetSchedulerState>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d102      	bne.n	800453a <xQueueGenericSend+0x9e>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <xQueueGenericSend+0xa2>
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <xQueueGenericSend+0xa4>
 800453e:	2300      	movs	r3, #0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <xQueueGenericSend+0xbe>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	61fb      	str	r3, [r7, #28]
}
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800455a:	f001 fd1b 	bl	8005f94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <xQueueGenericSend+0xd4>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d129      	bne.n	80045c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004576:	f000 fac1 	bl	8004afc <prvCopyDataToQueue>
 800457a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	2b00      	cmp	r3, #0
 8004582:	d010      	beq.n	80045a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	3324      	adds	r3, #36	; 0x24
 8004588:	4618      	mov	r0, r3
 800458a:	f000 fff7 	bl	800557c <xTaskRemoveFromEventList>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d013      	beq.n	80045bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004594:	4b3f      	ldr	r3, [pc, #252]	; (8004694 <xQueueGenericSend+0x1f8>)
 8004596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	e00a      	b.n	80045bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80045ac:	4b39      	ldr	r3, [pc, #228]	; (8004694 <xQueueGenericSend+0x1f8>)
 80045ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80045bc:	f001 fd1a 	bl	8005ff4 <vPortExitCritical>
				return pdPASS;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e063      	b.n	800468c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d103      	bne.n	80045d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045ca:	f001 fd13 	bl	8005ff4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e05c      	b.n	800468c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d106      	bne.n	80045e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045d8:	f107 0314 	add.w	r3, r7, #20
 80045dc:	4618      	mov	r0, r3
 80045de:	f001 f82f 	bl	8005640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045e2:	2301      	movs	r3, #1
 80045e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045e6:	f001 fd05 	bl	8005ff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045ea:	f000 fddf 	bl	80051ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045ee:	f001 fcd1 	bl	8005f94 <vPortEnterCritical>
 80045f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045f8:	b25b      	sxtb	r3, r3
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fe:	d103      	bne.n	8004608 <xQueueGenericSend+0x16c>
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800460e:	b25b      	sxtb	r3, r3
 8004610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004614:	d103      	bne.n	800461e <xQueueGenericSend+0x182>
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800461e:	f001 fce9 	bl	8005ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004622:	1d3a      	adds	r2, r7, #4
 8004624:	f107 0314 	add.w	r3, r7, #20
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	f001 f81e 	bl	800566c <xTaskCheckForTimeOut>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d124      	bne.n	8004680 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004638:	f000 fb58 	bl	8004cec <prvIsQueueFull>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d018      	beq.n	8004674 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004644:	3310      	adds	r3, #16
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	4611      	mov	r1, r2
 800464a:	4618      	mov	r0, r3
 800464c:	f000 ff72 	bl	8005534 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004652:	f000 fae3 	bl	8004c1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004656:	f000 fdb7 	bl	80051c8 <xTaskResumeAll>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	f47f af7c 	bne.w	800455a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004662:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <xQueueGenericSend+0x1f8>)
 8004664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	e772      	b.n	800455a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004676:	f000 fad1 	bl	8004c1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800467a:	f000 fda5 	bl	80051c8 <xTaskResumeAll>
 800467e:	e76c      	b.n	800455a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004682:	f000 facb 	bl	8004c1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004686:	f000 fd9f 	bl	80051c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800468a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800468c:	4618      	mov	r0, r3
 800468e:	3738      	adds	r7, #56	; 0x38
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	e000ed04 	.word	0xe000ed04

08004698 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08e      	sub	sp, #56	; 0x38
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	623b      	str	r3, [r7, #32]
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <xQueueGiveFromISR+0x48>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	61fb      	str	r3, [r7, #28]
}
 80046dc:	bf00      	nop
 80046de:	e7fe      	b.n	80046de <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80046e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d103      	bne.n	80046f0 <xQueueGiveFromISR+0x58>
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <xQueueGiveFromISR+0x5c>
 80046f0:	2301      	movs	r3, #1
 80046f2:	e000      	b.n	80046f6 <xQueueGiveFromISR+0x5e>
 80046f4:	2300      	movs	r3, #0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10a      	bne.n	8004710 <xQueueGiveFromISR+0x78>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	61bb      	str	r3, [r7, #24]
}
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004710:	f001 fd22 	bl	8006158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004714:	f3ef 8211 	mrs	r2, BASEPRI
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	617a      	str	r2, [r7, #20]
 800472a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800472c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800473c:	429a      	cmp	r2, r3
 800473e:	d22b      	bcs.n	8004798 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004742:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004750:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004752:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475a:	d112      	bne.n	8004782 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800475c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	2b00      	cmp	r3, #0
 8004762:	d016      	beq.n	8004792 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004766:	3324      	adds	r3, #36	; 0x24
 8004768:	4618      	mov	r0, r3
 800476a:	f000 ff07 	bl	800557c <xTaskRemoveFromEventList>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00e      	beq.n	8004792 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00b      	beq.n	8004792 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2201      	movs	r2, #1
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	e007      	b.n	8004792 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004786:	3301      	adds	r3, #1
 8004788:	b2db      	uxtb	r3, r3
 800478a:	b25a      	sxtb	r2, r3
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004792:	2301      	movs	r3, #1
 8004794:	637b      	str	r3, [r7, #52]	; 0x34
 8004796:	e001      	b.n	800479c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004798:	2300      	movs	r3, #0
 800479a:	637b      	str	r3, [r7, #52]	; 0x34
 800479c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80047a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3738      	adds	r7, #56	; 0x38
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
	...

080047b4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08e      	sub	sp, #56	; 0x38
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80047be:	2300      	movs	r3, #0
 80047c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80047c6:	2300      	movs	r3, #0
 80047c8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10a      	bne.n	80047e6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	623b      	str	r3, [r7, #32]
}
 80047e2:	bf00      	nop
 80047e4:	e7fe      	b.n	80047e4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	61fb      	str	r3, [r7, #28]
}
 8004800:	bf00      	nop
 8004802:	e7fe      	b.n	8004802 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004804:	f001 f87a 	bl	80058fc <xTaskGetSchedulerState>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d102      	bne.n	8004814 <xQueueSemaphoreTake+0x60>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <xQueueSemaphoreTake+0x64>
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <xQueueSemaphoreTake+0x66>
 8004818:	2300      	movs	r3, #0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10a      	bne.n	8004834 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	61bb      	str	r3, [r7, #24]
}
 8004830:	bf00      	nop
 8004832:	e7fe      	b.n	8004832 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004834:	f001 fbae 	bl	8005f94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800483a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004840:	2b00      	cmp	r3, #0
 8004842:	d024      	beq.n	800488e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	1e5a      	subs	r2, r3, #1
 8004848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d104      	bne.n	800485e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004854:	f001 f9fa 	bl	8005c4c <pvTaskIncrementMutexHeldCount>
 8004858:	4602      	mov	r2, r0
 800485a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00f      	beq.n	8004886 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004868:	3310      	adds	r3, #16
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fe86 	bl	800557c <xTaskRemoveFromEventList>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d007      	beq.n	8004886 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004876:	4b54      	ldr	r3, [pc, #336]	; (80049c8 <xQueueSemaphoreTake+0x214>)
 8004878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004886:	f001 fbb5 	bl	8005ff4 <vPortExitCritical>
				return pdPASS;
 800488a:	2301      	movs	r3, #1
 800488c:	e097      	b.n	80049be <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d111      	bne.n	80048b8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	617b      	str	r3, [r7, #20]
}
 80048ac:	bf00      	nop
 80048ae:	e7fe      	b.n	80048ae <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80048b0:	f001 fba0 	bl	8005ff4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048b4:	2300      	movs	r3, #0
 80048b6:	e082      	b.n	80049be <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048be:	f107 030c 	add.w	r3, r7, #12
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 febc 	bl	8005640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048c8:	2301      	movs	r3, #1
 80048ca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048cc:	f001 fb92 	bl	8005ff4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048d0:	f000 fc6c 	bl	80051ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048d4:	f001 fb5e 	bl	8005f94 <vPortEnterCritical>
 80048d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048de:	b25b      	sxtb	r3, r3
 80048e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e4:	d103      	bne.n	80048ee <xQueueSemaphoreTake+0x13a>
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048f4:	b25b      	sxtb	r3, r3
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fa:	d103      	bne.n	8004904 <xQueueSemaphoreTake+0x150>
 80048fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004904:	f001 fb76 	bl	8005ff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004908:	463a      	mov	r2, r7
 800490a:	f107 030c 	add.w	r3, r7, #12
 800490e:	4611      	mov	r1, r2
 8004910:	4618      	mov	r0, r3
 8004912:	f000 feab 	bl	800566c <xTaskCheckForTimeOut>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d132      	bne.n	8004982 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800491c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800491e:	f000 f9cf 	bl	8004cc0 <prvIsQueueEmpty>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d026      	beq.n	8004976 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d109      	bne.n	8004944 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004930:	f001 fb30 	bl	8005f94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fffd 	bl	8005938 <xTaskPriorityInherit>
 800493e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004940:	f001 fb58 	bl	8005ff4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	3324      	adds	r3, #36	; 0x24
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	4611      	mov	r1, r2
 800494c:	4618      	mov	r0, r3
 800494e:	f000 fdf1 	bl	8005534 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004954:	f000 f962 	bl	8004c1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004958:	f000 fc36 	bl	80051c8 <xTaskResumeAll>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	f47f af68 	bne.w	8004834 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004964:	4b18      	ldr	r3, [pc, #96]	; (80049c8 <xQueueSemaphoreTake+0x214>)
 8004966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	e75e      	b.n	8004834 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004976:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004978:	f000 f950 	bl	8004c1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800497c:	f000 fc24 	bl	80051c8 <xTaskResumeAll>
 8004980:	e758      	b.n	8004834 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004984:	f000 f94a 	bl	8004c1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004988:	f000 fc1e 	bl	80051c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800498c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800498e:	f000 f997 	bl	8004cc0 <prvIsQueueEmpty>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	f43f af4d 	beq.w	8004834 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00d      	beq.n	80049bc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80049a0:	f001 faf8 	bl	8005f94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80049a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049a6:	f000 f891 	bl	8004acc <prvGetDisinheritPriorityAfterTimeout>
 80049aa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80049ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049b2:	4618      	mov	r0, r3
 80049b4:	f001 f8bc 	bl	8005b30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80049b8:	f001 fb1c 	bl	8005ff4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3738      	adds	r7, #56	; 0x38
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	e000ed04 	.word	0xe000ed04

080049cc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08e      	sub	sp, #56	; 0x38
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	623b      	str	r3, [r7, #32]
}
 80049f4:	bf00      	nop
 80049f6:	e7fe      	b.n	80049f6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d103      	bne.n	8004a06 <xQueueReceiveFromISR+0x3a>
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <xQueueReceiveFromISR+0x3e>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <xQueueReceiveFromISR+0x40>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	61fb      	str	r3, [r7, #28]
}
 8004a22:	bf00      	nop
 8004a24:	e7fe      	b.n	8004a24 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a26:	f001 fb97 	bl	8006158 <vPortValidateInterruptPriority>
	__asm volatile
 8004a2a:	f3ef 8211 	mrs	r2, BASEPRI
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	61ba      	str	r2, [r7, #24]
 8004a40:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004a42:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d02f      	beq.n	8004ab2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a60:	f000 f8b6 	bl	8004bd0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	1e5a      	subs	r2, r3, #1
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004a6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a74:	d112      	bne.n	8004a9c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d016      	beq.n	8004aac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	3310      	adds	r3, #16
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 fd7a 	bl	800557c <xTaskRemoveFromEventList>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00e      	beq.n	8004aac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00b      	beq.n	8004aac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	e007      	b.n	8004aac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	b25a      	sxtb	r2, r3
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004aac:	2301      	movs	r3, #1
 8004aae:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab0:	e001      	b.n	8004ab6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f383 8811 	msr	BASEPRI, r3
}
 8004ac0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3738      	adds	r7, #56	; 0x38
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d006      	beq.n	8004aea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f1c3 0307 	rsb	r3, r3, #7
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	e001      	b.n	8004aee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004aee:	68fb      	ldr	r3, [r7, #12]
	}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10d      	bne.n	8004b36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d14d      	bne.n	8004bbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 ff7c 	bl	8005a24 <xTaskPriorityDisinherit>
 8004b2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	609a      	str	r2, [r3, #8]
 8004b34:	e043      	b.n	8004bbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d119      	bne.n	8004b70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6858      	ldr	r0, [r3, #4]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	461a      	mov	r2, r3
 8004b46:	68b9      	ldr	r1, [r7, #8]
 8004b48:	f002 ff51 	bl	80079ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b54:	441a      	add	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d32b      	bcc.n	8004bbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	605a      	str	r2, [r3, #4]
 8004b6e:	e026      	b.n	8004bbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	68d8      	ldr	r0, [r3, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	461a      	mov	r2, r3
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	f002 ff37 	bl	80079ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	425b      	negs	r3, r3
 8004b8a:	441a      	add	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d207      	bcs.n	8004bac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	425b      	negs	r3, r3
 8004ba6:	441a      	add	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d105      	bne.n	8004bbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004bc6:	697b      	ldr	r3, [r7, #20]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d018      	beq.n	8004c14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bea:	441a      	add	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d303      	bcc.n	8004c04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68d9      	ldr	r1, [r3, #12]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	6838      	ldr	r0, [r7, #0]
 8004c10:	f002 feed 	bl	80079ee <memcpy>
	}
}
 8004c14:	bf00      	nop
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c24:	f001 f9b6 	bl	8005f94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c30:	e011      	b.n	8004c56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d012      	beq.n	8004c60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3324      	adds	r3, #36	; 0x24
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fc9c 	bl	800557c <xTaskRemoveFromEventList>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c4a:	f000 fd71 	bl	8005730 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	dce9      	bgt.n	8004c32 <prvUnlockQueue+0x16>
 8004c5e:	e000      	b.n	8004c62 <prvUnlockQueue+0x46>
					break;
 8004c60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	22ff      	movs	r2, #255	; 0xff
 8004c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c6a:	f001 f9c3 	bl	8005ff4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c6e:	f001 f991 	bl	8005f94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c7a:	e011      	b.n	8004ca0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d012      	beq.n	8004caa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3310      	adds	r3, #16
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 fc77 	bl	800557c <xTaskRemoveFromEventList>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d001      	beq.n	8004c98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c94:	f000 fd4c 	bl	8005730 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c98:	7bbb      	ldrb	r3, [r7, #14]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ca0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	dce9      	bgt.n	8004c7c <prvUnlockQueue+0x60>
 8004ca8:	e000      	b.n	8004cac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004caa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	22ff      	movs	r2, #255	; 0xff
 8004cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004cb4:	f001 f99e 	bl	8005ff4 <vPortExitCritical>
}
 8004cb8:	bf00      	nop
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cc8:	f001 f964 	bl	8005f94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d102      	bne.n	8004cda <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	e001      	b.n	8004cde <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cde:	f001 f989 	bl	8005ff4 <vPortExitCritical>

	return xReturn;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cf4:	f001 f94e 	bl	8005f94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d102      	bne.n	8004d0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d04:	2301      	movs	r3, #1
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	e001      	b.n	8004d0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d0e:	f001 f971 	bl	8005ff4 <vPortExitCritical>

	return xReturn;
 8004d12:	68fb      	ldr	r3, [r7, #12]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08e      	sub	sp, #56	; 0x38
 8004d20:	af04      	add	r7, sp, #16
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	623b      	str	r3, [r7, #32]
}
 8004d42:	bf00      	nop
 8004d44:	e7fe      	b.n	8004d44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <xTaskCreateStatic+0x46>
	__asm volatile
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	61fb      	str	r3, [r7, #28]
}
 8004d5e:	bf00      	nop
 8004d60:	e7fe      	b.n	8004d60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d62:	23a0      	movs	r3, #160	; 0xa0
 8004d64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2ba0      	cmp	r3, #160	; 0xa0
 8004d6a:	d00a      	beq.n	8004d82 <xTaskCreateStatic+0x66>
	__asm volatile
 8004d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	61bb      	str	r3, [r7, #24]
}
 8004d7e:	bf00      	nop
 8004d80:	e7fe      	b.n	8004d80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d01e      	beq.n	8004dc8 <xTaskCreateStatic+0xac>
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01b      	beq.n	8004dc8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004da2:	2300      	movs	r3, #0
 8004da4:	9303      	str	r3, [sp, #12]
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	9302      	str	r3, [sp, #8]
 8004daa:	f107 0314 	add.w	r3, r7, #20
 8004dae:	9301      	str	r3, [sp, #4]
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 f850 	bl	8004e60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dc2:	f000 f8eb 	bl	8004f9c <prvAddNewTaskToReadyList>
 8004dc6:	e001      	b.n	8004dcc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004dcc:	697b      	ldr	r3, [r7, #20]
	}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3728      	adds	r7, #40	; 0x28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b08c      	sub	sp, #48	; 0x30
 8004dda:	af04      	add	r7, sp, #16
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	603b      	str	r3, [r7, #0]
 8004de2:	4613      	mov	r3, r2
 8004de4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004de6:	88fb      	ldrh	r3, [r7, #6]
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f001 f9f4 	bl	80061d8 <pvPortMalloc>
 8004df0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00e      	beq.n	8004e16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004df8:	20a0      	movs	r0, #160	; 0xa0
 8004dfa:	f001 f9ed 	bl	80061d8 <pvPortMalloc>
 8004dfe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
 8004e0c:	e005      	b.n	8004e1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e0e:	6978      	ldr	r0, [r7, #20]
 8004e10:	f001 faae 	bl	8006370 <vPortFree>
 8004e14:	e001      	b.n	8004e1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d017      	beq.n	8004e50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e28:	88fa      	ldrh	r2, [r7, #6]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	9303      	str	r3, [sp, #12]
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	9302      	str	r3, [sp, #8]
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	9301      	str	r3, [sp, #4]
 8004e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 f80e 	bl	8004e60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e44:	69f8      	ldr	r0, [r7, #28]
 8004e46:	f000 f8a9 	bl	8004f9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	61bb      	str	r3, [r7, #24]
 8004e4e:	e002      	b.n	8004e56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e50:	f04f 33ff 	mov.w	r3, #4294967295
 8004e54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e56:	69bb      	ldr	r3, [r7, #24]
	}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3720      	adds	r7, #32
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	f023 0307 	bic.w	r3, r3, #7
 8004e86:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00a      	beq.n	8004ea8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	617b      	str	r3, [r7, #20]
}
 8004ea4:	bf00      	nop
 8004ea6:	e7fe      	b.n	8004ea6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d01f      	beq.n	8004eee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
 8004eb2:	e012      	b.n	8004eda <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	4413      	add	r3, r2
 8004eba:	7819      	ldrb	r1, [r3, #0]
 8004ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3334      	adds	r3, #52	; 0x34
 8004ec4:	460a      	mov	r2, r1
 8004ec6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	4413      	add	r3, r2
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d006      	beq.n	8004ee2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	2b0f      	cmp	r3, #15
 8004ede:	d9e9      	bls.n	8004eb4 <prvInitialiseNewTask+0x54>
 8004ee0:	e000      	b.n	8004ee4 <prvInitialiseNewTask+0x84>
			{
				break;
 8004ee2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004eec:	e003      	b.n	8004ef6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	2b06      	cmp	r3, #6
 8004efa:	d901      	bls.n	8004f00 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004efc:	2306      	movs	r3, #6
 8004efe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	2200      	movs	r2, #0
 8004f10:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	3304      	adds	r3, #4
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7ff f8f2 	bl	8004100 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1e:	3318      	adds	r3, #24
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7ff f8ed 	bl	8004100 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	f1c3 0207 	rsb	r2, r3, #7
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	334c      	adds	r3, #76	; 0x4c
 8004f50:	224c      	movs	r2, #76	; 0x4c
 8004f52:	2100      	movs	r1, #0
 8004f54:	4618      	mov	r0, r3
 8004f56:	f002 fc75 	bl	8007844 <memset>
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5c:	4a0c      	ldr	r2, [pc, #48]	; (8004f90 <prvInitialiseNewTask+0x130>)
 8004f5e:	651a      	str	r2, [r3, #80]	; 0x50
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	4a0c      	ldr	r2, [pc, #48]	; (8004f94 <prvInitialiseNewTask+0x134>)
 8004f64:	655a      	str	r2, [r3, #84]	; 0x54
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	4a0b      	ldr	r2, [pc, #44]	; (8004f98 <prvInitialiseNewTask+0x138>)
 8004f6a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	68f9      	ldr	r1, [r7, #12]
 8004f70:	69b8      	ldr	r0, [r7, #24]
 8004f72:	f000 fee5 	bl	8005d40 <pxPortInitialiseStack>
 8004f76:	4602      	mov	r2, r0
 8004f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f88:	bf00      	nop
 8004f8a:	3720      	adds	r7, #32
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	200042e8 	.word	0x200042e8
 8004f94:	20004350 	.word	0x20004350
 8004f98:	200043b8 	.word	0x200043b8

08004f9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fa4:	f000 fff6 	bl	8005f94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fa8:	4b2a      	ldr	r3, [pc, #168]	; (8005054 <prvAddNewTaskToReadyList+0xb8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3301      	adds	r3, #1
 8004fae:	4a29      	ldr	r2, [pc, #164]	; (8005054 <prvAddNewTaskToReadyList+0xb8>)
 8004fb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fb2:	4b29      	ldr	r3, [pc, #164]	; (8005058 <prvAddNewTaskToReadyList+0xbc>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fba:	4a27      	ldr	r2, [pc, #156]	; (8005058 <prvAddNewTaskToReadyList+0xbc>)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fc0:	4b24      	ldr	r3, [pc, #144]	; (8005054 <prvAddNewTaskToReadyList+0xb8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d110      	bne.n	8004fea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fc8:	f000 fbd6 	bl	8005778 <prvInitialiseTaskLists>
 8004fcc:	e00d      	b.n	8004fea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fce:	4b23      	ldr	r3, [pc, #140]	; (800505c <prvAddNewTaskToReadyList+0xc0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fd6:	4b20      	ldr	r3, [pc, #128]	; (8005058 <prvAddNewTaskToReadyList+0xbc>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d802      	bhi.n	8004fea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004fe4:	4a1c      	ldr	r2, [pc, #112]	; (8005058 <prvAddNewTaskToReadyList+0xbc>)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fea:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <prvAddNewTaskToReadyList+0xc4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	4a1b      	ldr	r2, [pc, #108]	; (8005060 <prvAddNewTaskToReadyList+0xc4>)
 8004ff2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	409a      	lsls	r2, r3
 8004ffc:	4b19      	ldr	r3, [pc, #100]	; (8005064 <prvAddNewTaskToReadyList+0xc8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4313      	orrs	r3, r2
 8005002:	4a18      	ldr	r2, [pc, #96]	; (8005064 <prvAddNewTaskToReadyList+0xc8>)
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4a15      	ldr	r2, [pc, #84]	; (8005068 <prvAddNewTaskToReadyList+0xcc>)
 8005014:	441a      	add	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3304      	adds	r3, #4
 800501a:	4619      	mov	r1, r3
 800501c:	4610      	mov	r0, r2
 800501e:	f7ff f87c 	bl	800411a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005022:	f000 ffe7 	bl	8005ff4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005026:	4b0d      	ldr	r3, [pc, #52]	; (800505c <prvAddNewTaskToReadyList+0xc0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00e      	beq.n	800504c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800502e:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <prvAddNewTaskToReadyList+0xbc>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	429a      	cmp	r2, r3
 800503a:	d207      	bcs.n	800504c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800503c:	4b0b      	ldr	r3, [pc, #44]	; (800506c <prvAddNewTaskToReadyList+0xd0>)
 800503e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800504c:	bf00      	nop
 800504e:	3708      	adds	r7, #8
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20000694 	.word	0x20000694
 8005058:	20000594 	.word	0x20000594
 800505c:	200006a0 	.word	0x200006a0
 8005060:	200006b0 	.word	0x200006b0
 8005064:	2000069c 	.word	0x2000069c
 8005068:	20000598 	.word	0x20000598
 800506c:	e000ed04 	.word	0xe000ed04

08005070 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d017      	beq.n	80050b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005082:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <vTaskDelay+0x60>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <vTaskDelay+0x30>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	60bb      	str	r3, [r7, #8]
}
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050a0:	f000 f884 	bl	80051ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050a4:	2100      	movs	r1, #0
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fde4 	bl	8005c74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050ac:	f000 f88c 	bl	80051c8 <xTaskResumeAll>
 80050b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d107      	bne.n	80050c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80050b8:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <vTaskDelay+0x64>)
 80050ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050c8:	bf00      	nop
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	200006bc 	.word	0x200006bc
 80050d4:	e000ed04 	.word	0xe000ed04

080050d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b08a      	sub	sp, #40	; 0x28
 80050dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050e6:	463a      	mov	r2, r7
 80050e8:	1d39      	adds	r1, r7, #4
 80050ea:	f107 0308 	add.w	r3, r7, #8
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fc f816 	bl	8001120 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050f4:	6839      	ldr	r1, [r7, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	9202      	str	r2, [sp, #8]
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	2300      	movs	r3, #0
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	2300      	movs	r3, #0
 8005104:	460a      	mov	r2, r1
 8005106:	4921      	ldr	r1, [pc, #132]	; (800518c <vTaskStartScheduler+0xb4>)
 8005108:	4821      	ldr	r0, [pc, #132]	; (8005190 <vTaskStartScheduler+0xb8>)
 800510a:	f7ff fe07 	bl	8004d1c <xTaskCreateStatic>
 800510e:	4603      	mov	r3, r0
 8005110:	4a20      	ldr	r2, [pc, #128]	; (8005194 <vTaskStartScheduler+0xbc>)
 8005112:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005114:	4b1f      	ldr	r3, [pc, #124]	; (8005194 <vTaskStartScheduler+0xbc>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d002      	beq.n	8005122 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800511c:	2301      	movs	r3, #1
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	e001      	b.n	8005126 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d11b      	bne.n	8005164 <vTaskStartScheduler+0x8c>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	613b      	str	r3, [r7, #16]
}
 800513e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005140:	4b15      	ldr	r3, [pc, #84]	; (8005198 <vTaskStartScheduler+0xc0>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	334c      	adds	r3, #76	; 0x4c
 8005146:	4a15      	ldr	r2, [pc, #84]	; (800519c <vTaskStartScheduler+0xc4>)
 8005148:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800514a:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <vTaskStartScheduler+0xc8>)
 800514c:	f04f 32ff 	mov.w	r2, #4294967295
 8005150:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005152:	4b14      	ldr	r3, [pc, #80]	; (80051a4 <vTaskStartScheduler+0xcc>)
 8005154:	2201      	movs	r2, #1
 8005156:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005158:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <vTaskStartScheduler+0xd0>)
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800515e:	f000 fe77 	bl	8005e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005162:	e00e      	b.n	8005182 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516a:	d10a      	bne.n	8005182 <vTaskStartScheduler+0xaa>
	__asm volatile
 800516c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005170:	f383 8811 	msr	BASEPRI, r3
 8005174:	f3bf 8f6f 	isb	sy
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	60fb      	str	r3, [r7, #12]
}
 800517e:	bf00      	nop
 8005180:	e7fe      	b.n	8005180 <vTaskStartScheduler+0xa8>
}
 8005182:	bf00      	nop
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	0800b180 	.word	0x0800b180
 8005190:	08005749 	.word	0x08005749
 8005194:	200006b8 	.word	0x200006b8
 8005198:	20000594 	.word	0x20000594
 800519c:	20000068 	.word	0x20000068
 80051a0:	200006b4 	.word	0x200006b4
 80051a4:	200006a0 	.word	0x200006a0
 80051a8:	20000698 	.word	0x20000698

080051ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80051b0:	4b04      	ldr	r3, [pc, #16]	; (80051c4 <vTaskSuspendAll+0x18>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3301      	adds	r3, #1
 80051b6:	4a03      	ldr	r2, [pc, #12]	; (80051c4 <vTaskSuspendAll+0x18>)
 80051b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80051ba:	bf00      	nop
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	200006bc 	.word	0x200006bc

080051c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051d6:	4b41      	ldr	r3, [pc, #260]	; (80052dc <xTaskResumeAll+0x114>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d10a      	bne.n	80051f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	603b      	str	r3, [r7, #0]
}
 80051f0:	bf00      	nop
 80051f2:	e7fe      	b.n	80051f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051f4:	f000 fece 	bl	8005f94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051f8:	4b38      	ldr	r3, [pc, #224]	; (80052dc <xTaskResumeAll+0x114>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3b01      	subs	r3, #1
 80051fe:	4a37      	ldr	r2, [pc, #220]	; (80052dc <xTaskResumeAll+0x114>)
 8005200:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005202:	4b36      	ldr	r3, [pc, #216]	; (80052dc <xTaskResumeAll+0x114>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d161      	bne.n	80052ce <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800520a:	4b35      	ldr	r3, [pc, #212]	; (80052e0 <xTaskResumeAll+0x118>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d05d      	beq.n	80052ce <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005212:	e02e      	b.n	8005272 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005214:	4b33      	ldr	r3, [pc, #204]	; (80052e4 <xTaskResumeAll+0x11c>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3318      	adds	r3, #24
 8005220:	4618      	mov	r0, r3
 8005222:	f7fe ffd7 	bl	80041d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3304      	adds	r3, #4
 800522a:	4618      	mov	r0, r3
 800522c:	f7fe ffd2 	bl	80041d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	2201      	movs	r2, #1
 8005236:	409a      	lsls	r2, r3
 8005238:	4b2b      	ldr	r3, [pc, #172]	; (80052e8 <xTaskResumeAll+0x120>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4313      	orrs	r3, r2
 800523e:	4a2a      	ldr	r2, [pc, #168]	; (80052e8 <xTaskResumeAll+0x120>)
 8005240:	6013      	str	r3, [r2, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4a27      	ldr	r2, [pc, #156]	; (80052ec <xTaskResumeAll+0x124>)
 8005250:	441a      	add	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3304      	adds	r3, #4
 8005256:	4619      	mov	r1, r3
 8005258:	4610      	mov	r0, r2
 800525a:	f7fe ff5e 	bl	800411a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005262:	4b23      	ldr	r3, [pc, #140]	; (80052f0 <xTaskResumeAll+0x128>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	429a      	cmp	r2, r3
 800526a:	d302      	bcc.n	8005272 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800526c:	4b21      	ldr	r3, [pc, #132]	; (80052f4 <xTaskResumeAll+0x12c>)
 800526e:	2201      	movs	r2, #1
 8005270:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005272:	4b1c      	ldr	r3, [pc, #112]	; (80052e4 <xTaskResumeAll+0x11c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1cc      	bne.n	8005214 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005280:	f000 fb1c 	bl	80058bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005284:	4b1c      	ldr	r3, [pc, #112]	; (80052f8 <xTaskResumeAll+0x130>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d010      	beq.n	80052b2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005290:	f000 f836 	bl	8005300 <xTaskIncrementTick>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800529a:	4b16      	ldr	r3, [pc, #88]	; (80052f4 <xTaskResumeAll+0x12c>)
 800529c:	2201      	movs	r2, #1
 800529e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1f1      	bne.n	8005290 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80052ac:	4b12      	ldr	r3, [pc, #72]	; (80052f8 <xTaskResumeAll+0x130>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <xTaskResumeAll+0x12c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d009      	beq.n	80052ce <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052ba:	2301      	movs	r3, #1
 80052bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052be:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <xTaskResumeAll+0x134>)
 80052c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052ce:	f000 fe91 	bl	8005ff4 <vPortExitCritical>

	return xAlreadyYielded;
 80052d2:	68bb      	ldr	r3, [r7, #8]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	200006bc 	.word	0x200006bc
 80052e0:	20000694 	.word	0x20000694
 80052e4:	20000654 	.word	0x20000654
 80052e8:	2000069c 	.word	0x2000069c
 80052ec:	20000598 	.word	0x20000598
 80052f0:	20000594 	.word	0x20000594
 80052f4:	200006a8 	.word	0x200006a8
 80052f8:	200006a4 	.word	0x200006a4
 80052fc:	e000ed04 	.word	0xe000ed04

08005300 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005306:	2300      	movs	r3, #0
 8005308:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800530a:	4b4e      	ldr	r3, [pc, #312]	; (8005444 <xTaskIncrementTick+0x144>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	f040 808e 	bne.w	8005430 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005314:	4b4c      	ldr	r3, [pc, #304]	; (8005448 <xTaskIncrementTick+0x148>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3301      	adds	r3, #1
 800531a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800531c:	4a4a      	ldr	r2, [pc, #296]	; (8005448 <xTaskIncrementTick+0x148>)
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d120      	bne.n	800536a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005328:	4b48      	ldr	r3, [pc, #288]	; (800544c <xTaskIncrementTick+0x14c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <xTaskIncrementTick+0x48>
	__asm volatile
 8005332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	603b      	str	r3, [r7, #0]
}
 8005344:	bf00      	nop
 8005346:	e7fe      	b.n	8005346 <xTaskIncrementTick+0x46>
 8005348:	4b40      	ldr	r3, [pc, #256]	; (800544c <xTaskIncrementTick+0x14c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	4b40      	ldr	r3, [pc, #256]	; (8005450 <xTaskIncrementTick+0x150>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a3e      	ldr	r2, [pc, #248]	; (800544c <xTaskIncrementTick+0x14c>)
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	4a3e      	ldr	r2, [pc, #248]	; (8005450 <xTaskIncrementTick+0x150>)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6013      	str	r3, [r2, #0]
 800535c:	4b3d      	ldr	r3, [pc, #244]	; (8005454 <xTaskIncrementTick+0x154>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3301      	adds	r3, #1
 8005362:	4a3c      	ldr	r2, [pc, #240]	; (8005454 <xTaskIncrementTick+0x154>)
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	f000 faa9 	bl	80058bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800536a:	4b3b      	ldr	r3, [pc, #236]	; (8005458 <xTaskIncrementTick+0x158>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	429a      	cmp	r2, r3
 8005372:	d348      	bcc.n	8005406 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005374:	4b35      	ldr	r3, [pc, #212]	; (800544c <xTaskIncrementTick+0x14c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d104      	bne.n	8005388 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800537e:	4b36      	ldr	r3, [pc, #216]	; (8005458 <xTaskIncrementTick+0x158>)
 8005380:	f04f 32ff 	mov.w	r2, #4294967295
 8005384:	601a      	str	r2, [r3, #0]
					break;
 8005386:	e03e      	b.n	8005406 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005388:	4b30      	ldr	r3, [pc, #192]	; (800544c <xTaskIncrementTick+0x14c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	429a      	cmp	r2, r3
 800539e:	d203      	bcs.n	80053a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053a0:	4a2d      	ldr	r2, [pc, #180]	; (8005458 <xTaskIncrementTick+0x158>)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053a6:	e02e      	b.n	8005406 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe ff11 	bl	80041d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d004      	beq.n	80053c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	3318      	adds	r3, #24
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fe ff08 	bl	80041d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	2201      	movs	r2, #1
 80053ca:	409a      	lsls	r2, r3
 80053cc:	4b23      	ldr	r3, [pc, #140]	; (800545c <xTaskIncrementTick+0x15c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	4a22      	ldr	r2, [pc, #136]	; (800545c <xTaskIncrementTick+0x15c>)
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053da:	4613      	mov	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4a1f      	ldr	r2, [pc, #124]	; (8005460 <xTaskIncrementTick+0x160>)
 80053e4:	441a      	add	r2, r3
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	3304      	adds	r3, #4
 80053ea:	4619      	mov	r1, r3
 80053ec:	4610      	mov	r0, r2
 80053ee:	f7fe fe94 	bl	800411a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f6:	4b1b      	ldr	r3, [pc, #108]	; (8005464 <xTaskIncrementTick+0x164>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d3b9      	bcc.n	8005374 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005400:	2301      	movs	r3, #1
 8005402:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005404:	e7b6      	b.n	8005374 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005406:	4b17      	ldr	r3, [pc, #92]	; (8005464 <xTaskIncrementTick+0x164>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540c:	4914      	ldr	r1, [pc, #80]	; (8005460 <xTaskIncrementTick+0x160>)
 800540e:	4613      	mov	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4413      	add	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	440b      	add	r3, r1
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d901      	bls.n	8005422 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800541e:	2301      	movs	r3, #1
 8005420:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005422:	4b11      	ldr	r3, [pc, #68]	; (8005468 <xTaskIncrementTick+0x168>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d007      	beq.n	800543a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800542a:	2301      	movs	r3, #1
 800542c:	617b      	str	r3, [r7, #20]
 800542e:	e004      	b.n	800543a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005430:	4b0e      	ldr	r3, [pc, #56]	; (800546c <xTaskIncrementTick+0x16c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3301      	adds	r3, #1
 8005436:	4a0d      	ldr	r2, [pc, #52]	; (800546c <xTaskIncrementTick+0x16c>)
 8005438:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800543a:	697b      	ldr	r3, [r7, #20]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	200006bc 	.word	0x200006bc
 8005448:	20000698 	.word	0x20000698
 800544c:	2000064c 	.word	0x2000064c
 8005450:	20000650 	.word	0x20000650
 8005454:	200006ac 	.word	0x200006ac
 8005458:	200006b4 	.word	0x200006b4
 800545c:	2000069c 	.word	0x2000069c
 8005460:	20000598 	.word	0x20000598
 8005464:	20000594 	.word	0x20000594
 8005468:	200006a8 	.word	0x200006a8
 800546c:	200006a4 	.word	0x200006a4

08005470 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005476:	4b29      	ldr	r3, [pc, #164]	; (800551c <vTaskSwitchContext+0xac>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800547e:	4b28      	ldr	r3, [pc, #160]	; (8005520 <vTaskSwitchContext+0xb0>)
 8005480:	2201      	movs	r2, #1
 8005482:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005484:	e044      	b.n	8005510 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005486:	4b26      	ldr	r3, [pc, #152]	; (8005520 <vTaskSwitchContext+0xb0>)
 8005488:	2200      	movs	r2, #0
 800548a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800548c:	4b25      	ldr	r3, [pc, #148]	; (8005524 <vTaskSwitchContext+0xb4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	fab3 f383 	clz	r3, r3
 8005498:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800549a:	7afb      	ldrb	r3, [r7, #11]
 800549c:	f1c3 031f 	rsb	r3, r3, #31
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	4921      	ldr	r1, [pc, #132]	; (8005528 <vTaskSwitchContext+0xb8>)
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10a      	bne.n	80054cc <vTaskSwitchContext+0x5c>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	607b      	str	r3, [r7, #4]
}
 80054c8:	bf00      	nop
 80054ca:	e7fe      	b.n	80054ca <vTaskSwitchContext+0x5a>
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4a14      	ldr	r2, [pc, #80]	; (8005528 <vTaskSwitchContext+0xb8>)
 80054d8:	4413      	add	r3, r2
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	605a      	str	r2, [r3, #4]
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	3308      	adds	r3, #8
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d104      	bne.n	80054fc <vTaskSwitchContext+0x8c>
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	605a      	str	r2, [r3, #4]
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	4a0a      	ldr	r2, [pc, #40]	; (800552c <vTaskSwitchContext+0xbc>)
 8005504:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005506:	4b09      	ldr	r3, [pc, #36]	; (800552c <vTaskSwitchContext+0xbc>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	334c      	adds	r3, #76	; 0x4c
 800550c:	4a08      	ldr	r2, [pc, #32]	; (8005530 <vTaskSwitchContext+0xc0>)
 800550e:	6013      	str	r3, [r2, #0]
}
 8005510:	bf00      	nop
 8005512:	371c      	adds	r7, #28
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	200006bc 	.word	0x200006bc
 8005520:	200006a8 	.word	0x200006a8
 8005524:	2000069c 	.word	0x2000069c
 8005528:	20000598 	.word	0x20000598
 800552c:	20000594 	.word	0x20000594
 8005530:	20000068 	.word	0x20000068

08005534 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10a      	bne.n	800555a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	60fb      	str	r3, [r7, #12]
}
 8005556:	bf00      	nop
 8005558:	e7fe      	b.n	8005558 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800555a:	4b07      	ldr	r3, [pc, #28]	; (8005578 <vTaskPlaceOnEventList+0x44>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3318      	adds	r3, #24
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fe fdfd 	bl	8004162 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005568:	2101      	movs	r1, #1
 800556a:	6838      	ldr	r0, [r7, #0]
 800556c:	f000 fb82 	bl	8005c74 <prvAddCurrentTaskToDelayedList>
}
 8005570:	bf00      	nop
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	20000594 	.word	0x20000594

0800557c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10a      	bne.n	80055a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	60fb      	str	r3, [r7, #12]
}
 80055a4:	bf00      	nop
 80055a6:	e7fe      	b.n	80055a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	3318      	adds	r3, #24
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fe fe11 	bl	80041d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055b2:	4b1d      	ldr	r3, [pc, #116]	; (8005628 <xTaskRemoveFromEventList+0xac>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d11c      	bne.n	80055f4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	3304      	adds	r3, #4
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe fe08 	bl	80041d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	2201      	movs	r2, #1
 80055ca:	409a      	lsls	r2, r3
 80055cc:	4b17      	ldr	r3, [pc, #92]	; (800562c <xTaskRemoveFromEventList+0xb0>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	4a16      	ldr	r2, [pc, #88]	; (800562c <xTaskRemoveFromEventList+0xb0>)
 80055d4:	6013      	str	r3, [r2, #0]
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055da:	4613      	mov	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4a13      	ldr	r2, [pc, #76]	; (8005630 <xTaskRemoveFromEventList+0xb4>)
 80055e4:	441a      	add	r2, r3
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	3304      	adds	r3, #4
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f7fe fd94 	bl	800411a <vListInsertEnd>
 80055f2:	e005      	b.n	8005600 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	3318      	adds	r3, #24
 80055f8:	4619      	mov	r1, r3
 80055fa:	480e      	ldr	r0, [pc, #56]	; (8005634 <xTaskRemoveFromEventList+0xb8>)
 80055fc:	f7fe fd8d 	bl	800411a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005604:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <xTaskRemoveFromEventList+0xbc>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800560a:	429a      	cmp	r2, r3
 800560c:	d905      	bls.n	800561a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800560e:	2301      	movs	r3, #1
 8005610:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005612:	4b0a      	ldr	r3, [pc, #40]	; (800563c <xTaskRemoveFromEventList+0xc0>)
 8005614:	2201      	movs	r2, #1
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	e001      	b.n	800561e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800561a:	2300      	movs	r3, #0
 800561c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800561e:	697b      	ldr	r3, [r7, #20]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3718      	adds	r7, #24
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	200006bc 	.word	0x200006bc
 800562c:	2000069c 	.word	0x2000069c
 8005630:	20000598 	.word	0x20000598
 8005634:	20000654 	.word	0x20000654
 8005638:	20000594 	.word	0x20000594
 800563c:	200006a8 	.word	0x200006a8

08005640 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005648:	4b06      	ldr	r3, [pc, #24]	; (8005664 <vTaskInternalSetTimeOutState+0x24>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005650:	4b05      	ldr	r3, [pc, #20]	; (8005668 <vTaskInternalSetTimeOutState+0x28>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	605a      	str	r2, [r3, #4]
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	200006ac 	.word	0x200006ac
 8005668:	20000698 	.word	0x20000698

0800566c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10a      	bne.n	8005692 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	613b      	str	r3, [r7, #16]
}
 800568e:	bf00      	nop
 8005690:	e7fe      	b.n	8005690 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	60fb      	str	r3, [r7, #12]
}
 80056aa:	bf00      	nop
 80056ac:	e7fe      	b.n	80056ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80056ae:	f000 fc71 	bl	8005f94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056b2:	4b1d      	ldr	r3, [pc, #116]	; (8005728 <xTaskCheckForTimeOut+0xbc>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ca:	d102      	bne.n	80056d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80056cc:	2300      	movs	r3, #0
 80056ce:	61fb      	str	r3, [r7, #28]
 80056d0:	e023      	b.n	800571a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	4b15      	ldr	r3, [pc, #84]	; (800572c <xTaskCheckForTimeOut+0xc0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d007      	beq.n	80056ee <xTaskCheckForTimeOut+0x82>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d302      	bcc.n	80056ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056e8:	2301      	movs	r3, #1
 80056ea:	61fb      	str	r3, [r7, #28]
 80056ec:	e015      	b.n	800571a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d20b      	bcs.n	8005710 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	1ad2      	subs	r2, r2, r3
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff ff9b 	bl	8005640 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	e004      	b.n	800571a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005716:	2301      	movs	r3, #1
 8005718:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800571a:	f000 fc6b 	bl	8005ff4 <vPortExitCritical>

	return xReturn;
 800571e:	69fb      	ldr	r3, [r7, #28]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	20000698 	.word	0x20000698
 800572c:	200006ac 	.word	0x200006ac

08005730 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005734:	4b03      	ldr	r3, [pc, #12]	; (8005744 <vTaskMissedYield+0x14>)
 8005736:	2201      	movs	r2, #1
 8005738:	601a      	str	r2, [r3, #0]
}
 800573a:	bf00      	nop
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	200006a8 	.word	0x200006a8

08005748 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005750:	f000 f852 	bl	80057f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005754:	4b06      	ldr	r3, [pc, #24]	; (8005770 <prvIdleTask+0x28>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d9f9      	bls.n	8005750 <prvIdleTask+0x8>
			{
				taskYIELD();
 800575c:	4b05      	ldr	r3, [pc, #20]	; (8005774 <prvIdleTask+0x2c>)
 800575e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800576c:	e7f0      	b.n	8005750 <prvIdleTask+0x8>
 800576e:	bf00      	nop
 8005770:	20000598 	.word	0x20000598
 8005774:	e000ed04 	.word	0xe000ed04

08005778 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800577e:	2300      	movs	r3, #0
 8005780:	607b      	str	r3, [r7, #4]
 8005782:	e00c      	b.n	800579e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4a12      	ldr	r2, [pc, #72]	; (80057d8 <prvInitialiseTaskLists+0x60>)
 8005790:	4413      	add	r3, r2
 8005792:	4618      	mov	r0, r3
 8005794:	f7fe fc94 	bl	80040c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3301      	adds	r3, #1
 800579c:	607b      	str	r3, [r7, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b06      	cmp	r3, #6
 80057a2:	d9ef      	bls.n	8005784 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057a4:	480d      	ldr	r0, [pc, #52]	; (80057dc <prvInitialiseTaskLists+0x64>)
 80057a6:	f7fe fc8b 	bl	80040c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057aa:	480d      	ldr	r0, [pc, #52]	; (80057e0 <prvInitialiseTaskLists+0x68>)
 80057ac:	f7fe fc88 	bl	80040c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057b0:	480c      	ldr	r0, [pc, #48]	; (80057e4 <prvInitialiseTaskLists+0x6c>)
 80057b2:	f7fe fc85 	bl	80040c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057b6:	480c      	ldr	r0, [pc, #48]	; (80057e8 <prvInitialiseTaskLists+0x70>)
 80057b8:	f7fe fc82 	bl	80040c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057bc:	480b      	ldr	r0, [pc, #44]	; (80057ec <prvInitialiseTaskLists+0x74>)
 80057be:	f7fe fc7f 	bl	80040c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057c2:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <prvInitialiseTaskLists+0x78>)
 80057c4:	4a05      	ldr	r2, [pc, #20]	; (80057dc <prvInitialiseTaskLists+0x64>)
 80057c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057c8:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <prvInitialiseTaskLists+0x7c>)
 80057ca:	4a05      	ldr	r2, [pc, #20]	; (80057e0 <prvInitialiseTaskLists+0x68>)
 80057cc:	601a      	str	r2, [r3, #0]
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20000598 	.word	0x20000598
 80057dc:	20000624 	.word	0x20000624
 80057e0:	20000638 	.word	0x20000638
 80057e4:	20000654 	.word	0x20000654
 80057e8:	20000668 	.word	0x20000668
 80057ec:	20000680 	.word	0x20000680
 80057f0:	2000064c 	.word	0x2000064c
 80057f4:	20000650 	.word	0x20000650

080057f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057fe:	e019      	b.n	8005834 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005800:	f000 fbc8 	bl	8005f94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005804:	4b10      	ldr	r3, [pc, #64]	; (8005848 <prvCheckTasksWaitingTermination+0x50>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3304      	adds	r3, #4
 8005810:	4618      	mov	r0, r3
 8005812:	f7fe fcdf 	bl	80041d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005816:	4b0d      	ldr	r3, [pc, #52]	; (800584c <prvCheckTasksWaitingTermination+0x54>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3b01      	subs	r3, #1
 800581c:	4a0b      	ldr	r2, [pc, #44]	; (800584c <prvCheckTasksWaitingTermination+0x54>)
 800581e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005820:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <prvCheckTasksWaitingTermination+0x58>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3b01      	subs	r3, #1
 8005826:	4a0a      	ldr	r2, [pc, #40]	; (8005850 <prvCheckTasksWaitingTermination+0x58>)
 8005828:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800582a:	f000 fbe3 	bl	8005ff4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f810 	bl	8005854 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005834:	4b06      	ldr	r3, [pc, #24]	; (8005850 <prvCheckTasksWaitingTermination+0x58>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e1      	bne.n	8005800 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800583c:	bf00      	nop
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20000668 	.word	0x20000668
 800584c:	20000694 	.word	0x20000694
 8005850:	2000067c 	.word	0x2000067c

08005854 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	334c      	adds	r3, #76	; 0x4c
 8005860:	4618      	mov	r0, r3
 8005862:	f002 f80b 	bl	800787c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800586c:	2b00      	cmp	r3, #0
 800586e:	d108      	bne.n	8005882 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fd7b 	bl	8006370 <vPortFree>
				vPortFree( pxTCB );
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fd78 	bl	8006370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005880:	e018      	b.n	80058b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005888:	2b01      	cmp	r3, #1
 800588a:	d103      	bne.n	8005894 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fd6f 	bl	8006370 <vPortFree>
	}
 8005892:	e00f      	b.n	80058b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800589a:	2b02      	cmp	r3, #2
 800589c:	d00a      	beq.n	80058b4 <prvDeleteTCB+0x60>
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	60fb      	str	r3, [r7, #12]
}
 80058b0:	bf00      	nop
 80058b2:	e7fe      	b.n	80058b2 <prvDeleteTCB+0x5e>
	}
 80058b4:	bf00      	nop
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058c2:	4b0c      	ldr	r3, [pc, #48]	; (80058f4 <prvResetNextTaskUnblockTime+0x38>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d104      	bne.n	80058d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058cc:	4b0a      	ldr	r3, [pc, #40]	; (80058f8 <prvResetNextTaskUnblockTime+0x3c>)
 80058ce:	f04f 32ff 	mov.w	r2, #4294967295
 80058d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058d4:	e008      	b.n	80058e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058d6:	4b07      	ldr	r3, [pc, #28]	; (80058f4 <prvResetNextTaskUnblockTime+0x38>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	4a04      	ldr	r2, [pc, #16]	; (80058f8 <prvResetNextTaskUnblockTime+0x3c>)
 80058e6:	6013      	str	r3, [r2, #0]
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	2000064c 	.word	0x2000064c
 80058f8:	200006b4 	.word	0x200006b4

080058fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005902:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <xTaskGetSchedulerState+0x34>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d102      	bne.n	8005910 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800590a:	2301      	movs	r3, #1
 800590c:	607b      	str	r3, [r7, #4]
 800590e:	e008      	b.n	8005922 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005910:	4b08      	ldr	r3, [pc, #32]	; (8005934 <xTaskGetSchedulerState+0x38>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d102      	bne.n	800591e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005918:	2302      	movs	r3, #2
 800591a:	607b      	str	r3, [r7, #4]
 800591c:	e001      	b.n	8005922 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800591e:	2300      	movs	r3, #0
 8005920:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005922:	687b      	ldr	r3, [r7, #4]
	}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	200006a0 	.word	0x200006a0
 8005934:	200006bc 	.word	0x200006bc

08005938 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005944:	2300      	movs	r3, #0
 8005946:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d05e      	beq.n	8005a0c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005952:	4b31      	ldr	r3, [pc, #196]	; (8005a18 <xTaskPriorityInherit+0xe0>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	429a      	cmp	r2, r3
 800595a:	d24e      	bcs.n	80059fa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	2b00      	cmp	r3, #0
 8005962:	db06      	blt.n	8005972 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005964:	4b2c      	ldr	r3, [pc, #176]	; (8005a18 <xTaskPriorityInherit+0xe0>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596a:	f1c3 0207 	rsb	r2, r3, #7
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6959      	ldr	r1, [r3, #20]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597a:	4613      	mov	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4a26      	ldr	r2, [pc, #152]	; (8005a1c <xTaskPriorityInherit+0xe4>)
 8005984:	4413      	add	r3, r2
 8005986:	4299      	cmp	r1, r3
 8005988:	d12f      	bne.n	80059ea <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	3304      	adds	r3, #4
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe fc20 	bl	80041d4 <uxListRemove>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10a      	bne.n	80059b0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	2201      	movs	r2, #1
 80059a0:	fa02 f303 	lsl.w	r3, r2, r3
 80059a4:	43da      	mvns	r2, r3
 80059a6:	4b1e      	ldr	r3, [pc, #120]	; (8005a20 <xTaskPriorityInherit+0xe8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4013      	ands	r3, r2
 80059ac:	4a1c      	ldr	r2, [pc, #112]	; (8005a20 <xTaskPriorityInherit+0xe8>)
 80059ae:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059b0:	4b19      	ldr	r3, [pc, #100]	; (8005a18 <xTaskPriorityInherit+0xe0>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	2201      	movs	r2, #1
 80059c0:	409a      	lsls	r2, r3
 80059c2:	4b17      	ldr	r3, [pc, #92]	; (8005a20 <xTaskPriorityInherit+0xe8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	4a15      	ldr	r2, [pc, #84]	; (8005a20 <xTaskPriorityInherit+0xe8>)
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4a10      	ldr	r2, [pc, #64]	; (8005a1c <xTaskPriorityInherit+0xe4>)
 80059da:	441a      	add	r2, r3
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	3304      	adds	r3, #4
 80059e0:	4619      	mov	r1, r3
 80059e2:	4610      	mov	r0, r2
 80059e4:	f7fe fb99 	bl	800411a <vListInsertEnd>
 80059e8:	e004      	b.n	80059f4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059ea:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <xTaskPriorityInherit+0xe0>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80059f4:	2301      	movs	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	e008      	b.n	8005a0c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059fe:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <xTaskPriorityInherit+0xe0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d201      	bcs.n	8005a0c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
	}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20000594 	.word	0x20000594
 8005a1c:	20000598 	.word	0x20000598
 8005a20:	2000069c 	.word	0x2000069c

08005a24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a30:	2300      	movs	r3, #0
 8005a32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d06e      	beq.n	8005b18 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a3a:	4b3a      	ldr	r3, [pc, #232]	; (8005b24 <xTaskPriorityDisinherit+0x100>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d00a      	beq.n	8005a5a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a48:	f383 8811 	msr	BASEPRI, r3
 8005a4c:	f3bf 8f6f 	isb	sy
 8005a50:	f3bf 8f4f 	dsb	sy
 8005a54:	60fb      	str	r3, [r7, #12]
}
 8005a56:	bf00      	nop
 8005a58:	e7fe      	b.n	8005a58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10a      	bne.n	8005a78 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	60bb      	str	r3, [r7, #8]
}
 8005a74:	bf00      	nop
 8005a76:	e7fe      	b.n	8005a76 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a7c:	1e5a      	subs	r2, r3, #1
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d044      	beq.n	8005b18 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d140      	bne.n	8005b18 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fe fb9a 	bl	80041d4 <uxListRemove>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d115      	bne.n	8005ad2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aaa:	491f      	ldr	r1, [pc, #124]	; (8005b28 <xTaskPriorityDisinherit+0x104>)
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	440b      	add	r3, r1
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10a      	bne.n	8005ad2 <xTaskPriorityDisinherit+0xae>
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	43da      	mvns	r2, r3
 8005ac8:	4b18      	ldr	r3, [pc, #96]	; (8005b2c <xTaskPriorityDisinherit+0x108>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4013      	ands	r3, r2
 8005ace:	4a17      	ldr	r2, [pc, #92]	; (8005b2c <xTaskPriorityDisinherit+0x108>)
 8005ad0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ade:	f1c3 0207 	rsb	r2, r3, #7
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	2201      	movs	r2, #1
 8005aec:	409a      	lsls	r2, r3
 8005aee:	4b0f      	ldr	r3, [pc, #60]	; (8005b2c <xTaskPriorityDisinherit+0x108>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	4a0d      	ldr	r2, [pc, #52]	; (8005b2c <xTaskPriorityDisinherit+0x108>)
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afc:	4613      	mov	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4a08      	ldr	r2, [pc, #32]	; (8005b28 <xTaskPriorityDisinherit+0x104>)
 8005b06:	441a      	add	r2, r3
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	3304      	adds	r3, #4
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f7fe fb03 	bl	800411a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b14:	2301      	movs	r3, #1
 8005b16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b18:	697b      	ldr	r3, [r7, #20]
	}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000594 	.word	0x20000594
 8005b28:	20000598 	.word	0x20000598
 8005b2c:	2000069c 	.word	0x2000069c

08005b30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d077      	beq.n	8005c38 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	60fb      	str	r3, [r7, #12]
}
 8005b62:	bf00      	nop
 8005b64:	e7fe      	b.n	8005b64 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d902      	bls.n	8005b76 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	61fb      	str	r3, [r7, #28]
 8005b74:	e002      	b.n	8005b7c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	69fa      	ldr	r2, [r7, #28]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d058      	beq.n	8005c38 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d153      	bne.n	8005c38 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005b90:	4b2b      	ldr	r3, [pc, #172]	; (8005c40 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d10a      	bne.n	8005bb0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	60bb      	str	r3, [r7, #8]
}
 8005bac:	bf00      	nop
 8005bae:	e7fe      	b.n	8005bae <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	db04      	blt.n	8005bce <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	f1c3 0207 	rsb	r2, r3, #7
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	6959      	ldr	r1, [r3, #20]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4a19      	ldr	r2, [pc, #100]	; (8005c44 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005bde:	4413      	add	r3, r2
 8005be0:	4299      	cmp	r1, r3
 8005be2:	d129      	bne.n	8005c38 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fe faf3 	bl	80041d4 <uxListRemove>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10a      	bne.n	8005c0a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfe:	43da      	mvns	r2, r3
 8005c00:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4013      	ands	r3, r2
 8005c06:	4a10      	ldr	r2, [pc, #64]	; (8005c48 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005c08:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	2201      	movs	r2, #1
 8005c10:	409a      	lsls	r2, r3
 8005c12:	4b0d      	ldr	r3, [pc, #52]	; (8005c48 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	4a0b      	ldr	r2, [pc, #44]	; (8005c48 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4a06      	ldr	r2, [pc, #24]	; (8005c44 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005c2a:	441a      	add	r2, r3
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f7fe fa71 	bl	800411a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c38:	bf00      	nop
 8005c3a:	3720      	adds	r7, #32
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	20000594 	.word	0x20000594
 8005c44:	20000598 	.word	0x20000598
 8005c48:	2000069c 	.word	0x2000069c

08005c4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005c50:	4b07      	ldr	r3, [pc, #28]	; (8005c70 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d004      	beq.n	8005c62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c5e:	3201      	adds	r2, #1
 8005c60:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005c62:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c64:	681b      	ldr	r3, [r3, #0]
	}
 8005c66:	4618      	mov	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	20000594 	.word	0x20000594

08005c74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c7e:	4b29      	ldr	r3, [pc, #164]	; (8005d24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c84:	4b28      	ldr	r3, [pc, #160]	; (8005d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fe faa2 	bl	80041d4 <uxListRemove>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10b      	bne.n	8005cae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005c96:	4b24      	ldr	r3, [pc, #144]	; (8005d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca2:	43da      	mvns	r2, r3
 8005ca4:	4b21      	ldr	r3, [pc, #132]	; (8005d2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	4a20      	ldr	r2, [pc, #128]	; (8005d2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005cac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb4:	d10a      	bne.n	8005ccc <prvAddCurrentTaskToDelayedList+0x58>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d007      	beq.n	8005ccc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cbc:	4b1a      	ldr	r3, [pc, #104]	; (8005d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	481a      	ldr	r0, [pc, #104]	; (8005d30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005cc6:	f7fe fa28 	bl	800411a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cca:	e026      	b.n	8005d1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cd4:	4b14      	ldr	r3, [pc, #80]	; (8005d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d209      	bcs.n	8005cf8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ce4:	4b13      	ldr	r3, [pc, #76]	; (8005d34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3304      	adds	r3, #4
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	f7fe fa36 	bl	8004162 <vListInsert>
}
 8005cf6:	e010      	b.n	8005d1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cf8:	4b0f      	ldr	r3, [pc, #60]	; (8005d38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4b0a      	ldr	r3, [pc, #40]	; (8005d28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	3304      	adds	r3, #4
 8005d02:	4619      	mov	r1, r3
 8005d04:	4610      	mov	r0, r2
 8005d06:	f7fe fa2c 	bl	8004162 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d0a:	4b0c      	ldr	r3, [pc, #48]	; (8005d3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d202      	bcs.n	8005d1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005d14:	4a09      	ldr	r2, [pc, #36]	; (8005d3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6013      	str	r3, [r2, #0]
}
 8005d1a:	bf00      	nop
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20000698 	.word	0x20000698
 8005d28:	20000594 	.word	0x20000594
 8005d2c:	2000069c 	.word	0x2000069c
 8005d30:	20000680 	.word	0x20000680
 8005d34:	20000650 	.word	0x20000650
 8005d38:	2000064c 	.word	0x2000064c
 8005d3c:	200006b4 	.word	0x200006b4

08005d40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3b04      	subs	r3, #4
 8005d50:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005d58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3b04      	subs	r3, #4
 8005d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f023 0201 	bic.w	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3b04      	subs	r3, #4
 8005d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005d70:	4a0c      	ldr	r2, [pc, #48]	; (8005da4 <pxPortInitialiseStack+0x64>)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3b14      	subs	r3, #20
 8005d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	3b04      	subs	r3, #4
 8005d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f06f 0202 	mvn.w	r2, #2
 8005d8e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3b20      	subs	r3, #32
 8005d94:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005d96:	68fb      	ldr	r3, [r7, #12]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	08005da9 	.word	0x08005da9

08005da8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005db2:	4b12      	ldr	r3, [pc, #72]	; (8005dfc <prvTaskExitError+0x54>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dba:	d00a      	beq.n	8005dd2 <prvTaskExitError+0x2a>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	60fb      	str	r3, [r7, #12]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <prvTaskExitError+0x28>
	__asm volatile
 8005dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	60bb      	str	r3, [r7, #8]
}
 8005de4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005de6:	bf00      	nop
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d0fc      	beq.n	8005de8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005dee:	bf00      	nop
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	2000000c 	.word	0x2000000c

08005e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e00:	4b07      	ldr	r3, [pc, #28]	; (8005e20 <pxCurrentTCBConst2>)
 8005e02:	6819      	ldr	r1, [r3, #0]
 8005e04:	6808      	ldr	r0, [r1, #0]
 8005e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e0a:	f380 8809 	msr	PSP, r0
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f04f 0000 	mov.w	r0, #0
 8005e16:	f380 8811 	msr	BASEPRI, r0
 8005e1a:	4770      	bx	lr
 8005e1c:	f3af 8000 	nop.w

08005e20 <pxCurrentTCBConst2>:
 8005e20:	20000594 	.word	0x20000594
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop

08005e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005e28:	4808      	ldr	r0, [pc, #32]	; (8005e4c <prvPortStartFirstTask+0x24>)
 8005e2a:	6800      	ldr	r0, [r0, #0]
 8005e2c:	6800      	ldr	r0, [r0, #0]
 8005e2e:	f380 8808 	msr	MSP, r0
 8005e32:	f04f 0000 	mov.w	r0, #0
 8005e36:	f380 8814 	msr	CONTROL, r0
 8005e3a:	b662      	cpsie	i
 8005e3c:	b661      	cpsie	f
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	df00      	svc	0
 8005e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e4a:	bf00      	nop
 8005e4c:	e000ed08 	.word	0xe000ed08

08005e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005e56:	4b46      	ldr	r3, [pc, #280]	; (8005f70 <xPortStartScheduler+0x120>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a46      	ldr	r2, [pc, #280]	; (8005f74 <xPortStartScheduler+0x124>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d10a      	bne.n	8005e76 <xPortStartScheduler+0x26>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	613b      	str	r3, [r7, #16]
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005e76:	4b3e      	ldr	r3, [pc, #248]	; (8005f70 <xPortStartScheduler+0x120>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a3f      	ldr	r2, [pc, #252]	; (8005f78 <xPortStartScheduler+0x128>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d10a      	bne.n	8005e96 <xPortStartScheduler+0x46>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	60fb      	str	r3, [r7, #12]
}
 8005e92:	bf00      	nop
 8005e94:	e7fe      	b.n	8005e94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e96:	4b39      	ldr	r3, [pc, #228]	; (8005f7c <xPortStartScheduler+0x12c>)
 8005e98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	22ff      	movs	r2, #255	; 0xff
 8005ea6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	4b31      	ldr	r3, [pc, #196]	; (8005f80 <xPortStartScheduler+0x130>)
 8005ebc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ebe:	4b31      	ldr	r3, [pc, #196]	; (8005f84 <xPortStartScheduler+0x134>)
 8005ec0:	2207      	movs	r2, #7
 8005ec2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ec4:	e009      	b.n	8005eda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ec6:	4b2f      	ldr	r3, [pc, #188]	; (8005f84 <xPortStartScheduler+0x134>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	4a2d      	ldr	r2, [pc, #180]	; (8005f84 <xPortStartScheduler+0x134>)
 8005ece:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005eda:	78fb      	ldrb	r3, [r7, #3]
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee2:	2b80      	cmp	r3, #128	; 0x80
 8005ee4:	d0ef      	beq.n	8005ec6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ee6:	4b27      	ldr	r3, [pc, #156]	; (8005f84 <xPortStartScheduler+0x134>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f1c3 0307 	rsb	r3, r3, #7
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d00a      	beq.n	8005f08 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	60bb      	str	r3, [r7, #8]
}
 8005f04:	bf00      	nop
 8005f06:	e7fe      	b.n	8005f06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f08:	4b1e      	ldr	r3, [pc, #120]	; (8005f84 <xPortStartScheduler+0x134>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	4a1d      	ldr	r2, [pc, #116]	; (8005f84 <xPortStartScheduler+0x134>)
 8005f10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f12:	4b1c      	ldr	r3, [pc, #112]	; (8005f84 <xPortStartScheduler+0x134>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f1a:	4a1a      	ldr	r2, [pc, #104]	; (8005f84 <xPortStartScheduler+0x134>)
 8005f1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f26:	4b18      	ldr	r3, [pc, #96]	; (8005f88 <xPortStartScheduler+0x138>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a17      	ldr	r2, [pc, #92]	; (8005f88 <xPortStartScheduler+0x138>)
 8005f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f32:	4b15      	ldr	r3, [pc, #84]	; (8005f88 <xPortStartScheduler+0x138>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a14      	ldr	r2, [pc, #80]	; (8005f88 <xPortStartScheduler+0x138>)
 8005f38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005f3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f3e:	f000 f8dd 	bl	80060fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f42:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <xPortStartScheduler+0x13c>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005f48:	f000 f8fc 	bl	8006144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005f4c:	4b10      	ldr	r3, [pc, #64]	; (8005f90 <xPortStartScheduler+0x140>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a0f      	ldr	r2, [pc, #60]	; (8005f90 <xPortStartScheduler+0x140>)
 8005f52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005f56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f58:	f7ff ff66 	bl	8005e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f5c:	f7ff fa88 	bl	8005470 <vTaskSwitchContext>
	prvTaskExitError();
 8005f60:	f7ff ff22 	bl	8005da8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	e000ed00 	.word	0xe000ed00
 8005f74:	410fc271 	.word	0x410fc271
 8005f78:	410fc270 	.word	0x410fc270
 8005f7c:	e000e400 	.word	0xe000e400
 8005f80:	200006c0 	.word	0x200006c0
 8005f84:	200006c4 	.word	0x200006c4
 8005f88:	e000ed20 	.word	0xe000ed20
 8005f8c:	2000000c 	.word	0x2000000c
 8005f90:	e000ef34 	.word	0xe000ef34

08005f94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	607b      	str	r3, [r7, #4]
}
 8005fac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fae:	4b0f      	ldr	r3, [pc, #60]	; (8005fec <vPortEnterCritical+0x58>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	4a0d      	ldr	r2, [pc, #52]	; (8005fec <vPortEnterCritical+0x58>)
 8005fb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fb8:	4b0c      	ldr	r3, [pc, #48]	; (8005fec <vPortEnterCritical+0x58>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d10f      	bne.n	8005fe0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fc0:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <vPortEnterCritical+0x5c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	603b      	str	r3, [r7, #0]
}
 8005fdc:	bf00      	nop
 8005fde:	e7fe      	b.n	8005fde <vPortEnterCritical+0x4a>
	}
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	2000000c 	.word	0x2000000c
 8005ff0:	e000ed04 	.word	0xe000ed04

08005ff4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ffa:	4b12      	ldr	r3, [pc, #72]	; (8006044 <vPortExitCritical+0x50>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10a      	bne.n	8006018 <vPortExitCritical+0x24>
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	607b      	str	r3, [r7, #4]
}
 8006014:	bf00      	nop
 8006016:	e7fe      	b.n	8006016 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006018:	4b0a      	ldr	r3, [pc, #40]	; (8006044 <vPortExitCritical+0x50>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3b01      	subs	r3, #1
 800601e:	4a09      	ldr	r2, [pc, #36]	; (8006044 <vPortExitCritical+0x50>)
 8006020:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006022:	4b08      	ldr	r3, [pc, #32]	; (8006044 <vPortExitCritical+0x50>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d105      	bne.n	8006036 <vPortExitCritical+0x42>
 800602a:	2300      	movs	r3, #0
 800602c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	f383 8811 	msr	BASEPRI, r3
}
 8006034:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	2000000c 	.word	0x2000000c
	...

08006050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006050:	f3ef 8009 	mrs	r0, PSP
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	4b15      	ldr	r3, [pc, #84]	; (80060b0 <pxCurrentTCBConst>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	f01e 0f10 	tst.w	lr, #16
 8006060:	bf08      	it	eq
 8006062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606a:	6010      	str	r0, [r2, #0]
 800606c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006070:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006074:	f380 8811 	msr	BASEPRI, r0
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f7ff f9f6 	bl	8005470 <vTaskSwitchContext>
 8006084:	f04f 0000 	mov.w	r0, #0
 8006088:	f380 8811 	msr	BASEPRI, r0
 800608c:	bc09      	pop	{r0, r3}
 800608e:	6819      	ldr	r1, [r3, #0]
 8006090:	6808      	ldr	r0, [r1, #0]
 8006092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006096:	f01e 0f10 	tst.w	lr, #16
 800609a:	bf08      	it	eq
 800609c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80060a0:	f380 8809 	msr	PSP, r0
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	f3af 8000 	nop.w

080060b0 <pxCurrentTCBConst>:
 80060b0:	20000594 	.word	0x20000594
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop

080060b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	607b      	str	r3, [r7, #4]
}
 80060d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060d2:	f7ff f915 	bl	8005300 <xTaskIncrementTick>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060dc:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <SysTick_Handler+0x40>)
 80060de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	2300      	movs	r3, #0
 80060e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	f383 8811 	msr	BASEPRI, r3
}
 80060ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	e000ed04 	.word	0xe000ed04

080060fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060fc:	b480      	push	{r7}
 80060fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006100:	4b0b      	ldr	r3, [pc, #44]	; (8006130 <vPortSetupTimerInterrupt+0x34>)
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006106:	4b0b      	ldr	r3, [pc, #44]	; (8006134 <vPortSetupTimerInterrupt+0x38>)
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800610c:	4b0a      	ldr	r3, [pc, #40]	; (8006138 <vPortSetupTimerInterrupt+0x3c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a0a      	ldr	r2, [pc, #40]	; (800613c <vPortSetupTimerInterrupt+0x40>)
 8006112:	fba2 2303 	umull	r2, r3, r2, r3
 8006116:	099b      	lsrs	r3, r3, #6
 8006118:	4a09      	ldr	r2, [pc, #36]	; (8006140 <vPortSetupTimerInterrupt+0x44>)
 800611a:	3b01      	subs	r3, #1
 800611c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800611e:	4b04      	ldr	r3, [pc, #16]	; (8006130 <vPortSetupTimerInterrupt+0x34>)
 8006120:	2207      	movs	r2, #7
 8006122:	601a      	str	r2, [r3, #0]
}
 8006124:	bf00      	nop
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	e000e010 	.word	0xe000e010
 8006134:	e000e018 	.word	0xe000e018
 8006138:	20000000 	.word	0x20000000
 800613c:	10624dd3 	.word	0x10624dd3
 8006140:	e000e014 	.word	0xe000e014

08006144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006154 <vPortEnableVFP+0x10>
 8006148:	6801      	ldr	r1, [r0, #0]
 800614a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800614e:	6001      	str	r1, [r0, #0]
 8006150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006152:	bf00      	nop
 8006154:	e000ed88 	.word	0xe000ed88

08006158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800615e:	f3ef 8305 	mrs	r3, IPSR
 8006162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b0f      	cmp	r3, #15
 8006168:	d914      	bls.n	8006194 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800616a:	4a17      	ldr	r2, [pc, #92]	; (80061c8 <vPortValidateInterruptPriority+0x70>)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4413      	add	r3, r2
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006174:	4b15      	ldr	r3, [pc, #84]	; (80061cc <vPortValidateInterruptPriority+0x74>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	7afa      	ldrb	r2, [r7, #11]
 800617a:	429a      	cmp	r2, r3
 800617c:	d20a      	bcs.n	8006194 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	607b      	str	r3, [r7, #4]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006194:	4b0e      	ldr	r3, [pc, #56]	; (80061d0 <vPortValidateInterruptPriority+0x78>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800619c:	4b0d      	ldr	r3, [pc, #52]	; (80061d4 <vPortValidateInterruptPriority+0x7c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d90a      	bls.n	80061ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	603b      	str	r3, [r7, #0]
}
 80061b6:	bf00      	nop
 80061b8:	e7fe      	b.n	80061b8 <vPortValidateInterruptPriority+0x60>
	}
 80061ba:	bf00      	nop
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	e000e3f0 	.word	0xe000e3f0
 80061cc:	200006c0 	.word	0x200006c0
 80061d0:	e000ed0c 	.word	0xe000ed0c
 80061d4:	200006c4 	.word	0x200006c4

080061d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08a      	sub	sp, #40	; 0x28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061e0:	2300      	movs	r3, #0
 80061e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061e4:	f7fe ffe2 	bl	80051ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061e8:	4b5b      	ldr	r3, [pc, #364]	; (8006358 <pvPortMalloc+0x180>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061f0:	f000 f920 	bl	8006434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061f4:	4b59      	ldr	r3, [pc, #356]	; (800635c <pvPortMalloc+0x184>)
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f040 8093 	bne.w	8006328 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d01d      	beq.n	8006244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006208:	2208      	movs	r2, #8
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4413      	add	r3, r2
 800620e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	2b00      	cmp	r3, #0
 8006218:	d014      	beq.n	8006244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f023 0307 	bic.w	r3, r3, #7
 8006220:	3308      	adds	r3, #8
 8006222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00a      	beq.n	8006244 <pvPortMalloc+0x6c>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	617b      	str	r3, [r7, #20]
}
 8006240:	bf00      	nop
 8006242:	e7fe      	b.n	8006242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d06e      	beq.n	8006328 <pvPortMalloc+0x150>
 800624a:	4b45      	ldr	r3, [pc, #276]	; (8006360 <pvPortMalloc+0x188>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	429a      	cmp	r2, r3
 8006252:	d869      	bhi.n	8006328 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006254:	4b43      	ldr	r3, [pc, #268]	; (8006364 <pvPortMalloc+0x18c>)
 8006256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006258:	4b42      	ldr	r3, [pc, #264]	; (8006364 <pvPortMalloc+0x18c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800625e:	e004      	b.n	800626a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	429a      	cmp	r2, r3
 8006272:	d903      	bls.n	800627c <pvPortMalloc+0xa4>
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1f1      	bne.n	8006260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800627c:	4b36      	ldr	r3, [pc, #216]	; (8006358 <pvPortMalloc+0x180>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006282:	429a      	cmp	r2, r3
 8006284:	d050      	beq.n	8006328 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2208      	movs	r2, #8
 800628c:	4413      	add	r3, r2
 800628e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	1ad2      	subs	r2, r2, r3
 80062a0:	2308      	movs	r3, #8
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d91f      	bls.n	80062e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4413      	add	r3, r2
 80062ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <pvPortMalloc+0xf8>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	613b      	str	r3, [r7, #16]
}
 80062cc:	bf00      	nop
 80062ce:	e7fe      	b.n	80062ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	1ad2      	subs	r2, r2, r3
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062e2:	69b8      	ldr	r0, [r7, #24]
 80062e4:	f000 f908 	bl	80064f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062e8:	4b1d      	ldr	r3, [pc, #116]	; (8006360 <pvPortMalloc+0x188>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	4a1b      	ldr	r2, [pc, #108]	; (8006360 <pvPortMalloc+0x188>)
 80062f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062f6:	4b1a      	ldr	r3, [pc, #104]	; (8006360 <pvPortMalloc+0x188>)
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	4b1b      	ldr	r3, [pc, #108]	; (8006368 <pvPortMalloc+0x190>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d203      	bcs.n	800630a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006302:	4b17      	ldr	r3, [pc, #92]	; (8006360 <pvPortMalloc+0x188>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a18      	ldr	r2, [pc, #96]	; (8006368 <pvPortMalloc+0x190>)
 8006308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	4b13      	ldr	r3, [pc, #76]	; (800635c <pvPortMalloc+0x184>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	431a      	orrs	r2, r3
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800631e:	4b13      	ldr	r3, [pc, #76]	; (800636c <pvPortMalloc+0x194>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3301      	adds	r3, #1
 8006324:	4a11      	ldr	r2, [pc, #68]	; (800636c <pvPortMalloc+0x194>)
 8006326:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006328:	f7fe ff4e 	bl	80051c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00a      	beq.n	800634c <pvPortMalloc+0x174>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	60fb      	str	r3, [r7, #12]
}
 8006348:	bf00      	nop
 800634a:	e7fe      	b.n	800634a <pvPortMalloc+0x172>
	return pvReturn;
 800634c:	69fb      	ldr	r3, [r7, #28]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3728      	adds	r7, #40	; 0x28
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	200042d0 	.word	0x200042d0
 800635c:	200042e4 	.word	0x200042e4
 8006360:	200042d4 	.word	0x200042d4
 8006364:	200042c8 	.word	0x200042c8
 8006368:	200042d8 	.word	0x200042d8
 800636c:	200042dc 	.word	0x200042dc

08006370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d04d      	beq.n	800641e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006382:	2308      	movs	r3, #8
 8006384:	425b      	negs	r3, r3
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	4413      	add	r3, r2
 800638a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	4b24      	ldr	r3, [pc, #144]	; (8006428 <vPortFree+0xb8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4013      	ands	r3, r2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10a      	bne.n	80063b4 <vPortFree+0x44>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	60fb      	str	r3, [r7, #12]
}
 80063b0:	bf00      	nop
 80063b2:	e7fe      	b.n	80063b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00a      	beq.n	80063d2 <vPortFree+0x62>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	60bb      	str	r3, [r7, #8]
}
 80063ce:	bf00      	nop
 80063d0:	e7fe      	b.n	80063d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	4b14      	ldr	r3, [pc, #80]	; (8006428 <vPortFree+0xb8>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4013      	ands	r3, r2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d01e      	beq.n	800641e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d11a      	bne.n	800641e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	4b0e      	ldr	r3, [pc, #56]	; (8006428 <vPortFree+0xb8>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	43db      	mvns	r3, r3
 80063f2:	401a      	ands	r2, r3
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063f8:	f7fe fed8 	bl	80051ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	4b0a      	ldr	r3, [pc, #40]	; (800642c <vPortFree+0xbc>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4413      	add	r3, r2
 8006406:	4a09      	ldr	r2, [pc, #36]	; (800642c <vPortFree+0xbc>)
 8006408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800640a:	6938      	ldr	r0, [r7, #16]
 800640c:	f000 f874 	bl	80064f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006410:	4b07      	ldr	r3, [pc, #28]	; (8006430 <vPortFree+0xc0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3301      	adds	r3, #1
 8006416:	4a06      	ldr	r2, [pc, #24]	; (8006430 <vPortFree+0xc0>)
 8006418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800641a:	f7fe fed5 	bl	80051c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800641e:	bf00      	nop
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	200042e4 	.word	0x200042e4
 800642c:	200042d4 	.word	0x200042d4
 8006430:	200042e0 	.word	0x200042e0

08006434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800643a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800643e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006440:	4b27      	ldr	r3, [pc, #156]	; (80064e0 <prvHeapInit+0xac>)
 8006442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00c      	beq.n	8006468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3307      	adds	r3, #7
 8006452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0307 	bic.w	r3, r3, #7
 800645a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	4a1f      	ldr	r2, [pc, #124]	; (80064e0 <prvHeapInit+0xac>)
 8006464:	4413      	add	r3, r2
 8006466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800646c:	4a1d      	ldr	r2, [pc, #116]	; (80064e4 <prvHeapInit+0xb0>)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006472:	4b1c      	ldr	r3, [pc, #112]	; (80064e4 <prvHeapInit+0xb0>)
 8006474:	2200      	movs	r2, #0
 8006476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	4413      	add	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006480:	2208      	movs	r2, #8
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0307 	bic.w	r3, r3, #7
 800648e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	4a15      	ldr	r2, [pc, #84]	; (80064e8 <prvHeapInit+0xb4>)
 8006494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006496:	4b14      	ldr	r3, [pc, #80]	; (80064e8 <prvHeapInit+0xb4>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2200      	movs	r2, #0
 800649c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800649e:	4b12      	ldr	r3, [pc, #72]	; (80064e8 <prvHeapInit+0xb4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	1ad2      	subs	r2, r2, r3
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064b4:	4b0c      	ldr	r3, [pc, #48]	; (80064e8 <prvHeapInit+0xb4>)
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	4a0a      	ldr	r2, [pc, #40]	; (80064ec <prvHeapInit+0xb8>)
 80064c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	4a09      	ldr	r2, [pc, #36]	; (80064f0 <prvHeapInit+0xbc>)
 80064ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064cc:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <prvHeapInit+0xc0>)
 80064ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80064d2:	601a      	str	r2, [r3, #0]
}
 80064d4:	bf00      	nop
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr
 80064e0:	200006c8 	.word	0x200006c8
 80064e4:	200042c8 	.word	0x200042c8
 80064e8:	200042d0 	.word	0x200042d0
 80064ec:	200042d8 	.word	0x200042d8
 80064f0:	200042d4 	.word	0x200042d4
 80064f4:	200042e4 	.word	0x200042e4

080064f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006500:	4b28      	ldr	r3, [pc, #160]	; (80065a4 <prvInsertBlockIntoFreeList+0xac>)
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	e002      	b.n	800650c <prvInsertBlockIntoFreeList+0x14>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	429a      	cmp	r2, r3
 8006514:	d8f7      	bhi.n	8006506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	4413      	add	r3, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	429a      	cmp	r2, r3
 8006526:	d108      	bne.n	800653a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	441a      	add	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	441a      	add	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d118      	bne.n	8006580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d00d      	beq.n	8006576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	441a      	add	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	e008      	b.n	8006588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006576:	4b0c      	ldr	r3, [pc, #48]	; (80065a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	e003      	b.n	8006588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	429a      	cmp	r2, r3
 800658e:	d002      	beq.n	8006596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006596:	bf00      	nop
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	200042c8 	.word	0x200042c8
 80065a8:	200042d0 	.word	0x200042d0

080065ac <__cvt>:
 80065ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065b0:	ec55 4b10 	vmov	r4, r5, d0
 80065b4:	2d00      	cmp	r5, #0
 80065b6:	460e      	mov	r6, r1
 80065b8:	4619      	mov	r1, r3
 80065ba:	462b      	mov	r3, r5
 80065bc:	bfbb      	ittet	lt
 80065be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80065c2:	461d      	movlt	r5, r3
 80065c4:	2300      	movge	r3, #0
 80065c6:	232d      	movlt	r3, #45	; 0x2d
 80065c8:	700b      	strb	r3, [r1, #0]
 80065ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80065d0:	4691      	mov	r9, r2
 80065d2:	f023 0820 	bic.w	r8, r3, #32
 80065d6:	bfbc      	itt	lt
 80065d8:	4622      	movlt	r2, r4
 80065da:	4614      	movlt	r4, r2
 80065dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065e0:	d005      	beq.n	80065ee <__cvt+0x42>
 80065e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80065e6:	d100      	bne.n	80065ea <__cvt+0x3e>
 80065e8:	3601      	adds	r6, #1
 80065ea:	2102      	movs	r1, #2
 80065ec:	e000      	b.n	80065f0 <__cvt+0x44>
 80065ee:	2103      	movs	r1, #3
 80065f0:	ab03      	add	r3, sp, #12
 80065f2:	9301      	str	r3, [sp, #4]
 80065f4:	ab02      	add	r3, sp, #8
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	ec45 4b10 	vmov	d0, r4, r5
 80065fc:	4653      	mov	r3, sl
 80065fe:	4632      	mov	r2, r6
 8006600:	f001 fa92 	bl	8007b28 <_dtoa_r>
 8006604:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006608:	4607      	mov	r7, r0
 800660a:	d102      	bne.n	8006612 <__cvt+0x66>
 800660c:	f019 0f01 	tst.w	r9, #1
 8006610:	d022      	beq.n	8006658 <__cvt+0xac>
 8006612:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006616:	eb07 0906 	add.w	r9, r7, r6
 800661a:	d110      	bne.n	800663e <__cvt+0x92>
 800661c:	783b      	ldrb	r3, [r7, #0]
 800661e:	2b30      	cmp	r3, #48	; 0x30
 8006620:	d10a      	bne.n	8006638 <__cvt+0x8c>
 8006622:	2200      	movs	r2, #0
 8006624:	2300      	movs	r3, #0
 8006626:	4620      	mov	r0, r4
 8006628:	4629      	mov	r1, r5
 800662a:	f7fa fa55 	bl	8000ad8 <__aeabi_dcmpeq>
 800662e:	b918      	cbnz	r0, 8006638 <__cvt+0x8c>
 8006630:	f1c6 0601 	rsb	r6, r6, #1
 8006634:	f8ca 6000 	str.w	r6, [sl]
 8006638:	f8da 3000 	ldr.w	r3, [sl]
 800663c:	4499      	add	r9, r3
 800663e:	2200      	movs	r2, #0
 8006640:	2300      	movs	r3, #0
 8006642:	4620      	mov	r0, r4
 8006644:	4629      	mov	r1, r5
 8006646:	f7fa fa47 	bl	8000ad8 <__aeabi_dcmpeq>
 800664a:	b108      	cbz	r0, 8006650 <__cvt+0xa4>
 800664c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006650:	2230      	movs	r2, #48	; 0x30
 8006652:	9b03      	ldr	r3, [sp, #12]
 8006654:	454b      	cmp	r3, r9
 8006656:	d307      	bcc.n	8006668 <__cvt+0xbc>
 8006658:	9b03      	ldr	r3, [sp, #12]
 800665a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800665c:	1bdb      	subs	r3, r3, r7
 800665e:	4638      	mov	r0, r7
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	b004      	add	sp, #16
 8006664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006668:	1c59      	adds	r1, r3, #1
 800666a:	9103      	str	r1, [sp, #12]
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	e7f0      	b.n	8006652 <__cvt+0xa6>

08006670 <__exponent>:
 8006670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006672:	4603      	mov	r3, r0
 8006674:	2900      	cmp	r1, #0
 8006676:	bfb8      	it	lt
 8006678:	4249      	neglt	r1, r1
 800667a:	f803 2b02 	strb.w	r2, [r3], #2
 800667e:	bfb4      	ite	lt
 8006680:	222d      	movlt	r2, #45	; 0x2d
 8006682:	222b      	movge	r2, #43	; 0x2b
 8006684:	2909      	cmp	r1, #9
 8006686:	7042      	strb	r2, [r0, #1]
 8006688:	dd2a      	ble.n	80066e0 <__exponent+0x70>
 800668a:	f10d 0207 	add.w	r2, sp, #7
 800668e:	4617      	mov	r7, r2
 8006690:	260a      	movs	r6, #10
 8006692:	4694      	mov	ip, r2
 8006694:	fb91 f5f6 	sdiv	r5, r1, r6
 8006698:	fb06 1415 	mls	r4, r6, r5, r1
 800669c:	3430      	adds	r4, #48	; 0x30
 800669e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80066a2:	460c      	mov	r4, r1
 80066a4:	2c63      	cmp	r4, #99	; 0x63
 80066a6:	f102 32ff 	add.w	r2, r2, #4294967295
 80066aa:	4629      	mov	r1, r5
 80066ac:	dcf1      	bgt.n	8006692 <__exponent+0x22>
 80066ae:	3130      	adds	r1, #48	; 0x30
 80066b0:	f1ac 0402 	sub.w	r4, ip, #2
 80066b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80066b8:	1c41      	adds	r1, r0, #1
 80066ba:	4622      	mov	r2, r4
 80066bc:	42ba      	cmp	r2, r7
 80066be:	d30a      	bcc.n	80066d6 <__exponent+0x66>
 80066c0:	f10d 0209 	add.w	r2, sp, #9
 80066c4:	eba2 020c 	sub.w	r2, r2, ip
 80066c8:	42bc      	cmp	r4, r7
 80066ca:	bf88      	it	hi
 80066cc:	2200      	movhi	r2, #0
 80066ce:	4413      	add	r3, r2
 80066d0:	1a18      	subs	r0, r3, r0
 80066d2:	b003      	add	sp, #12
 80066d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80066da:	f801 5f01 	strb.w	r5, [r1, #1]!
 80066de:	e7ed      	b.n	80066bc <__exponent+0x4c>
 80066e0:	2330      	movs	r3, #48	; 0x30
 80066e2:	3130      	adds	r1, #48	; 0x30
 80066e4:	7083      	strb	r3, [r0, #2]
 80066e6:	70c1      	strb	r1, [r0, #3]
 80066e8:	1d03      	adds	r3, r0, #4
 80066ea:	e7f1      	b.n	80066d0 <__exponent+0x60>

080066ec <_printf_float>:
 80066ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f0:	ed2d 8b02 	vpush	{d8}
 80066f4:	b08d      	sub	sp, #52	; 0x34
 80066f6:	460c      	mov	r4, r1
 80066f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80066fc:	4616      	mov	r6, r2
 80066fe:	461f      	mov	r7, r3
 8006700:	4605      	mov	r5, r0
 8006702:	f001 f8a7 	bl	8007854 <_localeconv_r>
 8006706:	f8d0 a000 	ldr.w	sl, [r0]
 800670a:	4650      	mov	r0, sl
 800670c:	f7f9 fdb8 	bl	8000280 <strlen>
 8006710:	2300      	movs	r3, #0
 8006712:	930a      	str	r3, [sp, #40]	; 0x28
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	9305      	str	r3, [sp, #20]
 8006718:	f8d8 3000 	ldr.w	r3, [r8]
 800671c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006720:	3307      	adds	r3, #7
 8006722:	f023 0307 	bic.w	r3, r3, #7
 8006726:	f103 0208 	add.w	r2, r3, #8
 800672a:	f8c8 2000 	str.w	r2, [r8]
 800672e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006732:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006736:	9307      	str	r3, [sp, #28]
 8006738:	f8cd 8018 	str.w	r8, [sp, #24]
 800673c:	ee08 0a10 	vmov	s16, r0
 8006740:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006744:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006748:	4b9e      	ldr	r3, [pc, #632]	; (80069c4 <_printf_float+0x2d8>)
 800674a:	f04f 32ff 	mov.w	r2, #4294967295
 800674e:	f7fa f9f5 	bl	8000b3c <__aeabi_dcmpun>
 8006752:	bb88      	cbnz	r0, 80067b8 <_printf_float+0xcc>
 8006754:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006758:	4b9a      	ldr	r3, [pc, #616]	; (80069c4 <_printf_float+0x2d8>)
 800675a:	f04f 32ff 	mov.w	r2, #4294967295
 800675e:	f7fa f9cf 	bl	8000b00 <__aeabi_dcmple>
 8006762:	bb48      	cbnz	r0, 80067b8 <_printf_float+0xcc>
 8006764:	2200      	movs	r2, #0
 8006766:	2300      	movs	r3, #0
 8006768:	4640      	mov	r0, r8
 800676a:	4649      	mov	r1, r9
 800676c:	f7fa f9be 	bl	8000aec <__aeabi_dcmplt>
 8006770:	b110      	cbz	r0, 8006778 <_printf_float+0x8c>
 8006772:	232d      	movs	r3, #45	; 0x2d
 8006774:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006778:	4a93      	ldr	r2, [pc, #588]	; (80069c8 <_printf_float+0x2dc>)
 800677a:	4b94      	ldr	r3, [pc, #592]	; (80069cc <_printf_float+0x2e0>)
 800677c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006780:	bf94      	ite	ls
 8006782:	4690      	movls	r8, r2
 8006784:	4698      	movhi	r8, r3
 8006786:	2303      	movs	r3, #3
 8006788:	6123      	str	r3, [r4, #16]
 800678a:	9b05      	ldr	r3, [sp, #20]
 800678c:	f023 0304 	bic.w	r3, r3, #4
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	f04f 0900 	mov.w	r9, #0
 8006796:	9700      	str	r7, [sp, #0]
 8006798:	4633      	mov	r3, r6
 800679a:	aa0b      	add	r2, sp, #44	; 0x2c
 800679c:	4621      	mov	r1, r4
 800679e:	4628      	mov	r0, r5
 80067a0:	f000 f9da 	bl	8006b58 <_printf_common>
 80067a4:	3001      	adds	r0, #1
 80067a6:	f040 8090 	bne.w	80068ca <_printf_float+0x1de>
 80067aa:	f04f 30ff 	mov.w	r0, #4294967295
 80067ae:	b00d      	add	sp, #52	; 0x34
 80067b0:	ecbd 8b02 	vpop	{d8}
 80067b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b8:	4642      	mov	r2, r8
 80067ba:	464b      	mov	r3, r9
 80067bc:	4640      	mov	r0, r8
 80067be:	4649      	mov	r1, r9
 80067c0:	f7fa f9bc 	bl	8000b3c <__aeabi_dcmpun>
 80067c4:	b140      	cbz	r0, 80067d8 <_printf_float+0xec>
 80067c6:	464b      	mov	r3, r9
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	bfbc      	itt	lt
 80067cc:	232d      	movlt	r3, #45	; 0x2d
 80067ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80067d2:	4a7f      	ldr	r2, [pc, #508]	; (80069d0 <_printf_float+0x2e4>)
 80067d4:	4b7f      	ldr	r3, [pc, #508]	; (80069d4 <_printf_float+0x2e8>)
 80067d6:	e7d1      	b.n	800677c <_printf_float+0x90>
 80067d8:	6863      	ldr	r3, [r4, #4]
 80067da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80067de:	9206      	str	r2, [sp, #24]
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	d13f      	bne.n	8006864 <_printf_float+0x178>
 80067e4:	2306      	movs	r3, #6
 80067e6:	6063      	str	r3, [r4, #4]
 80067e8:	9b05      	ldr	r3, [sp, #20]
 80067ea:	6861      	ldr	r1, [r4, #4]
 80067ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80067f0:	2300      	movs	r3, #0
 80067f2:	9303      	str	r3, [sp, #12]
 80067f4:	ab0a      	add	r3, sp, #40	; 0x28
 80067f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80067fa:	ab09      	add	r3, sp, #36	; 0x24
 80067fc:	ec49 8b10 	vmov	d0, r8, r9
 8006800:	9300      	str	r3, [sp, #0]
 8006802:	6022      	str	r2, [r4, #0]
 8006804:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006808:	4628      	mov	r0, r5
 800680a:	f7ff fecf 	bl	80065ac <__cvt>
 800680e:	9b06      	ldr	r3, [sp, #24]
 8006810:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006812:	2b47      	cmp	r3, #71	; 0x47
 8006814:	4680      	mov	r8, r0
 8006816:	d108      	bne.n	800682a <_printf_float+0x13e>
 8006818:	1cc8      	adds	r0, r1, #3
 800681a:	db02      	blt.n	8006822 <_printf_float+0x136>
 800681c:	6863      	ldr	r3, [r4, #4]
 800681e:	4299      	cmp	r1, r3
 8006820:	dd41      	ble.n	80068a6 <_printf_float+0x1ba>
 8006822:	f1ab 0302 	sub.w	r3, fp, #2
 8006826:	fa5f fb83 	uxtb.w	fp, r3
 800682a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800682e:	d820      	bhi.n	8006872 <_printf_float+0x186>
 8006830:	3901      	subs	r1, #1
 8006832:	465a      	mov	r2, fp
 8006834:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006838:	9109      	str	r1, [sp, #36]	; 0x24
 800683a:	f7ff ff19 	bl	8006670 <__exponent>
 800683e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006840:	1813      	adds	r3, r2, r0
 8006842:	2a01      	cmp	r2, #1
 8006844:	4681      	mov	r9, r0
 8006846:	6123      	str	r3, [r4, #16]
 8006848:	dc02      	bgt.n	8006850 <_printf_float+0x164>
 800684a:	6822      	ldr	r2, [r4, #0]
 800684c:	07d2      	lsls	r2, r2, #31
 800684e:	d501      	bpl.n	8006854 <_printf_float+0x168>
 8006850:	3301      	adds	r3, #1
 8006852:	6123      	str	r3, [r4, #16]
 8006854:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006858:	2b00      	cmp	r3, #0
 800685a:	d09c      	beq.n	8006796 <_printf_float+0xaa>
 800685c:	232d      	movs	r3, #45	; 0x2d
 800685e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006862:	e798      	b.n	8006796 <_printf_float+0xaa>
 8006864:	9a06      	ldr	r2, [sp, #24]
 8006866:	2a47      	cmp	r2, #71	; 0x47
 8006868:	d1be      	bne.n	80067e8 <_printf_float+0xfc>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1bc      	bne.n	80067e8 <_printf_float+0xfc>
 800686e:	2301      	movs	r3, #1
 8006870:	e7b9      	b.n	80067e6 <_printf_float+0xfa>
 8006872:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006876:	d118      	bne.n	80068aa <_printf_float+0x1be>
 8006878:	2900      	cmp	r1, #0
 800687a:	6863      	ldr	r3, [r4, #4]
 800687c:	dd0b      	ble.n	8006896 <_printf_float+0x1aa>
 800687e:	6121      	str	r1, [r4, #16]
 8006880:	b913      	cbnz	r3, 8006888 <_printf_float+0x19c>
 8006882:	6822      	ldr	r2, [r4, #0]
 8006884:	07d0      	lsls	r0, r2, #31
 8006886:	d502      	bpl.n	800688e <_printf_float+0x1a2>
 8006888:	3301      	adds	r3, #1
 800688a:	440b      	add	r3, r1
 800688c:	6123      	str	r3, [r4, #16]
 800688e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006890:	f04f 0900 	mov.w	r9, #0
 8006894:	e7de      	b.n	8006854 <_printf_float+0x168>
 8006896:	b913      	cbnz	r3, 800689e <_printf_float+0x1b2>
 8006898:	6822      	ldr	r2, [r4, #0]
 800689a:	07d2      	lsls	r2, r2, #31
 800689c:	d501      	bpl.n	80068a2 <_printf_float+0x1b6>
 800689e:	3302      	adds	r3, #2
 80068a0:	e7f4      	b.n	800688c <_printf_float+0x1a0>
 80068a2:	2301      	movs	r3, #1
 80068a4:	e7f2      	b.n	800688c <_printf_float+0x1a0>
 80068a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80068aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ac:	4299      	cmp	r1, r3
 80068ae:	db05      	blt.n	80068bc <_printf_float+0x1d0>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	6121      	str	r1, [r4, #16]
 80068b4:	07d8      	lsls	r0, r3, #31
 80068b6:	d5ea      	bpl.n	800688e <_printf_float+0x1a2>
 80068b8:	1c4b      	adds	r3, r1, #1
 80068ba:	e7e7      	b.n	800688c <_printf_float+0x1a0>
 80068bc:	2900      	cmp	r1, #0
 80068be:	bfd4      	ite	le
 80068c0:	f1c1 0202 	rsble	r2, r1, #2
 80068c4:	2201      	movgt	r2, #1
 80068c6:	4413      	add	r3, r2
 80068c8:	e7e0      	b.n	800688c <_printf_float+0x1a0>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	055a      	lsls	r2, r3, #21
 80068ce:	d407      	bmi.n	80068e0 <_printf_float+0x1f4>
 80068d0:	6923      	ldr	r3, [r4, #16]
 80068d2:	4642      	mov	r2, r8
 80068d4:	4631      	mov	r1, r6
 80068d6:	4628      	mov	r0, r5
 80068d8:	47b8      	blx	r7
 80068da:	3001      	adds	r0, #1
 80068dc:	d12c      	bne.n	8006938 <_printf_float+0x24c>
 80068de:	e764      	b.n	80067aa <_printf_float+0xbe>
 80068e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80068e4:	f240 80e0 	bls.w	8006aa8 <_printf_float+0x3bc>
 80068e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068ec:	2200      	movs	r2, #0
 80068ee:	2300      	movs	r3, #0
 80068f0:	f7fa f8f2 	bl	8000ad8 <__aeabi_dcmpeq>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d034      	beq.n	8006962 <_printf_float+0x276>
 80068f8:	4a37      	ldr	r2, [pc, #220]	; (80069d8 <_printf_float+0x2ec>)
 80068fa:	2301      	movs	r3, #1
 80068fc:	4631      	mov	r1, r6
 80068fe:	4628      	mov	r0, r5
 8006900:	47b8      	blx	r7
 8006902:	3001      	adds	r0, #1
 8006904:	f43f af51 	beq.w	80067aa <_printf_float+0xbe>
 8006908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800690c:	429a      	cmp	r2, r3
 800690e:	db02      	blt.n	8006916 <_printf_float+0x22a>
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	07d8      	lsls	r0, r3, #31
 8006914:	d510      	bpl.n	8006938 <_printf_float+0x24c>
 8006916:	ee18 3a10 	vmov	r3, s16
 800691a:	4652      	mov	r2, sl
 800691c:	4631      	mov	r1, r6
 800691e:	4628      	mov	r0, r5
 8006920:	47b8      	blx	r7
 8006922:	3001      	adds	r0, #1
 8006924:	f43f af41 	beq.w	80067aa <_printf_float+0xbe>
 8006928:	f04f 0800 	mov.w	r8, #0
 800692c:	f104 091a 	add.w	r9, r4, #26
 8006930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006932:	3b01      	subs	r3, #1
 8006934:	4543      	cmp	r3, r8
 8006936:	dc09      	bgt.n	800694c <_printf_float+0x260>
 8006938:	6823      	ldr	r3, [r4, #0]
 800693a:	079b      	lsls	r3, r3, #30
 800693c:	f100 8107 	bmi.w	8006b4e <_printf_float+0x462>
 8006940:	68e0      	ldr	r0, [r4, #12]
 8006942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006944:	4298      	cmp	r0, r3
 8006946:	bfb8      	it	lt
 8006948:	4618      	movlt	r0, r3
 800694a:	e730      	b.n	80067ae <_printf_float+0xc2>
 800694c:	2301      	movs	r3, #1
 800694e:	464a      	mov	r2, r9
 8006950:	4631      	mov	r1, r6
 8006952:	4628      	mov	r0, r5
 8006954:	47b8      	blx	r7
 8006956:	3001      	adds	r0, #1
 8006958:	f43f af27 	beq.w	80067aa <_printf_float+0xbe>
 800695c:	f108 0801 	add.w	r8, r8, #1
 8006960:	e7e6      	b.n	8006930 <_printf_float+0x244>
 8006962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006964:	2b00      	cmp	r3, #0
 8006966:	dc39      	bgt.n	80069dc <_printf_float+0x2f0>
 8006968:	4a1b      	ldr	r2, [pc, #108]	; (80069d8 <_printf_float+0x2ec>)
 800696a:	2301      	movs	r3, #1
 800696c:	4631      	mov	r1, r6
 800696e:	4628      	mov	r0, r5
 8006970:	47b8      	blx	r7
 8006972:	3001      	adds	r0, #1
 8006974:	f43f af19 	beq.w	80067aa <_printf_float+0xbe>
 8006978:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800697c:	4313      	orrs	r3, r2
 800697e:	d102      	bne.n	8006986 <_printf_float+0x29a>
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	07d9      	lsls	r1, r3, #31
 8006984:	d5d8      	bpl.n	8006938 <_printf_float+0x24c>
 8006986:	ee18 3a10 	vmov	r3, s16
 800698a:	4652      	mov	r2, sl
 800698c:	4631      	mov	r1, r6
 800698e:	4628      	mov	r0, r5
 8006990:	47b8      	blx	r7
 8006992:	3001      	adds	r0, #1
 8006994:	f43f af09 	beq.w	80067aa <_printf_float+0xbe>
 8006998:	f04f 0900 	mov.w	r9, #0
 800699c:	f104 0a1a 	add.w	sl, r4, #26
 80069a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a2:	425b      	negs	r3, r3
 80069a4:	454b      	cmp	r3, r9
 80069a6:	dc01      	bgt.n	80069ac <_printf_float+0x2c0>
 80069a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069aa:	e792      	b.n	80068d2 <_printf_float+0x1e6>
 80069ac:	2301      	movs	r3, #1
 80069ae:	4652      	mov	r2, sl
 80069b0:	4631      	mov	r1, r6
 80069b2:	4628      	mov	r0, r5
 80069b4:	47b8      	blx	r7
 80069b6:	3001      	adds	r0, #1
 80069b8:	f43f aef7 	beq.w	80067aa <_printf_float+0xbe>
 80069bc:	f109 0901 	add.w	r9, r9, #1
 80069c0:	e7ee      	b.n	80069a0 <_printf_float+0x2b4>
 80069c2:	bf00      	nop
 80069c4:	7fefffff 	.word	0x7fefffff
 80069c8:	0800b1a0 	.word	0x0800b1a0
 80069cc:	0800b1a4 	.word	0x0800b1a4
 80069d0:	0800b1a8 	.word	0x0800b1a8
 80069d4:	0800b1ac 	.word	0x0800b1ac
 80069d8:	0800b1b0 	.word	0x0800b1b0
 80069dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069e0:	429a      	cmp	r2, r3
 80069e2:	bfa8      	it	ge
 80069e4:	461a      	movge	r2, r3
 80069e6:	2a00      	cmp	r2, #0
 80069e8:	4691      	mov	r9, r2
 80069ea:	dc37      	bgt.n	8006a5c <_printf_float+0x370>
 80069ec:	f04f 0b00 	mov.w	fp, #0
 80069f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069f4:	f104 021a 	add.w	r2, r4, #26
 80069f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069fa:	9305      	str	r3, [sp, #20]
 80069fc:	eba3 0309 	sub.w	r3, r3, r9
 8006a00:	455b      	cmp	r3, fp
 8006a02:	dc33      	bgt.n	8006a6c <_printf_float+0x380>
 8006a04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	db3b      	blt.n	8006a84 <_printf_float+0x398>
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	07da      	lsls	r2, r3, #31
 8006a10:	d438      	bmi.n	8006a84 <_printf_float+0x398>
 8006a12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006a16:	eba2 0903 	sub.w	r9, r2, r3
 8006a1a:	9b05      	ldr	r3, [sp, #20]
 8006a1c:	1ad2      	subs	r2, r2, r3
 8006a1e:	4591      	cmp	r9, r2
 8006a20:	bfa8      	it	ge
 8006a22:	4691      	movge	r9, r2
 8006a24:	f1b9 0f00 	cmp.w	r9, #0
 8006a28:	dc35      	bgt.n	8006a96 <_printf_float+0x3aa>
 8006a2a:	f04f 0800 	mov.w	r8, #0
 8006a2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a32:	f104 0a1a 	add.w	sl, r4, #26
 8006a36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a3a:	1a9b      	subs	r3, r3, r2
 8006a3c:	eba3 0309 	sub.w	r3, r3, r9
 8006a40:	4543      	cmp	r3, r8
 8006a42:	f77f af79 	ble.w	8006938 <_printf_float+0x24c>
 8006a46:	2301      	movs	r3, #1
 8006a48:	4652      	mov	r2, sl
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	47b8      	blx	r7
 8006a50:	3001      	adds	r0, #1
 8006a52:	f43f aeaa 	beq.w	80067aa <_printf_float+0xbe>
 8006a56:	f108 0801 	add.w	r8, r8, #1
 8006a5a:	e7ec      	b.n	8006a36 <_printf_float+0x34a>
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	4631      	mov	r1, r6
 8006a60:	4642      	mov	r2, r8
 8006a62:	4628      	mov	r0, r5
 8006a64:	47b8      	blx	r7
 8006a66:	3001      	adds	r0, #1
 8006a68:	d1c0      	bne.n	80069ec <_printf_float+0x300>
 8006a6a:	e69e      	b.n	80067aa <_printf_float+0xbe>
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	4631      	mov	r1, r6
 8006a70:	4628      	mov	r0, r5
 8006a72:	9205      	str	r2, [sp, #20]
 8006a74:	47b8      	blx	r7
 8006a76:	3001      	adds	r0, #1
 8006a78:	f43f ae97 	beq.w	80067aa <_printf_float+0xbe>
 8006a7c:	9a05      	ldr	r2, [sp, #20]
 8006a7e:	f10b 0b01 	add.w	fp, fp, #1
 8006a82:	e7b9      	b.n	80069f8 <_printf_float+0x30c>
 8006a84:	ee18 3a10 	vmov	r3, s16
 8006a88:	4652      	mov	r2, sl
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b8      	blx	r7
 8006a90:	3001      	adds	r0, #1
 8006a92:	d1be      	bne.n	8006a12 <_printf_float+0x326>
 8006a94:	e689      	b.n	80067aa <_printf_float+0xbe>
 8006a96:	9a05      	ldr	r2, [sp, #20]
 8006a98:	464b      	mov	r3, r9
 8006a9a:	4442      	add	r2, r8
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	47b8      	blx	r7
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d1c1      	bne.n	8006a2a <_printf_float+0x33e>
 8006aa6:	e680      	b.n	80067aa <_printf_float+0xbe>
 8006aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006aaa:	2a01      	cmp	r2, #1
 8006aac:	dc01      	bgt.n	8006ab2 <_printf_float+0x3c6>
 8006aae:	07db      	lsls	r3, r3, #31
 8006ab0:	d53a      	bpl.n	8006b28 <_printf_float+0x43c>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	4642      	mov	r2, r8
 8006ab6:	4631      	mov	r1, r6
 8006ab8:	4628      	mov	r0, r5
 8006aba:	47b8      	blx	r7
 8006abc:	3001      	adds	r0, #1
 8006abe:	f43f ae74 	beq.w	80067aa <_printf_float+0xbe>
 8006ac2:	ee18 3a10 	vmov	r3, s16
 8006ac6:	4652      	mov	r2, sl
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4628      	mov	r0, r5
 8006acc:	47b8      	blx	r7
 8006ace:	3001      	adds	r0, #1
 8006ad0:	f43f ae6b 	beq.w	80067aa <_printf_float+0xbe>
 8006ad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2300      	movs	r3, #0
 8006adc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006ae0:	f7f9 fffa 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ae4:	b9d8      	cbnz	r0, 8006b1e <_printf_float+0x432>
 8006ae6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006aea:	f108 0201 	add.w	r2, r8, #1
 8006aee:	4631      	mov	r1, r6
 8006af0:	4628      	mov	r0, r5
 8006af2:	47b8      	blx	r7
 8006af4:	3001      	adds	r0, #1
 8006af6:	d10e      	bne.n	8006b16 <_printf_float+0x42a>
 8006af8:	e657      	b.n	80067aa <_printf_float+0xbe>
 8006afa:	2301      	movs	r3, #1
 8006afc:	4652      	mov	r2, sl
 8006afe:	4631      	mov	r1, r6
 8006b00:	4628      	mov	r0, r5
 8006b02:	47b8      	blx	r7
 8006b04:	3001      	adds	r0, #1
 8006b06:	f43f ae50 	beq.w	80067aa <_printf_float+0xbe>
 8006b0a:	f108 0801 	add.w	r8, r8, #1
 8006b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b10:	3b01      	subs	r3, #1
 8006b12:	4543      	cmp	r3, r8
 8006b14:	dcf1      	bgt.n	8006afa <_printf_float+0x40e>
 8006b16:	464b      	mov	r3, r9
 8006b18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006b1c:	e6da      	b.n	80068d4 <_printf_float+0x1e8>
 8006b1e:	f04f 0800 	mov.w	r8, #0
 8006b22:	f104 0a1a 	add.w	sl, r4, #26
 8006b26:	e7f2      	b.n	8006b0e <_printf_float+0x422>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	4642      	mov	r2, r8
 8006b2c:	e7df      	b.n	8006aee <_printf_float+0x402>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	464a      	mov	r2, r9
 8006b32:	4631      	mov	r1, r6
 8006b34:	4628      	mov	r0, r5
 8006b36:	47b8      	blx	r7
 8006b38:	3001      	adds	r0, #1
 8006b3a:	f43f ae36 	beq.w	80067aa <_printf_float+0xbe>
 8006b3e:	f108 0801 	add.w	r8, r8, #1
 8006b42:	68e3      	ldr	r3, [r4, #12]
 8006b44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b46:	1a5b      	subs	r3, r3, r1
 8006b48:	4543      	cmp	r3, r8
 8006b4a:	dcf0      	bgt.n	8006b2e <_printf_float+0x442>
 8006b4c:	e6f8      	b.n	8006940 <_printf_float+0x254>
 8006b4e:	f04f 0800 	mov.w	r8, #0
 8006b52:	f104 0919 	add.w	r9, r4, #25
 8006b56:	e7f4      	b.n	8006b42 <_printf_float+0x456>

08006b58 <_printf_common>:
 8006b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b5c:	4616      	mov	r6, r2
 8006b5e:	4699      	mov	r9, r3
 8006b60:	688a      	ldr	r2, [r1, #8]
 8006b62:	690b      	ldr	r3, [r1, #16]
 8006b64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	bfb8      	it	lt
 8006b6c:	4613      	movlt	r3, r2
 8006b6e:	6033      	str	r3, [r6, #0]
 8006b70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b74:	4607      	mov	r7, r0
 8006b76:	460c      	mov	r4, r1
 8006b78:	b10a      	cbz	r2, 8006b7e <_printf_common+0x26>
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	6033      	str	r3, [r6, #0]
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	0699      	lsls	r1, r3, #26
 8006b82:	bf42      	ittt	mi
 8006b84:	6833      	ldrmi	r3, [r6, #0]
 8006b86:	3302      	addmi	r3, #2
 8006b88:	6033      	strmi	r3, [r6, #0]
 8006b8a:	6825      	ldr	r5, [r4, #0]
 8006b8c:	f015 0506 	ands.w	r5, r5, #6
 8006b90:	d106      	bne.n	8006ba0 <_printf_common+0x48>
 8006b92:	f104 0a19 	add.w	sl, r4, #25
 8006b96:	68e3      	ldr	r3, [r4, #12]
 8006b98:	6832      	ldr	r2, [r6, #0]
 8006b9a:	1a9b      	subs	r3, r3, r2
 8006b9c:	42ab      	cmp	r3, r5
 8006b9e:	dc26      	bgt.n	8006bee <_printf_common+0x96>
 8006ba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ba4:	1e13      	subs	r3, r2, #0
 8006ba6:	6822      	ldr	r2, [r4, #0]
 8006ba8:	bf18      	it	ne
 8006baa:	2301      	movne	r3, #1
 8006bac:	0692      	lsls	r2, r2, #26
 8006bae:	d42b      	bmi.n	8006c08 <_printf_common+0xb0>
 8006bb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bb4:	4649      	mov	r1, r9
 8006bb6:	4638      	mov	r0, r7
 8006bb8:	47c0      	blx	r8
 8006bba:	3001      	adds	r0, #1
 8006bbc:	d01e      	beq.n	8006bfc <_printf_common+0xa4>
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	6922      	ldr	r2, [r4, #16]
 8006bc2:	f003 0306 	and.w	r3, r3, #6
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	bf02      	ittt	eq
 8006bca:	68e5      	ldreq	r5, [r4, #12]
 8006bcc:	6833      	ldreq	r3, [r6, #0]
 8006bce:	1aed      	subeq	r5, r5, r3
 8006bd0:	68a3      	ldr	r3, [r4, #8]
 8006bd2:	bf0c      	ite	eq
 8006bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bd8:	2500      	movne	r5, #0
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	bfc4      	itt	gt
 8006bde:	1a9b      	subgt	r3, r3, r2
 8006be0:	18ed      	addgt	r5, r5, r3
 8006be2:	2600      	movs	r6, #0
 8006be4:	341a      	adds	r4, #26
 8006be6:	42b5      	cmp	r5, r6
 8006be8:	d11a      	bne.n	8006c20 <_printf_common+0xc8>
 8006bea:	2000      	movs	r0, #0
 8006bec:	e008      	b.n	8006c00 <_printf_common+0xa8>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	4652      	mov	r2, sl
 8006bf2:	4649      	mov	r1, r9
 8006bf4:	4638      	mov	r0, r7
 8006bf6:	47c0      	blx	r8
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	d103      	bne.n	8006c04 <_printf_common+0xac>
 8006bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c04:	3501      	adds	r5, #1
 8006c06:	e7c6      	b.n	8006b96 <_printf_common+0x3e>
 8006c08:	18e1      	adds	r1, r4, r3
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	2030      	movs	r0, #48	; 0x30
 8006c0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c12:	4422      	add	r2, r4
 8006c14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c1c:	3302      	adds	r3, #2
 8006c1e:	e7c7      	b.n	8006bb0 <_printf_common+0x58>
 8006c20:	2301      	movs	r3, #1
 8006c22:	4622      	mov	r2, r4
 8006c24:	4649      	mov	r1, r9
 8006c26:	4638      	mov	r0, r7
 8006c28:	47c0      	blx	r8
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	d0e6      	beq.n	8006bfc <_printf_common+0xa4>
 8006c2e:	3601      	adds	r6, #1
 8006c30:	e7d9      	b.n	8006be6 <_printf_common+0x8e>
	...

08006c34 <_printf_i>:
 8006c34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c38:	7e0f      	ldrb	r7, [r1, #24]
 8006c3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c3c:	2f78      	cmp	r7, #120	; 0x78
 8006c3e:	4691      	mov	r9, r2
 8006c40:	4680      	mov	r8, r0
 8006c42:	460c      	mov	r4, r1
 8006c44:	469a      	mov	sl, r3
 8006c46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c4a:	d807      	bhi.n	8006c5c <_printf_i+0x28>
 8006c4c:	2f62      	cmp	r7, #98	; 0x62
 8006c4e:	d80a      	bhi.n	8006c66 <_printf_i+0x32>
 8006c50:	2f00      	cmp	r7, #0
 8006c52:	f000 80d4 	beq.w	8006dfe <_printf_i+0x1ca>
 8006c56:	2f58      	cmp	r7, #88	; 0x58
 8006c58:	f000 80c0 	beq.w	8006ddc <_printf_i+0x1a8>
 8006c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c64:	e03a      	b.n	8006cdc <_printf_i+0xa8>
 8006c66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c6a:	2b15      	cmp	r3, #21
 8006c6c:	d8f6      	bhi.n	8006c5c <_printf_i+0x28>
 8006c6e:	a101      	add	r1, pc, #4	; (adr r1, 8006c74 <_printf_i+0x40>)
 8006c70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c74:	08006ccd 	.word	0x08006ccd
 8006c78:	08006ce1 	.word	0x08006ce1
 8006c7c:	08006c5d 	.word	0x08006c5d
 8006c80:	08006c5d 	.word	0x08006c5d
 8006c84:	08006c5d 	.word	0x08006c5d
 8006c88:	08006c5d 	.word	0x08006c5d
 8006c8c:	08006ce1 	.word	0x08006ce1
 8006c90:	08006c5d 	.word	0x08006c5d
 8006c94:	08006c5d 	.word	0x08006c5d
 8006c98:	08006c5d 	.word	0x08006c5d
 8006c9c:	08006c5d 	.word	0x08006c5d
 8006ca0:	08006de5 	.word	0x08006de5
 8006ca4:	08006d0d 	.word	0x08006d0d
 8006ca8:	08006d9f 	.word	0x08006d9f
 8006cac:	08006c5d 	.word	0x08006c5d
 8006cb0:	08006c5d 	.word	0x08006c5d
 8006cb4:	08006e07 	.word	0x08006e07
 8006cb8:	08006c5d 	.word	0x08006c5d
 8006cbc:	08006d0d 	.word	0x08006d0d
 8006cc0:	08006c5d 	.word	0x08006c5d
 8006cc4:	08006c5d 	.word	0x08006c5d
 8006cc8:	08006da7 	.word	0x08006da7
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	1d1a      	adds	r2, r3, #4
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	602a      	str	r2, [r5, #0]
 8006cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e09f      	b.n	8006e20 <_printf_i+0x1ec>
 8006ce0:	6820      	ldr	r0, [r4, #0]
 8006ce2:	682b      	ldr	r3, [r5, #0]
 8006ce4:	0607      	lsls	r7, r0, #24
 8006ce6:	f103 0104 	add.w	r1, r3, #4
 8006cea:	6029      	str	r1, [r5, #0]
 8006cec:	d501      	bpl.n	8006cf2 <_printf_i+0xbe>
 8006cee:	681e      	ldr	r6, [r3, #0]
 8006cf0:	e003      	b.n	8006cfa <_printf_i+0xc6>
 8006cf2:	0646      	lsls	r6, r0, #25
 8006cf4:	d5fb      	bpl.n	8006cee <_printf_i+0xba>
 8006cf6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006cfa:	2e00      	cmp	r6, #0
 8006cfc:	da03      	bge.n	8006d06 <_printf_i+0xd2>
 8006cfe:	232d      	movs	r3, #45	; 0x2d
 8006d00:	4276      	negs	r6, r6
 8006d02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d06:	485a      	ldr	r0, [pc, #360]	; (8006e70 <_printf_i+0x23c>)
 8006d08:	230a      	movs	r3, #10
 8006d0a:	e012      	b.n	8006d32 <_printf_i+0xfe>
 8006d0c:	682b      	ldr	r3, [r5, #0]
 8006d0e:	6820      	ldr	r0, [r4, #0]
 8006d10:	1d19      	adds	r1, r3, #4
 8006d12:	6029      	str	r1, [r5, #0]
 8006d14:	0605      	lsls	r5, r0, #24
 8006d16:	d501      	bpl.n	8006d1c <_printf_i+0xe8>
 8006d18:	681e      	ldr	r6, [r3, #0]
 8006d1a:	e002      	b.n	8006d22 <_printf_i+0xee>
 8006d1c:	0641      	lsls	r1, r0, #25
 8006d1e:	d5fb      	bpl.n	8006d18 <_printf_i+0xe4>
 8006d20:	881e      	ldrh	r6, [r3, #0]
 8006d22:	4853      	ldr	r0, [pc, #332]	; (8006e70 <_printf_i+0x23c>)
 8006d24:	2f6f      	cmp	r7, #111	; 0x6f
 8006d26:	bf0c      	ite	eq
 8006d28:	2308      	moveq	r3, #8
 8006d2a:	230a      	movne	r3, #10
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d32:	6865      	ldr	r5, [r4, #4]
 8006d34:	60a5      	str	r5, [r4, #8]
 8006d36:	2d00      	cmp	r5, #0
 8006d38:	bfa2      	ittt	ge
 8006d3a:	6821      	ldrge	r1, [r4, #0]
 8006d3c:	f021 0104 	bicge.w	r1, r1, #4
 8006d40:	6021      	strge	r1, [r4, #0]
 8006d42:	b90e      	cbnz	r6, 8006d48 <_printf_i+0x114>
 8006d44:	2d00      	cmp	r5, #0
 8006d46:	d04b      	beq.n	8006de0 <_printf_i+0x1ac>
 8006d48:	4615      	mov	r5, r2
 8006d4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d4e:	fb03 6711 	mls	r7, r3, r1, r6
 8006d52:	5dc7      	ldrb	r7, [r0, r7]
 8006d54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d58:	4637      	mov	r7, r6
 8006d5a:	42bb      	cmp	r3, r7
 8006d5c:	460e      	mov	r6, r1
 8006d5e:	d9f4      	bls.n	8006d4a <_printf_i+0x116>
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	d10b      	bne.n	8006d7c <_printf_i+0x148>
 8006d64:	6823      	ldr	r3, [r4, #0]
 8006d66:	07de      	lsls	r6, r3, #31
 8006d68:	d508      	bpl.n	8006d7c <_printf_i+0x148>
 8006d6a:	6923      	ldr	r3, [r4, #16]
 8006d6c:	6861      	ldr	r1, [r4, #4]
 8006d6e:	4299      	cmp	r1, r3
 8006d70:	bfde      	ittt	le
 8006d72:	2330      	movle	r3, #48	; 0x30
 8006d74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d7c:	1b52      	subs	r2, r2, r5
 8006d7e:	6122      	str	r2, [r4, #16]
 8006d80:	f8cd a000 	str.w	sl, [sp]
 8006d84:	464b      	mov	r3, r9
 8006d86:	aa03      	add	r2, sp, #12
 8006d88:	4621      	mov	r1, r4
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	f7ff fee4 	bl	8006b58 <_printf_common>
 8006d90:	3001      	adds	r0, #1
 8006d92:	d14a      	bne.n	8006e2a <_printf_i+0x1f6>
 8006d94:	f04f 30ff 	mov.w	r0, #4294967295
 8006d98:	b004      	add	sp, #16
 8006d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	f043 0320 	orr.w	r3, r3, #32
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	4833      	ldr	r0, [pc, #204]	; (8006e74 <_printf_i+0x240>)
 8006da8:	2778      	movs	r7, #120	; 0x78
 8006daa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	6829      	ldr	r1, [r5, #0]
 8006db2:	061f      	lsls	r7, r3, #24
 8006db4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006db8:	d402      	bmi.n	8006dc0 <_printf_i+0x18c>
 8006dba:	065f      	lsls	r7, r3, #25
 8006dbc:	bf48      	it	mi
 8006dbe:	b2b6      	uxthmi	r6, r6
 8006dc0:	07df      	lsls	r7, r3, #31
 8006dc2:	bf48      	it	mi
 8006dc4:	f043 0320 	orrmi.w	r3, r3, #32
 8006dc8:	6029      	str	r1, [r5, #0]
 8006dca:	bf48      	it	mi
 8006dcc:	6023      	strmi	r3, [r4, #0]
 8006dce:	b91e      	cbnz	r6, 8006dd8 <_printf_i+0x1a4>
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	f023 0320 	bic.w	r3, r3, #32
 8006dd6:	6023      	str	r3, [r4, #0]
 8006dd8:	2310      	movs	r3, #16
 8006dda:	e7a7      	b.n	8006d2c <_printf_i+0xf8>
 8006ddc:	4824      	ldr	r0, [pc, #144]	; (8006e70 <_printf_i+0x23c>)
 8006dde:	e7e4      	b.n	8006daa <_printf_i+0x176>
 8006de0:	4615      	mov	r5, r2
 8006de2:	e7bd      	b.n	8006d60 <_printf_i+0x12c>
 8006de4:	682b      	ldr	r3, [r5, #0]
 8006de6:	6826      	ldr	r6, [r4, #0]
 8006de8:	6961      	ldr	r1, [r4, #20]
 8006dea:	1d18      	adds	r0, r3, #4
 8006dec:	6028      	str	r0, [r5, #0]
 8006dee:	0635      	lsls	r5, r6, #24
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	d501      	bpl.n	8006df8 <_printf_i+0x1c4>
 8006df4:	6019      	str	r1, [r3, #0]
 8006df6:	e002      	b.n	8006dfe <_printf_i+0x1ca>
 8006df8:	0670      	lsls	r0, r6, #25
 8006dfa:	d5fb      	bpl.n	8006df4 <_printf_i+0x1c0>
 8006dfc:	8019      	strh	r1, [r3, #0]
 8006dfe:	2300      	movs	r3, #0
 8006e00:	6123      	str	r3, [r4, #16]
 8006e02:	4615      	mov	r5, r2
 8006e04:	e7bc      	b.n	8006d80 <_printf_i+0x14c>
 8006e06:	682b      	ldr	r3, [r5, #0]
 8006e08:	1d1a      	adds	r2, r3, #4
 8006e0a:	602a      	str	r2, [r5, #0]
 8006e0c:	681d      	ldr	r5, [r3, #0]
 8006e0e:	6862      	ldr	r2, [r4, #4]
 8006e10:	2100      	movs	r1, #0
 8006e12:	4628      	mov	r0, r5
 8006e14:	f7f9 f9e4 	bl	80001e0 <memchr>
 8006e18:	b108      	cbz	r0, 8006e1e <_printf_i+0x1ea>
 8006e1a:	1b40      	subs	r0, r0, r5
 8006e1c:	6060      	str	r0, [r4, #4]
 8006e1e:	6863      	ldr	r3, [r4, #4]
 8006e20:	6123      	str	r3, [r4, #16]
 8006e22:	2300      	movs	r3, #0
 8006e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e28:	e7aa      	b.n	8006d80 <_printf_i+0x14c>
 8006e2a:	6923      	ldr	r3, [r4, #16]
 8006e2c:	462a      	mov	r2, r5
 8006e2e:	4649      	mov	r1, r9
 8006e30:	4640      	mov	r0, r8
 8006e32:	47d0      	blx	sl
 8006e34:	3001      	adds	r0, #1
 8006e36:	d0ad      	beq.n	8006d94 <_printf_i+0x160>
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	079b      	lsls	r3, r3, #30
 8006e3c:	d413      	bmi.n	8006e66 <_printf_i+0x232>
 8006e3e:	68e0      	ldr	r0, [r4, #12]
 8006e40:	9b03      	ldr	r3, [sp, #12]
 8006e42:	4298      	cmp	r0, r3
 8006e44:	bfb8      	it	lt
 8006e46:	4618      	movlt	r0, r3
 8006e48:	e7a6      	b.n	8006d98 <_printf_i+0x164>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	4632      	mov	r2, r6
 8006e4e:	4649      	mov	r1, r9
 8006e50:	4640      	mov	r0, r8
 8006e52:	47d0      	blx	sl
 8006e54:	3001      	adds	r0, #1
 8006e56:	d09d      	beq.n	8006d94 <_printf_i+0x160>
 8006e58:	3501      	adds	r5, #1
 8006e5a:	68e3      	ldr	r3, [r4, #12]
 8006e5c:	9903      	ldr	r1, [sp, #12]
 8006e5e:	1a5b      	subs	r3, r3, r1
 8006e60:	42ab      	cmp	r3, r5
 8006e62:	dcf2      	bgt.n	8006e4a <_printf_i+0x216>
 8006e64:	e7eb      	b.n	8006e3e <_printf_i+0x20a>
 8006e66:	2500      	movs	r5, #0
 8006e68:	f104 0619 	add.w	r6, r4, #25
 8006e6c:	e7f5      	b.n	8006e5a <_printf_i+0x226>
 8006e6e:	bf00      	nop
 8006e70:	0800b1b2 	.word	0x0800b1b2
 8006e74:	0800b1c3 	.word	0x0800b1c3

08006e78 <_scanf_float>:
 8006e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7c:	b087      	sub	sp, #28
 8006e7e:	4617      	mov	r7, r2
 8006e80:	9303      	str	r3, [sp, #12]
 8006e82:	688b      	ldr	r3, [r1, #8]
 8006e84:	1e5a      	subs	r2, r3, #1
 8006e86:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006e8a:	bf83      	ittte	hi
 8006e8c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006e90:	195b      	addhi	r3, r3, r5
 8006e92:	9302      	strhi	r3, [sp, #8]
 8006e94:	2300      	movls	r3, #0
 8006e96:	bf86      	itte	hi
 8006e98:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006e9c:	608b      	strhi	r3, [r1, #8]
 8006e9e:	9302      	strls	r3, [sp, #8]
 8006ea0:	680b      	ldr	r3, [r1, #0]
 8006ea2:	468b      	mov	fp, r1
 8006ea4:	2500      	movs	r5, #0
 8006ea6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006eaa:	f84b 3b1c 	str.w	r3, [fp], #28
 8006eae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006eb2:	4680      	mov	r8, r0
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	465e      	mov	r6, fp
 8006eb8:	46aa      	mov	sl, r5
 8006eba:	46a9      	mov	r9, r5
 8006ebc:	9501      	str	r5, [sp, #4]
 8006ebe:	68a2      	ldr	r2, [r4, #8]
 8006ec0:	b152      	cbz	r2, 8006ed8 <_scanf_float+0x60>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2b4e      	cmp	r3, #78	; 0x4e
 8006ec8:	d864      	bhi.n	8006f94 <_scanf_float+0x11c>
 8006eca:	2b40      	cmp	r3, #64	; 0x40
 8006ecc:	d83c      	bhi.n	8006f48 <_scanf_float+0xd0>
 8006ece:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006ed2:	b2c8      	uxtb	r0, r1
 8006ed4:	280e      	cmp	r0, #14
 8006ed6:	d93a      	bls.n	8006f4e <_scanf_float+0xd6>
 8006ed8:	f1b9 0f00 	cmp.w	r9, #0
 8006edc:	d003      	beq.n	8006ee6 <_scanf_float+0x6e>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006eea:	f1ba 0f01 	cmp.w	sl, #1
 8006eee:	f200 8113 	bhi.w	8007118 <_scanf_float+0x2a0>
 8006ef2:	455e      	cmp	r6, fp
 8006ef4:	f200 8105 	bhi.w	8007102 <_scanf_float+0x28a>
 8006ef8:	2501      	movs	r5, #1
 8006efa:	4628      	mov	r0, r5
 8006efc:	b007      	add	sp, #28
 8006efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f02:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006f06:	2a0d      	cmp	r2, #13
 8006f08:	d8e6      	bhi.n	8006ed8 <_scanf_float+0x60>
 8006f0a:	a101      	add	r1, pc, #4	; (adr r1, 8006f10 <_scanf_float+0x98>)
 8006f0c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f10:	0800704f 	.word	0x0800704f
 8006f14:	08006ed9 	.word	0x08006ed9
 8006f18:	08006ed9 	.word	0x08006ed9
 8006f1c:	08006ed9 	.word	0x08006ed9
 8006f20:	080070af 	.word	0x080070af
 8006f24:	08007087 	.word	0x08007087
 8006f28:	08006ed9 	.word	0x08006ed9
 8006f2c:	08006ed9 	.word	0x08006ed9
 8006f30:	0800705d 	.word	0x0800705d
 8006f34:	08006ed9 	.word	0x08006ed9
 8006f38:	08006ed9 	.word	0x08006ed9
 8006f3c:	08006ed9 	.word	0x08006ed9
 8006f40:	08006ed9 	.word	0x08006ed9
 8006f44:	08007015 	.word	0x08007015
 8006f48:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006f4c:	e7db      	b.n	8006f06 <_scanf_float+0x8e>
 8006f4e:	290e      	cmp	r1, #14
 8006f50:	d8c2      	bhi.n	8006ed8 <_scanf_float+0x60>
 8006f52:	a001      	add	r0, pc, #4	; (adr r0, 8006f58 <_scanf_float+0xe0>)
 8006f54:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006f58:	08007007 	.word	0x08007007
 8006f5c:	08006ed9 	.word	0x08006ed9
 8006f60:	08007007 	.word	0x08007007
 8006f64:	0800709b 	.word	0x0800709b
 8006f68:	08006ed9 	.word	0x08006ed9
 8006f6c:	08006fb5 	.word	0x08006fb5
 8006f70:	08006ff1 	.word	0x08006ff1
 8006f74:	08006ff1 	.word	0x08006ff1
 8006f78:	08006ff1 	.word	0x08006ff1
 8006f7c:	08006ff1 	.word	0x08006ff1
 8006f80:	08006ff1 	.word	0x08006ff1
 8006f84:	08006ff1 	.word	0x08006ff1
 8006f88:	08006ff1 	.word	0x08006ff1
 8006f8c:	08006ff1 	.word	0x08006ff1
 8006f90:	08006ff1 	.word	0x08006ff1
 8006f94:	2b6e      	cmp	r3, #110	; 0x6e
 8006f96:	d809      	bhi.n	8006fac <_scanf_float+0x134>
 8006f98:	2b60      	cmp	r3, #96	; 0x60
 8006f9a:	d8b2      	bhi.n	8006f02 <_scanf_float+0x8a>
 8006f9c:	2b54      	cmp	r3, #84	; 0x54
 8006f9e:	d077      	beq.n	8007090 <_scanf_float+0x218>
 8006fa0:	2b59      	cmp	r3, #89	; 0x59
 8006fa2:	d199      	bne.n	8006ed8 <_scanf_float+0x60>
 8006fa4:	2d07      	cmp	r5, #7
 8006fa6:	d197      	bne.n	8006ed8 <_scanf_float+0x60>
 8006fa8:	2508      	movs	r5, #8
 8006faa:	e029      	b.n	8007000 <_scanf_float+0x188>
 8006fac:	2b74      	cmp	r3, #116	; 0x74
 8006fae:	d06f      	beq.n	8007090 <_scanf_float+0x218>
 8006fb0:	2b79      	cmp	r3, #121	; 0x79
 8006fb2:	e7f6      	b.n	8006fa2 <_scanf_float+0x12a>
 8006fb4:	6821      	ldr	r1, [r4, #0]
 8006fb6:	05c8      	lsls	r0, r1, #23
 8006fb8:	d51a      	bpl.n	8006ff0 <_scanf_float+0x178>
 8006fba:	9b02      	ldr	r3, [sp, #8]
 8006fbc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006fc0:	6021      	str	r1, [r4, #0]
 8006fc2:	f109 0901 	add.w	r9, r9, #1
 8006fc6:	b11b      	cbz	r3, 8006fd0 <_scanf_float+0x158>
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	3201      	adds	r2, #1
 8006fcc:	9302      	str	r3, [sp, #8]
 8006fce:	60a2      	str	r2, [r4, #8]
 8006fd0:	68a3      	ldr	r3, [r4, #8]
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	60a3      	str	r3, [r4, #8]
 8006fd6:	6923      	ldr	r3, [r4, #16]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	6123      	str	r3, [r4, #16]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	607b      	str	r3, [r7, #4]
 8006fe4:	f340 8084 	ble.w	80070f0 <_scanf_float+0x278>
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	3301      	adds	r3, #1
 8006fec:	603b      	str	r3, [r7, #0]
 8006fee:	e766      	b.n	8006ebe <_scanf_float+0x46>
 8006ff0:	eb1a 0f05 	cmn.w	sl, r5
 8006ff4:	f47f af70 	bne.w	8006ed8 <_scanf_float+0x60>
 8006ff8:	6822      	ldr	r2, [r4, #0]
 8006ffa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006ffe:	6022      	str	r2, [r4, #0]
 8007000:	f806 3b01 	strb.w	r3, [r6], #1
 8007004:	e7e4      	b.n	8006fd0 <_scanf_float+0x158>
 8007006:	6822      	ldr	r2, [r4, #0]
 8007008:	0610      	lsls	r0, r2, #24
 800700a:	f57f af65 	bpl.w	8006ed8 <_scanf_float+0x60>
 800700e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007012:	e7f4      	b.n	8006ffe <_scanf_float+0x186>
 8007014:	f1ba 0f00 	cmp.w	sl, #0
 8007018:	d10e      	bne.n	8007038 <_scanf_float+0x1c0>
 800701a:	f1b9 0f00 	cmp.w	r9, #0
 800701e:	d10e      	bne.n	800703e <_scanf_float+0x1c6>
 8007020:	6822      	ldr	r2, [r4, #0]
 8007022:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007026:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800702a:	d108      	bne.n	800703e <_scanf_float+0x1c6>
 800702c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007030:	6022      	str	r2, [r4, #0]
 8007032:	f04f 0a01 	mov.w	sl, #1
 8007036:	e7e3      	b.n	8007000 <_scanf_float+0x188>
 8007038:	f1ba 0f02 	cmp.w	sl, #2
 800703c:	d055      	beq.n	80070ea <_scanf_float+0x272>
 800703e:	2d01      	cmp	r5, #1
 8007040:	d002      	beq.n	8007048 <_scanf_float+0x1d0>
 8007042:	2d04      	cmp	r5, #4
 8007044:	f47f af48 	bne.w	8006ed8 <_scanf_float+0x60>
 8007048:	3501      	adds	r5, #1
 800704a:	b2ed      	uxtb	r5, r5
 800704c:	e7d8      	b.n	8007000 <_scanf_float+0x188>
 800704e:	f1ba 0f01 	cmp.w	sl, #1
 8007052:	f47f af41 	bne.w	8006ed8 <_scanf_float+0x60>
 8007056:	f04f 0a02 	mov.w	sl, #2
 800705a:	e7d1      	b.n	8007000 <_scanf_float+0x188>
 800705c:	b97d      	cbnz	r5, 800707e <_scanf_float+0x206>
 800705e:	f1b9 0f00 	cmp.w	r9, #0
 8007062:	f47f af3c 	bne.w	8006ede <_scanf_float+0x66>
 8007066:	6822      	ldr	r2, [r4, #0]
 8007068:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800706c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007070:	f47f af39 	bne.w	8006ee6 <_scanf_float+0x6e>
 8007074:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007078:	6022      	str	r2, [r4, #0]
 800707a:	2501      	movs	r5, #1
 800707c:	e7c0      	b.n	8007000 <_scanf_float+0x188>
 800707e:	2d03      	cmp	r5, #3
 8007080:	d0e2      	beq.n	8007048 <_scanf_float+0x1d0>
 8007082:	2d05      	cmp	r5, #5
 8007084:	e7de      	b.n	8007044 <_scanf_float+0x1cc>
 8007086:	2d02      	cmp	r5, #2
 8007088:	f47f af26 	bne.w	8006ed8 <_scanf_float+0x60>
 800708c:	2503      	movs	r5, #3
 800708e:	e7b7      	b.n	8007000 <_scanf_float+0x188>
 8007090:	2d06      	cmp	r5, #6
 8007092:	f47f af21 	bne.w	8006ed8 <_scanf_float+0x60>
 8007096:	2507      	movs	r5, #7
 8007098:	e7b2      	b.n	8007000 <_scanf_float+0x188>
 800709a:	6822      	ldr	r2, [r4, #0]
 800709c:	0591      	lsls	r1, r2, #22
 800709e:	f57f af1b 	bpl.w	8006ed8 <_scanf_float+0x60>
 80070a2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80070a6:	6022      	str	r2, [r4, #0]
 80070a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80070ac:	e7a8      	b.n	8007000 <_scanf_float+0x188>
 80070ae:	6822      	ldr	r2, [r4, #0]
 80070b0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80070b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80070b8:	d006      	beq.n	80070c8 <_scanf_float+0x250>
 80070ba:	0550      	lsls	r0, r2, #21
 80070bc:	f57f af0c 	bpl.w	8006ed8 <_scanf_float+0x60>
 80070c0:	f1b9 0f00 	cmp.w	r9, #0
 80070c4:	f43f af0f 	beq.w	8006ee6 <_scanf_float+0x6e>
 80070c8:	0591      	lsls	r1, r2, #22
 80070ca:	bf58      	it	pl
 80070cc:	9901      	ldrpl	r1, [sp, #4]
 80070ce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80070d2:	bf58      	it	pl
 80070d4:	eba9 0101 	subpl.w	r1, r9, r1
 80070d8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80070dc:	bf58      	it	pl
 80070de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80070e2:	6022      	str	r2, [r4, #0]
 80070e4:	f04f 0900 	mov.w	r9, #0
 80070e8:	e78a      	b.n	8007000 <_scanf_float+0x188>
 80070ea:	f04f 0a03 	mov.w	sl, #3
 80070ee:	e787      	b.n	8007000 <_scanf_float+0x188>
 80070f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80070f4:	4639      	mov	r1, r7
 80070f6:	4640      	mov	r0, r8
 80070f8:	4798      	blx	r3
 80070fa:	2800      	cmp	r0, #0
 80070fc:	f43f aedf 	beq.w	8006ebe <_scanf_float+0x46>
 8007100:	e6ea      	b.n	8006ed8 <_scanf_float+0x60>
 8007102:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007106:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800710a:	463a      	mov	r2, r7
 800710c:	4640      	mov	r0, r8
 800710e:	4798      	blx	r3
 8007110:	6923      	ldr	r3, [r4, #16]
 8007112:	3b01      	subs	r3, #1
 8007114:	6123      	str	r3, [r4, #16]
 8007116:	e6ec      	b.n	8006ef2 <_scanf_float+0x7a>
 8007118:	1e6b      	subs	r3, r5, #1
 800711a:	2b06      	cmp	r3, #6
 800711c:	d825      	bhi.n	800716a <_scanf_float+0x2f2>
 800711e:	2d02      	cmp	r5, #2
 8007120:	d836      	bhi.n	8007190 <_scanf_float+0x318>
 8007122:	455e      	cmp	r6, fp
 8007124:	f67f aee8 	bls.w	8006ef8 <_scanf_float+0x80>
 8007128:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800712c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007130:	463a      	mov	r2, r7
 8007132:	4640      	mov	r0, r8
 8007134:	4798      	blx	r3
 8007136:	6923      	ldr	r3, [r4, #16]
 8007138:	3b01      	subs	r3, #1
 800713a:	6123      	str	r3, [r4, #16]
 800713c:	e7f1      	b.n	8007122 <_scanf_float+0x2aa>
 800713e:	9802      	ldr	r0, [sp, #8]
 8007140:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007144:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007148:	9002      	str	r0, [sp, #8]
 800714a:	463a      	mov	r2, r7
 800714c:	4640      	mov	r0, r8
 800714e:	4798      	blx	r3
 8007150:	6923      	ldr	r3, [r4, #16]
 8007152:	3b01      	subs	r3, #1
 8007154:	6123      	str	r3, [r4, #16]
 8007156:	f10a 3aff 	add.w	sl, sl, #4294967295
 800715a:	fa5f fa8a 	uxtb.w	sl, sl
 800715e:	f1ba 0f02 	cmp.w	sl, #2
 8007162:	d1ec      	bne.n	800713e <_scanf_float+0x2c6>
 8007164:	3d03      	subs	r5, #3
 8007166:	b2ed      	uxtb	r5, r5
 8007168:	1b76      	subs	r6, r6, r5
 800716a:	6823      	ldr	r3, [r4, #0]
 800716c:	05da      	lsls	r2, r3, #23
 800716e:	d52f      	bpl.n	80071d0 <_scanf_float+0x358>
 8007170:	055b      	lsls	r3, r3, #21
 8007172:	d510      	bpl.n	8007196 <_scanf_float+0x31e>
 8007174:	455e      	cmp	r6, fp
 8007176:	f67f aebf 	bls.w	8006ef8 <_scanf_float+0x80>
 800717a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800717e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007182:	463a      	mov	r2, r7
 8007184:	4640      	mov	r0, r8
 8007186:	4798      	blx	r3
 8007188:	6923      	ldr	r3, [r4, #16]
 800718a:	3b01      	subs	r3, #1
 800718c:	6123      	str	r3, [r4, #16]
 800718e:	e7f1      	b.n	8007174 <_scanf_float+0x2fc>
 8007190:	46aa      	mov	sl, r5
 8007192:	9602      	str	r6, [sp, #8]
 8007194:	e7df      	b.n	8007156 <_scanf_float+0x2de>
 8007196:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800719a:	6923      	ldr	r3, [r4, #16]
 800719c:	2965      	cmp	r1, #101	; 0x65
 800719e:	f103 33ff 	add.w	r3, r3, #4294967295
 80071a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80071a6:	6123      	str	r3, [r4, #16]
 80071a8:	d00c      	beq.n	80071c4 <_scanf_float+0x34c>
 80071aa:	2945      	cmp	r1, #69	; 0x45
 80071ac:	d00a      	beq.n	80071c4 <_scanf_float+0x34c>
 80071ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071b2:	463a      	mov	r2, r7
 80071b4:	4640      	mov	r0, r8
 80071b6:	4798      	blx	r3
 80071b8:	6923      	ldr	r3, [r4, #16]
 80071ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80071be:	3b01      	subs	r3, #1
 80071c0:	1eb5      	subs	r5, r6, #2
 80071c2:	6123      	str	r3, [r4, #16]
 80071c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071c8:	463a      	mov	r2, r7
 80071ca:	4640      	mov	r0, r8
 80071cc:	4798      	blx	r3
 80071ce:	462e      	mov	r6, r5
 80071d0:	6825      	ldr	r5, [r4, #0]
 80071d2:	f015 0510 	ands.w	r5, r5, #16
 80071d6:	d158      	bne.n	800728a <_scanf_float+0x412>
 80071d8:	7035      	strb	r5, [r6, #0]
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80071e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e4:	d11c      	bne.n	8007220 <_scanf_float+0x3a8>
 80071e6:	9b01      	ldr	r3, [sp, #4]
 80071e8:	454b      	cmp	r3, r9
 80071ea:	eba3 0209 	sub.w	r2, r3, r9
 80071ee:	d124      	bne.n	800723a <_scanf_float+0x3c2>
 80071f0:	2200      	movs	r2, #0
 80071f2:	4659      	mov	r1, fp
 80071f4:	4640      	mov	r0, r8
 80071f6:	f002 fe43 	bl	8009e80 <_strtod_r>
 80071fa:	9b03      	ldr	r3, [sp, #12]
 80071fc:	6821      	ldr	r1, [r4, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f011 0f02 	tst.w	r1, #2
 8007204:	ec57 6b10 	vmov	r6, r7, d0
 8007208:	f103 0204 	add.w	r2, r3, #4
 800720c:	d020      	beq.n	8007250 <_scanf_float+0x3d8>
 800720e:	9903      	ldr	r1, [sp, #12]
 8007210:	600a      	str	r2, [r1, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	e9c3 6700 	strd	r6, r7, [r3]
 8007218:	68e3      	ldr	r3, [r4, #12]
 800721a:	3301      	adds	r3, #1
 800721c:	60e3      	str	r3, [r4, #12]
 800721e:	e66c      	b.n	8006efa <_scanf_float+0x82>
 8007220:	9b04      	ldr	r3, [sp, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d0e4      	beq.n	80071f0 <_scanf_float+0x378>
 8007226:	9905      	ldr	r1, [sp, #20]
 8007228:	230a      	movs	r3, #10
 800722a:	462a      	mov	r2, r5
 800722c:	3101      	adds	r1, #1
 800722e:	4640      	mov	r0, r8
 8007230:	f002 feae 	bl	8009f90 <_strtol_r>
 8007234:	9b04      	ldr	r3, [sp, #16]
 8007236:	9e05      	ldr	r6, [sp, #20]
 8007238:	1ac2      	subs	r2, r0, r3
 800723a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800723e:	429e      	cmp	r6, r3
 8007240:	bf28      	it	cs
 8007242:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007246:	4912      	ldr	r1, [pc, #72]	; (8007290 <_scanf_float+0x418>)
 8007248:	4630      	mov	r0, r6
 800724a:	f000 fa03 	bl	8007654 <siprintf>
 800724e:	e7cf      	b.n	80071f0 <_scanf_float+0x378>
 8007250:	f011 0f04 	tst.w	r1, #4
 8007254:	9903      	ldr	r1, [sp, #12]
 8007256:	600a      	str	r2, [r1, #0]
 8007258:	d1db      	bne.n	8007212 <_scanf_float+0x39a>
 800725a:	f8d3 8000 	ldr.w	r8, [r3]
 800725e:	ee10 2a10 	vmov	r2, s0
 8007262:	ee10 0a10 	vmov	r0, s0
 8007266:	463b      	mov	r3, r7
 8007268:	4639      	mov	r1, r7
 800726a:	f7f9 fc67 	bl	8000b3c <__aeabi_dcmpun>
 800726e:	b128      	cbz	r0, 800727c <_scanf_float+0x404>
 8007270:	4808      	ldr	r0, [pc, #32]	; (8007294 <_scanf_float+0x41c>)
 8007272:	f000 fbcb 	bl	8007a0c <nanf>
 8007276:	ed88 0a00 	vstr	s0, [r8]
 800727a:	e7cd      	b.n	8007218 <_scanf_float+0x3a0>
 800727c:	4630      	mov	r0, r6
 800727e:	4639      	mov	r1, r7
 8007280:	f7f9 fcba 	bl	8000bf8 <__aeabi_d2f>
 8007284:	f8c8 0000 	str.w	r0, [r8]
 8007288:	e7c6      	b.n	8007218 <_scanf_float+0x3a0>
 800728a:	2500      	movs	r5, #0
 800728c:	e635      	b.n	8006efa <_scanf_float+0x82>
 800728e:	bf00      	nop
 8007290:	0800b1d4 	.word	0x0800b1d4
 8007294:	0800b565 	.word	0x0800b565

08007298 <std>:
 8007298:	2300      	movs	r3, #0
 800729a:	b510      	push	{r4, lr}
 800729c:	4604      	mov	r4, r0
 800729e:	e9c0 3300 	strd	r3, r3, [r0]
 80072a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072a6:	6083      	str	r3, [r0, #8]
 80072a8:	8181      	strh	r1, [r0, #12]
 80072aa:	6643      	str	r3, [r0, #100]	; 0x64
 80072ac:	81c2      	strh	r2, [r0, #14]
 80072ae:	6183      	str	r3, [r0, #24]
 80072b0:	4619      	mov	r1, r3
 80072b2:	2208      	movs	r2, #8
 80072b4:	305c      	adds	r0, #92	; 0x5c
 80072b6:	f000 fac5 	bl	8007844 <memset>
 80072ba:	4b0d      	ldr	r3, [pc, #52]	; (80072f0 <std+0x58>)
 80072bc:	6263      	str	r3, [r4, #36]	; 0x24
 80072be:	4b0d      	ldr	r3, [pc, #52]	; (80072f4 <std+0x5c>)
 80072c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80072c2:	4b0d      	ldr	r3, [pc, #52]	; (80072f8 <std+0x60>)
 80072c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072c6:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <std+0x64>)
 80072c8:	6323      	str	r3, [r4, #48]	; 0x30
 80072ca:	4b0d      	ldr	r3, [pc, #52]	; (8007300 <std+0x68>)
 80072cc:	6224      	str	r4, [r4, #32]
 80072ce:	429c      	cmp	r4, r3
 80072d0:	d006      	beq.n	80072e0 <std+0x48>
 80072d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80072d6:	4294      	cmp	r4, r2
 80072d8:	d002      	beq.n	80072e0 <std+0x48>
 80072da:	33d0      	adds	r3, #208	; 0xd0
 80072dc:	429c      	cmp	r4, r3
 80072de:	d105      	bne.n	80072ec <std+0x54>
 80072e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80072e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072e8:	f000 bb7e 	b.w	80079e8 <__retarget_lock_init_recursive>
 80072ec:	bd10      	pop	{r4, pc}
 80072ee:	bf00      	nop
 80072f0:	08007695 	.word	0x08007695
 80072f4:	080076b7 	.word	0x080076b7
 80072f8:	080076ef 	.word	0x080076ef
 80072fc:	08007713 	.word	0x08007713
 8007300:	200042e8 	.word	0x200042e8

08007304 <stdio_exit_handler>:
 8007304:	4a02      	ldr	r2, [pc, #8]	; (8007310 <stdio_exit_handler+0xc>)
 8007306:	4903      	ldr	r1, [pc, #12]	; (8007314 <stdio_exit_handler+0x10>)
 8007308:	4803      	ldr	r0, [pc, #12]	; (8007318 <stdio_exit_handler+0x14>)
 800730a:	f000 b869 	b.w	80073e0 <_fwalk_sglue>
 800730e:	bf00      	nop
 8007310:	20000010 	.word	0x20000010
 8007314:	0800a5d9 	.word	0x0800a5d9
 8007318:	2000001c 	.word	0x2000001c

0800731c <cleanup_stdio>:
 800731c:	6841      	ldr	r1, [r0, #4]
 800731e:	4b0c      	ldr	r3, [pc, #48]	; (8007350 <cleanup_stdio+0x34>)
 8007320:	4299      	cmp	r1, r3
 8007322:	b510      	push	{r4, lr}
 8007324:	4604      	mov	r4, r0
 8007326:	d001      	beq.n	800732c <cleanup_stdio+0x10>
 8007328:	f003 f956 	bl	800a5d8 <_fflush_r>
 800732c:	68a1      	ldr	r1, [r4, #8]
 800732e:	4b09      	ldr	r3, [pc, #36]	; (8007354 <cleanup_stdio+0x38>)
 8007330:	4299      	cmp	r1, r3
 8007332:	d002      	beq.n	800733a <cleanup_stdio+0x1e>
 8007334:	4620      	mov	r0, r4
 8007336:	f003 f94f 	bl	800a5d8 <_fflush_r>
 800733a:	68e1      	ldr	r1, [r4, #12]
 800733c:	4b06      	ldr	r3, [pc, #24]	; (8007358 <cleanup_stdio+0x3c>)
 800733e:	4299      	cmp	r1, r3
 8007340:	d004      	beq.n	800734c <cleanup_stdio+0x30>
 8007342:	4620      	mov	r0, r4
 8007344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007348:	f003 b946 	b.w	800a5d8 <_fflush_r>
 800734c:	bd10      	pop	{r4, pc}
 800734e:	bf00      	nop
 8007350:	200042e8 	.word	0x200042e8
 8007354:	20004350 	.word	0x20004350
 8007358:	200043b8 	.word	0x200043b8

0800735c <global_stdio_init.part.0>:
 800735c:	b510      	push	{r4, lr}
 800735e:	4b0b      	ldr	r3, [pc, #44]	; (800738c <global_stdio_init.part.0+0x30>)
 8007360:	4c0b      	ldr	r4, [pc, #44]	; (8007390 <global_stdio_init.part.0+0x34>)
 8007362:	4a0c      	ldr	r2, [pc, #48]	; (8007394 <global_stdio_init.part.0+0x38>)
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	4620      	mov	r0, r4
 8007368:	2200      	movs	r2, #0
 800736a:	2104      	movs	r1, #4
 800736c:	f7ff ff94 	bl	8007298 <std>
 8007370:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007374:	2201      	movs	r2, #1
 8007376:	2109      	movs	r1, #9
 8007378:	f7ff ff8e 	bl	8007298 <std>
 800737c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007380:	2202      	movs	r2, #2
 8007382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007386:	2112      	movs	r1, #18
 8007388:	f7ff bf86 	b.w	8007298 <std>
 800738c:	20004420 	.word	0x20004420
 8007390:	200042e8 	.word	0x200042e8
 8007394:	08007305 	.word	0x08007305

08007398 <__sfp_lock_acquire>:
 8007398:	4801      	ldr	r0, [pc, #4]	; (80073a0 <__sfp_lock_acquire+0x8>)
 800739a:	f000 bb26 	b.w	80079ea <__retarget_lock_acquire_recursive>
 800739e:	bf00      	nop
 80073a0:	20004429 	.word	0x20004429

080073a4 <__sfp_lock_release>:
 80073a4:	4801      	ldr	r0, [pc, #4]	; (80073ac <__sfp_lock_release+0x8>)
 80073a6:	f000 bb21 	b.w	80079ec <__retarget_lock_release_recursive>
 80073aa:	bf00      	nop
 80073ac:	20004429 	.word	0x20004429

080073b0 <__sinit>:
 80073b0:	b510      	push	{r4, lr}
 80073b2:	4604      	mov	r4, r0
 80073b4:	f7ff fff0 	bl	8007398 <__sfp_lock_acquire>
 80073b8:	6a23      	ldr	r3, [r4, #32]
 80073ba:	b11b      	cbz	r3, 80073c4 <__sinit+0x14>
 80073bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073c0:	f7ff bff0 	b.w	80073a4 <__sfp_lock_release>
 80073c4:	4b04      	ldr	r3, [pc, #16]	; (80073d8 <__sinit+0x28>)
 80073c6:	6223      	str	r3, [r4, #32]
 80073c8:	4b04      	ldr	r3, [pc, #16]	; (80073dc <__sinit+0x2c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1f5      	bne.n	80073bc <__sinit+0xc>
 80073d0:	f7ff ffc4 	bl	800735c <global_stdio_init.part.0>
 80073d4:	e7f2      	b.n	80073bc <__sinit+0xc>
 80073d6:	bf00      	nop
 80073d8:	0800731d 	.word	0x0800731d
 80073dc:	20004420 	.word	0x20004420

080073e0 <_fwalk_sglue>:
 80073e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e4:	4607      	mov	r7, r0
 80073e6:	4688      	mov	r8, r1
 80073e8:	4614      	mov	r4, r2
 80073ea:	2600      	movs	r6, #0
 80073ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073f0:	f1b9 0901 	subs.w	r9, r9, #1
 80073f4:	d505      	bpl.n	8007402 <_fwalk_sglue+0x22>
 80073f6:	6824      	ldr	r4, [r4, #0]
 80073f8:	2c00      	cmp	r4, #0
 80073fa:	d1f7      	bne.n	80073ec <_fwalk_sglue+0xc>
 80073fc:	4630      	mov	r0, r6
 80073fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007402:	89ab      	ldrh	r3, [r5, #12]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d907      	bls.n	8007418 <_fwalk_sglue+0x38>
 8007408:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800740c:	3301      	adds	r3, #1
 800740e:	d003      	beq.n	8007418 <_fwalk_sglue+0x38>
 8007410:	4629      	mov	r1, r5
 8007412:	4638      	mov	r0, r7
 8007414:	47c0      	blx	r8
 8007416:	4306      	orrs	r6, r0
 8007418:	3568      	adds	r5, #104	; 0x68
 800741a:	e7e9      	b.n	80073f0 <_fwalk_sglue+0x10>

0800741c <iprintf>:
 800741c:	b40f      	push	{r0, r1, r2, r3}
 800741e:	b507      	push	{r0, r1, r2, lr}
 8007420:	4906      	ldr	r1, [pc, #24]	; (800743c <iprintf+0x20>)
 8007422:	ab04      	add	r3, sp, #16
 8007424:	6808      	ldr	r0, [r1, #0]
 8007426:	f853 2b04 	ldr.w	r2, [r3], #4
 800742a:	6881      	ldr	r1, [r0, #8]
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	f002 ff33 	bl	800a298 <_vfiprintf_r>
 8007432:	b003      	add	sp, #12
 8007434:	f85d eb04 	ldr.w	lr, [sp], #4
 8007438:	b004      	add	sp, #16
 800743a:	4770      	bx	lr
 800743c:	20000068 	.word	0x20000068

08007440 <_puts_r>:
 8007440:	6a03      	ldr	r3, [r0, #32]
 8007442:	b570      	push	{r4, r5, r6, lr}
 8007444:	6884      	ldr	r4, [r0, #8]
 8007446:	4605      	mov	r5, r0
 8007448:	460e      	mov	r6, r1
 800744a:	b90b      	cbnz	r3, 8007450 <_puts_r+0x10>
 800744c:	f7ff ffb0 	bl	80073b0 <__sinit>
 8007450:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007452:	07db      	lsls	r3, r3, #31
 8007454:	d405      	bmi.n	8007462 <_puts_r+0x22>
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	0598      	lsls	r0, r3, #22
 800745a:	d402      	bmi.n	8007462 <_puts_r+0x22>
 800745c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800745e:	f000 fac4 	bl	80079ea <__retarget_lock_acquire_recursive>
 8007462:	89a3      	ldrh	r3, [r4, #12]
 8007464:	0719      	lsls	r1, r3, #28
 8007466:	d513      	bpl.n	8007490 <_puts_r+0x50>
 8007468:	6923      	ldr	r3, [r4, #16]
 800746a:	b18b      	cbz	r3, 8007490 <_puts_r+0x50>
 800746c:	3e01      	subs	r6, #1
 800746e:	68a3      	ldr	r3, [r4, #8]
 8007470:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007474:	3b01      	subs	r3, #1
 8007476:	60a3      	str	r3, [r4, #8]
 8007478:	b9e9      	cbnz	r1, 80074b6 <_puts_r+0x76>
 800747a:	2b00      	cmp	r3, #0
 800747c:	da2e      	bge.n	80074dc <_puts_r+0x9c>
 800747e:	4622      	mov	r2, r4
 8007480:	210a      	movs	r1, #10
 8007482:	4628      	mov	r0, r5
 8007484:	f000 f949 	bl	800771a <__swbuf_r>
 8007488:	3001      	adds	r0, #1
 800748a:	d007      	beq.n	800749c <_puts_r+0x5c>
 800748c:	250a      	movs	r5, #10
 800748e:	e007      	b.n	80074a0 <_puts_r+0x60>
 8007490:	4621      	mov	r1, r4
 8007492:	4628      	mov	r0, r5
 8007494:	f000 f97e 	bl	8007794 <__swsetup_r>
 8007498:	2800      	cmp	r0, #0
 800749a:	d0e7      	beq.n	800746c <_puts_r+0x2c>
 800749c:	f04f 35ff 	mov.w	r5, #4294967295
 80074a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074a2:	07da      	lsls	r2, r3, #31
 80074a4:	d405      	bmi.n	80074b2 <_puts_r+0x72>
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	059b      	lsls	r3, r3, #22
 80074aa:	d402      	bmi.n	80074b2 <_puts_r+0x72>
 80074ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074ae:	f000 fa9d 	bl	80079ec <__retarget_lock_release_recursive>
 80074b2:	4628      	mov	r0, r5
 80074b4:	bd70      	pop	{r4, r5, r6, pc}
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	da04      	bge.n	80074c4 <_puts_r+0x84>
 80074ba:	69a2      	ldr	r2, [r4, #24]
 80074bc:	429a      	cmp	r2, r3
 80074be:	dc06      	bgt.n	80074ce <_puts_r+0x8e>
 80074c0:	290a      	cmp	r1, #10
 80074c2:	d004      	beq.n	80074ce <_puts_r+0x8e>
 80074c4:	6823      	ldr	r3, [r4, #0]
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	6022      	str	r2, [r4, #0]
 80074ca:	7019      	strb	r1, [r3, #0]
 80074cc:	e7cf      	b.n	800746e <_puts_r+0x2e>
 80074ce:	4622      	mov	r2, r4
 80074d0:	4628      	mov	r0, r5
 80074d2:	f000 f922 	bl	800771a <__swbuf_r>
 80074d6:	3001      	adds	r0, #1
 80074d8:	d1c9      	bne.n	800746e <_puts_r+0x2e>
 80074da:	e7df      	b.n	800749c <_puts_r+0x5c>
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	250a      	movs	r5, #10
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	6022      	str	r2, [r4, #0]
 80074e4:	701d      	strb	r5, [r3, #0]
 80074e6:	e7db      	b.n	80074a0 <_puts_r+0x60>

080074e8 <puts>:
 80074e8:	4b02      	ldr	r3, [pc, #8]	; (80074f4 <puts+0xc>)
 80074ea:	4601      	mov	r1, r0
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	f7ff bfa7 	b.w	8007440 <_puts_r>
 80074f2:	bf00      	nop
 80074f4:	20000068 	.word	0x20000068

080074f8 <setvbuf>:
 80074f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074fc:	461d      	mov	r5, r3
 80074fe:	4b54      	ldr	r3, [pc, #336]	; (8007650 <setvbuf+0x158>)
 8007500:	681f      	ldr	r7, [r3, #0]
 8007502:	4604      	mov	r4, r0
 8007504:	460e      	mov	r6, r1
 8007506:	4690      	mov	r8, r2
 8007508:	b127      	cbz	r7, 8007514 <setvbuf+0x1c>
 800750a:	6a3b      	ldr	r3, [r7, #32]
 800750c:	b913      	cbnz	r3, 8007514 <setvbuf+0x1c>
 800750e:	4638      	mov	r0, r7
 8007510:	f7ff ff4e 	bl	80073b0 <__sinit>
 8007514:	f1b8 0f02 	cmp.w	r8, #2
 8007518:	d006      	beq.n	8007528 <setvbuf+0x30>
 800751a:	f1b8 0f01 	cmp.w	r8, #1
 800751e:	f200 8094 	bhi.w	800764a <setvbuf+0x152>
 8007522:	2d00      	cmp	r5, #0
 8007524:	f2c0 8091 	blt.w	800764a <setvbuf+0x152>
 8007528:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800752a:	07da      	lsls	r2, r3, #31
 800752c:	d405      	bmi.n	800753a <setvbuf+0x42>
 800752e:	89a3      	ldrh	r3, [r4, #12]
 8007530:	059b      	lsls	r3, r3, #22
 8007532:	d402      	bmi.n	800753a <setvbuf+0x42>
 8007534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007536:	f000 fa58 	bl	80079ea <__retarget_lock_acquire_recursive>
 800753a:	4621      	mov	r1, r4
 800753c:	4638      	mov	r0, r7
 800753e:	f003 f84b 	bl	800a5d8 <_fflush_r>
 8007542:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007544:	b141      	cbz	r1, 8007558 <setvbuf+0x60>
 8007546:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800754a:	4299      	cmp	r1, r3
 800754c:	d002      	beq.n	8007554 <setvbuf+0x5c>
 800754e:	4638      	mov	r0, r7
 8007550:	f001 f8dc 	bl	800870c <_free_r>
 8007554:	2300      	movs	r3, #0
 8007556:	6363      	str	r3, [r4, #52]	; 0x34
 8007558:	2300      	movs	r3, #0
 800755a:	61a3      	str	r3, [r4, #24]
 800755c:	6063      	str	r3, [r4, #4]
 800755e:	89a3      	ldrh	r3, [r4, #12]
 8007560:	0618      	lsls	r0, r3, #24
 8007562:	d503      	bpl.n	800756c <setvbuf+0x74>
 8007564:	6921      	ldr	r1, [r4, #16]
 8007566:	4638      	mov	r0, r7
 8007568:	f001 f8d0 	bl	800870c <_free_r>
 800756c:	89a3      	ldrh	r3, [r4, #12]
 800756e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8007572:	f023 0303 	bic.w	r3, r3, #3
 8007576:	f1b8 0f02 	cmp.w	r8, #2
 800757a:	81a3      	strh	r3, [r4, #12]
 800757c:	d05f      	beq.n	800763e <setvbuf+0x146>
 800757e:	ab01      	add	r3, sp, #4
 8007580:	466a      	mov	r2, sp
 8007582:	4621      	mov	r1, r4
 8007584:	4638      	mov	r0, r7
 8007586:	f003 f84f 	bl	800a628 <__swhatbuf_r>
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	4318      	orrs	r0, r3
 800758e:	81a0      	strh	r0, [r4, #12]
 8007590:	bb2d      	cbnz	r5, 80075de <setvbuf+0xe6>
 8007592:	9d00      	ldr	r5, [sp, #0]
 8007594:	4628      	mov	r0, r5
 8007596:	f001 f905 	bl	80087a4 <malloc>
 800759a:	4606      	mov	r6, r0
 800759c:	2800      	cmp	r0, #0
 800759e:	d150      	bne.n	8007642 <setvbuf+0x14a>
 80075a0:	f8dd 9000 	ldr.w	r9, [sp]
 80075a4:	45a9      	cmp	r9, r5
 80075a6:	d13e      	bne.n	8007626 <setvbuf+0x12e>
 80075a8:	f04f 35ff 	mov.w	r5, #4294967295
 80075ac:	2200      	movs	r2, #0
 80075ae:	60a2      	str	r2, [r4, #8]
 80075b0:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80075b4:	6022      	str	r2, [r4, #0]
 80075b6:	6122      	str	r2, [r4, #16]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075be:	6162      	str	r2, [r4, #20]
 80075c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075c2:	f043 0302 	orr.w	r3, r3, #2
 80075c6:	07d1      	lsls	r1, r2, #31
 80075c8:	81a3      	strh	r3, [r4, #12]
 80075ca:	d404      	bmi.n	80075d6 <setvbuf+0xde>
 80075cc:	059b      	lsls	r3, r3, #22
 80075ce:	d402      	bmi.n	80075d6 <setvbuf+0xde>
 80075d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075d2:	f000 fa0b 	bl	80079ec <__retarget_lock_release_recursive>
 80075d6:	4628      	mov	r0, r5
 80075d8:	b003      	add	sp, #12
 80075da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075de:	2e00      	cmp	r6, #0
 80075e0:	d0d8      	beq.n	8007594 <setvbuf+0x9c>
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	b913      	cbnz	r3, 80075ec <setvbuf+0xf4>
 80075e6:	4638      	mov	r0, r7
 80075e8:	f7ff fee2 	bl	80073b0 <__sinit>
 80075ec:	f1b8 0f01 	cmp.w	r8, #1
 80075f0:	bf08      	it	eq
 80075f2:	89a3      	ldrheq	r3, [r4, #12]
 80075f4:	6026      	str	r6, [r4, #0]
 80075f6:	bf04      	itt	eq
 80075f8:	f043 0301 	orreq.w	r3, r3, #1
 80075fc:	81a3      	strheq	r3, [r4, #12]
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	f013 0208 	ands.w	r2, r3, #8
 8007604:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8007608:	d01d      	beq.n	8007646 <setvbuf+0x14e>
 800760a:	07da      	lsls	r2, r3, #31
 800760c:	bf41      	itttt	mi
 800760e:	2200      	movmi	r2, #0
 8007610:	426d      	negmi	r5, r5
 8007612:	60a2      	strmi	r2, [r4, #8]
 8007614:	61a5      	strmi	r5, [r4, #24]
 8007616:	bf58      	it	pl
 8007618:	60a5      	strpl	r5, [r4, #8]
 800761a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800761c:	f015 0501 	ands.w	r5, r5, #1
 8007620:	d0d4      	beq.n	80075cc <setvbuf+0xd4>
 8007622:	2500      	movs	r5, #0
 8007624:	e7d7      	b.n	80075d6 <setvbuf+0xde>
 8007626:	4648      	mov	r0, r9
 8007628:	f001 f8bc 	bl	80087a4 <malloc>
 800762c:	4606      	mov	r6, r0
 800762e:	2800      	cmp	r0, #0
 8007630:	d0ba      	beq.n	80075a8 <setvbuf+0xb0>
 8007632:	89a3      	ldrh	r3, [r4, #12]
 8007634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007638:	81a3      	strh	r3, [r4, #12]
 800763a:	464d      	mov	r5, r9
 800763c:	e7d1      	b.n	80075e2 <setvbuf+0xea>
 800763e:	2500      	movs	r5, #0
 8007640:	e7b4      	b.n	80075ac <setvbuf+0xb4>
 8007642:	46a9      	mov	r9, r5
 8007644:	e7f5      	b.n	8007632 <setvbuf+0x13a>
 8007646:	60a2      	str	r2, [r4, #8]
 8007648:	e7e7      	b.n	800761a <setvbuf+0x122>
 800764a:	f04f 35ff 	mov.w	r5, #4294967295
 800764e:	e7c2      	b.n	80075d6 <setvbuf+0xde>
 8007650:	20000068 	.word	0x20000068

08007654 <siprintf>:
 8007654:	b40e      	push	{r1, r2, r3}
 8007656:	b500      	push	{lr}
 8007658:	b09c      	sub	sp, #112	; 0x70
 800765a:	ab1d      	add	r3, sp, #116	; 0x74
 800765c:	9002      	str	r0, [sp, #8]
 800765e:	9006      	str	r0, [sp, #24]
 8007660:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007664:	4809      	ldr	r0, [pc, #36]	; (800768c <siprintf+0x38>)
 8007666:	9107      	str	r1, [sp, #28]
 8007668:	9104      	str	r1, [sp, #16]
 800766a:	4909      	ldr	r1, [pc, #36]	; (8007690 <siprintf+0x3c>)
 800766c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007670:	9105      	str	r1, [sp, #20]
 8007672:	6800      	ldr	r0, [r0, #0]
 8007674:	9301      	str	r3, [sp, #4]
 8007676:	a902      	add	r1, sp, #8
 8007678:	f002 fce6 	bl	800a048 <_svfiprintf_r>
 800767c:	9b02      	ldr	r3, [sp, #8]
 800767e:	2200      	movs	r2, #0
 8007680:	701a      	strb	r2, [r3, #0]
 8007682:	b01c      	add	sp, #112	; 0x70
 8007684:	f85d eb04 	ldr.w	lr, [sp], #4
 8007688:	b003      	add	sp, #12
 800768a:	4770      	bx	lr
 800768c:	20000068 	.word	0x20000068
 8007690:	ffff0208 	.word	0xffff0208

08007694 <__sread>:
 8007694:	b510      	push	{r4, lr}
 8007696:	460c      	mov	r4, r1
 8007698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800769c:	f000 f956 	bl	800794c <_read_r>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	bfab      	itete	ge
 80076a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076a6:	89a3      	ldrhlt	r3, [r4, #12]
 80076a8:	181b      	addge	r3, r3, r0
 80076aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076ae:	bfac      	ite	ge
 80076b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80076b2:	81a3      	strhlt	r3, [r4, #12]
 80076b4:	bd10      	pop	{r4, pc}

080076b6 <__swrite>:
 80076b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ba:	461f      	mov	r7, r3
 80076bc:	898b      	ldrh	r3, [r1, #12]
 80076be:	05db      	lsls	r3, r3, #23
 80076c0:	4605      	mov	r5, r0
 80076c2:	460c      	mov	r4, r1
 80076c4:	4616      	mov	r6, r2
 80076c6:	d505      	bpl.n	80076d4 <__swrite+0x1e>
 80076c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076cc:	2302      	movs	r3, #2
 80076ce:	2200      	movs	r2, #0
 80076d0:	f000 f92a 	bl	8007928 <_lseek_r>
 80076d4:	89a3      	ldrh	r3, [r4, #12]
 80076d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076de:	81a3      	strh	r3, [r4, #12]
 80076e0:	4632      	mov	r2, r6
 80076e2:	463b      	mov	r3, r7
 80076e4:	4628      	mov	r0, r5
 80076e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076ea:	f000 b941 	b.w	8007970 <_write_r>

080076ee <__sseek>:
 80076ee:	b510      	push	{r4, lr}
 80076f0:	460c      	mov	r4, r1
 80076f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f6:	f000 f917 	bl	8007928 <_lseek_r>
 80076fa:	1c43      	adds	r3, r0, #1
 80076fc:	89a3      	ldrh	r3, [r4, #12]
 80076fe:	bf15      	itete	ne
 8007700:	6560      	strne	r0, [r4, #84]	; 0x54
 8007702:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007706:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800770a:	81a3      	strheq	r3, [r4, #12]
 800770c:	bf18      	it	ne
 800770e:	81a3      	strhne	r3, [r4, #12]
 8007710:	bd10      	pop	{r4, pc}

08007712 <__sclose>:
 8007712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007716:	f000 b8a1 	b.w	800785c <_close_r>

0800771a <__swbuf_r>:
 800771a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771c:	460e      	mov	r6, r1
 800771e:	4614      	mov	r4, r2
 8007720:	4605      	mov	r5, r0
 8007722:	b118      	cbz	r0, 800772c <__swbuf_r+0x12>
 8007724:	6a03      	ldr	r3, [r0, #32]
 8007726:	b90b      	cbnz	r3, 800772c <__swbuf_r+0x12>
 8007728:	f7ff fe42 	bl	80073b0 <__sinit>
 800772c:	69a3      	ldr	r3, [r4, #24]
 800772e:	60a3      	str	r3, [r4, #8]
 8007730:	89a3      	ldrh	r3, [r4, #12]
 8007732:	071a      	lsls	r2, r3, #28
 8007734:	d525      	bpl.n	8007782 <__swbuf_r+0x68>
 8007736:	6923      	ldr	r3, [r4, #16]
 8007738:	b31b      	cbz	r3, 8007782 <__swbuf_r+0x68>
 800773a:	6823      	ldr	r3, [r4, #0]
 800773c:	6922      	ldr	r2, [r4, #16]
 800773e:	1a98      	subs	r0, r3, r2
 8007740:	6963      	ldr	r3, [r4, #20]
 8007742:	b2f6      	uxtb	r6, r6
 8007744:	4283      	cmp	r3, r0
 8007746:	4637      	mov	r7, r6
 8007748:	dc04      	bgt.n	8007754 <__swbuf_r+0x3a>
 800774a:	4621      	mov	r1, r4
 800774c:	4628      	mov	r0, r5
 800774e:	f002 ff43 	bl	800a5d8 <_fflush_r>
 8007752:	b9e0      	cbnz	r0, 800778e <__swbuf_r+0x74>
 8007754:	68a3      	ldr	r3, [r4, #8]
 8007756:	3b01      	subs	r3, #1
 8007758:	60a3      	str	r3, [r4, #8]
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	6022      	str	r2, [r4, #0]
 8007760:	701e      	strb	r6, [r3, #0]
 8007762:	6962      	ldr	r2, [r4, #20]
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	429a      	cmp	r2, r3
 8007768:	d004      	beq.n	8007774 <__swbuf_r+0x5a>
 800776a:	89a3      	ldrh	r3, [r4, #12]
 800776c:	07db      	lsls	r3, r3, #31
 800776e:	d506      	bpl.n	800777e <__swbuf_r+0x64>
 8007770:	2e0a      	cmp	r6, #10
 8007772:	d104      	bne.n	800777e <__swbuf_r+0x64>
 8007774:	4621      	mov	r1, r4
 8007776:	4628      	mov	r0, r5
 8007778:	f002 ff2e 	bl	800a5d8 <_fflush_r>
 800777c:	b938      	cbnz	r0, 800778e <__swbuf_r+0x74>
 800777e:	4638      	mov	r0, r7
 8007780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007782:	4621      	mov	r1, r4
 8007784:	4628      	mov	r0, r5
 8007786:	f000 f805 	bl	8007794 <__swsetup_r>
 800778a:	2800      	cmp	r0, #0
 800778c:	d0d5      	beq.n	800773a <__swbuf_r+0x20>
 800778e:	f04f 37ff 	mov.w	r7, #4294967295
 8007792:	e7f4      	b.n	800777e <__swbuf_r+0x64>

08007794 <__swsetup_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	4b2a      	ldr	r3, [pc, #168]	; (8007840 <__swsetup_r+0xac>)
 8007798:	4605      	mov	r5, r0
 800779a:	6818      	ldr	r0, [r3, #0]
 800779c:	460c      	mov	r4, r1
 800779e:	b118      	cbz	r0, 80077a8 <__swsetup_r+0x14>
 80077a0:	6a03      	ldr	r3, [r0, #32]
 80077a2:	b90b      	cbnz	r3, 80077a8 <__swsetup_r+0x14>
 80077a4:	f7ff fe04 	bl	80073b0 <__sinit>
 80077a8:	89a3      	ldrh	r3, [r4, #12]
 80077aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077ae:	0718      	lsls	r0, r3, #28
 80077b0:	d422      	bmi.n	80077f8 <__swsetup_r+0x64>
 80077b2:	06d9      	lsls	r1, r3, #27
 80077b4:	d407      	bmi.n	80077c6 <__swsetup_r+0x32>
 80077b6:	2309      	movs	r3, #9
 80077b8:	602b      	str	r3, [r5, #0]
 80077ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077be:	81a3      	strh	r3, [r4, #12]
 80077c0:	f04f 30ff 	mov.w	r0, #4294967295
 80077c4:	e034      	b.n	8007830 <__swsetup_r+0x9c>
 80077c6:	0758      	lsls	r0, r3, #29
 80077c8:	d512      	bpl.n	80077f0 <__swsetup_r+0x5c>
 80077ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077cc:	b141      	cbz	r1, 80077e0 <__swsetup_r+0x4c>
 80077ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077d2:	4299      	cmp	r1, r3
 80077d4:	d002      	beq.n	80077dc <__swsetup_r+0x48>
 80077d6:	4628      	mov	r0, r5
 80077d8:	f000 ff98 	bl	800870c <_free_r>
 80077dc:	2300      	movs	r3, #0
 80077de:	6363      	str	r3, [r4, #52]	; 0x34
 80077e0:	89a3      	ldrh	r3, [r4, #12]
 80077e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077e6:	81a3      	strh	r3, [r4, #12]
 80077e8:	2300      	movs	r3, #0
 80077ea:	6063      	str	r3, [r4, #4]
 80077ec:	6923      	ldr	r3, [r4, #16]
 80077ee:	6023      	str	r3, [r4, #0]
 80077f0:	89a3      	ldrh	r3, [r4, #12]
 80077f2:	f043 0308 	orr.w	r3, r3, #8
 80077f6:	81a3      	strh	r3, [r4, #12]
 80077f8:	6923      	ldr	r3, [r4, #16]
 80077fa:	b94b      	cbnz	r3, 8007810 <__swsetup_r+0x7c>
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007806:	d003      	beq.n	8007810 <__swsetup_r+0x7c>
 8007808:	4621      	mov	r1, r4
 800780a:	4628      	mov	r0, r5
 800780c:	f002 ff32 	bl	800a674 <__smakebuf_r>
 8007810:	89a0      	ldrh	r0, [r4, #12]
 8007812:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007816:	f010 0301 	ands.w	r3, r0, #1
 800781a:	d00a      	beq.n	8007832 <__swsetup_r+0x9e>
 800781c:	2300      	movs	r3, #0
 800781e:	60a3      	str	r3, [r4, #8]
 8007820:	6963      	ldr	r3, [r4, #20]
 8007822:	425b      	negs	r3, r3
 8007824:	61a3      	str	r3, [r4, #24]
 8007826:	6923      	ldr	r3, [r4, #16]
 8007828:	b943      	cbnz	r3, 800783c <__swsetup_r+0xa8>
 800782a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800782e:	d1c4      	bne.n	80077ba <__swsetup_r+0x26>
 8007830:	bd38      	pop	{r3, r4, r5, pc}
 8007832:	0781      	lsls	r1, r0, #30
 8007834:	bf58      	it	pl
 8007836:	6963      	ldrpl	r3, [r4, #20]
 8007838:	60a3      	str	r3, [r4, #8]
 800783a:	e7f4      	b.n	8007826 <__swsetup_r+0x92>
 800783c:	2000      	movs	r0, #0
 800783e:	e7f7      	b.n	8007830 <__swsetup_r+0x9c>
 8007840:	20000068 	.word	0x20000068

08007844 <memset>:
 8007844:	4402      	add	r2, r0
 8007846:	4603      	mov	r3, r0
 8007848:	4293      	cmp	r3, r2
 800784a:	d100      	bne.n	800784e <memset+0xa>
 800784c:	4770      	bx	lr
 800784e:	f803 1b01 	strb.w	r1, [r3], #1
 8007852:	e7f9      	b.n	8007848 <memset+0x4>

08007854 <_localeconv_r>:
 8007854:	4800      	ldr	r0, [pc, #0]	; (8007858 <_localeconv_r+0x4>)
 8007856:	4770      	bx	lr
 8007858:	2000015c 	.word	0x2000015c

0800785c <_close_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	4d06      	ldr	r5, [pc, #24]	; (8007878 <_close_r+0x1c>)
 8007860:	2300      	movs	r3, #0
 8007862:	4604      	mov	r4, r0
 8007864:	4608      	mov	r0, r1
 8007866:	602b      	str	r3, [r5, #0]
 8007868:	f7fa f925 	bl	8001ab6 <_close>
 800786c:	1c43      	adds	r3, r0, #1
 800786e:	d102      	bne.n	8007876 <_close_r+0x1a>
 8007870:	682b      	ldr	r3, [r5, #0]
 8007872:	b103      	cbz	r3, 8007876 <_close_r+0x1a>
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	bd38      	pop	{r3, r4, r5, pc}
 8007878:	20004424 	.word	0x20004424

0800787c <_reclaim_reent>:
 800787c:	4b29      	ldr	r3, [pc, #164]	; (8007924 <_reclaim_reent+0xa8>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4283      	cmp	r3, r0
 8007882:	b570      	push	{r4, r5, r6, lr}
 8007884:	4604      	mov	r4, r0
 8007886:	d04b      	beq.n	8007920 <_reclaim_reent+0xa4>
 8007888:	69c3      	ldr	r3, [r0, #28]
 800788a:	b143      	cbz	r3, 800789e <_reclaim_reent+0x22>
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d144      	bne.n	800791c <_reclaim_reent+0xa0>
 8007892:	69e3      	ldr	r3, [r4, #28]
 8007894:	6819      	ldr	r1, [r3, #0]
 8007896:	b111      	cbz	r1, 800789e <_reclaim_reent+0x22>
 8007898:	4620      	mov	r0, r4
 800789a:	f000 ff37 	bl	800870c <_free_r>
 800789e:	6961      	ldr	r1, [r4, #20]
 80078a0:	b111      	cbz	r1, 80078a8 <_reclaim_reent+0x2c>
 80078a2:	4620      	mov	r0, r4
 80078a4:	f000 ff32 	bl	800870c <_free_r>
 80078a8:	69e1      	ldr	r1, [r4, #28]
 80078aa:	b111      	cbz	r1, 80078b2 <_reclaim_reent+0x36>
 80078ac:	4620      	mov	r0, r4
 80078ae:	f000 ff2d 	bl	800870c <_free_r>
 80078b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80078b4:	b111      	cbz	r1, 80078bc <_reclaim_reent+0x40>
 80078b6:	4620      	mov	r0, r4
 80078b8:	f000 ff28 	bl	800870c <_free_r>
 80078bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078be:	b111      	cbz	r1, 80078c6 <_reclaim_reent+0x4a>
 80078c0:	4620      	mov	r0, r4
 80078c2:	f000 ff23 	bl	800870c <_free_r>
 80078c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80078c8:	b111      	cbz	r1, 80078d0 <_reclaim_reent+0x54>
 80078ca:	4620      	mov	r0, r4
 80078cc:	f000 ff1e 	bl	800870c <_free_r>
 80078d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80078d2:	b111      	cbz	r1, 80078da <_reclaim_reent+0x5e>
 80078d4:	4620      	mov	r0, r4
 80078d6:	f000 ff19 	bl	800870c <_free_r>
 80078da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80078dc:	b111      	cbz	r1, 80078e4 <_reclaim_reent+0x68>
 80078de:	4620      	mov	r0, r4
 80078e0:	f000 ff14 	bl	800870c <_free_r>
 80078e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80078e6:	b111      	cbz	r1, 80078ee <_reclaim_reent+0x72>
 80078e8:	4620      	mov	r0, r4
 80078ea:	f000 ff0f 	bl	800870c <_free_r>
 80078ee:	6a23      	ldr	r3, [r4, #32]
 80078f0:	b1b3      	cbz	r3, 8007920 <_reclaim_reent+0xa4>
 80078f2:	4620      	mov	r0, r4
 80078f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80078f8:	4718      	bx	r3
 80078fa:	5949      	ldr	r1, [r1, r5]
 80078fc:	b941      	cbnz	r1, 8007910 <_reclaim_reent+0x94>
 80078fe:	3504      	adds	r5, #4
 8007900:	69e3      	ldr	r3, [r4, #28]
 8007902:	2d80      	cmp	r5, #128	; 0x80
 8007904:	68d9      	ldr	r1, [r3, #12]
 8007906:	d1f8      	bne.n	80078fa <_reclaim_reent+0x7e>
 8007908:	4620      	mov	r0, r4
 800790a:	f000 feff 	bl	800870c <_free_r>
 800790e:	e7c0      	b.n	8007892 <_reclaim_reent+0x16>
 8007910:	680e      	ldr	r6, [r1, #0]
 8007912:	4620      	mov	r0, r4
 8007914:	f000 fefa 	bl	800870c <_free_r>
 8007918:	4631      	mov	r1, r6
 800791a:	e7ef      	b.n	80078fc <_reclaim_reent+0x80>
 800791c:	2500      	movs	r5, #0
 800791e:	e7ef      	b.n	8007900 <_reclaim_reent+0x84>
 8007920:	bd70      	pop	{r4, r5, r6, pc}
 8007922:	bf00      	nop
 8007924:	20000068 	.word	0x20000068

08007928 <_lseek_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	4d07      	ldr	r5, [pc, #28]	; (8007948 <_lseek_r+0x20>)
 800792c:	4604      	mov	r4, r0
 800792e:	4608      	mov	r0, r1
 8007930:	4611      	mov	r1, r2
 8007932:	2200      	movs	r2, #0
 8007934:	602a      	str	r2, [r5, #0]
 8007936:	461a      	mov	r2, r3
 8007938:	f7fa f8e4 	bl	8001b04 <_lseek>
 800793c:	1c43      	adds	r3, r0, #1
 800793e:	d102      	bne.n	8007946 <_lseek_r+0x1e>
 8007940:	682b      	ldr	r3, [r5, #0]
 8007942:	b103      	cbz	r3, 8007946 <_lseek_r+0x1e>
 8007944:	6023      	str	r3, [r4, #0]
 8007946:	bd38      	pop	{r3, r4, r5, pc}
 8007948:	20004424 	.word	0x20004424

0800794c <_read_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4d07      	ldr	r5, [pc, #28]	; (800796c <_read_r+0x20>)
 8007950:	4604      	mov	r4, r0
 8007952:	4608      	mov	r0, r1
 8007954:	4611      	mov	r1, r2
 8007956:	2200      	movs	r2, #0
 8007958:	602a      	str	r2, [r5, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	f7fa f872 	bl	8001a44 <_read>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d102      	bne.n	800796a <_read_r+0x1e>
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	b103      	cbz	r3, 800796a <_read_r+0x1e>
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	20004424 	.word	0x20004424

08007970 <_write_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	4d07      	ldr	r5, [pc, #28]	; (8007990 <_write_r+0x20>)
 8007974:	4604      	mov	r4, r0
 8007976:	4608      	mov	r0, r1
 8007978:	4611      	mov	r1, r2
 800797a:	2200      	movs	r2, #0
 800797c:	602a      	str	r2, [r5, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	f7fa f87d 	bl	8001a7e <_write>
 8007984:	1c43      	adds	r3, r0, #1
 8007986:	d102      	bne.n	800798e <_write_r+0x1e>
 8007988:	682b      	ldr	r3, [r5, #0]
 800798a:	b103      	cbz	r3, 800798e <_write_r+0x1e>
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	bd38      	pop	{r3, r4, r5, pc}
 8007990:	20004424 	.word	0x20004424

08007994 <__errno>:
 8007994:	4b01      	ldr	r3, [pc, #4]	; (800799c <__errno+0x8>)
 8007996:	6818      	ldr	r0, [r3, #0]
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	20000068 	.word	0x20000068

080079a0 <__libc_init_array>:
 80079a0:	b570      	push	{r4, r5, r6, lr}
 80079a2:	4d0d      	ldr	r5, [pc, #52]	; (80079d8 <__libc_init_array+0x38>)
 80079a4:	4c0d      	ldr	r4, [pc, #52]	; (80079dc <__libc_init_array+0x3c>)
 80079a6:	1b64      	subs	r4, r4, r5
 80079a8:	10a4      	asrs	r4, r4, #2
 80079aa:	2600      	movs	r6, #0
 80079ac:	42a6      	cmp	r6, r4
 80079ae:	d109      	bne.n	80079c4 <__libc_init_array+0x24>
 80079b0:	4d0b      	ldr	r5, [pc, #44]	; (80079e0 <__libc_init_array+0x40>)
 80079b2:	4c0c      	ldr	r4, [pc, #48]	; (80079e4 <__libc_init_array+0x44>)
 80079b4:	f003 fb40 	bl	800b038 <_init>
 80079b8:	1b64      	subs	r4, r4, r5
 80079ba:	10a4      	asrs	r4, r4, #2
 80079bc:	2600      	movs	r6, #0
 80079be:	42a6      	cmp	r6, r4
 80079c0:	d105      	bne.n	80079ce <__libc_init_array+0x2e>
 80079c2:	bd70      	pop	{r4, r5, r6, pc}
 80079c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c8:	4798      	blx	r3
 80079ca:	3601      	adds	r6, #1
 80079cc:	e7ee      	b.n	80079ac <__libc_init_array+0xc>
 80079ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d2:	4798      	blx	r3
 80079d4:	3601      	adds	r6, #1
 80079d6:	e7f2      	b.n	80079be <__libc_init_array+0x1e>
 80079d8:	0800b5d0 	.word	0x0800b5d0
 80079dc:	0800b5d0 	.word	0x0800b5d0
 80079e0:	0800b5d0 	.word	0x0800b5d0
 80079e4:	0800b5d4 	.word	0x0800b5d4

080079e8 <__retarget_lock_init_recursive>:
 80079e8:	4770      	bx	lr

080079ea <__retarget_lock_acquire_recursive>:
 80079ea:	4770      	bx	lr

080079ec <__retarget_lock_release_recursive>:
 80079ec:	4770      	bx	lr

080079ee <memcpy>:
 80079ee:	440a      	add	r2, r1
 80079f0:	4291      	cmp	r1, r2
 80079f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80079f6:	d100      	bne.n	80079fa <memcpy+0xc>
 80079f8:	4770      	bx	lr
 80079fa:	b510      	push	{r4, lr}
 80079fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a04:	4291      	cmp	r1, r2
 8007a06:	d1f9      	bne.n	80079fc <memcpy+0xe>
 8007a08:	bd10      	pop	{r4, pc}
	...

08007a0c <nanf>:
 8007a0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007a14 <nanf+0x8>
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	7fc00000 	.word	0x7fc00000

08007a18 <quorem>:
 8007a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	6903      	ldr	r3, [r0, #16]
 8007a1e:	690c      	ldr	r4, [r1, #16]
 8007a20:	42a3      	cmp	r3, r4
 8007a22:	4607      	mov	r7, r0
 8007a24:	db7e      	blt.n	8007b24 <quorem+0x10c>
 8007a26:	3c01      	subs	r4, #1
 8007a28:	f101 0814 	add.w	r8, r1, #20
 8007a2c:	f100 0514 	add.w	r5, r0, #20
 8007a30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a34:	9301      	str	r3, [sp, #4]
 8007a36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	429a      	cmp	r2, r3
 8007a42:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a4e:	d331      	bcc.n	8007ab4 <quorem+0x9c>
 8007a50:	f04f 0e00 	mov.w	lr, #0
 8007a54:	4640      	mov	r0, r8
 8007a56:	46ac      	mov	ip, r5
 8007a58:	46f2      	mov	sl, lr
 8007a5a:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a5e:	b293      	uxth	r3, r2
 8007a60:	fb06 e303 	mla	r3, r6, r3, lr
 8007a64:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a68:	0c1a      	lsrs	r2, r3, #16
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	ebaa 0303 	sub.w	r3, sl, r3
 8007a70:	f8dc a000 	ldr.w	sl, [ip]
 8007a74:	fa13 f38a 	uxtah	r3, r3, sl
 8007a78:	fb06 220e 	mla	r2, r6, lr, r2
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	9b00      	ldr	r3, [sp, #0]
 8007a80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a84:	b292      	uxth	r2, r2
 8007a86:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a8e:	f8bd 3000 	ldrh.w	r3, [sp]
 8007a92:	4581      	cmp	r9, r0
 8007a94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a98:	f84c 3b04 	str.w	r3, [ip], #4
 8007a9c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007aa0:	d2db      	bcs.n	8007a5a <quorem+0x42>
 8007aa2:	f855 300b 	ldr.w	r3, [r5, fp]
 8007aa6:	b92b      	cbnz	r3, 8007ab4 <quorem+0x9c>
 8007aa8:	9b01      	ldr	r3, [sp, #4]
 8007aaa:	3b04      	subs	r3, #4
 8007aac:	429d      	cmp	r5, r3
 8007aae:	461a      	mov	r2, r3
 8007ab0:	d32c      	bcc.n	8007b0c <quorem+0xf4>
 8007ab2:	613c      	str	r4, [r7, #16]
 8007ab4:	4638      	mov	r0, r7
 8007ab6:	f001 f9ef 	bl	8008e98 <__mcmp>
 8007aba:	2800      	cmp	r0, #0
 8007abc:	db22      	blt.n	8007b04 <quorem+0xec>
 8007abe:	3601      	adds	r6, #1
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ac8:	f8d1 c000 	ldr.w	ip, [r1]
 8007acc:	b293      	uxth	r3, r2
 8007ace:	1ac3      	subs	r3, r0, r3
 8007ad0:	0c12      	lsrs	r2, r2, #16
 8007ad2:	fa13 f38c 	uxtah	r3, r3, ip
 8007ad6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007ada:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ae4:	45c1      	cmp	r9, r8
 8007ae6:	f841 3b04 	str.w	r3, [r1], #4
 8007aea:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007aee:	d2e9      	bcs.n	8007ac4 <quorem+0xac>
 8007af0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007af4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007af8:	b922      	cbnz	r2, 8007b04 <quorem+0xec>
 8007afa:	3b04      	subs	r3, #4
 8007afc:	429d      	cmp	r5, r3
 8007afe:	461a      	mov	r2, r3
 8007b00:	d30a      	bcc.n	8007b18 <quorem+0x100>
 8007b02:	613c      	str	r4, [r7, #16]
 8007b04:	4630      	mov	r0, r6
 8007b06:	b003      	add	sp, #12
 8007b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0c:	6812      	ldr	r2, [r2, #0]
 8007b0e:	3b04      	subs	r3, #4
 8007b10:	2a00      	cmp	r2, #0
 8007b12:	d1ce      	bne.n	8007ab2 <quorem+0x9a>
 8007b14:	3c01      	subs	r4, #1
 8007b16:	e7c9      	b.n	8007aac <quorem+0x94>
 8007b18:	6812      	ldr	r2, [r2, #0]
 8007b1a:	3b04      	subs	r3, #4
 8007b1c:	2a00      	cmp	r2, #0
 8007b1e:	d1f0      	bne.n	8007b02 <quorem+0xea>
 8007b20:	3c01      	subs	r4, #1
 8007b22:	e7eb      	b.n	8007afc <quorem+0xe4>
 8007b24:	2000      	movs	r0, #0
 8007b26:	e7ee      	b.n	8007b06 <quorem+0xee>

08007b28 <_dtoa_r>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	ed2d 8b04 	vpush	{d8-d9}
 8007b30:	69c5      	ldr	r5, [r0, #28]
 8007b32:	b093      	sub	sp, #76	; 0x4c
 8007b34:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007b38:	ec57 6b10 	vmov	r6, r7, d0
 8007b3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b40:	9107      	str	r1, [sp, #28]
 8007b42:	4604      	mov	r4, r0
 8007b44:	920a      	str	r2, [sp, #40]	; 0x28
 8007b46:	930d      	str	r3, [sp, #52]	; 0x34
 8007b48:	b975      	cbnz	r5, 8007b68 <_dtoa_r+0x40>
 8007b4a:	2010      	movs	r0, #16
 8007b4c:	f000 fe2a 	bl	80087a4 <malloc>
 8007b50:	4602      	mov	r2, r0
 8007b52:	61e0      	str	r0, [r4, #28]
 8007b54:	b920      	cbnz	r0, 8007b60 <_dtoa_r+0x38>
 8007b56:	4bae      	ldr	r3, [pc, #696]	; (8007e10 <_dtoa_r+0x2e8>)
 8007b58:	21ef      	movs	r1, #239	; 0xef
 8007b5a:	48ae      	ldr	r0, [pc, #696]	; (8007e14 <_dtoa_r+0x2ec>)
 8007b5c:	f002 fe2c 	bl	800a7b8 <__assert_func>
 8007b60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b64:	6005      	str	r5, [r0, #0]
 8007b66:	60c5      	str	r5, [r0, #12]
 8007b68:	69e3      	ldr	r3, [r4, #28]
 8007b6a:	6819      	ldr	r1, [r3, #0]
 8007b6c:	b151      	cbz	r1, 8007b84 <_dtoa_r+0x5c>
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	604a      	str	r2, [r1, #4]
 8007b72:	2301      	movs	r3, #1
 8007b74:	4093      	lsls	r3, r2
 8007b76:	608b      	str	r3, [r1, #8]
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f000 ff07 	bl	800898c <_Bfree>
 8007b7e:	69e3      	ldr	r3, [r4, #28]
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	1e3b      	subs	r3, r7, #0
 8007b86:	bfbb      	ittet	lt
 8007b88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b8c:	9303      	strlt	r3, [sp, #12]
 8007b8e:	2300      	movge	r3, #0
 8007b90:	2201      	movlt	r2, #1
 8007b92:	bfac      	ite	ge
 8007b94:	f8c8 3000 	strge.w	r3, [r8]
 8007b98:	f8c8 2000 	strlt.w	r2, [r8]
 8007b9c:	4b9e      	ldr	r3, [pc, #632]	; (8007e18 <_dtoa_r+0x2f0>)
 8007b9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007ba2:	ea33 0308 	bics.w	r3, r3, r8
 8007ba6:	d11b      	bne.n	8007be0 <_dtoa_r+0xb8>
 8007ba8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007baa:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bae:	6013      	str	r3, [r2, #0]
 8007bb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007bb4:	4333      	orrs	r3, r6
 8007bb6:	f000 8593 	beq.w	80086e0 <_dtoa_r+0xbb8>
 8007bba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bbc:	b963      	cbnz	r3, 8007bd8 <_dtoa_r+0xb0>
 8007bbe:	4b97      	ldr	r3, [pc, #604]	; (8007e1c <_dtoa_r+0x2f4>)
 8007bc0:	e027      	b.n	8007c12 <_dtoa_r+0xea>
 8007bc2:	4b97      	ldr	r3, [pc, #604]	; (8007e20 <_dtoa_r+0x2f8>)
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	9800      	ldr	r0, [sp, #0]
 8007bce:	b013      	add	sp, #76	; 0x4c
 8007bd0:	ecbd 8b04 	vpop	{d8-d9}
 8007bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd8:	4b90      	ldr	r3, [pc, #576]	; (8007e1c <_dtoa_r+0x2f4>)
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	3303      	adds	r3, #3
 8007bde:	e7f3      	b.n	8007bc8 <_dtoa_r+0xa0>
 8007be0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007be4:	2200      	movs	r2, #0
 8007be6:	ec51 0b17 	vmov	r0, r1, d7
 8007bea:	eeb0 8a47 	vmov.f32	s16, s14
 8007bee:	eef0 8a67 	vmov.f32	s17, s15
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f7f8 ff70 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bf8:	4681      	mov	r9, r0
 8007bfa:	b160      	cbz	r0, 8007c16 <_dtoa_r+0xee>
 8007bfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bfe:	2301      	movs	r3, #1
 8007c00:	6013      	str	r3, [r2, #0]
 8007c02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 8568 	beq.w	80086da <_dtoa_r+0xbb2>
 8007c0a:	4b86      	ldr	r3, [pc, #536]	; (8007e24 <_dtoa_r+0x2fc>)
 8007c0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c0e:	6013      	str	r3, [r2, #0]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	e7da      	b.n	8007bcc <_dtoa_r+0xa4>
 8007c16:	aa10      	add	r2, sp, #64	; 0x40
 8007c18:	a911      	add	r1, sp, #68	; 0x44
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	eeb0 0a48 	vmov.f32	s0, s16
 8007c20:	eef0 0a68 	vmov.f32	s1, s17
 8007c24:	f001 fa4e 	bl	80090c4 <__d2b>
 8007c28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007c2c:	4682      	mov	sl, r0
 8007c2e:	2d00      	cmp	r5, #0
 8007c30:	d07f      	beq.n	8007d32 <_dtoa_r+0x20a>
 8007c32:	ee18 3a90 	vmov	r3, s17
 8007c36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c3a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007c3e:	ec51 0b18 	vmov	r0, r1, d8
 8007c42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007c46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007c4e:	4619      	mov	r1, r3
 8007c50:	2200      	movs	r2, #0
 8007c52:	4b75      	ldr	r3, [pc, #468]	; (8007e28 <_dtoa_r+0x300>)
 8007c54:	f7f8 fb20 	bl	8000298 <__aeabi_dsub>
 8007c58:	a367      	add	r3, pc, #412	; (adr r3, 8007df8 <_dtoa_r+0x2d0>)
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5e:	f7f8 fcd3 	bl	8000608 <__aeabi_dmul>
 8007c62:	a367      	add	r3, pc, #412	; (adr r3, 8007e00 <_dtoa_r+0x2d8>)
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	f7f8 fb18 	bl	800029c <__adddf3>
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	4628      	mov	r0, r5
 8007c70:	460f      	mov	r7, r1
 8007c72:	f7f8 fc5f 	bl	8000534 <__aeabi_i2d>
 8007c76:	a364      	add	r3, pc, #400	; (adr r3, 8007e08 <_dtoa_r+0x2e0>)
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	f7f8 fcc4 	bl	8000608 <__aeabi_dmul>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	4630      	mov	r0, r6
 8007c86:	4639      	mov	r1, r7
 8007c88:	f7f8 fb08 	bl	800029c <__adddf3>
 8007c8c:	4606      	mov	r6, r0
 8007c8e:	460f      	mov	r7, r1
 8007c90:	f7f8 ff6a 	bl	8000b68 <__aeabi_d2iz>
 8007c94:	2200      	movs	r2, #0
 8007c96:	4683      	mov	fp, r0
 8007c98:	2300      	movs	r3, #0
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	4639      	mov	r1, r7
 8007c9e:	f7f8 ff25 	bl	8000aec <__aeabi_dcmplt>
 8007ca2:	b148      	cbz	r0, 8007cb8 <_dtoa_r+0x190>
 8007ca4:	4658      	mov	r0, fp
 8007ca6:	f7f8 fc45 	bl	8000534 <__aeabi_i2d>
 8007caa:	4632      	mov	r2, r6
 8007cac:	463b      	mov	r3, r7
 8007cae:	f7f8 ff13 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cb2:	b908      	cbnz	r0, 8007cb8 <_dtoa_r+0x190>
 8007cb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cb8:	f1bb 0f16 	cmp.w	fp, #22
 8007cbc:	d857      	bhi.n	8007d6e <_dtoa_r+0x246>
 8007cbe:	4b5b      	ldr	r3, [pc, #364]	; (8007e2c <_dtoa_r+0x304>)
 8007cc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc8:	ec51 0b18 	vmov	r0, r1, d8
 8007ccc:	f7f8 ff0e 	bl	8000aec <__aeabi_dcmplt>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d04e      	beq.n	8007d72 <_dtoa_r+0x24a>
 8007cd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cd8:	2300      	movs	r3, #0
 8007cda:	930c      	str	r3, [sp, #48]	; 0x30
 8007cdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cde:	1b5b      	subs	r3, r3, r5
 8007ce0:	1e5a      	subs	r2, r3, #1
 8007ce2:	bf45      	ittet	mi
 8007ce4:	f1c3 0301 	rsbmi	r3, r3, #1
 8007ce8:	9305      	strmi	r3, [sp, #20]
 8007cea:	2300      	movpl	r3, #0
 8007cec:	2300      	movmi	r3, #0
 8007cee:	9206      	str	r2, [sp, #24]
 8007cf0:	bf54      	ite	pl
 8007cf2:	9305      	strpl	r3, [sp, #20]
 8007cf4:	9306      	strmi	r3, [sp, #24]
 8007cf6:	f1bb 0f00 	cmp.w	fp, #0
 8007cfa:	db3c      	blt.n	8007d76 <_dtoa_r+0x24e>
 8007cfc:	9b06      	ldr	r3, [sp, #24]
 8007cfe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007d02:	445b      	add	r3, fp
 8007d04:	9306      	str	r3, [sp, #24]
 8007d06:	2300      	movs	r3, #0
 8007d08:	9308      	str	r3, [sp, #32]
 8007d0a:	9b07      	ldr	r3, [sp, #28]
 8007d0c:	2b09      	cmp	r3, #9
 8007d0e:	d868      	bhi.n	8007de2 <_dtoa_r+0x2ba>
 8007d10:	2b05      	cmp	r3, #5
 8007d12:	bfc4      	itt	gt
 8007d14:	3b04      	subgt	r3, #4
 8007d16:	9307      	strgt	r3, [sp, #28]
 8007d18:	9b07      	ldr	r3, [sp, #28]
 8007d1a:	f1a3 0302 	sub.w	r3, r3, #2
 8007d1e:	bfcc      	ite	gt
 8007d20:	2500      	movgt	r5, #0
 8007d22:	2501      	movle	r5, #1
 8007d24:	2b03      	cmp	r3, #3
 8007d26:	f200 8085 	bhi.w	8007e34 <_dtoa_r+0x30c>
 8007d2a:	e8df f003 	tbb	[pc, r3]
 8007d2e:	3b2e      	.short	0x3b2e
 8007d30:	5839      	.short	0x5839
 8007d32:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007d36:	441d      	add	r5, r3
 8007d38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d3c:	2b20      	cmp	r3, #32
 8007d3e:	bfc1      	itttt	gt
 8007d40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d44:	fa08 f803 	lslgt.w	r8, r8, r3
 8007d48:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007d4c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007d50:	bfd6      	itet	le
 8007d52:	f1c3 0320 	rsble	r3, r3, #32
 8007d56:	ea48 0003 	orrgt.w	r0, r8, r3
 8007d5a:	fa06 f003 	lslle.w	r0, r6, r3
 8007d5e:	f7f8 fbd9 	bl	8000514 <__aeabi_ui2d>
 8007d62:	2201      	movs	r2, #1
 8007d64:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007d68:	3d01      	subs	r5, #1
 8007d6a:	920e      	str	r2, [sp, #56]	; 0x38
 8007d6c:	e76f      	b.n	8007c4e <_dtoa_r+0x126>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e7b3      	b.n	8007cda <_dtoa_r+0x1b2>
 8007d72:	900c      	str	r0, [sp, #48]	; 0x30
 8007d74:	e7b2      	b.n	8007cdc <_dtoa_r+0x1b4>
 8007d76:	9b05      	ldr	r3, [sp, #20]
 8007d78:	eba3 030b 	sub.w	r3, r3, fp
 8007d7c:	9305      	str	r3, [sp, #20]
 8007d7e:	f1cb 0300 	rsb	r3, fp, #0
 8007d82:	9308      	str	r3, [sp, #32]
 8007d84:	2300      	movs	r3, #0
 8007d86:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d88:	e7bf      	b.n	8007d0a <_dtoa_r+0x1e2>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	dc52      	bgt.n	8007e3a <_dtoa_r+0x312>
 8007d94:	2301      	movs	r3, #1
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	9304      	str	r3, [sp, #16]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	920a      	str	r2, [sp, #40]	; 0x28
 8007d9e:	e00b      	b.n	8007db8 <_dtoa_r+0x290>
 8007da0:	2301      	movs	r3, #1
 8007da2:	e7f3      	b.n	8007d8c <_dtoa_r+0x264>
 8007da4:	2300      	movs	r3, #0
 8007da6:	9309      	str	r3, [sp, #36]	; 0x24
 8007da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007daa:	445b      	add	r3, fp
 8007dac:	9301      	str	r3, [sp, #4]
 8007dae:	3301      	adds	r3, #1
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	9304      	str	r3, [sp, #16]
 8007db4:	bfb8      	it	lt
 8007db6:	2301      	movlt	r3, #1
 8007db8:	69e0      	ldr	r0, [r4, #28]
 8007dba:	2100      	movs	r1, #0
 8007dbc:	2204      	movs	r2, #4
 8007dbe:	f102 0614 	add.w	r6, r2, #20
 8007dc2:	429e      	cmp	r6, r3
 8007dc4:	d93d      	bls.n	8007e42 <_dtoa_r+0x31a>
 8007dc6:	6041      	str	r1, [r0, #4]
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f000 fd9f 	bl	800890c <_Balloc>
 8007dce:	9000      	str	r0, [sp, #0]
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	d139      	bne.n	8007e48 <_dtoa_r+0x320>
 8007dd4:	4b16      	ldr	r3, [pc, #88]	; (8007e30 <_dtoa_r+0x308>)
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	f240 11af 	movw	r1, #431	; 0x1af
 8007ddc:	e6bd      	b.n	8007b5a <_dtoa_r+0x32>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e7e1      	b.n	8007da6 <_dtoa_r+0x27e>
 8007de2:	2501      	movs	r5, #1
 8007de4:	2300      	movs	r3, #0
 8007de6:	9307      	str	r3, [sp, #28]
 8007de8:	9509      	str	r5, [sp, #36]	; 0x24
 8007dea:	f04f 33ff 	mov.w	r3, #4294967295
 8007dee:	9301      	str	r3, [sp, #4]
 8007df0:	9304      	str	r3, [sp, #16]
 8007df2:	2200      	movs	r2, #0
 8007df4:	2312      	movs	r3, #18
 8007df6:	e7d1      	b.n	8007d9c <_dtoa_r+0x274>
 8007df8:	636f4361 	.word	0x636f4361
 8007dfc:	3fd287a7 	.word	0x3fd287a7
 8007e00:	8b60c8b3 	.word	0x8b60c8b3
 8007e04:	3fc68a28 	.word	0x3fc68a28
 8007e08:	509f79fb 	.word	0x509f79fb
 8007e0c:	3fd34413 	.word	0x3fd34413
 8007e10:	0800b1e6 	.word	0x0800b1e6
 8007e14:	0800b1fd 	.word	0x0800b1fd
 8007e18:	7ff00000 	.word	0x7ff00000
 8007e1c:	0800b1e2 	.word	0x0800b1e2
 8007e20:	0800b1d9 	.word	0x0800b1d9
 8007e24:	0800b1b1 	.word	0x0800b1b1
 8007e28:	3ff80000 	.word	0x3ff80000
 8007e2c:	0800b2e8 	.word	0x0800b2e8
 8007e30:	0800b255 	.word	0x0800b255
 8007e34:	2301      	movs	r3, #1
 8007e36:	9309      	str	r3, [sp, #36]	; 0x24
 8007e38:	e7d7      	b.n	8007dea <_dtoa_r+0x2c2>
 8007e3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e3c:	9301      	str	r3, [sp, #4]
 8007e3e:	9304      	str	r3, [sp, #16]
 8007e40:	e7ba      	b.n	8007db8 <_dtoa_r+0x290>
 8007e42:	3101      	adds	r1, #1
 8007e44:	0052      	lsls	r2, r2, #1
 8007e46:	e7ba      	b.n	8007dbe <_dtoa_r+0x296>
 8007e48:	69e3      	ldr	r3, [r4, #28]
 8007e4a:	9a00      	ldr	r2, [sp, #0]
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	9b04      	ldr	r3, [sp, #16]
 8007e50:	2b0e      	cmp	r3, #14
 8007e52:	f200 80a8 	bhi.w	8007fa6 <_dtoa_r+0x47e>
 8007e56:	2d00      	cmp	r5, #0
 8007e58:	f000 80a5 	beq.w	8007fa6 <_dtoa_r+0x47e>
 8007e5c:	f1bb 0f00 	cmp.w	fp, #0
 8007e60:	dd38      	ble.n	8007ed4 <_dtoa_r+0x3ac>
 8007e62:	4bc0      	ldr	r3, [pc, #768]	; (8008164 <_dtoa_r+0x63c>)
 8007e64:	f00b 020f 	and.w	r2, fp, #15
 8007e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007e70:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007e74:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007e78:	d019      	beq.n	8007eae <_dtoa_r+0x386>
 8007e7a:	4bbb      	ldr	r3, [pc, #748]	; (8008168 <_dtoa_r+0x640>)
 8007e7c:	ec51 0b18 	vmov	r0, r1, d8
 8007e80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e84:	f7f8 fcea 	bl	800085c <__aeabi_ddiv>
 8007e88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e8c:	f008 080f 	and.w	r8, r8, #15
 8007e90:	2503      	movs	r5, #3
 8007e92:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008168 <_dtoa_r+0x640>
 8007e96:	f1b8 0f00 	cmp.w	r8, #0
 8007e9a:	d10a      	bne.n	8007eb2 <_dtoa_r+0x38a>
 8007e9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ea0:	4632      	mov	r2, r6
 8007ea2:	463b      	mov	r3, r7
 8007ea4:	f7f8 fcda 	bl	800085c <__aeabi_ddiv>
 8007ea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eac:	e02b      	b.n	8007f06 <_dtoa_r+0x3de>
 8007eae:	2502      	movs	r5, #2
 8007eb0:	e7ef      	b.n	8007e92 <_dtoa_r+0x36a>
 8007eb2:	f018 0f01 	tst.w	r8, #1
 8007eb6:	d008      	beq.n	8007eca <_dtoa_r+0x3a2>
 8007eb8:	4630      	mov	r0, r6
 8007eba:	4639      	mov	r1, r7
 8007ebc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007ec0:	f7f8 fba2 	bl	8000608 <__aeabi_dmul>
 8007ec4:	3501      	adds	r5, #1
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	460f      	mov	r7, r1
 8007eca:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007ece:	f109 0908 	add.w	r9, r9, #8
 8007ed2:	e7e0      	b.n	8007e96 <_dtoa_r+0x36e>
 8007ed4:	f000 809f 	beq.w	8008016 <_dtoa_r+0x4ee>
 8007ed8:	f1cb 0600 	rsb	r6, fp, #0
 8007edc:	4ba1      	ldr	r3, [pc, #644]	; (8008164 <_dtoa_r+0x63c>)
 8007ede:	4fa2      	ldr	r7, [pc, #648]	; (8008168 <_dtoa_r+0x640>)
 8007ee0:	f006 020f 	and.w	r2, r6, #15
 8007ee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eec:	ec51 0b18 	vmov	r0, r1, d8
 8007ef0:	f7f8 fb8a 	bl	8000608 <__aeabi_dmul>
 8007ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ef8:	1136      	asrs	r6, r6, #4
 8007efa:	2300      	movs	r3, #0
 8007efc:	2502      	movs	r5, #2
 8007efe:	2e00      	cmp	r6, #0
 8007f00:	d17e      	bne.n	8008000 <_dtoa_r+0x4d8>
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1d0      	bne.n	8007ea8 <_dtoa_r+0x380>
 8007f06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f08:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f000 8084 	beq.w	800801a <_dtoa_r+0x4f2>
 8007f12:	4b96      	ldr	r3, [pc, #600]	; (800816c <_dtoa_r+0x644>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	4640      	mov	r0, r8
 8007f18:	4649      	mov	r1, r9
 8007f1a:	f7f8 fde7 	bl	8000aec <__aeabi_dcmplt>
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d07b      	beq.n	800801a <_dtoa_r+0x4f2>
 8007f22:	9b04      	ldr	r3, [sp, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d078      	beq.n	800801a <_dtoa_r+0x4f2>
 8007f28:	9b01      	ldr	r3, [sp, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	dd39      	ble.n	8007fa2 <_dtoa_r+0x47a>
 8007f2e:	4b90      	ldr	r3, [pc, #576]	; (8008170 <_dtoa_r+0x648>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	4640      	mov	r0, r8
 8007f34:	4649      	mov	r1, r9
 8007f36:	f7f8 fb67 	bl	8000608 <__aeabi_dmul>
 8007f3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f3e:	9e01      	ldr	r6, [sp, #4]
 8007f40:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007f44:	3501      	adds	r5, #1
 8007f46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007f4a:	4628      	mov	r0, r5
 8007f4c:	f7f8 faf2 	bl	8000534 <__aeabi_i2d>
 8007f50:	4642      	mov	r2, r8
 8007f52:	464b      	mov	r3, r9
 8007f54:	f7f8 fb58 	bl	8000608 <__aeabi_dmul>
 8007f58:	4b86      	ldr	r3, [pc, #536]	; (8008174 <_dtoa_r+0x64c>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f7f8 f99e 	bl	800029c <__adddf3>
 8007f60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f68:	9303      	str	r3, [sp, #12]
 8007f6a:	2e00      	cmp	r6, #0
 8007f6c:	d158      	bne.n	8008020 <_dtoa_r+0x4f8>
 8007f6e:	4b82      	ldr	r3, [pc, #520]	; (8008178 <_dtoa_r+0x650>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	4640      	mov	r0, r8
 8007f74:	4649      	mov	r1, r9
 8007f76:	f7f8 f98f 	bl	8000298 <__aeabi_dsub>
 8007f7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f7e:	4680      	mov	r8, r0
 8007f80:	4689      	mov	r9, r1
 8007f82:	f7f8 fdd1 	bl	8000b28 <__aeabi_dcmpgt>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	f040 8296 	bne.w	80084b8 <_dtoa_r+0x990>
 8007f8c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007f90:	4640      	mov	r0, r8
 8007f92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f96:	4649      	mov	r1, r9
 8007f98:	f7f8 fda8 	bl	8000aec <__aeabi_dcmplt>
 8007f9c:	2800      	cmp	r0, #0
 8007f9e:	f040 8289 	bne.w	80084b4 <_dtoa_r+0x98c>
 8007fa2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007fa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f2c0 814e 	blt.w	800824a <_dtoa_r+0x722>
 8007fae:	f1bb 0f0e 	cmp.w	fp, #14
 8007fb2:	f300 814a 	bgt.w	800824a <_dtoa_r+0x722>
 8007fb6:	4b6b      	ldr	r3, [pc, #428]	; (8008164 <_dtoa_r+0x63c>)
 8007fb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007fbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f280 80dc 	bge.w	8008180 <_dtoa_r+0x658>
 8007fc8:	9b04      	ldr	r3, [sp, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f300 80d8 	bgt.w	8008180 <_dtoa_r+0x658>
 8007fd0:	f040 826f 	bne.w	80084b2 <_dtoa_r+0x98a>
 8007fd4:	4b68      	ldr	r3, [pc, #416]	; (8008178 <_dtoa_r+0x650>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	4640      	mov	r0, r8
 8007fda:	4649      	mov	r1, r9
 8007fdc:	f7f8 fb14 	bl	8000608 <__aeabi_dmul>
 8007fe0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fe4:	f7f8 fd96 	bl	8000b14 <__aeabi_dcmpge>
 8007fe8:	9e04      	ldr	r6, [sp, #16]
 8007fea:	4637      	mov	r7, r6
 8007fec:	2800      	cmp	r0, #0
 8007fee:	f040 8245 	bne.w	800847c <_dtoa_r+0x954>
 8007ff2:	9d00      	ldr	r5, [sp, #0]
 8007ff4:	2331      	movs	r3, #49	; 0x31
 8007ff6:	f805 3b01 	strb.w	r3, [r5], #1
 8007ffa:	f10b 0b01 	add.w	fp, fp, #1
 8007ffe:	e241      	b.n	8008484 <_dtoa_r+0x95c>
 8008000:	07f2      	lsls	r2, r6, #31
 8008002:	d505      	bpl.n	8008010 <_dtoa_r+0x4e8>
 8008004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008008:	f7f8 fafe 	bl	8000608 <__aeabi_dmul>
 800800c:	3501      	adds	r5, #1
 800800e:	2301      	movs	r3, #1
 8008010:	1076      	asrs	r6, r6, #1
 8008012:	3708      	adds	r7, #8
 8008014:	e773      	b.n	8007efe <_dtoa_r+0x3d6>
 8008016:	2502      	movs	r5, #2
 8008018:	e775      	b.n	8007f06 <_dtoa_r+0x3de>
 800801a:	9e04      	ldr	r6, [sp, #16]
 800801c:	465f      	mov	r7, fp
 800801e:	e792      	b.n	8007f46 <_dtoa_r+0x41e>
 8008020:	9900      	ldr	r1, [sp, #0]
 8008022:	4b50      	ldr	r3, [pc, #320]	; (8008164 <_dtoa_r+0x63c>)
 8008024:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008028:	4431      	add	r1, r6
 800802a:	9102      	str	r1, [sp, #8]
 800802c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800802e:	eeb0 9a47 	vmov.f32	s18, s14
 8008032:	eef0 9a67 	vmov.f32	s19, s15
 8008036:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800803a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800803e:	2900      	cmp	r1, #0
 8008040:	d044      	beq.n	80080cc <_dtoa_r+0x5a4>
 8008042:	494e      	ldr	r1, [pc, #312]	; (800817c <_dtoa_r+0x654>)
 8008044:	2000      	movs	r0, #0
 8008046:	f7f8 fc09 	bl	800085c <__aeabi_ddiv>
 800804a:	ec53 2b19 	vmov	r2, r3, d9
 800804e:	f7f8 f923 	bl	8000298 <__aeabi_dsub>
 8008052:	9d00      	ldr	r5, [sp, #0]
 8008054:	ec41 0b19 	vmov	d9, r0, r1
 8008058:	4649      	mov	r1, r9
 800805a:	4640      	mov	r0, r8
 800805c:	f7f8 fd84 	bl	8000b68 <__aeabi_d2iz>
 8008060:	4606      	mov	r6, r0
 8008062:	f7f8 fa67 	bl	8000534 <__aeabi_i2d>
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	4640      	mov	r0, r8
 800806c:	4649      	mov	r1, r9
 800806e:	f7f8 f913 	bl	8000298 <__aeabi_dsub>
 8008072:	3630      	adds	r6, #48	; 0x30
 8008074:	f805 6b01 	strb.w	r6, [r5], #1
 8008078:	ec53 2b19 	vmov	r2, r3, d9
 800807c:	4680      	mov	r8, r0
 800807e:	4689      	mov	r9, r1
 8008080:	f7f8 fd34 	bl	8000aec <__aeabi_dcmplt>
 8008084:	2800      	cmp	r0, #0
 8008086:	d164      	bne.n	8008152 <_dtoa_r+0x62a>
 8008088:	4642      	mov	r2, r8
 800808a:	464b      	mov	r3, r9
 800808c:	4937      	ldr	r1, [pc, #220]	; (800816c <_dtoa_r+0x644>)
 800808e:	2000      	movs	r0, #0
 8008090:	f7f8 f902 	bl	8000298 <__aeabi_dsub>
 8008094:	ec53 2b19 	vmov	r2, r3, d9
 8008098:	f7f8 fd28 	bl	8000aec <__aeabi_dcmplt>
 800809c:	2800      	cmp	r0, #0
 800809e:	f040 80b6 	bne.w	800820e <_dtoa_r+0x6e6>
 80080a2:	9b02      	ldr	r3, [sp, #8]
 80080a4:	429d      	cmp	r5, r3
 80080a6:	f43f af7c 	beq.w	8007fa2 <_dtoa_r+0x47a>
 80080aa:	4b31      	ldr	r3, [pc, #196]	; (8008170 <_dtoa_r+0x648>)
 80080ac:	ec51 0b19 	vmov	r0, r1, d9
 80080b0:	2200      	movs	r2, #0
 80080b2:	f7f8 faa9 	bl	8000608 <__aeabi_dmul>
 80080b6:	4b2e      	ldr	r3, [pc, #184]	; (8008170 <_dtoa_r+0x648>)
 80080b8:	ec41 0b19 	vmov	d9, r0, r1
 80080bc:	2200      	movs	r2, #0
 80080be:	4640      	mov	r0, r8
 80080c0:	4649      	mov	r1, r9
 80080c2:	f7f8 faa1 	bl	8000608 <__aeabi_dmul>
 80080c6:	4680      	mov	r8, r0
 80080c8:	4689      	mov	r9, r1
 80080ca:	e7c5      	b.n	8008058 <_dtoa_r+0x530>
 80080cc:	ec51 0b17 	vmov	r0, r1, d7
 80080d0:	f7f8 fa9a 	bl	8000608 <__aeabi_dmul>
 80080d4:	9b02      	ldr	r3, [sp, #8]
 80080d6:	9d00      	ldr	r5, [sp, #0]
 80080d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80080da:	ec41 0b19 	vmov	d9, r0, r1
 80080de:	4649      	mov	r1, r9
 80080e0:	4640      	mov	r0, r8
 80080e2:	f7f8 fd41 	bl	8000b68 <__aeabi_d2iz>
 80080e6:	4606      	mov	r6, r0
 80080e8:	f7f8 fa24 	bl	8000534 <__aeabi_i2d>
 80080ec:	3630      	adds	r6, #48	; 0x30
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	4640      	mov	r0, r8
 80080f4:	4649      	mov	r1, r9
 80080f6:	f7f8 f8cf 	bl	8000298 <__aeabi_dsub>
 80080fa:	f805 6b01 	strb.w	r6, [r5], #1
 80080fe:	9b02      	ldr	r3, [sp, #8]
 8008100:	429d      	cmp	r5, r3
 8008102:	4680      	mov	r8, r0
 8008104:	4689      	mov	r9, r1
 8008106:	f04f 0200 	mov.w	r2, #0
 800810a:	d124      	bne.n	8008156 <_dtoa_r+0x62e>
 800810c:	4b1b      	ldr	r3, [pc, #108]	; (800817c <_dtoa_r+0x654>)
 800810e:	ec51 0b19 	vmov	r0, r1, d9
 8008112:	f7f8 f8c3 	bl	800029c <__adddf3>
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	4640      	mov	r0, r8
 800811c:	4649      	mov	r1, r9
 800811e:	f7f8 fd03 	bl	8000b28 <__aeabi_dcmpgt>
 8008122:	2800      	cmp	r0, #0
 8008124:	d173      	bne.n	800820e <_dtoa_r+0x6e6>
 8008126:	ec53 2b19 	vmov	r2, r3, d9
 800812a:	4914      	ldr	r1, [pc, #80]	; (800817c <_dtoa_r+0x654>)
 800812c:	2000      	movs	r0, #0
 800812e:	f7f8 f8b3 	bl	8000298 <__aeabi_dsub>
 8008132:	4602      	mov	r2, r0
 8008134:	460b      	mov	r3, r1
 8008136:	4640      	mov	r0, r8
 8008138:	4649      	mov	r1, r9
 800813a:	f7f8 fcd7 	bl	8000aec <__aeabi_dcmplt>
 800813e:	2800      	cmp	r0, #0
 8008140:	f43f af2f 	beq.w	8007fa2 <_dtoa_r+0x47a>
 8008144:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008146:	1e6b      	subs	r3, r5, #1
 8008148:	930f      	str	r3, [sp, #60]	; 0x3c
 800814a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800814e:	2b30      	cmp	r3, #48	; 0x30
 8008150:	d0f8      	beq.n	8008144 <_dtoa_r+0x61c>
 8008152:	46bb      	mov	fp, r7
 8008154:	e04a      	b.n	80081ec <_dtoa_r+0x6c4>
 8008156:	4b06      	ldr	r3, [pc, #24]	; (8008170 <_dtoa_r+0x648>)
 8008158:	f7f8 fa56 	bl	8000608 <__aeabi_dmul>
 800815c:	4680      	mov	r8, r0
 800815e:	4689      	mov	r9, r1
 8008160:	e7bd      	b.n	80080de <_dtoa_r+0x5b6>
 8008162:	bf00      	nop
 8008164:	0800b2e8 	.word	0x0800b2e8
 8008168:	0800b2c0 	.word	0x0800b2c0
 800816c:	3ff00000 	.word	0x3ff00000
 8008170:	40240000 	.word	0x40240000
 8008174:	401c0000 	.word	0x401c0000
 8008178:	40140000 	.word	0x40140000
 800817c:	3fe00000 	.word	0x3fe00000
 8008180:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008184:	9d00      	ldr	r5, [sp, #0]
 8008186:	4642      	mov	r2, r8
 8008188:	464b      	mov	r3, r9
 800818a:	4630      	mov	r0, r6
 800818c:	4639      	mov	r1, r7
 800818e:	f7f8 fb65 	bl	800085c <__aeabi_ddiv>
 8008192:	f7f8 fce9 	bl	8000b68 <__aeabi_d2iz>
 8008196:	9001      	str	r0, [sp, #4]
 8008198:	f7f8 f9cc 	bl	8000534 <__aeabi_i2d>
 800819c:	4642      	mov	r2, r8
 800819e:	464b      	mov	r3, r9
 80081a0:	f7f8 fa32 	bl	8000608 <__aeabi_dmul>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4630      	mov	r0, r6
 80081aa:	4639      	mov	r1, r7
 80081ac:	f7f8 f874 	bl	8000298 <__aeabi_dsub>
 80081b0:	9e01      	ldr	r6, [sp, #4]
 80081b2:	9f04      	ldr	r7, [sp, #16]
 80081b4:	3630      	adds	r6, #48	; 0x30
 80081b6:	f805 6b01 	strb.w	r6, [r5], #1
 80081ba:	9e00      	ldr	r6, [sp, #0]
 80081bc:	1bae      	subs	r6, r5, r6
 80081be:	42b7      	cmp	r7, r6
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	d134      	bne.n	8008230 <_dtoa_r+0x708>
 80081c6:	f7f8 f869 	bl	800029c <__adddf3>
 80081ca:	4642      	mov	r2, r8
 80081cc:	464b      	mov	r3, r9
 80081ce:	4606      	mov	r6, r0
 80081d0:	460f      	mov	r7, r1
 80081d2:	f7f8 fca9 	bl	8000b28 <__aeabi_dcmpgt>
 80081d6:	b9c8      	cbnz	r0, 800820c <_dtoa_r+0x6e4>
 80081d8:	4642      	mov	r2, r8
 80081da:	464b      	mov	r3, r9
 80081dc:	4630      	mov	r0, r6
 80081de:	4639      	mov	r1, r7
 80081e0:	f7f8 fc7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80081e4:	b110      	cbz	r0, 80081ec <_dtoa_r+0x6c4>
 80081e6:	9b01      	ldr	r3, [sp, #4]
 80081e8:	07db      	lsls	r3, r3, #31
 80081ea:	d40f      	bmi.n	800820c <_dtoa_r+0x6e4>
 80081ec:	4651      	mov	r1, sl
 80081ee:	4620      	mov	r0, r4
 80081f0:	f000 fbcc 	bl	800898c <_Bfree>
 80081f4:	2300      	movs	r3, #0
 80081f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081f8:	702b      	strb	r3, [r5, #0]
 80081fa:	f10b 0301 	add.w	r3, fp, #1
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008202:	2b00      	cmp	r3, #0
 8008204:	f43f ace2 	beq.w	8007bcc <_dtoa_r+0xa4>
 8008208:	601d      	str	r5, [r3, #0]
 800820a:	e4df      	b.n	8007bcc <_dtoa_r+0xa4>
 800820c:	465f      	mov	r7, fp
 800820e:	462b      	mov	r3, r5
 8008210:	461d      	mov	r5, r3
 8008212:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008216:	2a39      	cmp	r2, #57	; 0x39
 8008218:	d106      	bne.n	8008228 <_dtoa_r+0x700>
 800821a:	9a00      	ldr	r2, [sp, #0]
 800821c:	429a      	cmp	r2, r3
 800821e:	d1f7      	bne.n	8008210 <_dtoa_r+0x6e8>
 8008220:	9900      	ldr	r1, [sp, #0]
 8008222:	2230      	movs	r2, #48	; 0x30
 8008224:	3701      	adds	r7, #1
 8008226:	700a      	strb	r2, [r1, #0]
 8008228:	781a      	ldrb	r2, [r3, #0]
 800822a:	3201      	adds	r2, #1
 800822c:	701a      	strb	r2, [r3, #0]
 800822e:	e790      	b.n	8008152 <_dtoa_r+0x62a>
 8008230:	4ba3      	ldr	r3, [pc, #652]	; (80084c0 <_dtoa_r+0x998>)
 8008232:	2200      	movs	r2, #0
 8008234:	f7f8 f9e8 	bl	8000608 <__aeabi_dmul>
 8008238:	2200      	movs	r2, #0
 800823a:	2300      	movs	r3, #0
 800823c:	4606      	mov	r6, r0
 800823e:	460f      	mov	r7, r1
 8008240:	f7f8 fc4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008244:	2800      	cmp	r0, #0
 8008246:	d09e      	beq.n	8008186 <_dtoa_r+0x65e>
 8008248:	e7d0      	b.n	80081ec <_dtoa_r+0x6c4>
 800824a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800824c:	2a00      	cmp	r2, #0
 800824e:	f000 80ca 	beq.w	80083e6 <_dtoa_r+0x8be>
 8008252:	9a07      	ldr	r2, [sp, #28]
 8008254:	2a01      	cmp	r2, #1
 8008256:	f300 80ad 	bgt.w	80083b4 <_dtoa_r+0x88c>
 800825a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800825c:	2a00      	cmp	r2, #0
 800825e:	f000 80a5 	beq.w	80083ac <_dtoa_r+0x884>
 8008262:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008266:	9e08      	ldr	r6, [sp, #32]
 8008268:	9d05      	ldr	r5, [sp, #20]
 800826a:	9a05      	ldr	r2, [sp, #20]
 800826c:	441a      	add	r2, r3
 800826e:	9205      	str	r2, [sp, #20]
 8008270:	9a06      	ldr	r2, [sp, #24]
 8008272:	2101      	movs	r1, #1
 8008274:	441a      	add	r2, r3
 8008276:	4620      	mov	r0, r4
 8008278:	9206      	str	r2, [sp, #24]
 800827a:	f000 fc87 	bl	8008b8c <__i2b>
 800827e:	4607      	mov	r7, r0
 8008280:	b165      	cbz	r5, 800829c <_dtoa_r+0x774>
 8008282:	9b06      	ldr	r3, [sp, #24]
 8008284:	2b00      	cmp	r3, #0
 8008286:	dd09      	ble.n	800829c <_dtoa_r+0x774>
 8008288:	42ab      	cmp	r3, r5
 800828a:	9a05      	ldr	r2, [sp, #20]
 800828c:	bfa8      	it	ge
 800828e:	462b      	movge	r3, r5
 8008290:	1ad2      	subs	r2, r2, r3
 8008292:	9205      	str	r2, [sp, #20]
 8008294:	9a06      	ldr	r2, [sp, #24]
 8008296:	1aed      	subs	r5, r5, r3
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	9306      	str	r3, [sp, #24]
 800829c:	9b08      	ldr	r3, [sp, #32]
 800829e:	b1f3      	cbz	r3, 80082de <_dtoa_r+0x7b6>
 80082a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 80a3 	beq.w	80083ee <_dtoa_r+0x8c6>
 80082a8:	2e00      	cmp	r6, #0
 80082aa:	dd10      	ble.n	80082ce <_dtoa_r+0x7a6>
 80082ac:	4639      	mov	r1, r7
 80082ae:	4632      	mov	r2, r6
 80082b0:	4620      	mov	r0, r4
 80082b2:	f000 fd2b 	bl	8008d0c <__pow5mult>
 80082b6:	4652      	mov	r2, sl
 80082b8:	4601      	mov	r1, r0
 80082ba:	4607      	mov	r7, r0
 80082bc:	4620      	mov	r0, r4
 80082be:	f000 fc7b 	bl	8008bb8 <__multiply>
 80082c2:	4651      	mov	r1, sl
 80082c4:	4680      	mov	r8, r0
 80082c6:	4620      	mov	r0, r4
 80082c8:	f000 fb60 	bl	800898c <_Bfree>
 80082cc:	46c2      	mov	sl, r8
 80082ce:	9b08      	ldr	r3, [sp, #32]
 80082d0:	1b9a      	subs	r2, r3, r6
 80082d2:	d004      	beq.n	80082de <_dtoa_r+0x7b6>
 80082d4:	4651      	mov	r1, sl
 80082d6:	4620      	mov	r0, r4
 80082d8:	f000 fd18 	bl	8008d0c <__pow5mult>
 80082dc:	4682      	mov	sl, r0
 80082de:	2101      	movs	r1, #1
 80082e0:	4620      	mov	r0, r4
 80082e2:	f000 fc53 	bl	8008b8c <__i2b>
 80082e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	4606      	mov	r6, r0
 80082ec:	f340 8081 	ble.w	80083f2 <_dtoa_r+0x8ca>
 80082f0:	461a      	mov	r2, r3
 80082f2:	4601      	mov	r1, r0
 80082f4:	4620      	mov	r0, r4
 80082f6:	f000 fd09 	bl	8008d0c <__pow5mult>
 80082fa:	9b07      	ldr	r3, [sp, #28]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	4606      	mov	r6, r0
 8008300:	dd7a      	ble.n	80083f8 <_dtoa_r+0x8d0>
 8008302:	f04f 0800 	mov.w	r8, #0
 8008306:	6933      	ldr	r3, [r6, #16]
 8008308:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800830c:	6918      	ldr	r0, [r3, #16]
 800830e:	f000 fbef 	bl	8008af0 <__hi0bits>
 8008312:	f1c0 0020 	rsb	r0, r0, #32
 8008316:	9b06      	ldr	r3, [sp, #24]
 8008318:	4418      	add	r0, r3
 800831a:	f010 001f 	ands.w	r0, r0, #31
 800831e:	f000 8094 	beq.w	800844a <_dtoa_r+0x922>
 8008322:	f1c0 0320 	rsb	r3, r0, #32
 8008326:	2b04      	cmp	r3, #4
 8008328:	f340 8085 	ble.w	8008436 <_dtoa_r+0x90e>
 800832c:	9b05      	ldr	r3, [sp, #20]
 800832e:	f1c0 001c 	rsb	r0, r0, #28
 8008332:	4403      	add	r3, r0
 8008334:	9305      	str	r3, [sp, #20]
 8008336:	9b06      	ldr	r3, [sp, #24]
 8008338:	4403      	add	r3, r0
 800833a:	4405      	add	r5, r0
 800833c:	9306      	str	r3, [sp, #24]
 800833e:	9b05      	ldr	r3, [sp, #20]
 8008340:	2b00      	cmp	r3, #0
 8008342:	dd05      	ble.n	8008350 <_dtoa_r+0x828>
 8008344:	4651      	mov	r1, sl
 8008346:	461a      	mov	r2, r3
 8008348:	4620      	mov	r0, r4
 800834a:	f000 fd39 	bl	8008dc0 <__lshift>
 800834e:	4682      	mov	sl, r0
 8008350:	9b06      	ldr	r3, [sp, #24]
 8008352:	2b00      	cmp	r3, #0
 8008354:	dd05      	ble.n	8008362 <_dtoa_r+0x83a>
 8008356:	4631      	mov	r1, r6
 8008358:	461a      	mov	r2, r3
 800835a:	4620      	mov	r0, r4
 800835c:	f000 fd30 	bl	8008dc0 <__lshift>
 8008360:	4606      	mov	r6, r0
 8008362:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008364:	2b00      	cmp	r3, #0
 8008366:	d072      	beq.n	800844e <_dtoa_r+0x926>
 8008368:	4631      	mov	r1, r6
 800836a:	4650      	mov	r0, sl
 800836c:	f000 fd94 	bl	8008e98 <__mcmp>
 8008370:	2800      	cmp	r0, #0
 8008372:	da6c      	bge.n	800844e <_dtoa_r+0x926>
 8008374:	2300      	movs	r3, #0
 8008376:	4651      	mov	r1, sl
 8008378:	220a      	movs	r2, #10
 800837a:	4620      	mov	r0, r4
 800837c:	f000 fb28 	bl	80089d0 <__multadd>
 8008380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008382:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008386:	4682      	mov	sl, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 81b0 	beq.w	80086ee <_dtoa_r+0xbc6>
 800838e:	2300      	movs	r3, #0
 8008390:	4639      	mov	r1, r7
 8008392:	220a      	movs	r2, #10
 8008394:	4620      	mov	r0, r4
 8008396:	f000 fb1b 	bl	80089d0 <__multadd>
 800839a:	9b01      	ldr	r3, [sp, #4]
 800839c:	2b00      	cmp	r3, #0
 800839e:	4607      	mov	r7, r0
 80083a0:	f300 8096 	bgt.w	80084d0 <_dtoa_r+0x9a8>
 80083a4:	9b07      	ldr	r3, [sp, #28]
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	dc59      	bgt.n	800845e <_dtoa_r+0x936>
 80083aa:	e091      	b.n	80084d0 <_dtoa_r+0x9a8>
 80083ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083b2:	e758      	b.n	8008266 <_dtoa_r+0x73e>
 80083b4:	9b04      	ldr	r3, [sp, #16]
 80083b6:	1e5e      	subs	r6, r3, #1
 80083b8:	9b08      	ldr	r3, [sp, #32]
 80083ba:	42b3      	cmp	r3, r6
 80083bc:	bfbf      	itttt	lt
 80083be:	9b08      	ldrlt	r3, [sp, #32]
 80083c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80083c2:	9608      	strlt	r6, [sp, #32]
 80083c4:	1af3      	sublt	r3, r6, r3
 80083c6:	bfb4      	ite	lt
 80083c8:	18d2      	addlt	r2, r2, r3
 80083ca:	1b9e      	subge	r6, r3, r6
 80083cc:	9b04      	ldr	r3, [sp, #16]
 80083ce:	bfbc      	itt	lt
 80083d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80083d2:	2600      	movlt	r6, #0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	bfb7      	itett	lt
 80083d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80083dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80083e0:	1a9d      	sublt	r5, r3, r2
 80083e2:	2300      	movlt	r3, #0
 80083e4:	e741      	b.n	800826a <_dtoa_r+0x742>
 80083e6:	9e08      	ldr	r6, [sp, #32]
 80083e8:	9d05      	ldr	r5, [sp, #20]
 80083ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80083ec:	e748      	b.n	8008280 <_dtoa_r+0x758>
 80083ee:	9a08      	ldr	r2, [sp, #32]
 80083f0:	e770      	b.n	80082d4 <_dtoa_r+0x7ac>
 80083f2:	9b07      	ldr	r3, [sp, #28]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	dc19      	bgt.n	800842c <_dtoa_r+0x904>
 80083f8:	9b02      	ldr	r3, [sp, #8]
 80083fa:	b9bb      	cbnz	r3, 800842c <_dtoa_r+0x904>
 80083fc:	9b03      	ldr	r3, [sp, #12]
 80083fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008402:	b99b      	cbnz	r3, 800842c <_dtoa_r+0x904>
 8008404:	9b03      	ldr	r3, [sp, #12]
 8008406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800840a:	0d1b      	lsrs	r3, r3, #20
 800840c:	051b      	lsls	r3, r3, #20
 800840e:	b183      	cbz	r3, 8008432 <_dtoa_r+0x90a>
 8008410:	9b05      	ldr	r3, [sp, #20]
 8008412:	3301      	adds	r3, #1
 8008414:	9305      	str	r3, [sp, #20]
 8008416:	9b06      	ldr	r3, [sp, #24]
 8008418:	3301      	adds	r3, #1
 800841a:	9306      	str	r3, [sp, #24]
 800841c:	f04f 0801 	mov.w	r8, #1
 8008420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008422:	2b00      	cmp	r3, #0
 8008424:	f47f af6f 	bne.w	8008306 <_dtoa_r+0x7de>
 8008428:	2001      	movs	r0, #1
 800842a:	e774      	b.n	8008316 <_dtoa_r+0x7ee>
 800842c:	f04f 0800 	mov.w	r8, #0
 8008430:	e7f6      	b.n	8008420 <_dtoa_r+0x8f8>
 8008432:	4698      	mov	r8, r3
 8008434:	e7f4      	b.n	8008420 <_dtoa_r+0x8f8>
 8008436:	d082      	beq.n	800833e <_dtoa_r+0x816>
 8008438:	9a05      	ldr	r2, [sp, #20]
 800843a:	331c      	adds	r3, #28
 800843c:	441a      	add	r2, r3
 800843e:	9205      	str	r2, [sp, #20]
 8008440:	9a06      	ldr	r2, [sp, #24]
 8008442:	441a      	add	r2, r3
 8008444:	441d      	add	r5, r3
 8008446:	9206      	str	r2, [sp, #24]
 8008448:	e779      	b.n	800833e <_dtoa_r+0x816>
 800844a:	4603      	mov	r3, r0
 800844c:	e7f4      	b.n	8008438 <_dtoa_r+0x910>
 800844e:	9b04      	ldr	r3, [sp, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	dc37      	bgt.n	80084c4 <_dtoa_r+0x99c>
 8008454:	9b07      	ldr	r3, [sp, #28]
 8008456:	2b02      	cmp	r3, #2
 8008458:	dd34      	ble.n	80084c4 <_dtoa_r+0x99c>
 800845a:	9b04      	ldr	r3, [sp, #16]
 800845c:	9301      	str	r3, [sp, #4]
 800845e:	9b01      	ldr	r3, [sp, #4]
 8008460:	b963      	cbnz	r3, 800847c <_dtoa_r+0x954>
 8008462:	4631      	mov	r1, r6
 8008464:	2205      	movs	r2, #5
 8008466:	4620      	mov	r0, r4
 8008468:	f000 fab2 	bl	80089d0 <__multadd>
 800846c:	4601      	mov	r1, r0
 800846e:	4606      	mov	r6, r0
 8008470:	4650      	mov	r0, sl
 8008472:	f000 fd11 	bl	8008e98 <__mcmp>
 8008476:	2800      	cmp	r0, #0
 8008478:	f73f adbb 	bgt.w	8007ff2 <_dtoa_r+0x4ca>
 800847c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800847e:	9d00      	ldr	r5, [sp, #0]
 8008480:	ea6f 0b03 	mvn.w	fp, r3
 8008484:	f04f 0800 	mov.w	r8, #0
 8008488:	4631      	mov	r1, r6
 800848a:	4620      	mov	r0, r4
 800848c:	f000 fa7e 	bl	800898c <_Bfree>
 8008490:	2f00      	cmp	r7, #0
 8008492:	f43f aeab 	beq.w	80081ec <_dtoa_r+0x6c4>
 8008496:	f1b8 0f00 	cmp.w	r8, #0
 800849a:	d005      	beq.n	80084a8 <_dtoa_r+0x980>
 800849c:	45b8      	cmp	r8, r7
 800849e:	d003      	beq.n	80084a8 <_dtoa_r+0x980>
 80084a0:	4641      	mov	r1, r8
 80084a2:	4620      	mov	r0, r4
 80084a4:	f000 fa72 	bl	800898c <_Bfree>
 80084a8:	4639      	mov	r1, r7
 80084aa:	4620      	mov	r0, r4
 80084ac:	f000 fa6e 	bl	800898c <_Bfree>
 80084b0:	e69c      	b.n	80081ec <_dtoa_r+0x6c4>
 80084b2:	2600      	movs	r6, #0
 80084b4:	4637      	mov	r7, r6
 80084b6:	e7e1      	b.n	800847c <_dtoa_r+0x954>
 80084b8:	46bb      	mov	fp, r7
 80084ba:	4637      	mov	r7, r6
 80084bc:	e599      	b.n	8007ff2 <_dtoa_r+0x4ca>
 80084be:	bf00      	nop
 80084c0:	40240000 	.word	0x40240000
 80084c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f000 80c8 	beq.w	800865c <_dtoa_r+0xb34>
 80084cc:	9b04      	ldr	r3, [sp, #16]
 80084ce:	9301      	str	r3, [sp, #4]
 80084d0:	2d00      	cmp	r5, #0
 80084d2:	dd05      	ble.n	80084e0 <_dtoa_r+0x9b8>
 80084d4:	4639      	mov	r1, r7
 80084d6:	462a      	mov	r2, r5
 80084d8:	4620      	mov	r0, r4
 80084da:	f000 fc71 	bl	8008dc0 <__lshift>
 80084de:	4607      	mov	r7, r0
 80084e0:	f1b8 0f00 	cmp.w	r8, #0
 80084e4:	d05b      	beq.n	800859e <_dtoa_r+0xa76>
 80084e6:	6879      	ldr	r1, [r7, #4]
 80084e8:	4620      	mov	r0, r4
 80084ea:	f000 fa0f 	bl	800890c <_Balloc>
 80084ee:	4605      	mov	r5, r0
 80084f0:	b928      	cbnz	r0, 80084fe <_dtoa_r+0x9d6>
 80084f2:	4b83      	ldr	r3, [pc, #524]	; (8008700 <_dtoa_r+0xbd8>)
 80084f4:	4602      	mov	r2, r0
 80084f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80084fa:	f7ff bb2e 	b.w	8007b5a <_dtoa_r+0x32>
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	3202      	adds	r2, #2
 8008502:	0092      	lsls	r2, r2, #2
 8008504:	f107 010c 	add.w	r1, r7, #12
 8008508:	300c      	adds	r0, #12
 800850a:	f7ff fa70 	bl	80079ee <memcpy>
 800850e:	2201      	movs	r2, #1
 8008510:	4629      	mov	r1, r5
 8008512:	4620      	mov	r0, r4
 8008514:	f000 fc54 	bl	8008dc0 <__lshift>
 8008518:	9b00      	ldr	r3, [sp, #0]
 800851a:	3301      	adds	r3, #1
 800851c:	9304      	str	r3, [sp, #16]
 800851e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008522:	4413      	add	r3, r2
 8008524:	9308      	str	r3, [sp, #32]
 8008526:	9b02      	ldr	r3, [sp, #8]
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	46b8      	mov	r8, r7
 800852e:	9306      	str	r3, [sp, #24]
 8008530:	4607      	mov	r7, r0
 8008532:	9b04      	ldr	r3, [sp, #16]
 8008534:	4631      	mov	r1, r6
 8008536:	3b01      	subs	r3, #1
 8008538:	4650      	mov	r0, sl
 800853a:	9301      	str	r3, [sp, #4]
 800853c:	f7ff fa6c 	bl	8007a18 <quorem>
 8008540:	4641      	mov	r1, r8
 8008542:	9002      	str	r0, [sp, #8]
 8008544:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008548:	4650      	mov	r0, sl
 800854a:	f000 fca5 	bl	8008e98 <__mcmp>
 800854e:	463a      	mov	r2, r7
 8008550:	9005      	str	r0, [sp, #20]
 8008552:	4631      	mov	r1, r6
 8008554:	4620      	mov	r0, r4
 8008556:	f000 fcbb 	bl	8008ed0 <__mdiff>
 800855a:	68c2      	ldr	r2, [r0, #12]
 800855c:	4605      	mov	r5, r0
 800855e:	bb02      	cbnz	r2, 80085a2 <_dtoa_r+0xa7a>
 8008560:	4601      	mov	r1, r0
 8008562:	4650      	mov	r0, sl
 8008564:	f000 fc98 	bl	8008e98 <__mcmp>
 8008568:	4602      	mov	r2, r0
 800856a:	4629      	mov	r1, r5
 800856c:	4620      	mov	r0, r4
 800856e:	9209      	str	r2, [sp, #36]	; 0x24
 8008570:	f000 fa0c 	bl	800898c <_Bfree>
 8008574:	9b07      	ldr	r3, [sp, #28]
 8008576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008578:	9d04      	ldr	r5, [sp, #16]
 800857a:	ea43 0102 	orr.w	r1, r3, r2
 800857e:	9b06      	ldr	r3, [sp, #24]
 8008580:	4319      	orrs	r1, r3
 8008582:	d110      	bne.n	80085a6 <_dtoa_r+0xa7e>
 8008584:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008588:	d029      	beq.n	80085de <_dtoa_r+0xab6>
 800858a:	9b05      	ldr	r3, [sp, #20]
 800858c:	2b00      	cmp	r3, #0
 800858e:	dd02      	ble.n	8008596 <_dtoa_r+0xa6e>
 8008590:	9b02      	ldr	r3, [sp, #8]
 8008592:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008596:	9b01      	ldr	r3, [sp, #4]
 8008598:	f883 9000 	strb.w	r9, [r3]
 800859c:	e774      	b.n	8008488 <_dtoa_r+0x960>
 800859e:	4638      	mov	r0, r7
 80085a0:	e7ba      	b.n	8008518 <_dtoa_r+0x9f0>
 80085a2:	2201      	movs	r2, #1
 80085a4:	e7e1      	b.n	800856a <_dtoa_r+0xa42>
 80085a6:	9b05      	ldr	r3, [sp, #20]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	db04      	blt.n	80085b6 <_dtoa_r+0xa8e>
 80085ac:	9907      	ldr	r1, [sp, #28]
 80085ae:	430b      	orrs	r3, r1
 80085b0:	9906      	ldr	r1, [sp, #24]
 80085b2:	430b      	orrs	r3, r1
 80085b4:	d120      	bne.n	80085f8 <_dtoa_r+0xad0>
 80085b6:	2a00      	cmp	r2, #0
 80085b8:	dded      	ble.n	8008596 <_dtoa_r+0xa6e>
 80085ba:	4651      	mov	r1, sl
 80085bc:	2201      	movs	r2, #1
 80085be:	4620      	mov	r0, r4
 80085c0:	f000 fbfe 	bl	8008dc0 <__lshift>
 80085c4:	4631      	mov	r1, r6
 80085c6:	4682      	mov	sl, r0
 80085c8:	f000 fc66 	bl	8008e98 <__mcmp>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	dc03      	bgt.n	80085d8 <_dtoa_r+0xab0>
 80085d0:	d1e1      	bne.n	8008596 <_dtoa_r+0xa6e>
 80085d2:	f019 0f01 	tst.w	r9, #1
 80085d6:	d0de      	beq.n	8008596 <_dtoa_r+0xa6e>
 80085d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80085dc:	d1d8      	bne.n	8008590 <_dtoa_r+0xa68>
 80085de:	9a01      	ldr	r2, [sp, #4]
 80085e0:	2339      	movs	r3, #57	; 0x39
 80085e2:	7013      	strb	r3, [r2, #0]
 80085e4:	462b      	mov	r3, r5
 80085e6:	461d      	mov	r5, r3
 80085e8:	3b01      	subs	r3, #1
 80085ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80085ee:	2a39      	cmp	r2, #57	; 0x39
 80085f0:	d06c      	beq.n	80086cc <_dtoa_r+0xba4>
 80085f2:	3201      	adds	r2, #1
 80085f4:	701a      	strb	r2, [r3, #0]
 80085f6:	e747      	b.n	8008488 <_dtoa_r+0x960>
 80085f8:	2a00      	cmp	r2, #0
 80085fa:	dd07      	ble.n	800860c <_dtoa_r+0xae4>
 80085fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008600:	d0ed      	beq.n	80085de <_dtoa_r+0xab6>
 8008602:	9a01      	ldr	r2, [sp, #4]
 8008604:	f109 0301 	add.w	r3, r9, #1
 8008608:	7013      	strb	r3, [r2, #0]
 800860a:	e73d      	b.n	8008488 <_dtoa_r+0x960>
 800860c:	9b04      	ldr	r3, [sp, #16]
 800860e:	9a08      	ldr	r2, [sp, #32]
 8008610:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008614:	4293      	cmp	r3, r2
 8008616:	d043      	beq.n	80086a0 <_dtoa_r+0xb78>
 8008618:	4651      	mov	r1, sl
 800861a:	2300      	movs	r3, #0
 800861c:	220a      	movs	r2, #10
 800861e:	4620      	mov	r0, r4
 8008620:	f000 f9d6 	bl	80089d0 <__multadd>
 8008624:	45b8      	cmp	r8, r7
 8008626:	4682      	mov	sl, r0
 8008628:	f04f 0300 	mov.w	r3, #0
 800862c:	f04f 020a 	mov.w	r2, #10
 8008630:	4641      	mov	r1, r8
 8008632:	4620      	mov	r0, r4
 8008634:	d107      	bne.n	8008646 <_dtoa_r+0xb1e>
 8008636:	f000 f9cb 	bl	80089d0 <__multadd>
 800863a:	4680      	mov	r8, r0
 800863c:	4607      	mov	r7, r0
 800863e:	9b04      	ldr	r3, [sp, #16]
 8008640:	3301      	adds	r3, #1
 8008642:	9304      	str	r3, [sp, #16]
 8008644:	e775      	b.n	8008532 <_dtoa_r+0xa0a>
 8008646:	f000 f9c3 	bl	80089d0 <__multadd>
 800864a:	4639      	mov	r1, r7
 800864c:	4680      	mov	r8, r0
 800864e:	2300      	movs	r3, #0
 8008650:	220a      	movs	r2, #10
 8008652:	4620      	mov	r0, r4
 8008654:	f000 f9bc 	bl	80089d0 <__multadd>
 8008658:	4607      	mov	r7, r0
 800865a:	e7f0      	b.n	800863e <_dtoa_r+0xb16>
 800865c:	9b04      	ldr	r3, [sp, #16]
 800865e:	9301      	str	r3, [sp, #4]
 8008660:	9d00      	ldr	r5, [sp, #0]
 8008662:	4631      	mov	r1, r6
 8008664:	4650      	mov	r0, sl
 8008666:	f7ff f9d7 	bl	8007a18 <quorem>
 800866a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800866e:	9b00      	ldr	r3, [sp, #0]
 8008670:	f805 9b01 	strb.w	r9, [r5], #1
 8008674:	1aea      	subs	r2, r5, r3
 8008676:	9b01      	ldr	r3, [sp, #4]
 8008678:	4293      	cmp	r3, r2
 800867a:	dd07      	ble.n	800868c <_dtoa_r+0xb64>
 800867c:	4651      	mov	r1, sl
 800867e:	2300      	movs	r3, #0
 8008680:	220a      	movs	r2, #10
 8008682:	4620      	mov	r0, r4
 8008684:	f000 f9a4 	bl	80089d0 <__multadd>
 8008688:	4682      	mov	sl, r0
 800868a:	e7ea      	b.n	8008662 <_dtoa_r+0xb3a>
 800868c:	9b01      	ldr	r3, [sp, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	bfc8      	it	gt
 8008692:	461d      	movgt	r5, r3
 8008694:	9b00      	ldr	r3, [sp, #0]
 8008696:	bfd8      	it	le
 8008698:	2501      	movle	r5, #1
 800869a:	441d      	add	r5, r3
 800869c:	f04f 0800 	mov.w	r8, #0
 80086a0:	4651      	mov	r1, sl
 80086a2:	2201      	movs	r2, #1
 80086a4:	4620      	mov	r0, r4
 80086a6:	f000 fb8b 	bl	8008dc0 <__lshift>
 80086aa:	4631      	mov	r1, r6
 80086ac:	4682      	mov	sl, r0
 80086ae:	f000 fbf3 	bl	8008e98 <__mcmp>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	dc96      	bgt.n	80085e4 <_dtoa_r+0xabc>
 80086b6:	d102      	bne.n	80086be <_dtoa_r+0xb96>
 80086b8:	f019 0f01 	tst.w	r9, #1
 80086bc:	d192      	bne.n	80085e4 <_dtoa_r+0xabc>
 80086be:	462b      	mov	r3, r5
 80086c0:	461d      	mov	r5, r3
 80086c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086c6:	2a30      	cmp	r2, #48	; 0x30
 80086c8:	d0fa      	beq.n	80086c0 <_dtoa_r+0xb98>
 80086ca:	e6dd      	b.n	8008488 <_dtoa_r+0x960>
 80086cc:	9a00      	ldr	r2, [sp, #0]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d189      	bne.n	80085e6 <_dtoa_r+0xabe>
 80086d2:	f10b 0b01 	add.w	fp, fp, #1
 80086d6:	2331      	movs	r3, #49	; 0x31
 80086d8:	e796      	b.n	8008608 <_dtoa_r+0xae0>
 80086da:	4b0a      	ldr	r3, [pc, #40]	; (8008704 <_dtoa_r+0xbdc>)
 80086dc:	f7ff ba99 	b.w	8007c12 <_dtoa_r+0xea>
 80086e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f47f aa6d 	bne.w	8007bc2 <_dtoa_r+0x9a>
 80086e8:	4b07      	ldr	r3, [pc, #28]	; (8008708 <_dtoa_r+0xbe0>)
 80086ea:	f7ff ba92 	b.w	8007c12 <_dtoa_r+0xea>
 80086ee:	9b01      	ldr	r3, [sp, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	dcb5      	bgt.n	8008660 <_dtoa_r+0xb38>
 80086f4:	9b07      	ldr	r3, [sp, #28]
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	f73f aeb1 	bgt.w	800845e <_dtoa_r+0x936>
 80086fc:	e7b0      	b.n	8008660 <_dtoa_r+0xb38>
 80086fe:	bf00      	nop
 8008700:	0800b255 	.word	0x0800b255
 8008704:	0800b1b0 	.word	0x0800b1b0
 8008708:	0800b1d9 	.word	0x0800b1d9

0800870c <_free_r>:
 800870c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800870e:	2900      	cmp	r1, #0
 8008710:	d044      	beq.n	800879c <_free_r+0x90>
 8008712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008716:	9001      	str	r0, [sp, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	f1a1 0404 	sub.w	r4, r1, #4
 800871e:	bfb8      	it	lt
 8008720:	18e4      	addlt	r4, r4, r3
 8008722:	f000 f8e7 	bl	80088f4 <__malloc_lock>
 8008726:	4a1e      	ldr	r2, [pc, #120]	; (80087a0 <_free_r+0x94>)
 8008728:	9801      	ldr	r0, [sp, #4]
 800872a:	6813      	ldr	r3, [r2, #0]
 800872c:	b933      	cbnz	r3, 800873c <_free_r+0x30>
 800872e:	6063      	str	r3, [r4, #4]
 8008730:	6014      	str	r4, [r2, #0]
 8008732:	b003      	add	sp, #12
 8008734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008738:	f000 b8e2 	b.w	8008900 <__malloc_unlock>
 800873c:	42a3      	cmp	r3, r4
 800873e:	d908      	bls.n	8008752 <_free_r+0x46>
 8008740:	6825      	ldr	r5, [r4, #0]
 8008742:	1961      	adds	r1, r4, r5
 8008744:	428b      	cmp	r3, r1
 8008746:	bf01      	itttt	eq
 8008748:	6819      	ldreq	r1, [r3, #0]
 800874a:	685b      	ldreq	r3, [r3, #4]
 800874c:	1949      	addeq	r1, r1, r5
 800874e:	6021      	streq	r1, [r4, #0]
 8008750:	e7ed      	b.n	800872e <_free_r+0x22>
 8008752:	461a      	mov	r2, r3
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	b10b      	cbz	r3, 800875c <_free_r+0x50>
 8008758:	42a3      	cmp	r3, r4
 800875a:	d9fa      	bls.n	8008752 <_free_r+0x46>
 800875c:	6811      	ldr	r1, [r2, #0]
 800875e:	1855      	adds	r5, r2, r1
 8008760:	42a5      	cmp	r5, r4
 8008762:	d10b      	bne.n	800877c <_free_r+0x70>
 8008764:	6824      	ldr	r4, [r4, #0]
 8008766:	4421      	add	r1, r4
 8008768:	1854      	adds	r4, r2, r1
 800876a:	42a3      	cmp	r3, r4
 800876c:	6011      	str	r1, [r2, #0]
 800876e:	d1e0      	bne.n	8008732 <_free_r+0x26>
 8008770:	681c      	ldr	r4, [r3, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	6053      	str	r3, [r2, #4]
 8008776:	440c      	add	r4, r1
 8008778:	6014      	str	r4, [r2, #0]
 800877a:	e7da      	b.n	8008732 <_free_r+0x26>
 800877c:	d902      	bls.n	8008784 <_free_r+0x78>
 800877e:	230c      	movs	r3, #12
 8008780:	6003      	str	r3, [r0, #0]
 8008782:	e7d6      	b.n	8008732 <_free_r+0x26>
 8008784:	6825      	ldr	r5, [r4, #0]
 8008786:	1961      	adds	r1, r4, r5
 8008788:	428b      	cmp	r3, r1
 800878a:	bf04      	itt	eq
 800878c:	6819      	ldreq	r1, [r3, #0]
 800878e:	685b      	ldreq	r3, [r3, #4]
 8008790:	6063      	str	r3, [r4, #4]
 8008792:	bf04      	itt	eq
 8008794:	1949      	addeq	r1, r1, r5
 8008796:	6021      	streq	r1, [r4, #0]
 8008798:	6054      	str	r4, [r2, #4]
 800879a:	e7ca      	b.n	8008732 <_free_r+0x26>
 800879c:	b003      	add	sp, #12
 800879e:	bd30      	pop	{r4, r5, pc}
 80087a0:	2000442c 	.word	0x2000442c

080087a4 <malloc>:
 80087a4:	4b02      	ldr	r3, [pc, #8]	; (80087b0 <malloc+0xc>)
 80087a6:	4601      	mov	r1, r0
 80087a8:	6818      	ldr	r0, [r3, #0]
 80087aa:	f000 b823 	b.w	80087f4 <_malloc_r>
 80087ae:	bf00      	nop
 80087b0:	20000068 	.word	0x20000068

080087b4 <sbrk_aligned>:
 80087b4:	b570      	push	{r4, r5, r6, lr}
 80087b6:	4e0e      	ldr	r6, [pc, #56]	; (80087f0 <sbrk_aligned+0x3c>)
 80087b8:	460c      	mov	r4, r1
 80087ba:	6831      	ldr	r1, [r6, #0]
 80087bc:	4605      	mov	r5, r0
 80087be:	b911      	cbnz	r1, 80087c6 <sbrk_aligned+0x12>
 80087c0:	f001 ffe2 	bl	800a788 <_sbrk_r>
 80087c4:	6030      	str	r0, [r6, #0]
 80087c6:	4621      	mov	r1, r4
 80087c8:	4628      	mov	r0, r5
 80087ca:	f001 ffdd 	bl	800a788 <_sbrk_r>
 80087ce:	1c43      	adds	r3, r0, #1
 80087d0:	d00a      	beq.n	80087e8 <sbrk_aligned+0x34>
 80087d2:	1cc4      	adds	r4, r0, #3
 80087d4:	f024 0403 	bic.w	r4, r4, #3
 80087d8:	42a0      	cmp	r0, r4
 80087da:	d007      	beq.n	80087ec <sbrk_aligned+0x38>
 80087dc:	1a21      	subs	r1, r4, r0
 80087de:	4628      	mov	r0, r5
 80087e0:	f001 ffd2 	bl	800a788 <_sbrk_r>
 80087e4:	3001      	adds	r0, #1
 80087e6:	d101      	bne.n	80087ec <sbrk_aligned+0x38>
 80087e8:	f04f 34ff 	mov.w	r4, #4294967295
 80087ec:	4620      	mov	r0, r4
 80087ee:	bd70      	pop	{r4, r5, r6, pc}
 80087f0:	20004430 	.word	0x20004430

080087f4 <_malloc_r>:
 80087f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087f8:	1ccd      	adds	r5, r1, #3
 80087fa:	f025 0503 	bic.w	r5, r5, #3
 80087fe:	3508      	adds	r5, #8
 8008800:	2d0c      	cmp	r5, #12
 8008802:	bf38      	it	cc
 8008804:	250c      	movcc	r5, #12
 8008806:	2d00      	cmp	r5, #0
 8008808:	4607      	mov	r7, r0
 800880a:	db01      	blt.n	8008810 <_malloc_r+0x1c>
 800880c:	42a9      	cmp	r1, r5
 800880e:	d905      	bls.n	800881c <_malloc_r+0x28>
 8008810:	230c      	movs	r3, #12
 8008812:	603b      	str	r3, [r7, #0]
 8008814:	2600      	movs	r6, #0
 8008816:	4630      	mov	r0, r6
 8008818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800881c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80088f0 <_malloc_r+0xfc>
 8008820:	f000 f868 	bl	80088f4 <__malloc_lock>
 8008824:	f8d8 3000 	ldr.w	r3, [r8]
 8008828:	461c      	mov	r4, r3
 800882a:	bb5c      	cbnz	r4, 8008884 <_malloc_r+0x90>
 800882c:	4629      	mov	r1, r5
 800882e:	4638      	mov	r0, r7
 8008830:	f7ff ffc0 	bl	80087b4 <sbrk_aligned>
 8008834:	1c43      	adds	r3, r0, #1
 8008836:	4604      	mov	r4, r0
 8008838:	d155      	bne.n	80088e6 <_malloc_r+0xf2>
 800883a:	f8d8 4000 	ldr.w	r4, [r8]
 800883e:	4626      	mov	r6, r4
 8008840:	2e00      	cmp	r6, #0
 8008842:	d145      	bne.n	80088d0 <_malloc_r+0xdc>
 8008844:	2c00      	cmp	r4, #0
 8008846:	d048      	beq.n	80088da <_malloc_r+0xe6>
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	4631      	mov	r1, r6
 800884c:	4638      	mov	r0, r7
 800884e:	eb04 0903 	add.w	r9, r4, r3
 8008852:	f001 ff99 	bl	800a788 <_sbrk_r>
 8008856:	4581      	cmp	r9, r0
 8008858:	d13f      	bne.n	80088da <_malloc_r+0xe6>
 800885a:	6821      	ldr	r1, [r4, #0]
 800885c:	1a6d      	subs	r5, r5, r1
 800885e:	4629      	mov	r1, r5
 8008860:	4638      	mov	r0, r7
 8008862:	f7ff ffa7 	bl	80087b4 <sbrk_aligned>
 8008866:	3001      	adds	r0, #1
 8008868:	d037      	beq.n	80088da <_malloc_r+0xe6>
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	442b      	add	r3, r5
 800886e:	6023      	str	r3, [r4, #0]
 8008870:	f8d8 3000 	ldr.w	r3, [r8]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d038      	beq.n	80088ea <_malloc_r+0xf6>
 8008878:	685a      	ldr	r2, [r3, #4]
 800887a:	42a2      	cmp	r2, r4
 800887c:	d12b      	bne.n	80088d6 <_malloc_r+0xe2>
 800887e:	2200      	movs	r2, #0
 8008880:	605a      	str	r2, [r3, #4]
 8008882:	e00f      	b.n	80088a4 <_malloc_r+0xb0>
 8008884:	6822      	ldr	r2, [r4, #0]
 8008886:	1b52      	subs	r2, r2, r5
 8008888:	d41f      	bmi.n	80088ca <_malloc_r+0xd6>
 800888a:	2a0b      	cmp	r2, #11
 800888c:	d917      	bls.n	80088be <_malloc_r+0xca>
 800888e:	1961      	adds	r1, r4, r5
 8008890:	42a3      	cmp	r3, r4
 8008892:	6025      	str	r5, [r4, #0]
 8008894:	bf18      	it	ne
 8008896:	6059      	strne	r1, [r3, #4]
 8008898:	6863      	ldr	r3, [r4, #4]
 800889a:	bf08      	it	eq
 800889c:	f8c8 1000 	streq.w	r1, [r8]
 80088a0:	5162      	str	r2, [r4, r5]
 80088a2:	604b      	str	r3, [r1, #4]
 80088a4:	4638      	mov	r0, r7
 80088a6:	f104 060b 	add.w	r6, r4, #11
 80088aa:	f000 f829 	bl	8008900 <__malloc_unlock>
 80088ae:	f026 0607 	bic.w	r6, r6, #7
 80088b2:	1d23      	adds	r3, r4, #4
 80088b4:	1af2      	subs	r2, r6, r3
 80088b6:	d0ae      	beq.n	8008816 <_malloc_r+0x22>
 80088b8:	1b9b      	subs	r3, r3, r6
 80088ba:	50a3      	str	r3, [r4, r2]
 80088bc:	e7ab      	b.n	8008816 <_malloc_r+0x22>
 80088be:	42a3      	cmp	r3, r4
 80088c0:	6862      	ldr	r2, [r4, #4]
 80088c2:	d1dd      	bne.n	8008880 <_malloc_r+0x8c>
 80088c4:	f8c8 2000 	str.w	r2, [r8]
 80088c8:	e7ec      	b.n	80088a4 <_malloc_r+0xb0>
 80088ca:	4623      	mov	r3, r4
 80088cc:	6864      	ldr	r4, [r4, #4]
 80088ce:	e7ac      	b.n	800882a <_malloc_r+0x36>
 80088d0:	4634      	mov	r4, r6
 80088d2:	6876      	ldr	r6, [r6, #4]
 80088d4:	e7b4      	b.n	8008840 <_malloc_r+0x4c>
 80088d6:	4613      	mov	r3, r2
 80088d8:	e7cc      	b.n	8008874 <_malloc_r+0x80>
 80088da:	230c      	movs	r3, #12
 80088dc:	603b      	str	r3, [r7, #0]
 80088de:	4638      	mov	r0, r7
 80088e0:	f000 f80e 	bl	8008900 <__malloc_unlock>
 80088e4:	e797      	b.n	8008816 <_malloc_r+0x22>
 80088e6:	6025      	str	r5, [r4, #0]
 80088e8:	e7dc      	b.n	80088a4 <_malloc_r+0xb0>
 80088ea:	605b      	str	r3, [r3, #4]
 80088ec:	deff      	udf	#255	; 0xff
 80088ee:	bf00      	nop
 80088f0:	2000442c 	.word	0x2000442c

080088f4 <__malloc_lock>:
 80088f4:	4801      	ldr	r0, [pc, #4]	; (80088fc <__malloc_lock+0x8>)
 80088f6:	f7ff b878 	b.w	80079ea <__retarget_lock_acquire_recursive>
 80088fa:	bf00      	nop
 80088fc:	20004428 	.word	0x20004428

08008900 <__malloc_unlock>:
 8008900:	4801      	ldr	r0, [pc, #4]	; (8008908 <__malloc_unlock+0x8>)
 8008902:	f7ff b873 	b.w	80079ec <__retarget_lock_release_recursive>
 8008906:	bf00      	nop
 8008908:	20004428 	.word	0x20004428

0800890c <_Balloc>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	69c6      	ldr	r6, [r0, #28]
 8008910:	4604      	mov	r4, r0
 8008912:	460d      	mov	r5, r1
 8008914:	b976      	cbnz	r6, 8008934 <_Balloc+0x28>
 8008916:	2010      	movs	r0, #16
 8008918:	f7ff ff44 	bl	80087a4 <malloc>
 800891c:	4602      	mov	r2, r0
 800891e:	61e0      	str	r0, [r4, #28]
 8008920:	b920      	cbnz	r0, 800892c <_Balloc+0x20>
 8008922:	4b18      	ldr	r3, [pc, #96]	; (8008984 <_Balloc+0x78>)
 8008924:	4818      	ldr	r0, [pc, #96]	; (8008988 <_Balloc+0x7c>)
 8008926:	216b      	movs	r1, #107	; 0x6b
 8008928:	f001 ff46 	bl	800a7b8 <__assert_func>
 800892c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008930:	6006      	str	r6, [r0, #0]
 8008932:	60c6      	str	r6, [r0, #12]
 8008934:	69e6      	ldr	r6, [r4, #28]
 8008936:	68f3      	ldr	r3, [r6, #12]
 8008938:	b183      	cbz	r3, 800895c <_Balloc+0x50>
 800893a:	69e3      	ldr	r3, [r4, #28]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008942:	b9b8      	cbnz	r0, 8008974 <_Balloc+0x68>
 8008944:	2101      	movs	r1, #1
 8008946:	fa01 f605 	lsl.w	r6, r1, r5
 800894a:	1d72      	adds	r2, r6, #5
 800894c:	0092      	lsls	r2, r2, #2
 800894e:	4620      	mov	r0, r4
 8008950:	f001 ff50 	bl	800a7f4 <_calloc_r>
 8008954:	b160      	cbz	r0, 8008970 <_Balloc+0x64>
 8008956:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800895a:	e00e      	b.n	800897a <_Balloc+0x6e>
 800895c:	2221      	movs	r2, #33	; 0x21
 800895e:	2104      	movs	r1, #4
 8008960:	4620      	mov	r0, r4
 8008962:	f001 ff47 	bl	800a7f4 <_calloc_r>
 8008966:	69e3      	ldr	r3, [r4, #28]
 8008968:	60f0      	str	r0, [r6, #12]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d1e4      	bne.n	800893a <_Balloc+0x2e>
 8008970:	2000      	movs	r0, #0
 8008972:	bd70      	pop	{r4, r5, r6, pc}
 8008974:	6802      	ldr	r2, [r0, #0]
 8008976:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800897a:	2300      	movs	r3, #0
 800897c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008980:	e7f7      	b.n	8008972 <_Balloc+0x66>
 8008982:	bf00      	nop
 8008984:	0800b1e6 	.word	0x0800b1e6
 8008988:	0800b266 	.word	0x0800b266

0800898c <_Bfree>:
 800898c:	b570      	push	{r4, r5, r6, lr}
 800898e:	69c6      	ldr	r6, [r0, #28]
 8008990:	4605      	mov	r5, r0
 8008992:	460c      	mov	r4, r1
 8008994:	b976      	cbnz	r6, 80089b4 <_Bfree+0x28>
 8008996:	2010      	movs	r0, #16
 8008998:	f7ff ff04 	bl	80087a4 <malloc>
 800899c:	4602      	mov	r2, r0
 800899e:	61e8      	str	r0, [r5, #28]
 80089a0:	b920      	cbnz	r0, 80089ac <_Bfree+0x20>
 80089a2:	4b09      	ldr	r3, [pc, #36]	; (80089c8 <_Bfree+0x3c>)
 80089a4:	4809      	ldr	r0, [pc, #36]	; (80089cc <_Bfree+0x40>)
 80089a6:	218f      	movs	r1, #143	; 0x8f
 80089a8:	f001 ff06 	bl	800a7b8 <__assert_func>
 80089ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089b0:	6006      	str	r6, [r0, #0]
 80089b2:	60c6      	str	r6, [r0, #12]
 80089b4:	b13c      	cbz	r4, 80089c6 <_Bfree+0x3a>
 80089b6:	69eb      	ldr	r3, [r5, #28]
 80089b8:	6862      	ldr	r2, [r4, #4]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089c0:	6021      	str	r1, [r4, #0]
 80089c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	0800b1e6 	.word	0x0800b1e6
 80089cc:	0800b266 	.word	0x0800b266

080089d0 <__multadd>:
 80089d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d4:	690d      	ldr	r5, [r1, #16]
 80089d6:	4607      	mov	r7, r0
 80089d8:	460c      	mov	r4, r1
 80089da:	461e      	mov	r6, r3
 80089dc:	f101 0c14 	add.w	ip, r1, #20
 80089e0:	2000      	movs	r0, #0
 80089e2:	f8dc 3000 	ldr.w	r3, [ip]
 80089e6:	b299      	uxth	r1, r3
 80089e8:	fb02 6101 	mla	r1, r2, r1, r6
 80089ec:	0c1e      	lsrs	r6, r3, #16
 80089ee:	0c0b      	lsrs	r3, r1, #16
 80089f0:	fb02 3306 	mla	r3, r2, r6, r3
 80089f4:	b289      	uxth	r1, r1
 80089f6:	3001      	adds	r0, #1
 80089f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80089fc:	4285      	cmp	r5, r0
 80089fe:	f84c 1b04 	str.w	r1, [ip], #4
 8008a02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a06:	dcec      	bgt.n	80089e2 <__multadd+0x12>
 8008a08:	b30e      	cbz	r6, 8008a4e <__multadd+0x7e>
 8008a0a:	68a3      	ldr	r3, [r4, #8]
 8008a0c:	42ab      	cmp	r3, r5
 8008a0e:	dc19      	bgt.n	8008a44 <__multadd+0x74>
 8008a10:	6861      	ldr	r1, [r4, #4]
 8008a12:	4638      	mov	r0, r7
 8008a14:	3101      	adds	r1, #1
 8008a16:	f7ff ff79 	bl	800890c <_Balloc>
 8008a1a:	4680      	mov	r8, r0
 8008a1c:	b928      	cbnz	r0, 8008a2a <__multadd+0x5a>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	4b0c      	ldr	r3, [pc, #48]	; (8008a54 <__multadd+0x84>)
 8008a22:	480d      	ldr	r0, [pc, #52]	; (8008a58 <__multadd+0x88>)
 8008a24:	21ba      	movs	r1, #186	; 0xba
 8008a26:	f001 fec7 	bl	800a7b8 <__assert_func>
 8008a2a:	6922      	ldr	r2, [r4, #16]
 8008a2c:	3202      	adds	r2, #2
 8008a2e:	f104 010c 	add.w	r1, r4, #12
 8008a32:	0092      	lsls	r2, r2, #2
 8008a34:	300c      	adds	r0, #12
 8008a36:	f7fe ffda 	bl	80079ee <memcpy>
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	f7ff ffa5 	bl	800898c <_Bfree>
 8008a42:	4644      	mov	r4, r8
 8008a44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a48:	3501      	adds	r5, #1
 8008a4a:	615e      	str	r6, [r3, #20]
 8008a4c:	6125      	str	r5, [r4, #16]
 8008a4e:	4620      	mov	r0, r4
 8008a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a54:	0800b255 	.word	0x0800b255
 8008a58:	0800b266 	.word	0x0800b266

08008a5c <__s2b>:
 8008a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a60:	460c      	mov	r4, r1
 8008a62:	4615      	mov	r5, r2
 8008a64:	461f      	mov	r7, r3
 8008a66:	2209      	movs	r2, #9
 8008a68:	3308      	adds	r3, #8
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a70:	2100      	movs	r1, #0
 8008a72:	2201      	movs	r2, #1
 8008a74:	429a      	cmp	r2, r3
 8008a76:	db09      	blt.n	8008a8c <__s2b+0x30>
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f7ff ff47 	bl	800890c <_Balloc>
 8008a7e:	b940      	cbnz	r0, 8008a92 <__s2b+0x36>
 8008a80:	4602      	mov	r2, r0
 8008a82:	4b19      	ldr	r3, [pc, #100]	; (8008ae8 <__s2b+0x8c>)
 8008a84:	4819      	ldr	r0, [pc, #100]	; (8008aec <__s2b+0x90>)
 8008a86:	21d3      	movs	r1, #211	; 0xd3
 8008a88:	f001 fe96 	bl	800a7b8 <__assert_func>
 8008a8c:	0052      	lsls	r2, r2, #1
 8008a8e:	3101      	adds	r1, #1
 8008a90:	e7f0      	b.n	8008a74 <__s2b+0x18>
 8008a92:	9b08      	ldr	r3, [sp, #32]
 8008a94:	6143      	str	r3, [r0, #20]
 8008a96:	2d09      	cmp	r5, #9
 8008a98:	f04f 0301 	mov.w	r3, #1
 8008a9c:	6103      	str	r3, [r0, #16]
 8008a9e:	dd16      	ble.n	8008ace <__s2b+0x72>
 8008aa0:	f104 0909 	add.w	r9, r4, #9
 8008aa4:	46c8      	mov	r8, r9
 8008aa6:	442c      	add	r4, r5
 8008aa8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008aac:	4601      	mov	r1, r0
 8008aae:	3b30      	subs	r3, #48	; 0x30
 8008ab0:	220a      	movs	r2, #10
 8008ab2:	4630      	mov	r0, r6
 8008ab4:	f7ff ff8c 	bl	80089d0 <__multadd>
 8008ab8:	45a0      	cmp	r8, r4
 8008aba:	d1f5      	bne.n	8008aa8 <__s2b+0x4c>
 8008abc:	f1a5 0408 	sub.w	r4, r5, #8
 8008ac0:	444c      	add	r4, r9
 8008ac2:	1b2d      	subs	r5, r5, r4
 8008ac4:	1963      	adds	r3, r4, r5
 8008ac6:	42bb      	cmp	r3, r7
 8008ac8:	db04      	blt.n	8008ad4 <__s2b+0x78>
 8008aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ace:	340a      	adds	r4, #10
 8008ad0:	2509      	movs	r5, #9
 8008ad2:	e7f6      	b.n	8008ac2 <__s2b+0x66>
 8008ad4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ad8:	4601      	mov	r1, r0
 8008ada:	3b30      	subs	r3, #48	; 0x30
 8008adc:	220a      	movs	r2, #10
 8008ade:	4630      	mov	r0, r6
 8008ae0:	f7ff ff76 	bl	80089d0 <__multadd>
 8008ae4:	e7ee      	b.n	8008ac4 <__s2b+0x68>
 8008ae6:	bf00      	nop
 8008ae8:	0800b255 	.word	0x0800b255
 8008aec:	0800b266 	.word	0x0800b266

08008af0 <__hi0bits>:
 8008af0:	0c03      	lsrs	r3, r0, #16
 8008af2:	041b      	lsls	r3, r3, #16
 8008af4:	b9d3      	cbnz	r3, 8008b2c <__hi0bits+0x3c>
 8008af6:	0400      	lsls	r0, r0, #16
 8008af8:	2310      	movs	r3, #16
 8008afa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008afe:	bf04      	itt	eq
 8008b00:	0200      	lsleq	r0, r0, #8
 8008b02:	3308      	addeq	r3, #8
 8008b04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b08:	bf04      	itt	eq
 8008b0a:	0100      	lsleq	r0, r0, #4
 8008b0c:	3304      	addeq	r3, #4
 8008b0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008b12:	bf04      	itt	eq
 8008b14:	0080      	lsleq	r0, r0, #2
 8008b16:	3302      	addeq	r3, #2
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	db05      	blt.n	8008b28 <__hi0bits+0x38>
 8008b1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b20:	f103 0301 	add.w	r3, r3, #1
 8008b24:	bf08      	it	eq
 8008b26:	2320      	moveq	r3, #32
 8008b28:	4618      	mov	r0, r3
 8008b2a:	4770      	bx	lr
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	e7e4      	b.n	8008afa <__hi0bits+0xa>

08008b30 <__lo0bits>:
 8008b30:	6803      	ldr	r3, [r0, #0]
 8008b32:	f013 0207 	ands.w	r2, r3, #7
 8008b36:	d00c      	beq.n	8008b52 <__lo0bits+0x22>
 8008b38:	07d9      	lsls	r1, r3, #31
 8008b3a:	d422      	bmi.n	8008b82 <__lo0bits+0x52>
 8008b3c:	079a      	lsls	r2, r3, #30
 8008b3e:	bf49      	itett	mi
 8008b40:	085b      	lsrmi	r3, r3, #1
 8008b42:	089b      	lsrpl	r3, r3, #2
 8008b44:	6003      	strmi	r3, [r0, #0]
 8008b46:	2201      	movmi	r2, #1
 8008b48:	bf5c      	itt	pl
 8008b4a:	6003      	strpl	r3, [r0, #0]
 8008b4c:	2202      	movpl	r2, #2
 8008b4e:	4610      	mov	r0, r2
 8008b50:	4770      	bx	lr
 8008b52:	b299      	uxth	r1, r3
 8008b54:	b909      	cbnz	r1, 8008b5a <__lo0bits+0x2a>
 8008b56:	0c1b      	lsrs	r3, r3, #16
 8008b58:	2210      	movs	r2, #16
 8008b5a:	b2d9      	uxtb	r1, r3
 8008b5c:	b909      	cbnz	r1, 8008b62 <__lo0bits+0x32>
 8008b5e:	3208      	adds	r2, #8
 8008b60:	0a1b      	lsrs	r3, r3, #8
 8008b62:	0719      	lsls	r1, r3, #28
 8008b64:	bf04      	itt	eq
 8008b66:	091b      	lsreq	r3, r3, #4
 8008b68:	3204      	addeq	r2, #4
 8008b6a:	0799      	lsls	r1, r3, #30
 8008b6c:	bf04      	itt	eq
 8008b6e:	089b      	lsreq	r3, r3, #2
 8008b70:	3202      	addeq	r2, #2
 8008b72:	07d9      	lsls	r1, r3, #31
 8008b74:	d403      	bmi.n	8008b7e <__lo0bits+0x4e>
 8008b76:	085b      	lsrs	r3, r3, #1
 8008b78:	f102 0201 	add.w	r2, r2, #1
 8008b7c:	d003      	beq.n	8008b86 <__lo0bits+0x56>
 8008b7e:	6003      	str	r3, [r0, #0]
 8008b80:	e7e5      	b.n	8008b4e <__lo0bits+0x1e>
 8008b82:	2200      	movs	r2, #0
 8008b84:	e7e3      	b.n	8008b4e <__lo0bits+0x1e>
 8008b86:	2220      	movs	r2, #32
 8008b88:	e7e1      	b.n	8008b4e <__lo0bits+0x1e>
	...

08008b8c <__i2b>:
 8008b8c:	b510      	push	{r4, lr}
 8008b8e:	460c      	mov	r4, r1
 8008b90:	2101      	movs	r1, #1
 8008b92:	f7ff febb 	bl	800890c <_Balloc>
 8008b96:	4602      	mov	r2, r0
 8008b98:	b928      	cbnz	r0, 8008ba6 <__i2b+0x1a>
 8008b9a:	4b05      	ldr	r3, [pc, #20]	; (8008bb0 <__i2b+0x24>)
 8008b9c:	4805      	ldr	r0, [pc, #20]	; (8008bb4 <__i2b+0x28>)
 8008b9e:	f240 1145 	movw	r1, #325	; 0x145
 8008ba2:	f001 fe09 	bl	800a7b8 <__assert_func>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	6144      	str	r4, [r0, #20]
 8008baa:	6103      	str	r3, [r0, #16]
 8008bac:	bd10      	pop	{r4, pc}
 8008bae:	bf00      	nop
 8008bb0:	0800b255 	.word	0x0800b255
 8008bb4:	0800b266 	.word	0x0800b266

08008bb8 <__multiply>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	4691      	mov	r9, r2
 8008bbe:	690a      	ldr	r2, [r1, #16]
 8008bc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	bfb8      	it	lt
 8008bc8:	460b      	movlt	r3, r1
 8008bca:	460c      	mov	r4, r1
 8008bcc:	bfbc      	itt	lt
 8008bce:	464c      	movlt	r4, r9
 8008bd0:	4699      	movlt	r9, r3
 8008bd2:	6927      	ldr	r7, [r4, #16]
 8008bd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008bd8:	68a3      	ldr	r3, [r4, #8]
 8008bda:	6861      	ldr	r1, [r4, #4]
 8008bdc:	eb07 060a 	add.w	r6, r7, sl
 8008be0:	42b3      	cmp	r3, r6
 8008be2:	b085      	sub	sp, #20
 8008be4:	bfb8      	it	lt
 8008be6:	3101      	addlt	r1, #1
 8008be8:	f7ff fe90 	bl	800890c <_Balloc>
 8008bec:	b930      	cbnz	r0, 8008bfc <__multiply+0x44>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	4b44      	ldr	r3, [pc, #272]	; (8008d04 <__multiply+0x14c>)
 8008bf2:	4845      	ldr	r0, [pc, #276]	; (8008d08 <__multiply+0x150>)
 8008bf4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008bf8:	f001 fdde 	bl	800a7b8 <__assert_func>
 8008bfc:	f100 0514 	add.w	r5, r0, #20
 8008c00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c04:	462b      	mov	r3, r5
 8008c06:	2200      	movs	r2, #0
 8008c08:	4543      	cmp	r3, r8
 8008c0a:	d321      	bcc.n	8008c50 <__multiply+0x98>
 8008c0c:	f104 0314 	add.w	r3, r4, #20
 8008c10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008c14:	f109 0314 	add.w	r3, r9, #20
 8008c18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008c1c:	9202      	str	r2, [sp, #8]
 8008c1e:	1b3a      	subs	r2, r7, r4
 8008c20:	3a15      	subs	r2, #21
 8008c22:	f022 0203 	bic.w	r2, r2, #3
 8008c26:	3204      	adds	r2, #4
 8008c28:	f104 0115 	add.w	r1, r4, #21
 8008c2c:	428f      	cmp	r7, r1
 8008c2e:	bf38      	it	cc
 8008c30:	2204      	movcc	r2, #4
 8008c32:	9201      	str	r2, [sp, #4]
 8008c34:	9a02      	ldr	r2, [sp, #8]
 8008c36:	9303      	str	r3, [sp, #12]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d80c      	bhi.n	8008c56 <__multiply+0x9e>
 8008c3c:	2e00      	cmp	r6, #0
 8008c3e:	dd03      	ble.n	8008c48 <__multiply+0x90>
 8008c40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d05b      	beq.n	8008d00 <__multiply+0x148>
 8008c48:	6106      	str	r6, [r0, #16]
 8008c4a:	b005      	add	sp, #20
 8008c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c50:	f843 2b04 	str.w	r2, [r3], #4
 8008c54:	e7d8      	b.n	8008c08 <__multiply+0x50>
 8008c56:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c5a:	f1ba 0f00 	cmp.w	sl, #0
 8008c5e:	d024      	beq.n	8008caa <__multiply+0xf2>
 8008c60:	f104 0e14 	add.w	lr, r4, #20
 8008c64:	46a9      	mov	r9, r5
 8008c66:	f04f 0c00 	mov.w	ip, #0
 8008c6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c6e:	f8d9 1000 	ldr.w	r1, [r9]
 8008c72:	fa1f fb82 	uxth.w	fp, r2
 8008c76:	b289      	uxth	r1, r1
 8008c78:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c80:	f8d9 2000 	ldr.w	r2, [r9]
 8008c84:	4461      	add	r1, ip
 8008c86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c8a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c92:	b289      	uxth	r1, r1
 8008c94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c98:	4577      	cmp	r7, lr
 8008c9a:	f849 1b04 	str.w	r1, [r9], #4
 8008c9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ca2:	d8e2      	bhi.n	8008c6a <__multiply+0xb2>
 8008ca4:	9a01      	ldr	r2, [sp, #4]
 8008ca6:	f845 c002 	str.w	ip, [r5, r2]
 8008caa:	9a03      	ldr	r2, [sp, #12]
 8008cac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	f1b9 0f00 	cmp.w	r9, #0
 8008cb6:	d021      	beq.n	8008cfc <__multiply+0x144>
 8008cb8:	6829      	ldr	r1, [r5, #0]
 8008cba:	f104 0c14 	add.w	ip, r4, #20
 8008cbe:	46ae      	mov	lr, r5
 8008cc0:	f04f 0a00 	mov.w	sl, #0
 8008cc4:	f8bc b000 	ldrh.w	fp, [ip]
 8008cc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ccc:	fb09 220b 	mla	r2, r9, fp, r2
 8008cd0:	4452      	add	r2, sl
 8008cd2:	b289      	uxth	r1, r1
 8008cd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008cd8:	f84e 1b04 	str.w	r1, [lr], #4
 8008cdc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008ce0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008ce4:	f8be 1000 	ldrh.w	r1, [lr]
 8008ce8:	fb09 110a 	mla	r1, r9, sl, r1
 8008cec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008cf0:	4567      	cmp	r7, ip
 8008cf2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008cf6:	d8e5      	bhi.n	8008cc4 <__multiply+0x10c>
 8008cf8:	9a01      	ldr	r2, [sp, #4]
 8008cfa:	50a9      	str	r1, [r5, r2]
 8008cfc:	3504      	adds	r5, #4
 8008cfe:	e799      	b.n	8008c34 <__multiply+0x7c>
 8008d00:	3e01      	subs	r6, #1
 8008d02:	e79b      	b.n	8008c3c <__multiply+0x84>
 8008d04:	0800b255 	.word	0x0800b255
 8008d08:	0800b266 	.word	0x0800b266

08008d0c <__pow5mult>:
 8008d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d10:	4615      	mov	r5, r2
 8008d12:	f012 0203 	ands.w	r2, r2, #3
 8008d16:	4606      	mov	r6, r0
 8008d18:	460f      	mov	r7, r1
 8008d1a:	d007      	beq.n	8008d2c <__pow5mult+0x20>
 8008d1c:	4c25      	ldr	r4, [pc, #148]	; (8008db4 <__pow5mult+0xa8>)
 8008d1e:	3a01      	subs	r2, #1
 8008d20:	2300      	movs	r3, #0
 8008d22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d26:	f7ff fe53 	bl	80089d0 <__multadd>
 8008d2a:	4607      	mov	r7, r0
 8008d2c:	10ad      	asrs	r5, r5, #2
 8008d2e:	d03d      	beq.n	8008dac <__pow5mult+0xa0>
 8008d30:	69f4      	ldr	r4, [r6, #28]
 8008d32:	b97c      	cbnz	r4, 8008d54 <__pow5mult+0x48>
 8008d34:	2010      	movs	r0, #16
 8008d36:	f7ff fd35 	bl	80087a4 <malloc>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	61f0      	str	r0, [r6, #28]
 8008d3e:	b928      	cbnz	r0, 8008d4c <__pow5mult+0x40>
 8008d40:	4b1d      	ldr	r3, [pc, #116]	; (8008db8 <__pow5mult+0xac>)
 8008d42:	481e      	ldr	r0, [pc, #120]	; (8008dbc <__pow5mult+0xb0>)
 8008d44:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008d48:	f001 fd36 	bl	800a7b8 <__assert_func>
 8008d4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d50:	6004      	str	r4, [r0, #0]
 8008d52:	60c4      	str	r4, [r0, #12]
 8008d54:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008d58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d5c:	b94c      	cbnz	r4, 8008d72 <__pow5mult+0x66>
 8008d5e:	f240 2171 	movw	r1, #625	; 0x271
 8008d62:	4630      	mov	r0, r6
 8008d64:	f7ff ff12 	bl	8008b8c <__i2b>
 8008d68:	2300      	movs	r3, #0
 8008d6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d6e:	4604      	mov	r4, r0
 8008d70:	6003      	str	r3, [r0, #0]
 8008d72:	f04f 0900 	mov.w	r9, #0
 8008d76:	07eb      	lsls	r3, r5, #31
 8008d78:	d50a      	bpl.n	8008d90 <__pow5mult+0x84>
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	4622      	mov	r2, r4
 8008d7e:	4630      	mov	r0, r6
 8008d80:	f7ff ff1a 	bl	8008bb8 <__multiply>
 8008d84:	4639      	mov	r1, r7
 8008d86:	4680      	mov	r8, r0
 8008d88:	4630      	mov	r0, r6
 8008d8a:	f7ff fdff 	bl	800898c <_Bfree>
 8008d8e:	4647      	mov	r7, r8
 8008d90:	106d      	asrs	r5, r5, #1
 8008d92:	d00b      	beq.n	8008dac <__pow5mult+0xa0>
 8008d94:	6820      	ldr	r0, [r4, #0]
 8008d96:	b938      	cbnz	r0, 8008da8 <__pow5mult+0x9c>
 8008d98:	4622      	mov	r2, r4
 8008d9a:	4621      	mov	r1, r4
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	f7ff ff0b 	bl	8008bb8 <__multiply>
 8008da2:	6020      	str	r0, [r4, #0]
 8008da4:	f8c0 9000 	str.w	r9, [r0]
 8008da8:	4604      	mov	r4, r0
 8008daa:	e7e4      	b.n	8008d76 <__pow5mult+0x6a>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008db2:	bf00      	nop
 8008db4:	0800b3b0 	.word	0x0800b3b0
 8008db8:	0800b1e6 	.word	0x0800b1e6
 8008dbc:	0800b266 	.word	0x0800b266

08008dc0 <__lshift>:
 8008dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	6849      	ldr	r1, [r1, #4]
 8008dc8:	6923      	ldr	r3, [r4, #16]
 8008dca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008dce:	68a3      	ldr	r3, [r4, #8]
 8008dd0:	4607      	mov	r7, r0
 8008dd2:	4691      	mov	r9, r2
 8008dd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008dd8:	f108 0601 	add.w	r6, r8, #1
 8008ddc:	42b3      	cmp	r3, r6
 8008dde:	db0b      	blt.n	8008df8 <__lshift+0x38>
 8008de0:	4638      	mov	r0, r7
 8008de2:	f7ff fd93 	bl	800890c <_Balloc>
 8008de6:	4605      	mov	r5, r0
 8008de8:	b948      	cbnz	r0, 8008dfe <__lshift+0x3e>
 8008dea:	4602      	mov	r2, r0
 8008dec:	4b28      	ldr	r3, [pc, #160]	; (8008e90 <__lshift+0xd0>)
 8008dee:	4829      	ldr	r0, [pc, #164]	; (8008e94 <__lshift+0xd4>)
 8008df0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008df4:	f001 fce0 	bl	800a7b8 <__assert_func>
 8008df8:	3101      	adds	r1, #1
 8008dfa:	005b      	lsls	r3, r3, #1
 8008dfc:	e7ee      	b.n	8008ddc <__lshift+0x1c>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f100 0114 	add.w	r1, r0, #20
 8008e04:	f100 0210 	add.w	r2, r0, #16
 8008e08:	4618      	mov	r0, r3
 8008e0a:	4553      	cmp	r3, sl
 8008e0c:	db33      	blt.n	8008e76 <__lshift+0xb6>
 8008e0e:	6920      	ldr	r0, [r4, #16]
 8008e10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e14:	f104 0314 	add.w	r3, r4, #20
 8008e18:	f019 091f 	ands.w	r9, r9, #31
 8008e1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e24:	d02b      	beq.n	8008e7e <__lshift+0xbe>
 8008e26:	f1c9 0e20 	rsb	lr, r9, #32
 8008e2a:	468a      	mov	sl, r1
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	fa00 f009 	lsl.w	r0, r0, r9
 8008e34:	4310      	orrs	r0, r2
 8008e36:	f84a 0b04 	str.w	r0, [sl], #4
 8008e3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e3e:	459c      	cmp	ip, r3
 8008e40:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e44:	d8f3      	bhi.n	8008e2e <__lshift+0x6e>
 8008e46:	ebac 0304 	sub.w	r3, ip, r4
 8008e4a:	3b15      	subs	r3, #21
 8008e4c:	f023 0303 	bic.w	r3, r3, #3
 8008e50:	3304      	adds	r3, #4
 8008e52:	f104 0015 	add.w	r0, r4, #21
 8008e56:	4584      	cmp	ip, r0
 8008e58:	bf38      	it	cc
 8008e5a:	2304      	movcc	r3, #4
 8008e5c:	50ca      	str	r2, [r1, r3]
 8008e5e:	b10a      	cbz	r2, 8008e64 <__lshift+0xa4>
 8008e60:	f108 0602 	add.w	r6, r8, #2
 8008e64:	3e01      	subs	r6, #1
 8008e66:	4638      	mov	r0, r7
 8008e68:	612e      	str	r6, [r5, #16]
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	f7ff fd8e 	bl	800898c <_Bfree>
 8008e70:	4628      	mov	r0, r5
 8008e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e76:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	e7c5      	b.n	8008e0a <__lshift+0x4a>
 8008e7e:	3904      	subs	r1, #4
 8008e80:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e84:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e88:	459c      	cmp	ip, r3
 8008e8a:	d8f9      	bhi.n	8008e80 <__lshift+0xc0>
 8008e8c:	e7ea      	b.n	8008e64 <__lshift+0xa4>
 8008e8e:	bf00      	nop
 8008e90:	0800b255 	.word	0x0800b255
 8008e94:	0800b266 	.word	0x0800b266

08008e98 <__mcmp>:
 8008e98:	b530      	push	{r4, r5, lr}
 8008e9a:	6902      	ldr	r2, [r0, #16]
 8008e9c:	690c      	ldr	r4, [r1, #16]
 8008e9e:	1b12      	subs	r2, r2, r4
 8008ea0:	d10e      	bne.n	8008ec0 <__mcmp+0x28>
 8008ea2:	f100 0314 	add.w	r3, r0, #20
 8008ea6:	3114      	adds	r1, #20
 8008ea8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008eac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008eb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008eb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008eb8:	42a5      	cmp	r5, r4
 8008eba:	d003      	beq.n	8008ec4 <__mcmp+0x2c>
 8008ebc:	d305      	bcc.n	8008eca <__mcmp+0x32>
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	bd30      	pop	{r4, r5, pc}
 8008ec4:	4283      	cmp	r3, r0
 8008ec6:	d3f3      	bcc.n	8008eb0 <__mcmp+0x18>
 8008ec8:	e7fa      	b.n	8008ec0 <__mcmp+0x28>
 8008eca:	f04f 32ff 	mov.w	r2, #4294967295
 8008ece:	e7f7      	b.n	8008ec0 <__mcmp+0x28>

08008ed0 <__mdiff>:
 8008ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	4611      	mov	r1, r2
 8008eda:	4620      	mov	r0, r4
 8008edc:	4690      	mov	r8, r2
 8008ede:	f7ff ffdb 	bl	8008e98 <__mcmp>
 8008ee2:	1e05      	subs	r5, r0, #0
 8008ee4:	d110      	bne.n	8008f08 <__mdiff+0x38>
 8008ee6:	4629      	mov	r1, r5
 8008ee8:	4630      	mov	r0, r6
 8008eea:	f7ff fd0f 	bl	800890c <_Balloc>
 8008eee:	b930      	cbnz	r0, 8008efe <__mdiff+0x2e>
 8008ef0:	4b3a      	ldr	r3, [pc, #232]	; (8008fdc <__mdiff+0x10c>)
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	f240 2137 	movw	r1, #567	; 0x237
 8008ef8:	4839      	ldr	r0, [pc, #228]	; (8008fe0 <__mdiff+0x110>)
 8008efa:	f001 fc5d 	bl	800a7b8 <__assert_func>
 8008efe:	2301      	movs	r3, #1
 8008f00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f08:	bfa4      	itt	ge
 8008f0a:	4643      	movge	r3, r8
 8008f0c:	46a0      	movge	r8, r4
 8008f0e:	4630      	mov	r0, r6
 8008f10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f14:	bfa6      	itte	ge
 8008f16:	461c      	movge	r4, r3
 8008f18:	2500      	movge	r5, #0
 8008f1a:	2501      	movlt	r5, #1
 8008f1c:	f7ff fcf6 	bl	800890c <_Balloc>
 8008f20:	b920      	cbnz	r0, 8008f2c <__mdiff+0x5c>
 8008f22:	4b2e      	ldr	r3, [pc, #184]	; (8008fdc <__mdiff+0x10c>)
 8008f24:	4602      	mov	r2, r0
 8008f26:	f240 2145 	movw	r1, #581	; 0x245
 8008f2a:	e7e5      	b.n	8008ef8 <__mdiff+0x28>
 8008f2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f30:	6926      	ldr	r6, [r4, #16]
 8008f32:	60c5      	str	r5, [r0, #12]
 8008f34:	f104 0914 	add.w	r9, r4, #20
 8008f38:	f108 0514 	add.w	r5, r8, #20
 8008f3c:	f100 0e14 	add.w	lr, r0, #20
 8008f40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008f44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f48:	f108 0210 	add.w	r2, r8, #16
 8008f4c:	46f2      	mov	sl, lr
 8008f4e:	2100      	movs	r1, #0
 8008f50:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f58:	fa11 f88b 	uxtah	r8, r1, fp
 8008f5c:	b299      	uxth	r1, r3
 8008f5e:	0c1b      	lsrs	r3, r3, #16
 8008f60:	eba8 0801 	sub.w	r8, r8, r1
 8008f64:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f68:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f6c:	fa1f f888 	uxth.w	r8, r8
 8008f70:	1419      	asrs	r1, r3, #16
 8008f72:	454e      	cmp	r6, r9
 8008f74:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f78:	f84a 3b04 	str.w	r3, [sl], #4
 8008f7c:	d8e8      	bhi.n	8008f50 <__mdiff+0x80>
 8008f7e:	1b33      	subs	r3, r6, r4
 8008f80:	3b15      	subs	r3, #21
 8008f82:	f023 0303 	bic.w	r3, r3, #3
 8008f86:	3304      	adds	r3, #4
 8008f88:	3415      	adds	r4, #21
 8008f8a:	42a6      	cmp	r6, r4
 8008f8c:	bf38      	it	cc
 8008f8e:	2304      	movcc	r3, #4
 8008f90:	441d      	add	r5, r3
 8008f92:	4473      	add	r3, lr
 8008f94:	469e      	mov	lr, r3
 8008f96:	462e      	mov	r6, r5
 8008f98:	4566      	cmp	r6, ip
 8008f9a:	d30e      	bcc.n	8008fba <__mdiff+0xea>
 8008f9c:	f10c 0203 	add.w	r2, ip, #3
 8008fa0:	1b52      	subs	r2, r2, r5
 8008fa2:	f022 0203 	bic.w	r2, r2, #3
 8008fa6:	3d03      	subs	r5, #3
 8008fa8:	45ac      	cmp	ip, r5
 8008faa:	bf38      	it	cc
 8008fac:	2200      	movcc	r2, #0
 8008fae:	4413      	add	r3, r2
 8008fb0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008fb4:	b17a      	cbz	r2, 8008fd6 <__mdiff+0x106>
 8008fb6:	6107      	str	r7, [r0, #16]
 8008fb8:	e7a4      	b.n	8008f04 <__mdiff+0x34>
 8008fba:	f856 8b04 	ldr.w	r8, [r6], #4
 8008fbe:	fa11 f288 	uxtah	r2, r1, r8
 8008fc2:	1414      	asrs	r4, r2, #16
 8008fc4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008fc8:	b292      	uxth	r2, r2
 8008fca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008fce:	f84e 2b04 	str.w	r2, [lr], #4
 8008fd2:	1421      	asrs	r1, r4, #16
 8008fd4:	e7e0      	b.n	8008f98 <__mdiff+0xc8>
 8008fd6:	3f01      	subs	r7, #1
 8008fd8:	e7ea      	b.n	8008fb0 <__mdiff+0xe0>
 8008fda:	bf00      	nop
 8008fdc:	0800b255 	.word	0x0800b255
 8008fe0:	0800b266 	.word	0x0800b266

08008fe4 <__ulp>:
 8008fe4:	b082      	sub	sp, #8
 8008fe6:	ed8d 0b00 	vstr	d0, [sp]
 8008fea:	9a01      	ldr	r2, [sp, #4]
 8008fec:	4b0f      	ldr	r3, [pc, #60]	; (800902c <__ulp+0x48>)
 8008fee:	4013      	ands	r3, r2
 8008ff0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	dc08      	bgt.n	800900a <__ulp+0x26>
 8008ff8:	425b      	negs	r3, r3
 8008ffa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008ffe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009002:	da04      	bge.n	800900e <__ulp+0x2a>
 8009004:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009008:	4113      	asrs	r3, r2
 800900a:	2200      	movs	r2, #0
 800900c:	e008      	b.n	8009020 <__ulp+0x3c>
 800900e:	f1a2 0314 	sub.w	r3, r2, #20
 8009012:	2b1e      	cmp	r3, #30
 8009014:	bfda      	itte	le
 8009016:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800901a:	40da      	lsrle	r2, r3
 800901c:	2201      	movgt	r2, #1
 800901e:	2300      	movs	r3, #0
 8009020:	4619      	mov	r1, r3
 8009022:	4610      	mov	r0, r2
 8009024:	ec41 0b10 	vmov	d0, r0, r1
 8009028:	b002      	add	sp, #8
 800902a:	4770      	bx	lr
 800902c:	7ff00000 	.word	0x7ff00000

08009030 <__b2d>:
 8009030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009034:	6906      	ldr	r6, [r0, #16]
 8009036:	f100 0814 	add.w	r8, r0, #20
 800903a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800903e:	1f37      	subs	r7, r6, #4
 8009040:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009044:	4610      	mov	r0, r2
 8009046:	f7ff fd53 	bl	8008af0 <__hi0bits>
 800904a:	f1c0 0320 	rsb	r3, r0, #32
 800904e:	280a      	cmp	r0, #10
 8009050:	600b      	str	r3, [r1, #0]
 8009052:	491b      	ldr	r1, [pc, #108]	; (80090c0 <__b2d+0x90>)
 8009054:	dc15      	bgt.n	8009082 <__b2d+0x52>
 8009056:	f1c0 0c0b 	rsb	ip, r0, #11
 800905a:	fa22 f30c 	lsr.w	r3, r2, ip
 800905e:	45b8      	cmp	r8, r7
 8009060:	ea43 0501 	orr.w	r5, r3, r1
 8009064:	bf34      	ite	cc
 8009066:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800906a:	2300      	movcs	r3, #0
 800906c:	3015      	adds	r0, #21
 800906e:	fa02 f000 	lsl.w	r0, r2, r0
 8009072:	fa23 f30c 	lsr.w	r3, r3, ip
 8009076:	4303      	orrs	r3, r0
 8009078:	461c      	mov	r4, r3
 800907a:	ec45 4b10 	vmov	d0, r4, r5
 800907e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009082:	45b8      	cmp	r8, r7
 8009084:	bf3a      	itte	cc
 8009086:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800908a:	f1a6 0708 	subcc.w	r7, r6, #8
 800908e:	2300      	movcs	r3, #0
 8009090:	380b      	subs	r0, #11
 8009092:	d012      	beq.n	80090ba <__b2d+0x8a>
 8009094:	f1c0 0120 	rsb	r1, r0, #32
 8009098:	fa23 f401 	lsr.w	r4, r3, r1
 800909c:	4082      	lsls	r2, r0
 800909e:	4322      	orrs	r2, r4
 80090a0:	4547      	cmp	r7, r8
 80090a2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80090a6:	bf8c      	ite	hi
 80090a8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80090ac:	2200      	movls	r2, #0
 80090ae:	4083      	lsls	r3, r0
 80090b0:	40ca      	lsrs	r2, r1
 80090b2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80090b6:	4313      	orrs	r3, r2
 80090b8:	e7de      	b.n	8009078 <__b2d+0x48>
 80090ba:	ea42 0501 	orr.w	r5, r2, r1
 80090be:	e7db      	b.n	8009078 <__b2d+0x48>
 80090c0:	3ff00000 	.word	0x3ff00000

080090c4 <__d2b>:
 80090c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090c8:	460f      	mov	r7, r1
 80090ca:	2101      	movs	r1, #1
 80090cc:	ec59 8b10 	vmov	r8, r9, d0
 80090d0:	4616      	mov	r6, r2
 80090d2:	f7ff fc1b 	bl	800890c <_Balloc>
 80090d6:	4604      	mov	r4, r0
 80090d8:	b930      	cbnz	r0, 80090e8 <__d2b+0x24>
 80090da:	4602      	mov	r2, r0
 80090dc:	4b24      	ldr	r3, [pc, #144]	; (8009170 <__d2b+0xac>)
 80090de:	4825      	ldr	r0, [pc, #148]	; (8009174 <__d2b+0xb0>)
 80090e0:	f240 310f 	movw	r1, #783	; 0x30f
 80090e4:	f001 fb68 	bl	800a7b8 <__assert_func>
 80090e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80090f0:	bb2d      	cbnz	r5, 800913e <__d2b+0x7a>
 80090f2:	9301      	str	r3, [sp, #4]
 80090f4:	f1b8 0300 	subs.w	r3, r8, #0
 80090f8:	d026      	beq.n	8009148 <__d2b+0x84>
 80090fa:	4668      	mov	r0, sp
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	f7ff fd17 	bl	8008b30 <__lo0bits>
 8009102:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009106:	b1e8      	cbz	r0, 8009144 <__d2b+0x80>
 8009108:	f1c0 0320 	rsb	r3, r0, #32
 800910c:	fa02 f303 	lsl.w	r3, r2, r3
 8009110:	430b      	orrs	r3, r1
 8009112:	40c2      	lsrs	r2, r0
 8009114:	6163      	str	r3, [r4, #20]
 8009116:	9201      	str	r2, [sp, #4]
 8009118:	9b01      	ldr	r3, [sp, #4]
 800911a:	61a3      	str	r3, [r4, #24]
 800911c:	2b00      	cmp	r3, #0
 800911e:	bf14      	ite	ne
 8009120:	2202      	movne	r2, #2
 8009122:	2201      	moveq	r2, #1
 8009124:	6122      	str	r2, [r4, #16]
 8009126:	b1bd      	cbz	r5, 8009158 <__d2b+0x94>
 8009128:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800912c:	4405      	add	r5, r0
 800912e:	603d      	str	r5, [r7, #0]
 8009130:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009134:	6030      	str	r0, [r6, #0]
 8009136:	4620      	mov	r0, r4
 8009138:	b003      	add	sp, #12
 800913a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800913e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009142:	e7d6      	b.n	80090f2 <__d2b+0x2e>
 8009144:	6161      	str	r1, [r4, #20]
 8009146:	e7e7      	b.n	8009118 <__d2b+0x54>
 8009148:	a801      	add	r0, sp, #4
 800914a:	f7ff fcf1 	bl	8008b30 <__lo0bits>
 800914e:	9b01      	ldr	r3, [sp, #4]
 8009150:	6163      	str	r3, [r4, #20]
 8009152:	3020      	adds	r0, #32
 8009154:	2201      	movs	r2, #1
 8009156:	e7e5      	b.n	8009124 <__d2b+0x60>
 8009158:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800915c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009160:	6038      	str	r0, [r7, #0]
 8009162:	6918      	ldr	r0, [r3, #16]
 8009164:	f7ff fcc4 	bl	8008af0 <__hi0bits>
 8009168:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800916c:	e7e2      	b.n	8009134 <__d2b+0x70>
 800916e:	bf00      	nop
 8009170:	0800b255 	.word	0x0800b255
 8009174:	0800b266 	.word	0x0800b266

08009178 <__ratio>:
 8009178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917c:	4688      	mov	r8, r1
 800917e:	4669      	mov	r1, sp
 8009180:	4681      	mov	r9, r0
 8009182:	f7ff ff55 	bl	8009030 <__b2d>
 8009186:	a901      	add	r1, sp, #4
 8009188:	4640      	mov	r0, r8
 800918a:	ec55 4b10 	vmov	r4, r5, d0
 800918e:	f7ff ff4f 	bl	8009030 <__b2d>
 8009192:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009196:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800919a:	eba3 0c02 	sub.w	ip, r3, r2
 800919e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80091a2:	1a9b      	subs	r3, r3, r2
 80091a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80091a8:	ec51 0b10 	vmov	r0, r1, d0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	bfd6      	itet	le
 80091b0:	460a      	movle	r2, r1
 80091b2:	462a      	movgt	r2, r5
 80091b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80091b8:	468b      	mov	fp, r1
 80091ba:	462f      	mov	r7, r5
 80091bc:	bfd4      	ite	le
 80091be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80091c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80091c6:	4620      	mov	r0, r4
 80091c8:	ee10 2a10 	vmov	r2, s0
 80091cc:	465b      	mov	r3, fp
 80091ce:	4639      	mov	r1, r7
 80091d0:	f7f7 fb44 	bl	800085c <__aeabi_ddiv>
 80091d4:	ec41 0b10 	vmov	d0, r0, r1
 80091d8:	b003      	add	sp, #12
 80091da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091de <__copybits>:
 80091de:	3901      	subs	r1, #1
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	1149      	asrs	r1, r1, #5
 80091e4:	6914      	ldr	r4, [r2, #16]
 80091e6:	3101      	adds	r1, #1
 80091e8:	f102 0314 	add.w	r3, r2, #20
 80091ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80091f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80091f4:	1f05      	subs	r5, r0, #4
 80091f6:	42a3      	cmp	r3, r4
 80091f8:	d30c      	bcc.n	8009214 <__copybits+0x36>
 80091fa:	1aa3      	subs	r3, r4, r2
 80091fc:	3b11      	subs	r3, #17
 80091fe:	f023 0303 	bic.w	r3, r3, #3
 8009202:	3211      	adds	r2, #17
 8009204:	42a2      	cmp	r2, r4
 8009206:	bf88      	it	hi
 8009208:	2300      	movhi	r3, #0
 800920a:	4418      	add	r0, r3
 800920c:	2300      	movs	r3, #0
 800920e:	4288      	cmp	r0, r1
 8009210:	d305      	bcc.n	800921e <__copybits+0x40>
 8009212:	bd70      	pop	{r4, r5, r6, pc}
 8009214:	f853 6b04 	ldr.w	r6, [r3], #4
 8009218:	f845 6f04 	str.w	r6, [r5, #4]!
 800921c:	e7eb      	b.n	80091f6 <__copybits+0x18>
 800921e:	f840 3b04 	str.w	r3, [r0], #4
 8009222:	e7f4      	b.n	800920e <__copybits+0x30>

08009224 <__any_on>:
 8009224:	f100 0214 	add.w	r2, r0, #20
 8009228:	6900      	ldr	r0, [r0, #16]
 800922a:	114b      	asrs	r3, r1, #5
 800922c:	4298      	cmp	r0, r3
 800922e:	b510      	push	{r4, lr}
 8009230:	db11      	blt.n	8009256 <__any_on+0x32>
 8009232:	dd0a      	ble.n	800924a <__any_on+0x26>
 8009234:	f011 011f 	ands.w	r1, r1, #31
 8009238:	d007      	beq.n	800924a <__any_on+0x26>
 800923a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800923e:	fa24 f001 	lsr.w	r0, r4, r1
 8009242:	fa00 f101 	lsl.w	r1, r0, r1
 8009246:	428c      	cmp	r4, r1
 8009248:	d10b      	bne.n	8009262 <__any_on+0x3e>
 800924a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800924e:	4293      	cmp	r3, r2
 8009250:	d803      	bhi.n	800925a <__any_on+0x36>
 8009252:	2000      	movs	r0, #0
 8009254:	bd10      	pop	{r4, pc}
 8009256:	4603      	mov	r3, r0
 8009258:	e7f7      	b.n	800924a <__any_on+0x26>
 800925a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800925e:	2900      	cmp	r1, #0
 8009260:	d0f5      	beq.n	800924e <__any_on+0x2a>
 8009262:	2001      	movs	r0, #1
 8009264:	e7f6      	b.n	8009254 <__any_on+0x30>

08009266 <sulp>:
 8009266:	b570      	push	{r4, r5, r6, lr}
 8009268:	4604      	mov	r4, r0
 800926a:	460d      	mov	r5, r1
 800926c:	ec45 4b10 	vmov	d0, r4, r5
 8009270:	4616      	mov	r6, r2
 8009272:	f7ff feb7 	bl	8008fe4 <__ulp>
 8009276:	ec51 0b10 	vmov	r0, r1, d0
 800927a:	b17e      	cbz	r6, 800929c <sulp+0x36>
 800927c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009280:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009284:	2b00      	cmp	r3, #0
 8009286:	dd09      	ble.n	800929c <sulp+0x36>
 8009288:	051b      	lsls	r3, r3, #20
 800928a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800928e:	2400      	movs	r4, #0
 8009290:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009294:	4622      	mov	r2, r4
 8009296:	462b      	mov	r3, r5
 8009298:	f7f7 f9b6 	bl	8000608 <__aeabi_dmul>
 800929c:	bd70      	pop	{r4, r5, r6, pc}
	...

080092a0 <_strtod_l>:
 80092a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	ed2d 8b02 	vpush	{d8}
 80092a8:	b09b      	sub	sp, #108	; 0x6c
 80092aa:	4604      	mov	r4, r0
 80092ac:	9213      	str	r2, [sp, #76]	; 0x4c
 80092ae:	2200      	movs	r2, #0
 80092b0:	9216      	str	r2, [sp, #88]	; 0x58
 80092b2:	460d      	mov	r5, r1
 80092b4:	f04f 0800 	mov.w	r8, #0
 80092b8:	f04f 0900 	mov.w	r9, #0
 80092bc:	460a      	mov	r2, r1
 80092be:	9215      	str	r2, [sp, #84]	; 0x54
 80092c0:	7811      	ldrb	r1, [r2, #0]
 80092c2:	292b      	cmp	r1, #43	; 0x2b
 80092c4:	d04c      	beq.n	8009360 <_strtod_l+0xc0>
 80092c6:	d83a      	bhi.n	800933e <_strtod_l+0x9e>
 80092c8:	290d      	cmp	r1, #13
 80092ca:	d834      	bhi.n	8009336 <_strtod_l+0x96>
 80092cc:	2908      	cmp	r1, #8
 80092ce:	d834      	bhi.n	800933a <_strtod_l+0x9a>
 80092d0:	2900      	cmp	r1, #0
 80092d2:	d03d      	beq.n	8009350 <_strtod_l+0xb0>
 80092d4:	2200      	movs	r2, #0
 80092d6:	920a      	str	r2, [sp, #40]	; 0x28
 80092d8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80092da:	7832      	ldrb	r2, [r6, #0]
 80092dc:	2a30      	cmp	r2, #48	; 0x30
 80092de:	f040 80b4 	bne.w	800944a <_strtod_l+0x1aa>
 80092e2:	7872      	ldrb	r2, [r6, #1]
 80092e4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80092e8:	2a58      	cmp	r2, #88	; 0x58
 80092ea:	d170      	bne.n	80093ce <_strtod_l+0x12e>
 80092ec:	9302      	str	r3, [sp, #8]
 80092ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f0:	9301      	str	r3, [sp, #4]
 80092f2:	ab16      	add	r3, sp, #88	; 0x58
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	4a8e      	ldr	r2, [pc, #568]	; (8009530 <_strtod_l+0x290>)
 80092f8:	ab17      	add	r3, sp, #92	; 0x5c
 80092fa:	a915      	add	r1, sp, #84	; 0x54
 80092fc:	4620      	mov	r0, r4
 80092fe:	f001 faf7 	bl	800a8f0 <__gethex>
 8009302:	f010 070f 	ands.w	r7, r0, #15
 8009306:	4605      	mov	r5, r0
 8009308:	d005      	beq.n	8009316 <_strtod_l+0x76>
 800930a:	2f06      	cmp	r7, #6
 800930c:	d12a      	bne.n	8009364 <_strtod_l+0xc4>
 800930e:	3601      	adds	r6, #1
 8009310:	2300      	movs	r3, #0
 8009312:	9615      	str	r6, [sp, #84]	; 0x54
 8009314:	930a      	str	r3, [sp, #40]	; 0x28
 8009316:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009318:	2b00      	cmp	r3, #0
 800931a:	f040 857f 	bne.w	8009e1c <_strtod_l+0xb7c>
 800931e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009320:	b1db      	cbz	r3, 800935a <_strtod_l+0xba>
 8009322:	4642      	mov	r2, r8
 8009324:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009328:	ec43 2b10 	vmov	d0, r2, r3
 800932c:	b01b      	add	sp, #108	; 0x6c
 800932e:	ecbd 8b02 	vpop	{d8}
 8009332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009336:	2920      	cmp	r1, #32
 8009338:	d1cc      	bne.n	80092d4 <_strtod_l+0x34>
 800933a:	3201      	adds	r2, #1
 800933c:	e7bf      	b.n	80092be <_strtod_l+0x1e>
 800933e:	292d      	cmp	r1, #45	; 0x2d
 8009340:	d1c8      	bne.n	80092d4 <_strtod_l+0x34>
 8009342:	2101      	movs	r1, #1
 8009344:	910a      	str	r1, [sp, #40]	; 0x28
 8009346:	1c51      	adds	r1, r2, #1
 8009348:	9115      	str	r1, [sp, #84]	; 0x54
 800934a:	7852      	ldrb	r2, [r2, #1]
 800934c:	2a00      	cmp	r2, #0
 800934e:	d1c3      	bne.n	80092d8 <_strtod_l+0x38>
 8009350:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009352:	9515      	str	r5, [sp, #84]	; 0x54
 8009354:	2b00      	cmp	r3, #0
 8009356:	f040 855f 	bne.w	8009e18 <_strtod_l+0xb78>
 800935a:	4642      	mov	r2, r8
 800935c:	464b      	mov	r3, r9
 800935e:	e7e3      	b.n	8009328 <_strtod_l+0x88>
 8009360:	2100      	movs	r1, #0
 8009362:	e7ef      	b.n	8009344 <_strtod_l+0xa4>
 8009364:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009366:	b13a      	cbz	r2, 8009378 <_strtod_l+0xd8>
 8009368:	2135      	movs	r1, #53	; 0x35
 800936a:	a818      	add	r0, sp, #96	; 0x60
 800936c:	f7ff ff37 	bl	80091de <__copybits>
 8009370:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009372:	4620      	mov	r0, r4
 8009374:	f7ff fb0a 	bl	800898c <_Bfree>
 8009378:	3f01      	subs	r7, #1
 800937a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800937c:	2f04      	cmp	r7, #4
 800937e:	d806      	bhi.n	800938e <_strtod_l+0xee>
 8009380:	e8df f007 	tbb	[pc, r7]
 8009384:	201d0314 	.word	0x201d0314
 8009388:	14          	.byte	0x14
 8009389:	00          	.byte	0x00
 800938a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800938e:	05e9      	lsls	r1, r5, #23
 8009390:	bf48      	it	mi
 8009392:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009396:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800939a:	0d1b      	lsrs	r3, r3, #20
 800939c:	051b      	lsls	r3, r3, #20
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1b9      	bne.n	8009316 <_strtod_l+0x76>
 80093a2:	f7fe faf7 	bl	8007994 <__errno>
 80093a6:	2322      	movs	r3, #34	; 0x22
 80093a8:	6003      	str	r3, [r0, #0]
 80093aa:	e7b4      	b.n	8009316 <_strtod_l+0x76>
 80093ac:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80093b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80093b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80093b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80093bc:	e7e7      	b.n	800938e <_strtod_l+0xee>
 80093be:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009538 <_strtod_l+0x298>
 80093c2:	e7e4      	b.n	800938e <_strtod_l+0xee>
 80093c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80093c8:	f04f 38ff 	mov.w	r8, #4294967295
 80093cc:	e7df      	b.n	800938e <_strtod_l+0xee>
 80093ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093d0:	1c5a      	adds	r2, r3, #1
 80093d2:	9215      	str	r2, [sp, #84]	; 0x54
 80093d4:	785b      	ldrb	r3, [r3, #1]
 80093d6:	2b30      	cmp	r3, #48	; 0x30
 80093d8:	d0f9      	beq.n	80093ce <_strtod_l+0x12e>
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d09b      	beq.n	8009316 <_strtod_l+0x76>
 80093de:	2301      	movs	r3, #1
 80093e0:	f04f 0a00 	mov.w	sl, #0
 80093e4:	9304      	str	r3, [sp, #16]
 80093e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80093ea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80093ee:	46d3      	mov	fp, sl
 80093f0:	220a      	movs	r2, #10
 80093f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80093f4:	7806      	ldrb	r6, [r0, #0]
 80093f6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80093fa:	b2d9      	uxtb	r1, r3
 80093fc:	2909      	cmp	r1, #9
 80093fe:	d926      	bls.n	800944e <_strtod_l+0x1ae>
 8009400:	494c      	ldr	r1, [pc, #304]	; (8009534 <_strtod_l+0x294>)
 8009402:	2201      	movs	r2, #1
 8009404:	f001 f98c 	bl	800a720 <strncmp>
 8009408:	2800      	cmp	r0, #0
 800940a:	d030      	beq.n	800946e <_strtod_l+0x1ce>
 800940c:	2000      	movs	r0, #0
 800940e:	4632      	mov	r2, r6
 8009410:	9005      	str	r0, [sp, #20]
 8009412:	465e      	mov	r6, fp
 8009414:	4603      	mov	r3, r0
 8009416:	2a65      	cmp	r2, #101	; 0x65
 8009418:	d001      	beq.n	800941e <_strtod_l+0x17e>
 800941a:	2a45      	cmp	r2, #69	; 0x45
 800941c:	d113      	bne.n	8009446 <_strtod_l+0x1a6>
 800941e:	b91e      	cbnz	r6, 8009428 <_strtod_l+0x188>
 8009420:	9a04      	ldr	r2, [sp, #16]
 8009422:	4302      	orrs	r2, r0
 8009424:	d094      	beq.n	8009350 <_strtod_l+0xb0>
 8009426:	2600      	movs	r6, #0
 8009428:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800942a:	1c6a      	adds	r2, r5, #1
 800942c:	9215      	str	r2, [sp, #84]	; 0x54
 800942e:	786a      	ldrb	r2, [r5, #1]
 8009430:	2a2b      	cmp	r2, #43	; 0x2b
 8009432:	d074      	beq.n	800951e <_strtod_l+0x27e>
 8009434:	2a2d      	cmp	r2, #45	; 0x2d
 8009436:	d078      	beq.n	800952a <_strtod_l+0x28a>
 8009438:	f04f 0c00 	mov.w	ip, #0
 800943c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009440:	2909      	cmp	r1, #9
 8009442:	d97f      	bls.n	8009544 <_strtod_l+0x2a4>
 8009444:	9515      	str	r5, [sp, #84]	; 0x54
 8009446:	2700      	movs	r7, #0
 8009448:	e09e      	b.n	8009588 <_strtod_l+0x2e8>
 800944a:	2300      	movs	r3, #0
 800944c:	e7c8      	b.n	80093e0 <_strtod_l+0x140>
 800944e:	f1bb 0f08 	cmp.w	fp, #8
 8009452:	bfd8      	it	le
 8009454:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009456:	f100 0001 	add.w	r0, r0, #1
 800945a:	bfda      	itte	le
 800945c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009460:	9309      	strle	r3, [sp, #36]	; 0x24
 8009462:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009466:	f10b 0b01 	add.w	fp, fp, #1
 800946a:	9015      	str	r0, [sp, #84]	; 0x54
 800946c:	e7c1      	b.n	80093f2 <_strtod_l+0x152>
 800946e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	9215      	str	r2, [sp, #84]	; 0x54
 8009474:	785a      	ldrb	r2, [r3, #1]
 8009476:	f1bb 0f00 	cmp.w	fp, #0
 800947a:	d037      	beq.n	80094ec <_strtod_l+0x24c>
 800947c:	9005      	str	r0, [sp, #20]
 800947e:	465e      	mov	r6, fp
 8009480:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009484:	2b09      	cmp	r3, #9
 8009486:	d912      	bls.n	80094ae <_strtod_l+0x20e>
 8009488:	2301      	movs	r3, #1
 800948a:	e7c4      	b.n	8009416 <_strtod_l+0x176>
 800948c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800948e:	1c5a      	adds	r2, r3, #1
 8009490:	9215      	str	r2, [sp, #84]	; 0x54
 8009492:	785a      	ldrb	r2, [r3, #1]
 8009494:	3001      	adds	r0, #1
 8009496:	2a30      	cmp	r2, #48	; 0x30
 8009498:	d0f8      	beq.n	800948c <_strtod_l+0x1ec>
 800949a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800949e:	2b08      	cmp	r3, #8
 80094a0:	f200 84c1 	bhi.w	8009e26 <_strtod_l+0xb86>
 80094a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094a6:	9005      	str	r0, [sp, #20]
 80094a8:	2000      	movs	r0, #0
 80094aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80094ac:	4606      	mov	r6, r0
 80094ae:	3a30      	subs	r2, #48	; 0x30
 80094b0:	f100 0301 	add.w	r3, r0, #1
 80094b4:	d014      	beq.n	80094e0 <_strtod_l+0x240>
 80094b6:	9905      	ldr	r1, [sp, #20]
 80094b8:	4419      	add	r1, r3
 80094ba:	9105      	str	r1, [sp, #20]
 80094bc:	4633      	mov	r3, r6
 80094be:	eb00 0c06 	add.w	ip, r0, r6
 80094c2:	210a      	movs	r1, #10
 80094c4:	4563      	cmp	r3, ip
 80094c6:	d113      	bne.n	80094f0 <_strtod_l+0x250>
 80094c8:	1833      	adds	r3, r6, r0
 80094ca:	2b08      	cmp	r3, #8
 80094cc:	f106 0601 	add.w	r6, r6, #1
 80094d0:	4406      	add	r6, r0
 80094d2:	dc1a      	bgt.n	800950a <_strtod_l+0x26a>
 80094d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094d6:	230a      	movs	r3, #10
 80094d8:	fb03 2301 	mla	r3, r3, r1, r2
 80094dc:	9309      	str	r3, [sp, #36]	; 0x24
 80094de:	2300      	movs	r3, #0
 80094e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80094e2:	1c51      	adds	r1, r2, #1
 80094e4:	9115      	str	r1, [sp, #84]	; 0x54
 80094e6:	7852      	ldrb	r2, [r2, #1]
 80094e8:	4618      	mov	r0, r3
 80094ea:	e7c9      	b.n	8009480 <_strtod_l+0x1e0>
 80094ec:	4658      	mov	r0, fp
 80094ee:	e7d2      	b.n	8009496 <_strtod_l+0x1f6>
 80094f0:	2b08      	cmp	r3, #8
 80094f2:	f103 0301 	add.w	r3, r3, #1
 80094f6:	dc03      	bgt.n	8009500 <_strtod_l+0x260>
 80094f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80094fa:	434f      	muls	r7, r1
 80094fc:	9709      	str	r7, [sp, #36]	; 0x24
 80094fe:	e7e1      	b.n	80094c4 <_strtod_l+0x224>
 8009500:	2b10      	cmp	r3, #16
 8009502:	bfd8      	it	le
 8009504:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009508:	e7dc      	b.n	80094c4 <_strtod_l+0x224>
 800950a:	2e10      	cmp	r6, #16
 800950c:	bfdc      	itt	le
 800950e:	230a      	movle	r3, #10
 8009510:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8009514:	e7e3      	b.n	80094de <_strtod_l+0x23e>
 8009516:	2300      	movs	r3, #0
 8009518:	9305      	str	r3, [sp, #20]
 800951a:	2301      	movs	r3, #1
 800951c:	e780      	b.n	8009420 <_strtod_l+0x180>
 800951e:	f04f 0c00 	mov.w	ip, #0
 8009522:	1caa      	adds	r2, r5, #2
 8009524:	9215      	str	r2, [sp, #84]	; 0x54
 8009526:	78aa      	ldrb	r2, [r5, #2]
 8009528:	e788      	b.n	800943c <_strtod_l+0x19c>
 800952a:	f04f 0c01 	mov.w	ip, #1
 800952e:	e7f8      	b.n	8009522 <_strtod_l+0x282>
 8009530:	0800b3c0 	.word	0x0800b3c0
 8009534:	0800b3bc 	.word	0x0800b3bc
 8009538:	7ff00000 	.word	0x7ff00000
 800953c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800953e:	1c51      	adds	r1, r2, #1
 8009540:	9115      	str	r1, [sp, #84]	; 0x54
 8009542:	7852      	ldrb	r2, [r2, #1]
 8009544:	2a30      	cmp	r2, #48	; 0x30
 8009546:	d0f9      	beq.n	800953c <_strtod_l+0x29c>
 8009548:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800954c:	2908      	cmp	r1, #8
 800954e:	f63f af7a 	bhi.w	8009446 <_strtod_l+0x1a6>
 8009552:	3a30      	subs	r2, #48	; 0x30
 8009554:	9208      	str	r2, [sp, #32]
 8009556:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009558:	920c      	str	r2, [sp, #48]	; 0x30
 800955a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800955c:	1c57      	adds	r7, r2, #1
 800955e:	9715      	str	r7, [sp, #84]	; 0x54
 8009560:	7852      	ldrb	r2, [r2, #1]
 8009562:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009566:	f1be 0f09 	cmp.w	lr, #9
 800956a:	d938      	bls.n	80095de <_strtod_l+0x33e>
 800956c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800956e:	1a7f      	subs	r7, r7, r1
 8009570:	2f08      	cmp	r7, #8
 8009572:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009576:	dc03      	bgt.n	8009580 <_strtod_l+0x2e0>
 8009578:	9908      	ldr	r1, [sp, #32]
 800957a:	428f      	cmp	r7, r1
 800957c:	bfa8      	it	ge
 800957e:	460f      	movge	r7, r1
 8009580:	f1bc 0f00 	cmp.w	ip, #0
 8009584:	d000      	beq.n	8009588 <_strtod_l+0x2e8>
 8009586:	427f      	negs	r7, r7
 8009588:	2e00      	cmp	r6, #0
 800958a:	d14f      	bne.n	800962c <_strtod_l+0x38c>
 800958c:	9904      	ldr	r1, [sp, #16]
 800958e:	4301      	orrs	r1, r0
 8009590:	f47f aec1 	bne.w	8009316 <_strtod_l+0x76>
 8009594:	2b00      	cmp	r3, #0
 8009596:	f47f aedb 	bne.w	8009350 <_strtod_l+0xb0>
 800959a:	2a69      	cmp	r2, #105	; 0x69
 800959c:	d029      	beq.n	80095f2 <_strtod_l+0x352>
 800959e:	dc26      	bgt.n	80095ee <_strtod_l+0x34e>
 80095a0:	2a49      	cmp	r2, #73	; 0x49
 80095a2:	d026      	beq.n	80095f2 <_strtod_l+0x352>
 80095a4:	2a4e      	cmp	r2, #78	; 0x4e
 80095a6:	f47f aed3 	bne.w	8009350 <_strtod_l+0xb0>
 80095aa:	499b      	ldr	r1, [pc, #620]	; (8009818 <_strtod_l+0x578>)
 80095ac:	a815      	add	r0, sp, #84	; 0x54
 80095ae:	f001 fbdf 	bl	800ad70 <__match>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	f43f aecc 	beq.w	8009350 <_strtod_l+0xb0>
 80095b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	2b28      	cmp	r3, #40	; 0x28
 80095be:	d12f      	bne.n	8009620 <_strtod_l+0x380>
 80095c0:	4996      	ldr	r1, [pc, #600]	; (800981c <_strtod_l+0x57c>)
 80095c2:	aa18      	add	r2, sp, #96	; 0x60
 80095c4:	a815      	add	r0, sp, #84	; 0x54
 80095c6:	f001 fbe7 	bl	800ad98 <__hexnan>
 80095ca:	2805      	cmp	r0, #5
 80095cc:	d128      	bne.n	8009620 <_strtod_l+0x380>
 80095ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80095d4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80095d8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80095dc:	e69b      	b.n	8009316 <_strtod_l+0x76>
 80095de:	9f08      	ldr	r7, [sp, #32]
 80095e0:	210a      	movs	r1, #10
 80095e2:	fb01 2107 	mla	r1, r1, r7, r2
 80095e6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80095ea:	9208      	str	r2, [sp, #32]
 80095ec:	e7b5      	b.n	800955a <_strtod_l+0x2ba>
 80095ee:	2a6e      	cmp	r2, #110	; 0x6e
 80095f0:	e7d9      	b.n	80095a6 <_strtod_l+0x306>
 80095f2:	498b      	ldr	r1, [pc, #556]	; (8009820 <_strtod_l+0x580>)
 80095f4:	a815      	add	r0, sp, #84	; 0x54
 80095f6:	f001 fbbb 	bl	800ad70 <__match>
 80095fa:	2800      	cmp	r0, #0
 80095fc:	f43f aea8 	beq.w	8009350 <_strtod_l+0xb0>
 8009600:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009602:	4988      	ldr	r1, [pc, #544]	; (8009824 <_strtod_l+0x584>)
 8009604:	3b01      	subs	r3, #1
 8009606:	a815      	add	r0, sp, #84	; 0x54
 8009608:	9315      	str	r3, [sp, #84]	; 0x54
 800960a:	f001 fbb1 	bl	800ad70 <__match>
 800960e:	b910      	cbnz	r0, 8009616 <_strtod_l+0x376>
 8009610:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009612:	3301      	adds	r3, #1
 8009614:	9315      	str	r3, [sp, #84]	; 0x54
 8009616:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009834 <_strtod_l+0x594>
 800961a:	f04f 0800 	mov.w	r8, #0
 800961e:	e67a      	b.n	8009316 <_strtod_l+0x76>
 8009620:	4881      	ldr	r0, [pc, #516]	; (8009828 <_strtod_l+0x588>)
 8009622:	f001 f8c1 	bl	800a7a8 <nan>
 8009626:	ec59 8b10 	vmov	r8, r9, d0
 800962a:	e674      	b.n	8009316 <_strtod_l+0x76>
 800962c:	9b05      	ldr	r3, [sp, #20]
 800962e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009630:	1afb      	subs	r3, r7, r3
 8009632:	f1bb 0f00 	cmp.w	fp, #0
 8009636:	bf08      	it	eq
 8009638:	46b3      	moveq	fp, r6
 800963a:	2e10      	cmp	r6, #16
 800963c:	9308      	str	r3, [sp, #32]
 800963e:	4635      	mov	r5, r6
 8009640:	bfa8      	it	ge
 8009642:	2510      	movge	r5, #16
 8009644:	f7f6 ff66 	bl	8000514 <__aeabi_ui2d>
 8009648:	2e09      	cmp	r6, #9
 800964a:	4680      	mov	r8, r0
 800964c:	4689      	mov	r9, r1
 800964e:	dd13      	ble.n	8009678 <_strtod_l+0x3d8>
 8009650:	4b76      	ldr	r3, [pc, #472]	; (800982c <_strtod_l+0x58c>)
 8009652:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009656:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800965a:	f7f6 ffd5 	bl	8000608 <__aeabi_dmul>
 800965e:	4680      	mov	r8, r0
 8009660:	4650      	mov	r0, sl
 8009662:	4689      	mov	r9, r1
 8009664:	f7f6 ff56 	bl	8000514 <__aeabi_ui2d>
 8009668:	4602      	mov	r2, r0
 800966a:	460b      	mov	r3, r1
 800966c:	4640      	mov	r0, r8
 800966e:	4649      	mov	r1, r9
 8009670:	f7f6 fe14 	bl	800029c <__adddf3>
 8009674:	4680      	mov	r8, r0
 8009676:	4689      	mov	r9, r1
 8009678:	2e0f      	cmp	r6, #15
 800967a:	dc38      	bgt.n	80096ee <_strtod_l+0x44e>
 800967c:	9b08      	ldr	r3, [sp, #32]
 800967e:	2b00      	cmp	r3, #0
 8009680:	f43f ae49 	beq.w	8009316 <_strtod_l+0x76>
 8009684:	dd24      	ble.n	80096d0 <_strtod_l+0x430>
 8009686:	2b16      	cmp	r3, #22
 8009688:	dc0b      	bgt.n	80096a2 <_strtod_l+0x402>
 800968a:	4968      	ldr	r1, [pc, #416]	; (800982c <_strtod_l+0x58c>)
 800968c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009690:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009694:	4642      	mov	r2, r8
 8009696:	464b      	mov	r3, r9
 8009698:	f7f6 ffb6 	bl	8000608 <__aeabi_dmul>
 800969c:	4680      	mov	r8, r0
 800969e:	4689      	mov	r9, r1
 80096a0:	e639      	b.n	8009316 <_strtod_l+0x76>
 80096a2:	9a08      	ldr	r2, [sp, #32]
 80096a4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80096a8:	4293      	cmp	r3, r2
 80096aa:	db20      	blt.n	80096ee <_strtod_l+0x44e>
 80096ac:	4c5f      	ldr	r4, [pc, #380]	; (800982c <_strtod_l+0x58c>)
 80096ae:	f1c6 060f 	rsb	r6, r6, #15
 80096b2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80096b6:	4642      	mov	r2, r8
 80096b8:	464b      	mov	r3, r9
 80096ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096be:	f7f6 ffa3 	bl	8000608 <__aeabi_dmul>
 80096c2:	9b08      	ldr	r3, [sp, #32]
 80096c4:	1b9e      	subs	r6, r3, r6
 80096c6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80096ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 80096ce:	e7e3      	b.n	8009698 <_strtod_l+0x3f8>
 80096d0:	9b08      	ldr	r3, [sp, #32]
 80096d2:	3316      	adds	r3, #22
 80096d4:	db0b      	blt.n	80096ee <_strtod_l+0x44e>
 80096d6:	9b05      	ldr	r3, [sp, #20]
 80096d8:	1bdf      	subs	r7, r3, r7
 80096da:	4b54      	ldr	r3, [pc, #336]	; (800982c <_strtod_l+0x58c>)
 80096dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80096e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096e4:	4640      	mov	r0, r8
 80096e6:	4649      	mov	r1, r9
 80096e8:	f7f7 f8b8 	bl	800085c <__aeabi_ddiv>
 80096ec:	e7d6      	b.n	800969c <_strtod_l+0x3fc>
 80096ee:	9b08      	ldr	r3, [sp, #32]
 80096f0:	1b75      	subs	r5, r6, r5
 80096f2:	441d      	add	r5, r3
 80096f4:	2d00      	cmp	r5, #0
 80096f6:	dd70      	ble.n	80097da <_strtod_l+0x53a>
 80096f8:	f015 030f 	ands.w	r3, r5, #15
 80096fc:	d00a      	beq.n	8009714 <_strtod_l+0x474>
 80096fe:	494b      	ldr	r1, [pc, #300]	; (800982c <_strtod_l+0x58c>)
 8009700:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009704:	4642      	mov	r2, r8
 8009706:	464b      	mov	r3, r9
 8009708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800970c:	f7f6 ff7c 	bl	8000608 <__aeabi_dmul>
 8009710:	4680      	mov	r8, r0
 8009712:	4689      	mov	r9, r1
 8009714:	f035 050f 	bics.w	r5, r5, #15
 8009718:	d04d      	beq.n	80097b6 <_strtod_l+0x516>
 800971a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800971e:	dd22      	ble.n	8009766 <_strtod_l+0x4c6>
 8009720:	2500      	movs	r5, #0
 8009722:	46ab      	mov	fp, r5
 8009724:	9509      	str	r5, [sp, #36]	; 0x24
 8009726:	9505      	str	r5, [sp, #20]
 8009728:	2322      	movs	r3, #34	; 0x22
 800972a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009834 <_strtod_l+0x594>
 800972e:	6023      	str	r3, [r4, #0]
 8009730:	f04f 0800 	mov.w	r8, #0
 8009734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009736:	2b00      	cmp	r3, #0
 8009738:	f43f aded 	beq.w	8009316 <_strtod_l+0x76>
 800973c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800973e:	4620      	mov	r0, r4
 8009740:	f7ff f924 	bl	800898c <_Bfree>
 8009744:	9905      	ldr	r1, [sp, #20]
 8009746:	4620      	mov	r0, r4
 8009748:	f7ff f920 	bl	800898c <_Bfree>
 800974c:	4659      	mov	r1, fp
 800974e:	4620      	mov	r0, r4
 8009750:	f7ff f91c 	bl	800898c <_Bfree>
 8009754:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009756:	4620      	mov	r0, r4
 8009758:	f7ff f918 	bl	800898c <_Bfree>
 800975c:	4629      	mov	r1, r5
 800975e:	4620      	mov	r0, r4
 8009760:	f7ff f914 	bl	800898c <_Bfree>
 8009764:	e5d7      	b.n	8009316 <_strtod_l+0x76>
 8009766:	4b32      	ldr	r3, [pc, #200]	; (8009830 <_strtod_l+0x590>)
 8009768:	9304      	str	r3, [sp, #16]
 800976a:	2300      	movs	r3, #0
 800976c:	112d      	asrs	r5, r5, #4
 800976e:	4640      	mov	r0, r8
 8009770:	4649      	mov	r1, r9
 8009772:	469a      	mov	sl, r3
 8009774:	2d01      	cmp	r5, #1
 8009776:	dc21      	bgt.n	80097bc <_strtod_l+0x51c>
 8009778:	b10b      	cbz	r3, 800977e <_strtod_l+0x4de>
 800977a:	4680      	mov	r8, r0
 800977c:	4689      	mov	r9, r1
 800977e:	492c      	ldr	r1, [pc, #176]	; (8009830 <_strtod_l+0x590>)
 8009780:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009784:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009788:	4642      	mov	r2, r8
 800978a:	464b      	mov	r3, r9
 800978c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009790:	f7f6 ff3a 	bl	8000608 <__aeabi_dmul>
 8009794:	4b27      	ldr	r3, [pc, #156]	; (8009834 <_strtod_l+0x594>)
 8009796:	460a      	mov	r2, r1
 8009798:	400b      	ands	r3, r1
 800979a:	4927      	ldr	r1, [pc, #156]	; (8009838 <_strtod_l+0x598>)
 800979c:	428b      	cmp	r3, r1
 800979e:	4680      	mov	r8, r0
 80097a0:	d8be      	bhi.n	8009720 <_strtod_l+0x480>
 80097a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80097a6:	428b      	cmp	r3, r1
 80097a8:	bf86      	itte	hi
 80097aa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800983c <_strtod_l+0x59c>
 80097ae:	f04f 38ff 	movhi.w	r8, #4294967295
 80097b2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80097b6:	2300      	movs	r3, #0
 80097b8:	9304      	str	r3, [sp, #16]
 80097ba:	e07b      	b.n	80098b4 <_strtod_l+0x614>
 80097bc:	07ea      	lsls	r2, r5, #31
 80097be:	d505      	bpl.n	80097cc <_strtod_l+0x52c>
 80097c0:	9b04      	ldr	r3, [sp, #16]
 80097c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c6:	f7f6 ff1f 	bl	8000608 <__aeabi_dmul>
 80097ca:	2301      	movs	r3, #1
 80097cc:	9a04      	ldr	r2, [sp, #16]
 80097ce:	3208      	adds	r2, #8
 80097d0:	f10a 0a01 	add.w	sl, sl, #1
 80097d4:	106d      	asrs	r5, r5, #1
 80097d6:	9204      	str	r2, [sp, #16]
 80097d8:	e7cc      	b.n	8009774 <_strtod_l+0x4d4>
 80097da:	d0ec      	beq.n	80097b6 <_strtod_l+0x516>
 80097dc:	426d      	negs	r5, r5
 80097de:	f015 020f 	ands.w	r2, r5, #15
 80097e2:	d00a      	beq.n	80097fa <_strtod_l+0x55a>
 80097e4:	4b11      	ldr	r3, [pc, #68]	; (800982c <_strtod_l+0x58c>)
 80097e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097ea:	4640      	mov	r0, r8
 80097ec:	4649      	mov	r1, r9
 80097ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f2:	f7f7 f833 	bl	800085c <__aeabi_ddiv>
 80097f6:	4680      	mov	r8, r0
 80097f8:	4689      	mov	r9, r1
 80097fa:	112d      	asrs	r5, r5, #4
 80097fc:	d0db      	beq.n	80097b6 <_strtod_l+0x516>
 80097fe:	2d1f      	cmp	r5, #31
 8009800:	dd1e      	ble.n	8009840 <_strtod_l+0x5a0>
 8009802:	2500      	movs	r5, #0
 8009804:	46ab      	mov	fp, r5
 8009806:	9509      	str	r5, [sp, #36]	; 0x24
 8009808:	9505      	str	r5, [sp, #20]
 800980a:	2322      	movs	r3, #34	; 0x22
 800980c:	f04f 0800 	mov.w	r8, #0
 8009810:	f04f 0900 	mov.w	r9, #0
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	e78d      	b.n	8009734 <_strtod_l+0x494>
 8009818:	0800b1ad 	.word	0x0800b1ad
 800981c:	0800b3d4 	.word	0x0800b3d4
 8009820:	0800b1a5 	.word	0x0800b1a5
 8009824:	0800b1dc 	.word	0x0800b1dc
 8009828:	0800b565 	.word	0x0800b565
 800982c:	0800b2e8 	.word	0x0800b2e8
 8009830:	0800b2c0 	.word	0x0800b2c0
 8009834:	7ff00000 	.word	0x7ff00000
 8009838:	7ca00000 	.word	0x7ca00000
 800983c:	7fefffff 	.word	0x7fefffff
 8009840:	f015 0310 	ands.w	r3, r5, #16
 8009844:	bf18      	it	ne
 8009846:	236a      	movne	r3, #106	; 0x6a
 8009848:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009bec <_strtod_l+0x94c>
 800984c:	9304      	str	r3, [sp, #16]
 800984e:	4640      	mov	r0, r8
 8009850:	4649      	mov	r1, r9
 8009852:	2300      	movs	r3, #0
 8009854:	07ea      	lsls	r2, r5, #31
 8009856:	d504      	bpl.n	8009862 <_strtod_l+0x5c2>
 8009858:	e9da 2300 	ldrd	r2, r3, [sl]
 800985c:	f7f6 fed4 	bl	8000608 <__aeabi_dmul>
 8009860:	2301      	movs	r3, #1
 8009862:	106d      	asrs	r5, r5, #1
 8009864:	f10a 0a08 	add.w	sl, sl, #8
 8009868:	d1f4      	bne.n	8009854 <_strtod_l+0x5b4>
 800986a:	b10b      	cbz	r3, 8009870 <_strtod_l+0x5d0>
 800986c:	4680      	mov	r8, r0
 800986e:	4689      	mov	r9, r1
 8009870:	9b04      	ldr	r3, [sp, #16]
 8009872:	b1bb      	cbz	r3, 80098a4 <_strtod_l+0x604>
 8009874:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009878:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800987c:	2b00      	cmp	r3, #0
 800987e:	4649      	mov	r1, r9
 8009880:	dd10      	ble.n	80098a4 <_strtod_l+0x604>
 8009882:	2b1f      	cmp	r3, #31
 8009884:	f340 811e 	ble.w	8009ac4 <_strtod_l+0x824>
 8009888:	2b34      	cmp	r3, #52	; 0x34
 800988a:	bfde      	ittt	le
 800988c:	f04f 33ff 	movle.w	r3, #4294967295
 8009890:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009894:	4093      	lslle	r3, r2
 8009896:	f04f 0800 	mov.w	r8, #0
 800989a:	bfcc      	ite	gt
 800989c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80098a0:	ea03 0901 	andle.w	r9, r3, r1
 80098a4:	2200      	movs	r2, #0
 80098a6:	2300      	movs	r3, #0
 80098a8:	4640      	mov	r0, r8
 80098aa:	4649      	mov	r1, r9
 80098ac:	f7f7 f914 	bl	8000ad8 <__aeabi_dcmpeq>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d1a6      	bne.n	8009802 <_strtod_l+0x562>
 80098b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80098ba:	4633      	mov	r3, r6
 80098bc:	465a      	mov	r2, fp
 80098be:	4620      	mov	r0, r4
 80098c0:	f7ff f8cc 	bl	8008a5c <__s2b>
 80098c4:	9009      	str	r0, [sp, #36]	; 0x24
 80098c6:	2800      	cmp	r0, #0
 80098c8:	f43f af2a 	beq.w	8009720 <_strtod_l+0x480>
 80098cc:	9a08      	ldr	r2, [sp, #32]
 80098ce:	9b05      	ldr	r3, [sp, #20]
 80098d0:	2a00      	cmp	r2, #0
 80098d2:	eba3 0307 	sub.w	r3, r3, r7
 80098d6:	bfa8      	it	ge
 80098d8:	2300      	movge	r3, #0
 80098da:	930c      	str	r3, [sp, #48]	; 0x30
 80098dc:	2500      	movs	r5, #0
 80098de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80098e2:	9312      	str	r3, [sp, #72]	; 0x48
 80098e4:	46ab      	mov	fp, r5
 80098e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098e8:	4620      	mov	r0, r4
 80098ea:	6859      	ldr	r1, [r3, #4]
 80098ec:	f7ff f80e 	bl	800890c <_Balloc>
 80098f0:	9005      	str	r0, [sp, #20]
 80098f2:	2800      	cmp	r0, #0
 80098f4:	f43f af18 	beq.w	8009728 <_strtod_l+0x488>
 80098f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098fa:	691a      	ldr	r2, [r3, #16]
 80098fc:	3202      	adds	r2, #2
 80098fe:	f103 010c 	add.w	r1, r3, #12
 8009902:	0092      	lsls	r2, r2, #2
 8009904:	300c      	adds	r0, #12
 8009906:	f7fe f872 	bl	80079ee <memcpy>
 800990a:	ec49 8b10 	vmov	d0, r8, r9
 800990e:	aa18      	add	r2, sp, #96	; 0x60
 8009910:	a917      	add	r1, sp, #92	; 0x5c
 8009912:	4620      	mov	r0, r4
 8009914:	f7ff fbd6 	bl	80090c4 <__d2b>
 8009918:	ec49 8b18 	vmov	d8, r8, r9
 800991c:	9016      	str	r0, [sp, #88]	; 0x58
 800991e:	2800      	cmp	r0, #0
 8009920:	f43f af02 	beq.w	8009728 <_strtod_l+0x488>
 8009924:	2101      	movs	r1, #1
 8009926:	4620      	mov	r0, r4
 8009928:	f7ff f930 	bl	8008b8c <__i2b>
 800992c:	4683      	mov	fp, r0
 800992e:	2800      	cmp	r0, #0
 8009930:	f43f aefa 	beq.w	8009728 <_strtod_l+0x488>
 8009934:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009936:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009938:	2e00      	cmp	r6, #0
 800993a:	bfab      	itete	ge
 800993c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800993e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009940:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009942:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009946:	bfac      	ite	ge
 8009948:	eb06 0a03 	addge.w	sl, r6, r3
 800994c:	1b9f      	sublt	r7, r3, r6
 800994e:	9b04      	ldr	r3, [sp, #16]
 8009950:	1af6      	subs	r6, r6, r3
 8009952:	4416      	add	r6, r2
 8009954:	4ba0      	ldr	r3, [pc, #640]	; (8009bd8 <_strtod_l+0x938>)
 8009956:	3e01      	subs	r6, #1
 8009958:	429e      	cmp	r6, r3
 800995a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800995e:	f280 80c4 	bge.w	8009aea <_strtod_l+0x84a>
 8009962:	1b9b      	subs	r3, r3, r6
 8009964:	2b1f      	cmp	r3, #31
 8009966:	eba2 0203 	sub.w	r2, r2, r3
 800996a:	f04f 0101 	mov.w	r1, #1
 800996e:	f300 80b0 	bgt.w	8009ad2 <_strtod_l+0x832>
 8009972:	fa01 f303 	lsl.w	r3, r1, r3
 8009976:	930e      	str	r3, [sp, #56]	; 0x38
 8009978:	2300      	movs	r3, #0
 800997a:	930d      	str	r3, [sp, #52]	; 0x34
 800997c:	eb0a 0602 	add.w	r6, sl, r2
 8009980:	9b04      	ldr	r3, [sp, #16]
 8009982:	45b2      	cmp	sl, r6
 8009984:	4417      	add	r7, r2
 8009986:	441f      	add	r7, r3
 8009988:	4653      	mov	r3, sl
 800998a:	bfa8      	it	ge
 800998c:	4633      	movge	r3, r6
 800998e:	42bb      	cmp	r3, r7
 8009990:	bfa8      	it	ge
 8009992:	463b      	movge	r3, r7
 8009994:	2b00      	cmp	r3, #0
 8009996:	bfc2      	ittt	gt
 8009998:	1af6      	subgt	r6, r6, r3
 800999a:	1aff      	subgt	r7, r7, r3
 800999c:	ebaa 0a03 	subgt.w	sl, sl, r3
 80099a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	dd17      	ble.n	80099d6 <_strtod_l+0x736>
 80099a6:	4659      	mov	r1, fp
 80099a8:	461a      	mov	r2, r3
 80099aa:	4620      	mov	r0, r4
 80099ac:	f7ff f9ae 	bl	8008d0c <__pow5mult>
 80099b0:	4683      	mov	fp, r0
 80099b2:	2800      	cmp	r0, #0
 80099b4:	f43f aeb8 	beq.w	8009728 <_strtod_l+0x488>
 80099b8:	4601      	mov	r1, r0
 80099ba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80099bc:	4620      	mov	r0, r4
 80099be:	f7ff f8fb 	bl	8008bb8 <__multiply>
 80099c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80099c4:	2800      	cmp	r0, #0
 80099c6:	f43f aeaf 	beq.w	8009728 <_strtod_l+0x488>
 80099ca:	9916      	ldr	r1, [sp, #88]	; 0x58
 80099cc:	4620      	mov	r0, r4
 80099ce:	f7fe ffdd 	bl	800898c <_Bfree>
 80099d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099d4:	9316      	str	r3, [sp, #88]	; 0x58
 80099d6:	2e00      	cmp	r6, #0
 80099d8:	f300 808c 	bgt.w	8009af4 <_strtod_l+0x854>
 80099dc:	9b08      	ldr	r3, [sp, #32]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	dd08      	ble.n	80099f4 <_strtod_l+0x754>
 80099e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099e4:	9905      	ldr	r1, [sp, #20]
 80099e6:	4620      	mov	r0, r4
 80099e8:	f7ff f990 	bl	8008d0c <__pow5mult>
 80099ec:	9005      	str	r0, [sp, #20]
 80099ee:	2800      	cmp	r0, #0
 80099f0:	f43f ae9a 	beq.w	8009728 <_strtod_l+0x488>
 80099f4:	2f00      	cmp	r7, #0
 80099f6:	dd08      	ble.n	8009a0a <_strtod_l+0x76a>
 80099f8:	9905      	ldr	r1, [sp, #20]
 80099fa:	463a      	mov	r2, r7
 80099fc:	4620      	mov	r0, r4
 80099fe:	f7ff f9df 	bl	8008dc0 <__lshift>
 8009a02:	9005      	str	r0, [sp, #20]
 8009a04:	2800      	cmp	r0, #0
 8009a06:	f43f ae8f 	beq.w	8009728 <_strtod_l+0x488>
 8009a0a:	f1ba 0f00 	cmp.w	sl, #0
 8009a0e:	dd08      	ble.n	8009a22 <_strtod_l+0x782>
 8009a10:	4659      	mov	r1, fp
 8009a12:	4652      	mov	r2, sl
 8009a14:	4620      	mov	r0, r4
 8009a16:	f7ff f9d3 	bl	8008dc0 <__lshift>
 8009a1a:	4683      	mov	fp, r0
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	f43f ae83 	beq.w	8009728 <_strtod_l+0x488>
 8009a22:	9a05      	ldr	r2, [sp, #20]
 8009a24:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009a26:	4620      	mov	r0, r4
 8009a28:	f7ff fa52 	bl	8008ed0 <__mdiff>
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	f43f ae7a 	beq.w	8009728 <_strtod_l+0x488>
 8009a34:	68c3      	ldr	r3, [r0, #12]
 8009a36:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a38:	2300      	movs	r3, #0
 8009a3a:	60c3      	str	r3, [r0, #12]
 8009a3c:	4659      	mov	r1, fp
 8009a3e:	f7ff fa2b 	bl	8008e98 <__mcmp>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	da60      	bge.n	8009b08 <_strtod_l+0x868>
 8009a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a48:	ea53 0308 	orrs.w	r3, r3, r8
 8009a4c:	f040 8084 	bne.w	8009b58 <_strtod_l+0x8b8>
 8009a50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d17f      	bne.n	8009b58 <_strtod_l+0x8b8>
 8009a58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a5c:	0d1b      	lsrs	r3, r3, #20
 8009a5e:	051b      	lsls	r3, r3, #20
 8009a60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a64:	d978      	bls.n	8009b58 <_strtod_l+0x8b8>
 8009a66:	696b      	ldr	r3, [r5, #20]
 8009a68:	b913      	cbnz	r3, 8009a70 <_strtod_l+0x7d0>
 8009a6a:	692b      	ldr	r3, [r5, #16]
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	dd73      	ble.n	8009b58 <_strtod_l+0x8b8>
 8009a70:	4629      	mov	r1, r5
 8009a72:	2201      	movs	r2, #1
 8009a74:	4620      	mov	r0, r4
 8009a76:	f7ff f9a3 	bl	8008dc0 <__lshift>
 8009a7a:	4659      	mov	r1, fp
 8009a7c:	4605      	mov	r5, r0
 8009a7e:	f7ff fa0b 	bl	8008e98 <__mcmp>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	dd68      	ble.n	8009b58 <_strtod_l+0x8b8>
 8009a86:	9904      	ldr	r1, [sp, #16]
 8009a88:	4a54      	ldr	r2, [pc, #336]	; (8009bdc <_strtod_l+0x93c>)
 8009a8a:	464b      	mov	r3, r9
 8009a8c:	2900      	cmp	r1, #0
 8009a8e:	f000 8084 	beq.w	8009b9a <_strtod_l+0x8fa>
 8009a92:	ea02 0109 	and.w	r1, r2, r9
 8009a96:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009a9a:	dc7e      	bgt.n	8009b9a <_strtod_l+0x8fa>
 8009a9c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009aa0:	f77f aeb3 	ble.w	800980a <_strtod_l+0x56a>
 8009aa4:	4b4e      	ldr	r3, [pc, #312]	; (8009be0 <_strtod_l+0x940>)
 8009aa6:	4640      	mov	r0, r8
 8009aa8:	4649      	mov	r1, r9
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f7f6 fdac 	bl	8000608 <__aeabi_dmul>
 8009ab0:	4b4a      	ldr	r3, [pc, #296]	; (8009bdc <_strtod_l+0x93c>)
 8009ab2:	400b      	ands	r3, r1
 8009ab4:	4680      	mov	r8, r0
 8009ab6:	4689      	mov	r9, r1
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	f47f ae3f 	bne.w	800973c <_strtod_l+0x49c>
 8009abe:	2322      	movs	r3, #34	; 0x22
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	e63b      	b.n	800973c <_strtod_l+0x49c>
 8009ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8009acc:	ea03 0808 	and.w	r8, r3, r8
 8009ad0:	e6e8      	b.n	80098a4 <_strtod_l+0x604>
 8009ad2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009ad6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009ada:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009ade:	36e2      	adds	r6, #226	; 0xe2
 8009ae0:	fa01 f306 	lsl.w	r3, r1, r6
 8009ae4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009ae8:	e748      	b.n	800997c <_strtod_l+0x6dc>
 8009aea:	2100      	movs	r1, #0
 8009aec:	2301      	movs	r3, #1
 8009aee:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009af2:	e743      	b.n	800997c <_strtod_l+0x6dc>
 8009af4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009af6:	4632      	mov	r2, r6
 8009af8:	4620      	mov	r0, r4
 8009afa:	f7ff f961 	bl	8008dc0 <__lshift>
 8009afe:	9016      	str	r0, [sp, #88]	; 0x58
 8009b00:	2800      	cmp	r0, #0
 8009b02:	f47f af6b 	bne.w	80099dc <_strtod_l+0x73c>
 8009b06:	e60f      	b.n	8009728 <_strtod_l+0x488>
 8009b08:	46ca      	mov	sl, r9
 8009b0a:	d171      	bne.n	8009bf0 <_strtod_l+0x950>
 8009b0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b12:	b352      	cbz	r2, 8009b6a <_strtod_l+0x8ca>
 8009b14:	4a33      	ldr	r2, [pc, #204]	; (8009be4 <_strtod_l+0x944>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d12a      	bne.n	8009b70 <_strtod_l+0x8d0>
 8009b1a:	9b04      	ldr	r3, [sp, #16]
 8009b1c:	4641      	mov	r1, r8
 8009b1e:	b1fb      	cbz	r3, 8009b60 <_strtod_l+0x8c0>
 8009b20:	4b2e      	ldr	r3, [pc, #184]	; (8009bdc <_strtod_l+0x93c>)
 8009b22:	ea09 0303 	and.w	r3, r9, r3
 8009b26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b2e:	d81a      	bhi.n	8009b66 <_strtod_l+0x8c6>
 8009b30:	0d1b      	lsrs	r3, r3, #20
 8009b32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009b36:	fa02 f303 	lsl.w	r3, r2, r3
 8009b3a:	4299      	cmp	r1, r3
 8009b3c:	d118      	bne.n	8009b70 <_strtod_l+0x8d0>
 8009b3e:	4b2a      	ldr	r3, [pc, #168]	; (8009be8 <_strtod_l+0x948>)
 8009b40:	459a      	cmp	sl, r3
 8009b42:	d102      	bne.n	8009b4a <_strtod_l+0x8aa>
 8009b44:	3101      	adds	r1, #1
 8009b46:	f43f adef 	beq.w	8009728 <_strtod_l+0x488>
 8009b4a:	4b24      	ldr	r3, [pc, #144]	; (8009bdc <_strtod_l+0x93c>)
 8009b4c:	ea0a 0303 	and.w	r3, sl, r3
 8009b50:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009b54:	f04f 0800 	mov.w	r8, #0
 8009b58:	9b04      	ldr	r3, [sp, #16]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1a2      	bne.n	8009aa4 <_strtod_l+0x804>
 8009b5e:	e5ed      	b.n	800973c <_strtod_l+0x49c>
 8009b60:	f04f 33ff 	mov.w	r3, #4294967295
 8009b64:	e7e9      	b.n	8009b3a <_strtod_l+0x89a>
 8009b66:	4613      	mov	r3, r2
 8009b68:	e7e7      	b.n	8009b3a <_strtod_l+0x89a>
 8009b6a:	ea53 0308 	orrs.w	r3, r3, r8
 8009b6e:	d08a      	beq.n	8009a86 <_strtod_l+0x7e6>
 8009b70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b72:	b1e3      	cbz	r3, 8009bae <_strtod_l+0x90e>
 8009b74:	ea13 0f0a 	tst.w	r3, sl
 8009b78:	d0ee      	beq.n	8009b58 <_strtod_l+0x8b8>
 8009b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b7c:	9a04      	ldr	r2, [sp, #16]
 8009b7e:	4640      	mov	r0, r8
 8009b80:	4649      	mov	r1, r9
 8009b82:	b1c3      	cbz	r3, 8009bb6 <_strtod_l+0x916>
 8009b84:	f7ff fb6f 	bl	8009266 <sulp>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	ec51 0b18 	vmov	r0, r1, d8
 8009b90:	f7f6 fb84 	bl	800029c <__adddf3>
 8009b94:	4680      	mov	r8, r0
 8009b96:	4689      	mov	r9, r1
 8009b98:	e7de      	b.n	8009b58 <_strtod_l+0x8b8>
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009ba0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009ba4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009ba8:	f04f 38ff 	mov.w	r8, #4294967295
 8009bac:	e7d4      	b.n	8009b58 <_strtod_l+0x8b8>
 8009bae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bb0:	ea13 0f08 	tst.w	r3, r8
 8009bb4:	e7e0      	b.n	8009b78 <_strtod_l+0x8d8>
 8009bb6:	f7ff fb56 	bl	8009266 <sulp>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	ec51 0b18 	vmov	r0, r1, d8
 8009bc2:	f7f6 fb69 	bl	8000298 <__aeabi_dsub>
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4680      	mov	r8, r0
 8009bcc:	4689      	mov	r9, r1
 8009bce:	f7f6 ff83 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	d0c0      	beq.n	8009b58 <_strtod_l+0x8b8>
 8009bd6:	e618      	b.n	800980a <_strtod_l+0x56a>
 8009bd8:	fffffc02 	.word	0xfffffc02
 8009bdc:	7ff00000 	.word	0x7ff00000
 8009be0:	39500000 	.word	0x39500000
 8009be4:	000fffff 	.word	0x000fffff
 8009be8:	7fefffff 	.word	0x7fefffff
 8009bec:	0800b3e8 	.word	0x0800b3e8
 8009bf0:	4659      	mov	r1, fp
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	f7ff fac0 	bl	8009178 <__ratio>
 8009bf8:	ec57 6b10 	vmov	r6, r7, d0
 8009bfc:	ee10 0a10 	vmov	r0, s0
 8009c00:	2200      	movs	r2, #0
 8009c02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c06:	4639      	mov	r1, r7
 8009c08:	f7f6 ff7a 	bl	8000b00 <__aeabi_dcmple>
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	d071      	beq.n	8009cf4 <_strtod_l+0xa54>
 8009c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d17c      	bne.n	8009d10 <_strtod_l+0xa70>
 8009c16:	f1b8 0f00 	cmp.w	r8, #0
 8009c1a:	d15a      	bne.n	8009cd2 <_strtod_l+0xa32>
 8009c1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d15d      	bne.n	8009ce0 <_strtod_l+0xa40>
 8009c24:	4b90      	ldr	r3, [pc, #576]	; (8009e68 <_strtod_l+0xbc8>)
 8009c26:	2200      	movs	r2, #0
 8009c28:	4630      	mov	r0, r6
 8009c2a:	4639      	mov	r1, r7
 8009c2c:	f7f6 ff5e 	bl	8000aec <__aeabi_dcmplt>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	d15c      	bne.n	8009cee <_strtod_l+0xa4e>
 8009c34:	4630      	mov	r0, r6
 8009c36:	4639      	mov	r1, r7
 8009c38:	4b8c      	ldr	r3, [pc, #560]	; (8009e6c <_strtod_l+0xbcc>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f7f6 fce4 	bl	8000608 <__aeabi_dmul>
 8009c40:	4606      	mov	r6, r0
 8009c42:	460f      	mov	r7, r1
 8009c44:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009c48:	9606      	str	r6, [sp, #24]
 8009c4a:	9307      	str	r3, [sp, #28]
 8009c4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c50:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009c54:	4b86      	ldr	r3, [pc, #536]	; (8009e70 <_strtod_l+0xbd0>)
 8009c56:	ea0a 0303 	and.w	r3, sl, r3
 8009c5a:	930d      	str	r3, [sp, #52]	; 0x34
 8009c5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c5e:	4b85      	ldr	r3, [pc, #532]	; (8009e74 <_strtod_l+0xbd4>)
 8009c60:	429a      	cmp	r2, r3
 8009c62:	f040 8090 	bne.w	8009d86 <_strtod_l+0xae6>
 8009c66:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009c6a:	ec49 8b10 	vmov	d0, r8, r9
 8009c6e:	f7ff f9b9 	bl	8008fe4 <__ulp>
 8009c72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c76:	ec51 0b10 	vmov	r0, r1, d0
 8009c7a:	f7f6 fcc5 	bl	8000608 <__aeabi_dmul>
 8009c7e:	4642      	mov	r2, r8
 8009c80:	464b      	mov	r3, r9
 8009c82:	f7f6 fb0b 	bl	800029c <__adddf3>
 8009c86:	460b      	mov	r3, r1
 8009c88:	4979      	ldr	r1, [pc, #484]	; (8009e70 <_strtod_l+0xbd0>)
 8009c8a:	4a7b      	ldr	r2, [pc, #492]	; (8009e78 <_strtod_l+0xbd8>)
 8009c8c:	4019      	ands	r1, r3
 8009c8e:	4291      	cmp	r1, r2
 8009c90:	4680      	mov	r8, r0
 8009c92:	d944      	bls.n	8009d1e <_strtod_l+0xa7e>
 8009c94:	ee18 2a90 	vmov	r2, s17
 8009c98:	4b78      	ldr	r3, [pc, #480]	; (8009e7c <_strtod_l+0xbdc>)
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d104      	bne.n	8009ca8 <_strtod_l+0xa08>
 8009c9e:	ee18 3a10 	vmov	r3, s16
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	f43f ad40 	beq.w	8009728 <_strtod_l+0x488>
 8009ca8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009e7c <_strtod_l+0xbdc>
 8009cac:	f04f 38ff 	mov.w	r8, #4294967295
 8009cb0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f7fe fe6a 	bl	800898c <_Bfree>
 8009cb8:	9905      	ldr	r1, [sp, #20]
 8009cba:	4620      	mov	r0, r4
 8009cbc:	f7fe fe66 	bl	800898c <_Bfree>
 8009cc0:	4659      	mov	r1, fp
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	f7fe fe62 	bl	800898c <_Bfree>
 8009cc8:	4629      	mov	r1, r5
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f7fe fe5e 	bl	800898c <_Bfree>
 8009cd0:	e609      	b.n	80098e6 <_strtod_l+0x646>
 8009cd2:	f1b8 0f01 	cmp.w	r8, #1
 8009cd6:	d103      	bne.n	8009ce0 <_strtod_l+0xa40>
 8009cd8:	f1b9 0f00 	cmp.w	r9, #0
 8009cdc:	f43f ad95 	beq.w	800980a <_strtod_l+0x56a>
 8009ce0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009e38 <_strtod_l+0xb98>
 8009ce4:	4f60      	ldr	r7, [pc, #384]	; (8009e68 <_strtod_l+0xbc8>)
 8009ce6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009cea:	2600      	movs	r6, #0
 8009cec:	e7ae      	b.n	8009c4c <_strtod_l+0x9ac>
 8009cee:	4f5f      	ldr	r7, [pc, #380]	; (8009e6c <_strtod_l+0xbcc>)
 8009cf0:	2600      	movs	r6, #0
 8009cf2:	e7a7      	b.n	8009c44 <_strtod_l+0x9a4>
 8009cf4:	4b5d      	ldr	r3, [pc, #372]	; (8009e6c <_strtod_l+0xbcc>)
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	4639      	mov	r1, r7
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f7f6 fc84 	bl	8000608 <__aeabi_dmul>
 8009d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d02:	4606      	mov	r6, r0
 8009d04:	460f      	mov	r7, r1
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d09c      	beq.n	8009c44 <_strtod_l+0x9a4>
 8009d0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009d0e:	e79d      	b.n	8009c4c <_strtod_l+0x9ac>
 8009d10:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009e40 <_strtod_l+0xba0>
 8009d14:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009d18:	ec57 6b17 	vmov	r6, r7, d7
 8009d1c:	e796      	b.n	8009c4c <_strtod_l+0x9ac>
 8009d1e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009d22:	9b04      	ldr	r3, [sp, #16]
 8009d24:	46ca      	mov	sl, r9
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1c2      	bne.n	8009cb0 <_strtod_l+0xa10>
 8009d2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d30:	0d1b      	lsrs	r3, r3, #20
 8009d32:	051b      	lsls	r3, r3, #20
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d1bb      	bne.n	8009cb0 <_strtod_l+0xa10>
 8009d38:	4630      	mov	r0, r6
 8009d3a:	4639      	mov	r1, r7
 8009d3c:	f7f6 ffc4 	bl	8000cc8 <__aeabi_d2lz>
 8009d40:	f7f6 fc34 	bl	80005ac <__aeabi_l2d>
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	4630      	mov	r0, r6
 8009d4a:	4639      	mov	r1, r7
 8009d4c:	f7f6 faa4 	bl	8000298 <__aeabi_dsub>
 8009d50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d56:	ea43 0308 	orr.w	r3, r3, r8
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	4606      	mov	r6, r0
 8009d5e:	460f      	mov	r7, r1
 8009d60:	d054      	beq.n	8009e0c <_strtod_l+0xb6c>
 8009d62:	a339      	add	r3, pc, #228	; (adr r3, 8009e48 <_strtod_l+0xba8>)
 8009d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d68:	f7f6 fec0 	bl	8000aec <__aeabi_dcmplt>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	f47f ace5 	bne.w	800973c <_strtod_l+0x49c>
 8009d72:	a337      	add	r3, pc, #220	; (adr r3, 8009e50 <_strtod_l+0xbb0>)
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	4630      	mov	r0, r6
 8009d7a:	4639      	mov	r1, r7
 8009d7c:	f7f6 fed4 	bl	8000b28 <__aeabi_dcmpgt>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	d095      	beq.n	8009cb0 <_strtod_l+0xa10>
 8009d84:	e4da      	b.n	800973c <_strtod_l+0x49c>
 8009d86:	9b04      	ldr	r3, [sp, #16]
 8009d88:	b333      	cbz	r3, 8009dd8 <_strtod_l+0xb38>
 8009d8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009d90:	d822      	bhi.n	8009dd8 <_strtod_l+0xb38>
 8009d92:	a331      	add	r3, pc, #196	; (adr r3, 8009e58 <_strtod_l+0xbb8>)
 8009d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d98:	4630      	mov	r0, r6
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	f7f6 feb0 	bl	8000b00 <__aeabi_dcmple>
 8009da0:	b1a0      	cbz	r0, 8009dcc <_strtod_l+0xb2c>
 8009da2:	4639      	mov	r1, r7
 8009da4:	4630      	mov	r0, r6
 8009da6:	f7f6 ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8009daa:	2801      	cmp	r0, #1
 8009dac:	bf38      	it	cc
 8009dae:	2001      	movcc	r0, #1
 8009db0:	f7f6 fbb0 	bl	8000514 <__aeabi_ui2d>
 8009db4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009db6:	4606      	mov	r6, r0
 8009db8:	460f      	mov	r7, r1
 8009dba:	bb23      	cbnz	r3, 8009e06 <_strtod_l+0xb66>
 8009dbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009dc0:	9010      	str	r0, [sp, #64]	; 0x40
 8009dc2:	9311      	str	r3, [sp, #68]	; 0x44
 8009dc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009dc8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009dcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009dce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dd0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009dd4:	1a9b      	subs	r3, r3, r2
 8009dd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009dd8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009ddc:	eeb0 0a48 	vmov.f32	s0, s16
 8009de0:	eef0 0a68 	vmov.f32	s1, s17
 8009de4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009de8:	f7ff f8fc 	bl	8008fe4 <__ulp>
 8009dec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009df0:	ec53 2b10 	vmov	r2, r3, d0
 8009df4:	f7f6 fc08 	bl	8000608 <__aeabi_dmul>
 8009df8:	ec53 2b18 	vmov	r2, r3, d8
 8009dfc:	f7f6 fa4e 	bl	800029c <__adddf3>
 8009e00:	4680      	mov	r8, r0
 8009e02:	4689      	mov	r9, r1
 8009e04:	e78d      	b.n	8009d22 <_strtod_l+0xa82>
 8009e06:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009e0a:	e7db      	b.n	8009dc4 <_strtod_l+0xb24>
 8009e0c:	a314      	add	r3, pc, #80	; (adr r3, 8009e60 <_strtod_l+0xbc0>)
 8009e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e12:	f7f6 fe6b 	bl	8000aec <__aeabi_dcmplt>
 8009e16:	e7b3      	b.n	8009d80 <_strtod_l+0xae0>
 8009e18:	2300      	movs	r3, #0
 8009e1a:	930a      	str	r3, [sp, #40]	; 0x28
 8009e1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009e1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e20:	6013      	str	r3, [r2, #0]
 8009e22:	f7ff ba7c 	b.w	800931e <_strtod_l+0x7e>
 8009e26:	2a65      	cmp	r2, #101	; 0x65
 8009e28:	f43f ab75 	beq.w	8009516 <_strtod_l+0x276>
 8009e2c:	2a45      	cmp	r2, #69	; 0x45
 8009e2e:	f43f ab72 	beq.w	8009516 <_strtod_l+0x276>
 8009e32:	2301      	movs	r3, #1
 8009e34:	f7ff bbaa 	b.w	800958c <_strtod_l+0x2ec>
 8009e38:	00000000 	.word	0x00000000
 8009e3c:	bff00000 	.word	0xbff00000
 8009e40:	00000000 	.word	0x00000000
 8009e44:	3ff00000 	.word	0x3ff00000
 8009e48:	94a03595 	.word	0x94a03595
 8009e4c:	3fdfffff 	.word	0x3fdfffff
 8009e50:	35afe535 	.word	0x35afe535
 8009e54:	3fe00000 	.word	0x3fe00000
 8009e58:	ffc00000 	.word	0xffc00000
 8009e5c:	41dfffff 	.word	0x41dfffff
 8009e60:	94a03595 	.word	0x94a03595
 8009e64:	3fcfffff 	.word	0x3fcfffff
 8009e68:	3ff00000 	.word	0x3ff00000
 8009e6c:	3fe00000 	.word	0x3fe00000
 8009e70:	7ff00000 	.word	0x7ff00000
 8009e74:	7fe00000 	.word	0x7fe00000
 8009e78:	7c9fffff 	.word	0x7c9fffff
 8009e7c:	7fefffff 	.word	0x7fefffff

08009e80 <_strtod_r>:
 8009e80:	4b01      	ldr	r3, [pc, #4]	; (8009e88 <_strtod_r+0x8>)
 8009e82:	f7ff ba0d 	b.w	80092a0 <_strtod_l>
 8009e86:	bf00      	nop
 8009e88:	2000006c 	.word	0x2000006c

08009e8c <_strtol_l.constprop.0>:
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e92:	d001      	beq.n	8009e98 <_strtol_l.constprop.0+0xc>
 8009e94:	2b24      	cmp	r3, #36	; 0x24
 8009e96:	d906      	bls.n	8009ea6 <_strtol_l.constprop.0+0x1a>
 8009e98:	f7fd fd7c 	bl	8007994 <__errno>
 8009e9c:	2316      	movs	r3, #22
 8009e9e:	6003      	str	r3, [r0, #0]
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009f8c <_strtol_l.constprop.0+0x100>
 8009eaa:	460d      	mov	r5, r1
 8009eac:	462e      	mov	r6, r5
 8009eae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009eb2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009eb6:	f017 0708 	ands.w	r7, r7, #8
 8009eba:	d1f7      	bne.n	8009eac <_strtol_l.constprop.0+0x20>
 8009ebc:	2c2d      	cmp	r4, #45	; 0x2d
 8009ebe:	d132      	bne.n	8009f26 <_strtol_l.constprop.0+0x9a>
 8009ec0:	782c      	ldrb	r4, [r5, #0]
 8009ec2:	2701      	movs	r7, #1
 8009ec4:	1cb5      	adds	r5, r6, #2
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d05b      	beq.n	8009f82 <_strtol_l.constprop.0+0xf6>
 8009eca:	2b10      	cmp	r3, #16
 8009ecc:	d109      	bne.n	8009ee2 <_strtol_l.constprop.0+0x56>
 8009ece:	2c30      	cmp	r4, #48	; 0x30
 8009ed0:	d107      	bne.n	8009ee2 <_strtol_l.constprop.0+0x56>
 8009ed2:	782c      	ldrb	r4, [r5, #0]
 8009ed4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009ed8:	2c58      	cmp	r4, #88	; 0x58
 8009eda:	d14d      	bne.n	8009f78 <_strtol_l.constprop.0+0xec>
 8009edc:	786c      	ldrb	r4, [r5, #1]
 8009ede:	2310      	movs	r3, #16
 8009ee0:	3502      	adds	r5, #2
 8009ee2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009ee6:	f108 38ff 	add.w	r8, r8, #4294967295
 8009eea:	f04f 0e00 	mov.w	lr, #0
 8009eee:	fbb8 f9f3 	udiv	r9, r8, r3
 8009ef2:	4676      	mov	r6, lr
 8009ef4:	fb03 8a19 	mls	sl, r3, r9, r8
 8009ef8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009efc:	f1bc 0f09 	cmp.w	ip, #9
 8009f00:	d816      	bhi.n	8009f30 <_strtol_l.constprop.0+0xa4>
 8009f02:	4664      	mov	r4, ip
 8009f04:	42a3      	cmp	r3, r4
 8009f06:	dd24      	ble.n	8009f52 <_strtol_l.constprop.0+0xc6>
 8009f08:	f1be 3fff 	cmp.w	lr, #4294967295
 8009f0c:	d008      	beq.n	8009f20 <_strtol_l.constprop.0+0x94>
 8009f0e:	45b1      	cmp	r9, r6
 8009f10:	d31c      	bcc.n	8009f4c <_strtol_l.constprop.0+0xc0>
 8009f12:	d101      	bne.n	8009f18 <_strtol_l.constprop.0+0x8c>
 8009f14:	45a2      	cmp	sl, r4
 8009f16:	db19      	blt.n	8009f4c <_strtol_l.constprop.0+0xc0>
 8009f18:	fb06 4603 	mla	r6, r6, r3, r4
 8009f1c:	f04f 0e01 	mov.w	lr, #1
 8009f20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f24:	e7e8      	b.n	8009ef8 <_strtol_l.constprop.0+0x6c>
 8009f26:	2c2b      	cmp	r4, #43	; 0x2b
 8009f28:	bf04      	itt	eq
 8009f2a:	782c      	ldrbeq	r4, [r5, #0]
 8009f2c:	1cb5      	addeq	r5, r6, #2
 8009f2e:	e7ca      	b.n	8009ec6 <_strtol_l.constprop.0+0x3a>
 8009f30:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009f34:	f1bc 0f19 	cmp.w	ip, #25
 8009f38:	d801      	bhi.n	8009f3e <_strtol_l.constprop.0+0xb2>
 8009f3a:	3c37      	subs	r4, #55	; 0x37
 8009f3c:	e7e2      	b.n	8009f04 <_strtol_l.constprop.0+0x78>
 8009f3e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009f42:	f1bc 0f19 	cmp.w	ip, #25
 8009f46:	d804      	bhi.n	8009f52 <_strtol_l.constprop.0+0xc6>
 8009f48:	3c57      	subs	r4, #87	; 0x57
 8009f4a:	e7db      	b.n	8009f04 <_strtol_l.constprop.0+0x78>
 8009f4c:	f04f 3eff 	mov.w	lr, #4294967295
 8009f50:	e7e6      	b.n	8009f20 <_strtol_l.constprop.0+0x94>
 8009f52:	f1be 3fff 	cmp.w	lr, #4294967295
 8009f56:	d105      	bne.n	8009f64 <_strtol_l.constprop.0+0xd8>
 8009f58:	2322      	movs	r3, #34	; 0x22
 8009f5a:	6003      	str	r3, [r0, #0]
 8009f5c:	4646      	mov	r6, r8
 8009f5e:	b942      	cbnz	r2, 8009f72 <_strtol_l.constprop.0+0xe6>
 8009f60:	4630      	mov	r0, r6
 8009f62:	e79e      	b.n	8009ea2 <_strtol_l.constprop.0+0x16>
 8009f64:	b107      	cbz	r7, 8009f68 <_strtol_l.constprop.0+0xdc>
 8009f66:	4276      	negs	r6, r6
 8009f68:	2a00      	cmp	r2, #0
 8009f6a:	d0f9      	beq.n	8009f60 <_strtol_l.constprop.0+0xd4>
 8009f6c:	f1be 0f00 	cmp.w	lr, #0
 8009f70:	d000      	beq.n	8009f74 <_strtol_l.constprop.0+0xe8>
 8009f72:	1e69      	subs	r1, r5, #1
 8009f74:	6011      	str	r1, [r2, #0]
 8009f76:	e7f3      	b.n	8009f60 <_strtol_l.constprop.0+0xd4>
 8009f78:	2430      	movs	r4, #48	; 0x30
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d1b1      	bne.n	8009ee2 <_strtol_l.constprop.0+0x56>
 8009f7e:	2308      	movs	r3, #8
 8009f80:	e7af      	b.n	8009ee2 <_strtol_l.constprop.0+0x56>
 8009f82:	2c30      	cmp	r4, #48	; 0x30
 8009f84:	d0a5      	beq.n	8009ed2 <_strtol_l.constprop.0+0x46>
 8009f86:	230a      	movs	r3, #10
 8009f88:	e7ab      	b.n	8009ee2 <_strtol_l.constprop.0+0x56>
 8009f8a:	bf00      	nop
 8009f8c:	0800b411 	.word	0x0800b411

08009f90 <_strtol_r>:
 8009f90:	f7ff bf7c 	b.w	8009e8c <_strtol_l.constprop.0>

08009f94 <__ssputs_r>:
 8009f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f98:	688e      	ldr	r6, [r1, #8]
 8009f9a:	461f      	mov	r7, r3
 8009f9c:	42be      	cmp	r6, r7
 8009f9e:	680b      	ldr	r3, [r1, #0]
 8009fa0:	4682      	mov	sl, r0
 8009fa2:	460c      	mov	r4, r1
 8009fa4:	4690      	mov	r8, r2
 8009fa6:	d82c      	bhi.n	800a002 <__ssputs_r+0x6e>
 8009fa8:	898a      	ldrh	r2, [r1, #12]
 8009faa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fae:	d026      	beq.n	8009ffe <__ssputs_r+0x6a>
 8009fb0:	6965      	ldr	r5, [r4, #20]
 8009fb2:	6909      	ldr	r1, [r1, #16]
 8009fb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fb8:	eba3 0901 	sub.w	r9, r3, r1
 8009fbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fc0:	1c7b      	adds	r3, r7, #1
 8009fc2:	444b      	add	r3, r9
 8009fc4:	106d      	asrs	r5, r5, #1
 8009fc6:	429d      	cmp	r5, r3
 8009fc8:	bf38      	it	cc
 8009fca:	461d      	movcc	r5, r3
 8009fcc:	0553      	lsls	r3, r2, #21
 8009fce:	d527      	bpl.n	800a020 <__ssputs_r+0x8c>
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	f7fe fc0f 	bl	80087f4 <_malloc_r>
 8009fd6:	4606      	mov	r6, r0
 8009fd8:	b360      	cbz	r0, 800a034 <__ssputs_r+0xa0>
 8009fda:	6921      	ldr	r1, [r4, #16]
 8009fdc:	464a      	mov	r2, r9
 8009fde:	f7fd fd06 	bl	80079ee <memcpy>
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fec:	81a3      	strh	r3, [r4, #12]
 8009fee:	6126      	str	r6, [r4, #16]
 8009ff0:	6165      	str	r5, [r4, #20]
 8009ff2:	444e      	add	r6, r9
 8009ff4:	eba5 0509 	sub.w	r5, r5, r9
 8009ff8:	6026      	str	r6, [r4, #0]
 8009ffa:	60a5      	str	r5, [r4, #8]
 8009ffc:	463e      	mov	r6, r7
 8009ffe:	42be      	cmp	r6, r7
 800a000:	d900      	bls.n	800a004 <__ssputs_r+0x70>
 800a002:	463e      	mov	r6, r7
 800a004:	6820      	ldr	r0, [r4, #0]
 800a006:	4632      	mov	r2, r6
 800a008:	4641      	mov	r1, r8
 800a00a:	f000 fb6f 	bl	800a6ec <memmove>
 800a00e:	68a3      	ldr	r3, [r4, #8]
 800a010:	1b9b      	subs	r3, r3, r6
 800a012:	60a3      	str	r3, [r4, #8]
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	4433      	add	r3, r6
 800a018:	6023      	str	r3, [r4, #0]
 800a01a:	2000      	movs	r0, #0
 800a01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a020:	462a      	mov	r2, r5
 800a022:	f000 ff66 	bl	800aef2 <_realloc_r>
 800a026:	4606      	mov	r6, r0
 800a028:	2800      	cmp	r0, #0
 800a02a:	d1e0      	bne.n	8009fee <__ssputs_r+0x5a>
 800a02c:	6921      	ldr	r1, [r4, #16]
 800a02e:	4650      	mov	r0, sl
 800a030:	f7fe fb6c 	bl	800870c <_free_r>
 800a034:	230c      	movs	r3, #12
 800a036:	f8ca 3000 	str.w	r3, [sl]
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a040:	81a3      	strh	r3, [r4, #12]
 800a042:	f04f 30ff 	mov.w	r0, #4294967295
 800a046:	e7e9      	b.n	800a01c <__ssputs_r+0x88>

0800a048 <_svfiprintf_r>:
 800a048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a04c:	4698      	mov	r8, r3
 800a04e:	898b      	ldrh	r3, [r1, #12]
 800a050:	061b      	lsls	r3, r3, #24
 800a052:	b09d      	sub	sp, #116	; 0x74
 800a054:	4607      	mov	r7, r0
 800a056:	460d      	mov	r5, r1
 800a058:	4614      	mov	r4, r2
 800a05a:	d50e      	bpl.n	800a07a <_svfiprintf_r+0x32>
 800a05c:	690b      	ldr	r3, [r1, #16]
 800a05e:	b963      	cbnz	r3, 800a07a <_svfiprintf_r+0x32>
 800a060:	2140      	movs	r1, #64	; 0x40
 800a062:	f7fe fbc7 	bl	80087f4 <_malloc_r>
 800a066:	6028      	str	r0, [r5, #0]
 800a068:	6128      	str	r0, [r5, #16]
 800a06a:	b920      	cbnz	r0, 800a076 <_svfiprintf_r+0x2e>
 800a06c:	230c      	movs	r3, #12
 800a06e:	603b      	str	r3, [r7, #0]
 800a070:	f04f 30ff 	mov.w	r0, #4294967295
 800a074:	e0d0      	b.n	800a218 <_svfiprintf_r+0x1d0>
 800a076:	2340      	movs	r3, #64	; 0x40
 800a078:	616b      	str	r3, [r5, #20]
 800a07a:	2300      	movs	r3, #0
 800a07c:	9309      	str	r3, [sp, #36]	; 0x24
 800a07e:	2320      	movs	r3, #32
 800a080:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a084:	f8cd 800c 	str.w	r8, [sp, #12]
 800a088:	2330      	movs	r3, #48	; 0x30
 800a08a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a230 <_svfiprintf_r+0x1e8>
 800a08e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a092:	f04f 0901 	mov.w	r9, #1
 800a096:	4623      	mov	r3, r4
 800a098:	469a      	mov	sl, r3
 800a09a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a09e:	b10a      	cbz	r2, 800a0a4 <_svfiprintf_r+0x5c>
 800a0a0:	2a25      	cmp	r2, #37	; 0x25
 800a0a2:	d1f9      	bne.n	800a098 <_svfiprintf_r+0x50>
 800a0a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a0a8:	d00b      	beq.n	800a0c2 <_svfiprintf_r+0x7a>
 800a0aa:	465b      	mov	r3, fp
 800a0ac:	4622      	mov	r2, r4
 800a0ae:	4629      	mov	r1, r5
 800a0b0:	4638      	mov	r0, r7
 800a0b2:	f7ff ff6f 	bl	8009f94 <__ssputs_r>
 800a0b6:	3001      	adds	r0, #1
 800a0b8:	f000 80a9 	beq.w	800a20e <_svfiprintf_r+0x1c6>
 800a0bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0be:	445a      	add	r2, fp
 800a0c0:	9209      	str	r2, [sp, #36]	; 0x24
 800a0c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f000 80a1 	beq.w	800a20e <_svfiprintf_r+0x1c6>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0d6:	f10a 0a01 	add.w	sl, sl, #1
 800a0da:	9304      	str	r3, [sp, #16]
 800a0dc:	9307      	str	r3, [sp, #28]
 800a0de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0e2:	931a      	str	r3, [sp, #104]	; 0x68
 800a0e4:	4654      	mov	r4, sl
 800a0e6:	2205      	movs	r2, #5
 800a0e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0ec:	4850      	ldr	r0, [pc, #320]	; (800a230 <_svfiprintf_r+0x1e8>)
 800a0ee:	f7f6 f877 	bl	80001e0 <memchr>
 800a0f2:	9a04      	ldr	r2, [sp, #16]
 800a0f4:	b9d8      	cbnz	r0, 800a12e <_svfiprintf_r+0xe6>
 800a0f6:	06d0      	lsls	r0, r2, #27
 800a0f8:	bf44      	itt	mi
 800a0fa:	2320      	movmi	r3, #32
 800a0fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a100:	0711      	lsls	r1, r2, #28
 800a102:	bf44      	itt	mi
 800a104:	232b      	movmi	r3, #43	; 0x2b
 800a106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a10a:	f89a 3000 	ldrb.w	r3, [sl]
 800a10e:	2b2a      	cmp	r3, #42	; 0x2a
 800a110:	d015      	beq.n	800a13e <_svfiprintf_r+0xf6>
 800a112:	9a07      	ldr	r2, [sp, #28]
 800a114:	4654      	mov	r4, sl
 800a116:	2000      	movs	r0, #0
 800a118:	f04f 0c0a 	mov.w	ip, #10
 800a11c:	4621      	mov	r1, r4
 800a11e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a122:	3b30      	subs	r3, #48	; 0x30
 800a124:	2b09      	cmp	r3, #9
 800a126:	d94d      	bls.n	800a1c4 <_svfiprintf_r+0x17c>
 800a128:	b1b0      	cbz	r0, 800a158 <_svfiprintf_r+0x110>
 800a12a:	9207      	str	r2, [sp, #28]
 800a12c:	e014      	b.n	800a158 <_svfiprintf_r+0x110>
 800a12e:	eba0 0308 	sub.w	r3, r0, r8
 800a132:	fa09 f303 	lsl.w	r3, r9, r3
 800a136:	4313      	orrs	r3, r2
 800a138:	9304      	str	r3, [sp, #16]
 800a13a:	46a2      	mov	sl, r4
 800a13c:	e7d2      	b.n	800a0e4 <_svfiprintf_r+0x9c>
 800a13e:	9b03      	ldr	r3, [sp, #12]
 800a140:	1d19      	adds	r1, r3, #4
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	9103      	str	r1, [sp, #12]
 800a146:	2b00      	cmp	r3, #0
 800a148:	bfbb      	ittet	lt
 800a14a:	425b      	neglt	r3, r3
 800a14c:	f042 0202 	orrlt.w	r2, r2, #2
 800a150:	9307      	strge	r3, [sp, #28]
 800a152:	9307      	strlt	r3, [sp, #28]
 800a154:	bfb8      	it	lt
 800a156:	9204      	strlt	r2, [sp, #16]
 800a158:	7823      	ldrb	r3, [r4, #0]
 800a15a:	2b2e      	cmp	r3, #46	; 0x2e
 800a15c:	d10c      	bne.n	800a178 <_svfiprintf_r+0x130>
 800a15e:	7863      	ldrb	r3, [r4, #1]
 800a160:	2b2a      	cmp	r3, #42	; 0x2a
 800a162:	d134      	bne.n	800a1ce <_svfiprintf_r+0x186>
 800a164:	9b03      	ldr	r3, [sp, #12]
 800a166:	1d1a      	adds	r2, r3, #4
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	9203      	str	r2, [sp, #12]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	bfb8      	it	lt
 800a170:	f04f 33ff 	movlt.w	r3, #4294967295
 800a174:	3402      	adds	r4, #2
 800a176:	9305      	str	r3, [sp, #20]
 800a178:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a240 <_svfiprintf_r+0x1f8>
 800a17c:	7821      	ldrb	r1, [r4, #0]
 800a17e:	2203      	movs	r2, #3
 800a180:	4650      	mov	r0, sl
 800a182:	f7f6 f82d 	bl	80001e0 <memchr>
 800a186:	b138      	cbz	r0, 800a198 <_svfiprintf_r+0x150>
 800a188:	9b04      	ldr	r3, [sp, #16]
 800a18a:	eba0 000a 	sub.w	r0, r0, sl
 800a18e:	2240      	movs	r2, #64	; 0x40
 800a190:	4082      	lsls	r2, r0
 800a192:	4313      	orrs	r3, r2
 800a194:	3401      	adds	r4, #1
 800a196:	9304      	str	r3, [sp, #16]
 800a198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a19c:	4825      	ldr	r0, [pc, #148]	; (800a234 <_svfiprintf_r+0x1ec>)
 800a19e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1a2:	2206      	movs	r2, #6
 800a1a4:	f7f6 f81c 	bl	80001e0 <memchr>
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	d038      	beq.n	800a21e <_svfiprintf_r+0x1d6>
 800a1ac:	4b22      	ldr	r3, [pc, #136]	; (800a238 <_svfiprintf_r+0x1f0>)
 800a1ae:	bb1b      	cbnz	r3, 800a1f8 <_svfiprintf_r+0x1b0>
 800a1b0:	9b03      	ldr	r3, [sp, #12]
 800a1b2:	3307      	adds	r3, #7
 800a1b4:	f023 0307 	bic.w	r3, r3, #7
 800a1b8:	3308      	adds	r3, #8
 800a1ba:	9303      	str	r3, [sp, #12]
 800a1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1be:	4433      	add	r3, r6
 800a1c0:	9309      	str	r3, [sp, #36]	; 0x24
 800a1c2:	e768      	b.n	800a096 <_svfiprintf_r+0x4e>
 800a1c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1c8:	460c      	mov	r4, r1
 800a1ca:	2001      	movs	r0, #1
 800a1cc:	e7a6      	b.n	800a11c <_svfiprintf_r+0xd4>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	3401      	adds	r4, #1
 800a1d2:	9305      	str	r3, [sp, #20]
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	f04f 0c0a 	mov.w	ip, #10
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1e0:	3a30      	subs	r2, #48	; 0x30
 800a1e2:	2a09      	cmp	r2, #9
 800a1e4:	d903      	bls.n	800a1ee <_svfiprintf_r+0x1a6>
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d0c6      	beq.n	800a178 <_svfiprintf_r+0x130>
 800a1ea:	9105      	str	r1, [sp, #20]
 800a1ec:	e7c4      	b.n	800a178 <_svfiprintf_r+0x130>
 800a1ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e7f0      	b.n	800a1da <_svfiprintf_r+0x192>
 800a1f8:	ab03      	add	r3, sp, #12
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	462a      	mov	r2, r5
 800a1fe:	4b0f      	ldr	r3, [pc, #60]	; (800a23c <_svfiprintf_r+0x1f4>)
 800a200:	a904      	add	r1, sp, #16
 800a202:	4638      	mov	r0, r7
 800a204:	f7fc fa72 	bl	80066ec <_printf_float>
 800a208:	1c42      	adds	r2, r0, #1
 800a20a:	4606      	mov	r6, r0
 800a20c:	d1d6      	bne.n	800a1bc <_svfiprintf_r+0x174>
 800a20e:	89ab      	ldrh	r3, [r5, #12]
 800a210:	065b      	lsls	r3, r3, #25
 800a212:	f53f af2d 	bmi.w	800a070 <_svfiprintf_r+0x28>
 800a216:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a218:	b01d      	add	sp, #116	; 0x74
 800a21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21e:	ab03      	add	r3, sp, #12
 800a220:	9300      	str	r3, [sp, #0]
 800a222:	462a      	mov	r2, r5
 800a224:	4b05      	ldr	r3, [pc, #20]	; (800a23c <_svfiprintf_r+0x1f4>)
 800a226:	a904      	add	r1, sp, #16
 800a228:	4638      	mov	r0, r7
 800a22a:	f7fc fd03 	bl	8006c34 <_printf_i>
 800a22e:	e7eb      	b.n	800a208 <_svfiprintf_r+0x1c0>
 800a230:	0800b511 	.word	0x0800b511
 800a234:	0800b51b 	.word	0x0800b51b
 800a238:	080066ed 	.word	0x080066ed
 800a23c:	08009f95 	.word	0x08009f95
 800a240:	0800b517 	.word	0x0800b517

0800a244 <__sfputc_r>:
 800a244:	6893      	ldr	r3, [r2, #8]
 800a246:	3b01      	subs	r3, #1
 800a248:	2b00      	cmp	r3, #0
 800a24a:	b410      	push	{r4}
 800a24c:	6093      	str	r3, [r2, #8]
 800a24e:	da08      	bge.n	800a262 <__sfputc_r+0x1e>
 800a250:	6994      	ldr	r4, [r2, #24]
 800a252:	42a3      	cmp	r3, r4
 800a254:	db01      	blt.n	800a25a <__sfputc_r+0x16>
 800a256:	290a      	cmp	r1, #10
 800a258:	d103      	bne.n	800a262 <__sfputc_r+0x1e>
 800a25a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a25e:	f7fd ba5c 	b.w	800771a <__swbuf_r>
 800a262:	6813      	ldr	r3, [r2, #0]
 800a264:	1c58      	adds	r0, r3, #1
 800a266:	6010      	str	r0, [r2, #0]
 800a268:	7019      	strb	r1, [r3, #0]
 800a26a:	4608      	mov	r0, r1
 800a26c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a270:	4770      	bx	lr

0800a272 <__sfputs_r>:
 800a272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a274:	4606      	mov	r6, r0
 800a276:	460f      	mov	r7, r1
 800a278:	4614      	mov	r4, r2
 800a27a:	18d5      	adds	r5, r2, r3
 800a27c:	42ac      	cmp	r4, r5
 800a27e:	d101      	bne.n	800a284 <__sfputs_r+0x12>
 800a280:	2000      	movs	r0, #0
 800a282:	e007      	b.n	800a294 <__sfputs_r+0x22>
 800a284:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a288:	463a      	mov	r2, r7
 800a28a:	4630      	mov	r0, r6
 800a28c:	f7ff ffda 	bl	800a244 <__sfputc_r>
 800a290:	1c43      	adds	r3, r0, #1
 800a292:	d1f3      	bne.n	800a27c <__sfputs_r+0xa>
 800a294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a298 <_vfiprintf_r>:
 800a298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29c:	460d      	mov	r5, r1
 800a29e:	b09d      	sub	sp, #116	; 0x74
 800a2a0:	4614      	mov	r4, r2
 800a2a2:	4698      	mov	r8, r3
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	b118      	cbz	r0, 800a2b0 <_vfiprintf_r+0x18>
 800a2a8:	6a03      	ldr	r3, [r0, #32]
 800a2aa:	b90b      	cbnz	r3, 800a2b0 <_vfiprintf_r+0x18>
 800a2ac:	f7fd f880 	bl	80073b0 <__sinit>
 800a2b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2b2:	07d9      	lsls	r1, r3, #31
 800a2b4:	d405      	bmi.n	800a2c2 <_vfiprintf_r+0x2a>
 800a2b6:	89ab      	ldrh	r3, [r5, #12]
 800a2b8:	059a      	lsls	r2, r3, #22
 800a2ba:	d402      	bmi.n	800a2c2 <_vfiprintf_r+0x2a>
 800a2bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2be:	f7fd fb94 	bl	80079ea <__retarget_lock_acquire_recursive>
 800a2c2:	89ab      	ldrh	r3, [r5, #12]
 800a2c4:	071b      	lsls	r3, r3, #28
 800a2c6:	d501      	bpl.n	800a2cc <_vfiprintf_r+0x34>
 800a2c8:	692b      	ldr	r3, [r5, #16]
 800a2ca:	b99b      	cbnz	r3, 800a2f4 <_vfiprintf_r+0x5c>
 800a2cc:	4629      	mov	r1, r5
 800a2ce:	4630      	mov	r0, r6
 800a2d0:	f7fd fa60 	bl	8007794 <__swsetup_r>
 800a2d4:	b170      	cbz	r0, 800a2f4 <_vfiprintf_r+0x5c>
 800a2d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2d8:	07dc      	lsls	r4, r3, #31
 800a2da:	d504      	bpl.n	800a2e6 <_vfiprintf_r+0x4e>
 800a2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e0:	b01d      	add	sp, #116	; 0x74
 800a2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e6:	89ab      	ldrh	r3, [r5, #12]
 800a2e8:	0598      	lsls	r0, r3, #22
 800a2ea:	d4f7      	bmi.n	800a2dc <_vfiprintf_r+0x44>
 800a2ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2ee:	f7fd fb7d 	bl	80079ec <__retarget_lock_release_recursive>
 800a2f2:	e7f3      	b.n	800a2dc <_vfiprintf_r+0x44>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2f8:	2320      	movs	r3, #32
 800a2fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800a302:	2330      	movs	r3, #48	; 0x30
 800a304:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a4b8 <_vfiprintf_r+0x220>
 800a308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a30c:	f04f 0901 	mov.w	r9, #1
 800a310:	4623      	mov	r3, r4
 800a312:	469a      	mov	sl, r3
 800a314:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a318:	b10a      	cbz	r2, 800a31e <_vfiprintf_r+0x86>
 800a31a:	2a25      	cmp	r2, #37	; 0x25
 800a31c:	d1f9      	bne.n	800a312 <_vfiprintf_r+0x7a>
 800a31e:	ebba 0b04 	subs.w	fp, sl, r4
 800a322:	d00b      	beq.n	800a33c <_vfiprintf_r+0xa4>
 800a324:	465b      	mov	r3, fp
 800a326:	4622      	mov	r2, r4
 800a328:	4629      	mov	r1, r5
 800a32a:	4630      	mov	r0, r6
 800a32c:	f7ff ffa1 	bl	800a272 <__sfputs_r>
 800a330:	3001      	adds	r0, #1
 800a332:	f000 80a9 	beq.w	800a488 <_vfiprintf_r+0x1f0>
 800a336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a338:	445a      	add	r2, fp
 800a33a:	9209      	str	r2, [sp, #36]	; 0x24
 800a33c:	f89a 3000 	ldrb.w	r3, [sl]
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 80a1 	beq.w	800a488 <_vfiprintf_r+0x1f0>
 800a346:	2300      	movs	r3, #0
 800a348:	f04f 32ff 	mov.w	r2, #4294967295
 800a34c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a350:	f10a 0a01 	add.w	sl, sl, #1
 800a354:	9304      	str	r3, [sp, #16]
 800a356:	9307      	str	r3, [sp, #28]
 800a358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a35c:	931a      	str	r3, [sp, #104]	; 0x68
 800a35e:	4654      	mov	r4, sl
 800a360:	2205      	movs	r2, #5
 800a362:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a366:	4854      	ldr	r0, [pc, #336]	; (800a4b8 <_vfiprintf_r+0x220>)
 800a368:	f7f5 ff3a 	bl	80001e0 <memchr>
 800a36c:	9a04      	ldr	r2, [sp, #16]
 800a36e:	b9d8      	cbnz	r0, 800a3a8 <_vfiprintf_r+0x110>
 800a370:	06d1      	lsls	r1, r2, #27
 800a372:	bf44      	itt	mi
 800a374:	2320      	movmi	r3, #32
 800a376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a37a:	0713      	lsls	r3, r2, #28
 800a37c:	bf44      	itt	mi
 800a37e:	232b      	movmi	r3, #43	; 0x2b
 800a380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a384:	f89a 3000 	ldrb.w	r3, [sl]
 800a388:	2b2a      	cmp	r3, #42	; 0x2a
 800a38a:	d015      	beq.n	800a3b8 <_vfiprintf_r+0x120>
 800a38c:	9a07      	ldr	r2, [sp, #28]
 800a38e:	4654      	mov	r4, sl
 800a390:	2000      	movs	r0, #0
 800a392:	f04f 0c0a 	mov.w	ip, #10
 800a396:	4621      	mov	r1, r4
 800a398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a39c:	3b30      	subs	r3, #48	; 0x30
 800a39e:	2b09      	cmp	r3, #9
 800a3a0:	d94d      	bls.n	800a43e <_vfiprintf_r+0x1a6>
 800a3a2:	b1b0      	cbz	r0, 800a3d2 <_vfiprintf_r+0x13a>
 800a3a4:	9207      	str	r2, [sp, #28]
 800a3a6:	e014      	b.n	800a3d2 <_vfiprintf_r+0x13a>
 800a3a8:	eba0 0308 	sub.w	r3, r0, r8
 800a3ac:	fa09 f303 	lsl.w	r3, r9, r3
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	9304      	str	r3, [sp, #16]
 800a3b4:	46a2      	mov	sl, r4
 800a3b6:	e7d2      	b.n	800a35e <_vfiprintf_r+0xc6>
 800a3b8:	9b03      	ldr	r3, [sp, #12]
 800a3ba:	1d19      	adds	r1, r3, #4
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	9103      	str	r1, [sp, #12]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	bfbb      	ittet	lt
 800a3c4:	425b      	neglt	r3, r3
 800a3c6:	f042 0202 	orrlt.w	r2, r2, #2
 800a3ca:	9307      	strge	r3, [sp, #28]
 800a3cc:	9307      	strlt	r3, [sp, #28]
 800a3ce:	bfb8      	it	lt
 800a3d0:	9204      	strlt	r2, [sp, #16]
 800a3d2:	7823      	ldrb	r3, [r4, #0]
 800a3d4:	2b2e      	cmp	r3, #46	; 0x2e
 800a3d6:	d10c      	bne.n	800a3f2 <_vfiprintf_r+0x15a>
 800a3d8:	7863      	ldrb	r3, [r4, #1]
 800a3da:	2b2a      	cmp	r3, #42	; 0x2a
 800a3dc:	d134      	bne.n	800a448 <_vfiprintf_r+0x1b0>
 800a3de:	9b03      	ldr	r3, [sp, #12]
 800a3e0:	1d1a      	adds	r2, r3, #4
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	9203      	str	r2, [sp, #12]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	bfb8      	it	lt
 800a3ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3ee:	3402      	adds	r4, #2
 800a3f0:	9305      	str	r3, [sp, #20]
 800a3f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a4c8 <_vfiprintf_r+0x230>
 800a3f6:	7821      	ldrb	r1, [r4, #0]
 800a3f8:	2203      	movs	r2, #3
 800a3fa:	4650      	mov	r0, sl
 800a3fc:	f7f5 fef0 	bl	80001e0 <memchr>
 800a400:	b138      	cbz	r0, 800a412 <_vfiprintf_r+0x17a>
 800a402:	9b04      	ldr	r3, [sp, #16]
 800a404:	eba0 000a 	sub.w	r0, r0, sl
 800a408:	2240      	movs	r2, #64	; 0x40
 800a40a:	4082      	lsls	r2, r0
 800a40c:	4313      	orrs	r3, r2
 800a40e:	3401      	adds	r4, #1
 800a410:	9304      	str	r3, [sp, #16]
 800a412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a416:	4829      	ldr	r0, [pc, #164]	; (800a4bc <_vfiprintf_r+0x224>)
 800a418:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a41c:	2206      	movs	r2, #6
 800a41e:	f7f5 fedf 	bl	80001e0 <memchr>
 800a422:	2800      	cmp	r0, #0
 800a424:	d03f      	beq.n	800a4a6 <_vfiprintf_r+0x20e>
 800a426:	4b26      	ldr	r3, [pc, #152]	; (800a4c0 <_vfiprintf_r+0x228>)
 800a428:	bb1b      	cbnz	r3, 800a472 <_vfiprintf_r+0x1da>
 800a42a:	9b03      	ldr	r3, [sp, #12]
 800a42c:	3307      	adds	r3, #7
 800a42e:	f023 0307 	bic.w	r3, r3, #7
 800a432:	3308      	adds	r3, #8
 800a434:	9303      	str	r3, [sp, #12]
 800a436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a438:	443b      	add	r3, r7
 800a43a:	9309      	str	r3, [sp, #36]	; 0x24
 800a43c:	e768      	b.n	800a310 <_vfiprintf_r+0x78>
 800a43e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a442:	460c      	mov	r4, r1
 800a444:	2001      	movs	r0, #1
 800a446:	e7a6      	b.n	800a396 <_vfiprintf_r+0xfe>
 800a448:	2300      	movs	r3, #0
 800a44a:	3401      	adds	r4, #1
 800a44c:	9305      	str	r3, [sp, #20]
 800a44e:	4619      	mov	r1, r3
 800a450:	f04f 0c0a 	mov.w	ip, #10
 800a454:	4620      	mov	r0, r4
 800a456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a45a:	3a30      	subs	r2, #48	; 0x30
 800a45c:	2a09      	cmp	r2, #9
 800a45e:	d903      	bls.n	800a468 <_vfiprintf_r+0x1d0>
 800a460:	2b00      	cmp	r3, #0
 800a462:	d0c6      	beq.n	800a3f2 <_vfiprintf_r+0x15a>
 800a464:	9105      	str	r1, [sp, #20]
 800a466:	e7c4      	b.n	800a3f2 <_vfiprintf_r+0x15a>
 800a468:	fb0c 2101 	mla	r1, ip, r1, r2
 800a46c:	4604      	mov	r4, r0
 800a46e:	2301      	movs	r3, #1
 800a470:	e7f0      	b.n	800a454 <_vfiprintf_r+0x1bc>
 800a472:	ab03      	add	r3, sp, #12
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	462a      	mov	r2, r5
 800a478:	4b12      	ldr	r3, [pc, #72]	; (800a4c4 <_vfiprintf_r+0x22c>)
 800a47a:	a904      	add	r1, sp, #16
 800a47c:	4630      	mov	r0, r6
 800a47e:	f7fc f935 	bl	80066ec <_printf_float>
 800a482:	4607      	mov	r7, r0
 800a484:	1c78      	adds	r0, r7, #1
 800a486:	d1d6      	bne.n	800a436 <_vfiprintf_r+0x19e>
 800a488:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a48a:	07d9      	lsls	r1, r3, #31
 800a48c:	d405      	bmi.n	800a49a <_vfiprintf_r+0x202>
 800a48e:	89ab      	ldrh	r3, [r5, #12]
 800a490:	059a      	lsls	r2, r3, #22
 800a492:	d402      	bmi.n	800a49a <_vfiprintf_r+0x202>
 800a494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a496:	f7fd faa9 	bl	80079ec <__retarget_lock_release_recursive>
 800a49a:	89ab      	ldrh	r3, [r5, #12]
 800a49c:	065b      	lsls	r3, r3, #25
 800a49e:	f53f af1d 	bmi.w	800a2dc <_vfiprintf_r+0x44>
 800a4a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4a4:	e71c      	b.n	800a2e0 <_vfiprintf_r+0x48>
 800a4a6:	ab03      	add	r3, sp, #12
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	462a      	mov	r2, r5
 800a4ac:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <_vfiprintf_r+0x22c>)
 800a4ae:	a904      	add	r1, sp, #16
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	f7fc fbbf 	bl	8006c34 <_printf_i>
 800a4b6:	e7e4      	b.n	800a482 <_vfiprintf_r+0x1ea>
 800a4b8:	0800b511 	.word	0x0800b511
 800a4bc:	0800b51b 	.word	0x0800b51b
 800a4c0:	080066ed 	.word	0x080066ed
 800a4c4:	0800a273 	.word	0x0800a273
 800a4c8:	0800b517 	.word	0x0800b517

0800a4cc <__sflush_r>:
 800a4cc:	898a      	ldrh	r2, [r1, #12]
 800a4ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d2:	4605      	mov	r5, r0
 800a4d4:	0710      	lsls	r0, r2, #28
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	d458      	bmi.n	800a58c <__sflush_r+0xc0>
 800a4da:	684b      	ldr	r3, [r1, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	dc05      	bgt.n	800a4ec <__sflush_r+0x20>
 800a4e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	dc02      	bgt.n	800a4ec <__sflush_r+0x20>
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4ee:	2e00      	cmp	r6, #0
 800a4f0:	d0f9      	beq.n	800a4e6 <__sflush_r+0x1a>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4f8:	682f      	ldr	r7, [r5, #0]
 800a4fa:	6a21      	ldr	r1, [r4, #32]
 800a4fc:	602b      	str	r3, [r5, #0]
 800a4fe:	d032      	beq.n	800a566 <__sflush_r+0x9a>
 800a500:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a502:	89a3      	ldrh	r3, [r4, #12]
 800a504:	075a      	lsls	r2, r3, #29
 800a506:	d505      	bpl.n	800a514 <__sflush_r+0x48>
 800a508:	6863      	ldr	r3, [r4, #4]
 800a50a:	1ac0      	subs	r0, r0, r3
 800a50c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a50e:	b10b      	cbz	r3, 800a514 <__sflush_r+0x48>
 800a510:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a512:	1ac0      	subs	r0, r0, r3
 800a514:	2300      	movs	r3, #0
 800a516:	4602      	mov	r2, r0
 800a518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a51a:	6a21      	ldr	r1, [r4, #32]
 800a51c:	4628      	mov	r0, r5
 800a51e:	47b0      	blx	r6
 800a520:	1c43      	adds	r3, r0, #1
 800a522:	89a3      	ldrh	r3, [r4, #12]
 800a524:	d106      	bne.n	800a534 <__sflush_r+0x68>
 800a526:	6829      	ldr	r1, [r5, #0]
 800a528:	291d      	cmp	r1, #29
 800a52a:	d82b      	bhi.n	800a584 <__sflush_r+0xb8>
 800a52c:	4a29      	ldr	r2, [pc, #164]	; (800a5d4 <__sflush_r+0x108>)
 800a52e:	410a      	asrs	r2, r1
 800a530:	07d6      	lsls	r6, r2, #31
 800a532:	d427      	bmi.n	800a584 <__sflush_r+0xb8>
 800a534:	2200      	movs	r2, #0
 800a536:	6062      	str	r2, [r4, #4]
 800a538:	04d9      	lsls	r1, r3, #19
 800a53a:	6922      	ldr	r2, [r4, #16]
 800a53c:	6022      	str	r2, [r4, #0]
 800a53e:	d504      	bpl.n	800a54a <__sflush_r+0x7e>
 800a540:	1c42      	adds	r2, r0, #1
 800a542:	d101      	bne.n	800a548 <__sflush_r+0x7c>
 800a544:	682b      	ldr	r3, [r5, #0]
 800a546:	b903      	cbnz	r3, 800a54a <__sflush_r+0x7e>
 800a548:	6560      	str	r0, [r4, #84]	; 0x54
 800a54a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a54c:	602f      	str	r7, [r5, #0]
 800a54e:	2900      	cmp	r1, #0
 800a550:	d0c9      	beq.n	800a4e6 <__sflush_r+0x1a>
 800a552:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a556:	4299      	cmp	r1, r3
 800a558:	d002      	beq.n	800a560 <__sflush_r+0x94>
 800a55a:	4628      	mov	r0, r5
 800a55c:	f7fe f8d6 	bl	800870c <_free_r>
 800a560:	2000      	movs	r0, #0
 800a562:	6360      	str	r0, [r4, #52]	; 0x34
 800a564:	e7c0      	b.n	800a4e8 <__sflush_r+0x1c>
 800a566:	2301      	movs	r3, #1
 800a568:	4628      	mov	r0, r5
 800a56a:	47b0      	blx	r6
 800a56c:	1c41      	adds	r1, r0, #1
 800a56e:	d1c8      	bne.n	800a502 <__sflush_r+0x36>
 800a570:	682b      	ldr	r3, [r5, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d0c5      	beq.n	800a502 <__sflush_r+0x36>
 800a576:	2b1d      	cmp	r3, #29
 800a578:	d001      	beq.n	800a57e <__sflush_r+0xb2>
 800a57a:	2b16      	cmp	r3, #22
 800a57c:	d101      	bne.n	800a582 <__sflush_r+0xb6>
 800a57e:	602f      	str	r7, [r5, #0]
 800a580:	e7b1      	b.n	800a4e6 <__sflush_r+0x1a>
 800a582:	89a3      	ldrh	r3, [r4, #12]
 800a584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a588:	81a3      	strh	r3, [r4, #12]
 800a58a:	e7ad      	b.n	800a4e8 <__sflush_r+0x1c>
 800a58c:	690f      	ldr	r7, [r1, #16]
 800a58e:	2f00      	cmp	r7, #0
 800a590:	d0a9      	beq.n	800a4e6 <__sflush_r+0x1a>
 800a592:	0793      	lsls	r3, r2, #30
 800a594:	680e      	ldr	r6, [r1, #0]
 800a596:	bf08      	it	eq
 800a598:	694b      	ldreq	r3, [r1, #20]
 800a59a:	600f      	str	r7, [r1, #0]
 800a59c:	bf18      	it	ne
 800a59e:	2300      	movne	r3, #0
 800a5a0:	eba6 0807 	sub.w	r8, r6, r7
 800a5a4:	608b      	str	r3, [r1, #8]
 800a5a6:	f1b8 0f00 	cmp.w	r8, #0
 800a5aa:	dd9c      	ble.n	800a4e6 <__sflush_r+0x1a>
 800a5ac:	6a21      	ldr	r1, [r4, #32]
 800a5ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a5b0:	4643      	mov	r3, r8
 800a5b2:	463a      	mov	r2, r7
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	47b0      	blx	r6
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	dc06      	bgt.n	800a5ca <__sflush_r+0xfe>
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5c2:	81a3      	strh	r3, [r4, #12]
 800a5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c8:	e78e      	b.n	800a4e8 <__sflush_r+0x1c>
 800a5ca:	4407      	add	r7, r0
 800a5cc:	eba8 0800 	sub.w	r8, r8, r0
 800a5d0:	e7e9      	b.n	800a5a6 <__sflush_r+0xda>
 800a5d2:	bf00      	nop
 800a5d4:	dfbffffe 	.word	0xdfbffffe

0800a5d8 <_fflush_r>:
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	690b      	ldr	r3, [r1, #16]
 800a5dc:	4605      	mov	r5, r0
 800a5de:	460c      	mov	r4, r1
 800a5e0:	b913      	cbnz	r3, 800a5e8 <_fflush_r+0x10>
 800a5e2:	2500      	movs	r5, #0
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	bd38      	pop	{r3, r4, r5, pc}
 800a5e8:	b118      	cbz	r0, 800a5f2 <_fflush_r+0x1a>
 800a5ea:	6a03      	ldr	r3, [r0, #32]
 800a5ec:	b90b      	cbnz	r3, 800a5f2 <_fflush_r+0x1a>
 800a5ee:	f7fc fedf 	bl	80073b0 <__sinit>
 800a5f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d0f3      	beq.n	800a5e2 <_fflush_r+0xa>
 800a5fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5fc:	07d0      	lsls	r0, r2, #31
 800a5fe:	d404      	bmi.n	800a60a <_fflush_r+0x32>
 800a600:	0599      	lsls	r1, r3, #22
 800a602:	d402      	bmi.n	800a60a <_fflush_r+0x32>
 800a604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a606:	f7fd f9f0 	bl	80079ea <__retarget_lock_acquire_recursive>
 800a60a:	4628      	mov	r0, r5
 800a60c:	4621      	mov	r1, r4
 800a60e:	f7ff ff5d 	bl	800a4cc <__sflush_r>
 800a612:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a614:	07da      	lsls	r2, r3, #31
 800a616:	4605      	mov	r5, r0
 800a618:	d4e4      	bmi.n	800a5e4 <_fflush_r+0xc>
 800a61a:	89a3      	ldrh	r3, [r4, #12]
 800a61c:	059b      	lsls	r3, r3, #22
 800a61e:	d4e1      	bmi.n	800a5e4 <_fflush_r+0xc>
 800a620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a622:	f7fd f9e3 	bl	80079ec <__retarget_lock_release_recursive>
 800a626:	e7dd      	b.n	800a5e4 <_fflush_r+0xc>

0800a628 <__swhatbuf_r>:
 800a628:	b570      	push	{r4, r5, r6, lr}
 800a62a:	460c      	mov	r4, r1
 800a62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a630:	2900      	cmp	r1, #0
 800a632:	b096      	sub	sp, #88	; 0x58
 800a634:	4615      	mov	r5, r2
 800a636:	461e      	mov	r6, r3
 800a638:	da0d      	bge.n	800a656 <__swhatbuf_r+0x2e>
 800a63a:	89a3      	ldrh	r3, [r4, #12]
 800a63c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a640:	f04f 0100 	mov.w	r1, #0
 800a644:	bf0c      	ite	eq
 800a646:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a64a:	2340      	movne	r3, #64	; 0x40
 800a64c:	2000      	movs	r0, #0
 800a64e:	6031      	str	r1, [r6, #0]
 800a650:	602b      	str	r3, [r5, #0]
 800a652:	b016      	add	sp, #88	; 0x58
 800a654:	bd70      	pop	{r4, r5, r6, pc}
 800a656:	466a      	mov	r2, sp
 800a658:	f000 f874 	bl	800a744 <_fstat_r>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	dbec      	blt.n	800a63a <__swhatbuf_r+0x12>
 800a660:	9901      	ldr	r1, [sp, #4]
 800a662:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a666:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a66a:	4259      	negs	r1, r3
 800a66c:	4159      	adcs	r1, r3
 800a66e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a672:	e7eb      	b.n	800a64c <__swhatbuf_r+0x24>

0800a674 <__smakebuf_r>:
 800a674:	898b      	ldrh	r3, [r1, #12]
 800a676:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a678:	079d      	lsls	r5, r3, #30
 800a67a:	4606      	mov	r6, r0
 800a67c:	460c      	mov	r4, r1
 800a67e:	d507      	bpl.n	800a690 <__smakebuf_r+0x1c>
 800a680:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a684:	6023      	str	r3, [r4, #0]
 800a686:	6123      	str	r3, [r4, #16]
 800a688:	2301      	movs	r3, #1
 800a68a:	6163      	str	r3, [r4, #20]
 800a68c:	b002      	add	sp, #8
 800a68e:	bd70      	pop	{r4, r5, r6, pc}
 800a690:	ab01      	add	r3, sp, #4
 800a692:	466a      	mov	r2, sp
 800a694:	f7ff ffc8 	bl	800a628 <__swhatbuf_r>
 800a698:	9900      	ldr	r1, [sp, #0]
 800a69a:	4605      	mov	r5, r0
 800a69c:	4630      	mov	r0, r6
 800a69e:	f7fe f8a9 	bl	80087f4 <_malloc_r>
 800a6a2:	b948      	cbnz	r0, 800a6b8 <__smakebuf_r+0x44>
 800a6a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6a8:	059a      	lsls	r2, r3, #22
 800a6aa:	d4ef      	bmi.n	800a68c <__smakebuf_r+0x18>
 800a6ac:	f023 0303 	bic.w	r3, r3, #3
 800a6b0:	f043 0302 	orr.w	r3, r3, #2
 800a6b4:	81a3      	strh	r3, [r4, #12]
 800a6b6:	e7e3      	b.n	800a680 <__smakebuf_r+0xc>
 800a6b8:	89a3      	ldrh	r3, [r4, #12]
 800a6ba:	6020      	str	r0, [r4, #0]
 800a6bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6c0:	81a3      	strh	r3, [r4, #12]
 800a6c2:	9b00      	ldr	r3, [sp, #0]
 800a6c4:	6163      	str	r3, [r4, #20]
 800a6c6:	9b01      	ldr	r3, [sp, #4]
 800a6c8:	6120      	str	r0, [r4, #16]
 800a6ca:	b15b      	cbz	r3, 800a6e4 <__smakebuf_r+0x70>
 800a6cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f000 f849 	bl	800a768 <_isatty_r>
 800a6d6:	b128      	cbz	r0, 800a6e4 <__smakebuf_r+0x70>
 800a6d8:	89a3      	ldrh	r3, [r4, #12]
 800a6da:	f023 0303 	bic.w	r3, r3, #3
 800a6de:	f043 0301 	orr.w	r3, r3, #1
 800a6e2:	81a3      	strh	r3, [r4, #12]
 800a6e4:	89a3      	ldrh	r3, [r4, #12]
 800a6e6:	431d      	orrs	r5, r3
 800a6e8:	81a5      	strh	r5, [r4, #12]
 800a6ea:	e7cf      	b.n	800a68c <__smakebuf_r+0x18>

0800a6ec <memmove>:
 800a6ec:	4288      	cmp	r0, r1
 800a6ee:	b510      	push	{r4, lr}
 800a6f0:	eb01 0402 	add.w	r4, r1, r2
 800a6f4:	d902      	bls.n	800a6fc <memmove+0x10>
 800a6f6:	4284      	cmp	r4, r0
 800a6f8:	4623      	mov	r3, r4
 800a6fa:	d807      	bhi.n	800a70c <memmove+0x20>
 800a6fc:	1e43      	subs	r3, r0, #1
 800a6fe:	42a1      	cmp	r1, r4
 800a700:	d008      	beq.n	800a714 <memmove+0x28>
 800a702:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a70a:	e7f8      	b.n	800a6fe <memmove+0x12>
 800a70c:	4402      	add	r2, r0
 800a70e:	4601      	mov	r1, r0
 800a710:	428a      	cmp	r2, r1
 800a712:	d100      	bne.n	800a716 <memmove+0x2a>
 800a714:	bd10      	pop	{r4, pc}
 800a716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a71a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a71e:	e7f7      	b.n	800a710 <memmove+0x24>

0800a720 <strncmp>:
 800a720:	b510      	push	{r4, lr}
 800a722:	b16a      	cbz	r2, 800a740 <strncmp+0x20>
 800a724:	3901      	subs	r1, #1
 800a726:	1884      	adds	r4, r0, r2
 800a728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a72c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a730:	429a      	cmp	r2, r3
 800a732:	d103      	bne.n	800a73c <strncmp+0x1c>
 800a734:	42a0      	cmp	r0, r4
 800a736:	d001      	beq.n	800a73c <strncmp+0x1c>
 800a738:	2a00      	cmp	r2, #0
 800a73a:	d1f5      	bne.n	800a728 <strncmp+0x8>
 800a73c:	1ad0      	subs	r0, r2, r3
 800a73e:	bd10      	pop	{r4, pc}
 800a740:	4610      	mov	r0, r2
 800a742:	e7fc      	b.n	800a73e <strncmp+0x1e>

0800a744 <_fstat_r>:
 800a744:	b538      	push	{r3, r4, r5, lr}
 800a746:	4d07      	ldr	r5, [pc, #28]	; (800a764 <_fstat_r+0x20>)
 800a748:	2300      	movs	r3, #0
 800a74a:	4604      	mov	r4, r0
 800a74c:	4608      	mov	r0, r1
 800a74e:	4611      	mov	r1, r2
 800a750:	602b      	str	r3, [r5, #0]
 800a752:	f7f7 f9bc 	bl	8001ace <_fstat>
 800a756:	1c43      	adds	r3, r0, #1
 800a758:	d102      	bne.n	800a760 <_fstat_r+0x1c>
 800a75a:	682b      	ldr	r3, [r5, #0]
 800a75c:	b103      	cbz	r3, 800a760 <_fstat_r+0x1c>
 800a75e:	6023      	str	r3, [r4, #0]
 800a760:	bd38      	pop	{r3, r4, r5, pc}
 800a762:	bf00      	nop
 800a764:	20004424 	.word	0x20004424

0800a768 <_isatty_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	4d06      	ldr	r5, [pc, #24]	; (800a784 <_isatty_r+0x1c>)
 800a76c:	2300      	movs	r3, #0
 800a76e:	4604      	mov	r4, r0
 800a770:	4608      	mov	r0, r1
 800a772:	602b      	str	r3, [r5, #0]
 800a774:	f7f7 f9bb 	bl	8001aee <_isatty>
 800a778:	1c43      	adds	r3, r0, #1
 800a77a:	d102      	bne.n	800a782 <_isatty_r+0x1a>
 800a77c:	682b      	ldr	r3, [r5, #0]
 800a77e:	b103      	cbz	r3, 800a782 <_isatty_r+0x1a>
 800a780:	6023      	str	r3, [r4, #0]
 800a782:	bd38      	pop	{r3, r4, r5, pc}
 800a784:	20004424 	.word	0x20004424

0800a788 <_sbrk_r>:
 800a788:	b538      	push	{r3, r4, r5, lr}
 800a78a:	4d06      	ldr	r5, [pc, #24]	; (800a7a4 <_sbrk_r+0x1c>)
 800a78c:	2300      	movs	r3, #0
 800a78e:	4604      	mov	r4, r0
 800a790:	4608      	mov	r0, r1
 800a792:	602b      	str	r3, [r5, #0]
 800a794:	f7f7 f9c4 	bl	8001b20 <_sbrk>
 800a798:	1c43      	adds	r3, r0, #1
 800a79a:	d102      	bne.n	800a7a2 <_sbrk_r+0x1a>
 800a79c:	682b      	ldr	r3, [r5, #0]
 800a79e:	b103      	cbz	r3, 800a7a2 <_sbrk_r+0x1a>
 800a7a0:	6023      	str	r3, [r4, #0]
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	20004424 	.word	0x20004424

0800a7a8 <nan>:
 800a7a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a7b0 <nan+0x8>
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	00000000 	.word	0x00000000
 800a7b4:	7ff80000 	.word	0x7ff80000

0800a7b8 <__assert_func>:
 800a7b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7ba:	4614      	mov	r4, r2
 800a7bc:	461a      	mov	r2, r3
 800a7be:	4b09      	ldr	r3, [pc, #36]	; (800a7e4 <__assert_func+0x2c>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4605      	mov	r5, r0
 800a7c4:	68d8      	ldr	r0, [r3, #12]
 800a7c6:	b14c      	cbz	r4, 800a7dc <__assert_func+0x24>
 800a7c8:	4b07      	ldr	r3, [pc, #28]	; (800a7e8 <__assert_func+0x30>)
 800a7ca:	9100      	str	r1, [sp, #0]
 800a7cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7d0:	4906      	ldr	r1, [pc, #24]	; (800a7ec <__assert_func+0x34>)
 800a7d2:	462b      	mov	r3, r5
 800a7d4:	f000 fbca 	bl	800af6c <fiprintf>
 800a7d8:	f000 fbda 	bl	800af90 <abort>
 800a7dc:	4b04      	ldr	r3, [pc, #16]	; (800a7f0 <__assert_func+0x38>)
 800a7de:	461c      	mov	r4, r3
 800a7e0:	e7f3      	b.n	800a7ca <__assert_func+0x12>
 800a7e2:	bf00      	nop
 800a7e4:	20000068 	.word	0x20000068
 800a7e8:	0800b52a 	.word	0x0800b52a
 800a7ec:	0800b537 	.word	0x0800b537
 800a7f0:	0800b565 	.word	0x0800b565

0800a7f4 <_calloc_r>:
 800a7f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7f6:	fba1 2402 	umull	r2, r4, r1, r2
 800a7fa:	b94c      	cbnz	r4, 800a810 <_calloc_r+0x1c>
 800a7fc:	4611      	mov	r1, r2
 800a7fe:	9201      	str	r2, [sp, #4]
 800a800:	f7fd fff8 	bl	80087f4 <_malloc_r>
 800a804:	9a01      	ldr	r2, [sp, #4]
 800a806:	4605      	mov	r5, r0
 800a808:	b930      	cbnz	r0, 800a818 <_calloc_r+0x24>
 800a80a:	4628      	mov	r0, r5
 800a80c:	b003      	add	sp, #12
 800a80e:	bd30      	pop	{r4, r5, pc}
 800a810:	220c      	movs	r2, #12
 800a812:	6002      	str	r2, [r0, #0]
 800a814:	2500      	movs	r5, #0
 800a816:	e7f8      	b.n	800a80a <_calloc_r+0x16>
 800a818:	4621      	mov	r1, r4
 800a81a:	f7fd f813 	bl	8007844 <memset>
 800a81e:	e7f4      	b.n	800a80a <_calloc_r+0x16>

0800a820 <rshift>:
 800a820:	6903      	ldr	r3, [r0, #16]
 800a822:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a826:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a82a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a82e:	f100 0414 	add.w	r4, r0, #20
 800a832:	dd45      	ble.n	800a8c0 <rshift+0xa0>
 800a834:	f011 011f 	ands.w	r1, r1, #31
 800a838:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a83c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a840:	d10c      	bne.n	800a85c <rshift+0x3c>
 800a842:	f100 0710 	add.w	r7, r0, #16
 800a846:	4629      	mov	r1, r5
 800a848:	42b1      	cmp	r1, r6
 800a84a:	d334      	bcc.n	800a8b6 <rshift+0x96>
 800a84c:	1a9b      	subs	r3, r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	1eea      	subs	r2, r5, #3
 800a852:	4296      	cmp	r6, r2
 800a854:	bf38      	it	cc
 800a856:	2300      	movcc	r3, #0
 800a858:	4423      	add	r3, r4
 800a85a:	e015      	b.n	800a888 <rshift+0x68>
 800a85c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a860:	f1c1 0820 	rsb	r8, r1, #32
 800a864:	40cf      	lsrs	r7, r1
 800a866:	f105 0e04 	add.w	lr, r5, #4
 800a86a:	46a1      	mov	r9, r4
 800a86c:	4576      	cmp	r6, lr
 800a86e:	46f4      	mov	ip, lr
 800a870:	d815      	bhi.n	800a89e <rshift+0x7e>
 800a872:	1a9a      	subs	r2, r3, r2
 800a874:	0092      	lsls	r2, r2, #2
 800a876:	3a04      	subs	r2, #4
 800a878:	3501      	adds	r5, #1
 800a87a:	42ae      	cmp	r6, r5
 800a87c:	bf38      	it	cc
 800a87e:	2200      	movcc	r2, #0
 800a880:	18a3      	adds	r3, r4, r2
 800a882:	50a7      	str	r7, [r4, r2]
 800a884:	b107      	cbz	r7, 800a888 <rshift+0x68>
 800a886:	3304      	adds	r3, #4
 800a888:	1b1a      	subs	r2, r3, r4
 800a88a:	42a3      	cmp	r3, r4
 800a88c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a890:	bf08      	it	eq
 800a892:	2300      	moveq	r3, #0
 800a894:	6102      	str	r2, [r0, #16]
 800a896:	bf08      	it	eq
 800a898:	6143      	streq	r3, [r0, #20]
 800a89a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a89e:	f8dc c000 	ldr.w	ip, [ip]
 800a8a2:	fa0c fc08 	lsl.w	ip, ip, r8
 800a8a6:	ea4c 0707 	orr.w	r7, ip, r7
 800a8aa:	f849 7b04 	str.w	r7, [r9], #4
 800a8ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a8b2:	40cf      	lsrs	r7, r1
 800a8b4:	e7da      	b.n	800a86c <rshift+0x4c>
 800a8b6:	f851 cb04 	ldr.w	ip, [r1], #4
 800a8ba:	f847 cf04 	str.w	ip, [r7, #4]!
 800a8be:	e7c3      	b.n	800a848 <rshift+0x28>
 800a8c0:	4623      	mov	r3, r4
 800a8c2:	e7e1      	b.n	800a888 <rshift+0x68>

0800a8c4 <__hexdig_fun>:
 800a8c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a8c8:	2b09      	cmp	r3, #9
 800a8ca:	d802      	bhi.n	800a8d2 <__hexdig_fun+0xe>
 800a8cc:	3820      	subs	r0, #32
 800a8ce:	b2c0      	uxtb	r0, r0
 800a8d0:	4770      	bx	lr
 800a8d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a8d6:	2b05      	cmp	r3, #5
 800a8d8:	d801      	bhi.n	800a8de <__hexdig_fun+0x1a>
 800a8da:	3847      	subs	r0, #71	; 0x47
 800a8dc:	e7f7      	b.n	800a8ce <__hexdig_fun+0xa>
 800a8de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a8e2:	2b05      	cmp	r3, #5
 800a8e4:	d801      	bhi.n	800a8ea <__hexdig_fun+0x26>
 800a8e6:	3827      	subs	r0, #39	; 0x27
 800a8e8:	e7f1      	b.n	800a8ce <__hexdig_fun+0xa>
 800a8ea:	2000      	movs	r0, #0
 800a8ec:	4770      	bx	lr
	...

0800a8f0 <__gethex>:
 800a8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f4:	4617      	mov	r7, r2
 800a8f6:	680a      	ldr	r2, [r1, #0]
 800a8f8:	b085      	sub	sp, #20
 800a8fa:	f102 0b02 	add.w	fp, r2, #2
 800a8fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a902:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a906:	4681      	mov	r9, r0
 800a908:	468a      	mov	sl, r1
 800a90a:	9302      	str	r3, [sp, #8]
 800a90c:	32fe      	adds	r2, #254	; 0xfe
 800a90e:	eb02 030b 	add.w	r3, r2, fp
 800a912:	46d8      	mov	r8, fp
 800a914:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a918:	9301      	str	r3, [sp, #4]
 800a91a:	2830      	cmp	r0, #48	; 0x30
 800a91c:	d0f7      	beq.n	800a90e <__gethex+0x1e>
 800a91e:	f7ff ffd1 	bl	800a8c4 <__hexdig_fun>
 800a922:	4604      	mov	r4, r0
 800a924:	2800      	cmp	r0, #0
 800a926:	d138      	bne.n	800a99a <__gethex+0xaa>
 800a928:	49a7      	ldr	r1, [pc, #668]	; (800abc8 <__gethex+0x2d8>)
 800a92a:	2201      	movs	r2, #1
 800a92c:	4640      	mov	r0, r8
 800a92e:	f7ff fef7 	bl	800a720 <strncmp>
 800a932:	4606      	mov	r6, r0
 800a934:	2800      	cmp	r0, #0
 800a936:	d169      	bne.n	800aa0c <__gethex+0x11c>
 800a938:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a93c:	465d      	mov	r5, fp
 800a93e:	f7ff ffc1 	bl	800a8c4 <__hexdig_fun>
 800a942:	2800      	cmp	r0, #0
 800a944:	d064      	beq.n	800aa10 <__gethex+0x120>
 800a946:	465a      	mov	r2, fp
 800a948:	7810      	ldrb	r0, [r2, #0]
 800a94a:	2830      	cmp	r0, #48	; 0x30
 800a94c:	4690      	mov	r8, r2
 800a94e:	f102 0201 	add.w	r2, r2, #1
 800a952:	d0f9      	beq.n	800a948 <__gethex+0x58>
 800a954:	f7ff ffb6 	bl	800a8c4 <__hexdig_fun>
 800a958:	2301      	movs	r3, #1
 800a95a:	fab0 f480 	clz	r4, r0
 800a95e:	0964      	lsrs	r4, r4, #5
 800a960:	465e      	mov	r6, fp
 800a962:	9301      	str	r3, [sp, #4]
 800a964:	4642      	mov	r2, r8
 800a966:	4615      	mov	r5, r2
 800a968:	3201      	adds	r2, #1
 800a96a:	7828      	ldrb	r0, [r5, #0]
 800a96c:	f7ff ffaa 	bl	800a8c4 <__hexdig_fun>
 800a970:	2800      	cmp	r0, #0
 800a972:	d1f8      	bne.n	800a966 <__gethex+0x76>
 800a974:	4994      	ldr	r1, [pc, #592]	; (800abc8 <__gethex+0x2d8>)
 800a976:	2201      	movs	r2, #1
 800a978:	4628      	mov	r0, r5
 800a97a:	f7ff fed1 	bl	800a720 <strncmp>
 800a97e:	b978      	cbnz	r0, 800a9a0 <__gethex+0xb0>
 800a980:	b946      	cbnz	r6, 800a994 <__gethex+0xa4>
 800a982:	1c6e      	adds	r6, r5, #1
 800a984:	4632      	mov	r2, r6
 800a986:	4615      	mov	r5, r2
 800a988:	3201      	adds	r2, #1
 800a98a:	7828      	ldrb	r0, [r5, #0]
 800a98c:	f7ff ff9a 	bl	800a8c4 <__hexdig_fun>
 800a990:	2800      	cmp	r0, #0
 800a992:	d1f8      	bne.n	800a986 <__gethex+0x96>
 800a994:	1b73      	subs	r3, r6, r5
 800a996:	009e      	lsls	r6, r3, #2
 800a998:	e004      	b.n	800a9a4 <__gethex+0xb4>
 800a99a:	2400      	movs	r4, #0
 800a99c:	4626      	mov	r6, r4
 800a99e:	e7e1      	b.n	800a964 <__gethex+0x74>
 800a9a0:	2e00      	cmp	r6, #0
 800a9a2:	d1f7      	bne.n	800a994 <__gethex+0xa4>
 800a9a4:	782b      	ldrb	r3, [r5, #0]
 800a9a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a9aa:	2b50      	cmp	r3, #80	; 0x50
 800a9ac:	d13d      	bne.n	800aa2a <__gethex+0x13a>
 800a9ae:	786b      	ldrb	r3, [r5, #1]
 800a9b0:	2b2b      	cmp	r3, #43	; 0x2b
 800a9b2:	d02f      	beq.n	800aa14 <__gethex+0x124>
 800a9b4:	2b2d      	cmp	r3, #45	; 0x2d
 800a9b6:	d031      	beq.n	800aa1c <__gethex+0x12c>
 800a9b8:	1c69      	adds	r1, r5, #1
 800a9ba:	f04f 0b00 	mov.w	fp, #0
 800a9be:	7808      	ldrb	r0, [r1, #0]
 800a9c0:	f7ff ff80 	bl	800a8c4 <__hexdig_fun>
 800a9c4:	1e42      	subs	r2, r0, #1
 800a9c6:	b2d2      	uxtb	r2, r2
 800a9c8:	2a18      	cmp	r2, #24
 800a9ca:	d82e      	bhi.n	800aa2a <__gethex+0x13a>
 800a9cc:	f1a0 0210 	sub.w	r2, r0, #16
 800a9d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a9d4:	f7ff ff76 	bl	800a8c4 <__hexdig_fun>
 800a9d8:	f100 3cff 	add.w	ip, r0, #4294967295
 800a9dc:	fa5f fc8c 	uxtb.w	ip, ip
 800a9e0:	f1bc 0f18 	cmp.w	ip, #24
 800a9e4:	d91d      	bls.n	800aa22 <__gethex+0x132>
 800a9e6:	f1bb 0f00 	cmp.w	fp, #0
 800a9ea:	d000      	beq.n	800a9ee <__gethex+0xfe>
 800a9ec:	4252      	negs	r2, r2
 800a9ee:	4416      	add	r6, r2
 800a9f0:	f8ca 1000 	str.w	r1, [sl]
 800a9f4:	b1dc      	cbz	r4, 800aa2e <__gethex+0x13e>
 800a9f6:	9b01      	ldr	r3, [sp, #4]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	bf14      	ite	ne
 800a9fc:	f04f 0800 	movne.w	r8, #0
 800aa00:	f04f 0806 	moveq.w	r8, #6
 800aa04:	4640      	mov	r0, r8
 800aa06:	b005      	add	sp, #20
 800aa08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0c:	4645      	mov	r5, r8
 800aa0e:	4626      	mov	r6, r4
 800aa10:	2401      	movs	r4, #1
 800aa12:	e7c7      	b.n	800a9a4 <__gethex+0xb4>
 800aa14:	f04f 0b00 	mov.w	fp, #0
 800aa18:	1ca9      	adds	r1, r5, #2
 800aa1a:	e7d0      	b.n	800a9be <__gethex+0xce>
 800aa1c:	f04f 0b01 	mov.w	fp, #1
 800aa20:	e7fa      	b.n	800aa18 <__gethex+0x128>
 800aa22:	230a      	movs	r3, #10
 800aa24:	fb03 0002 	mla	r0, r3, r2, r0
 800aa28:	e7d0      	b.n	800a9cc <__gethex+0xdc>
 800aa2a:	4629      	mov	r1, r5
 800aa2c:	e7e0      	b.n	800a9f0 <__gethex+0x100>
 800aa2e:	eba5 0308 	sub.w	r3, r5, r8
 800aa32:	3b01      	subs	r3, #1
 800aa34:	4621      	mov	r1, r4
 800aa36:	2b07      	cmp	r3, #7
 800aa38:	dc0a      	bgt.n	800aa50 <__gethex+0x160>
 800aa3a:	4648      	mov	r0, r9
 800aa3c:	f7fd ff66 	bl	800890c <_Balloc>
 800aa40:	4604      	mov	r4, r0
 800aa42:	b940      	cbnz	r0, 800aa56 <__gethex+0x166>
 800aa44:	4b61      	ldr	r3, [pc, #388]	; (800abcc <__gethex+0x2dc>)
 800aa46:	4602      	mov	r2, r0
 800aa48:	21e4      	movs	r1, #228	; 0xe4
 800aa4a:	4861      	ldr	r0, [pc, #388]	; (800abd0 <__gethex+0x2e0>)
 800aa4c:	f7ff feb4 	bl	800a7b8 <__assert_func>
 800aa50:	3101      	adds	r1, #1
 800aa52:	105b      	asrs	r3, r3, #1
 800aa54:	e7ef      	b.n	800aa36 <__gethex+0x146>
 800aa56:	f100 0a14 	add.w	sl, r0, #20
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	495a      	ldr	r1, [pc, #360]	; (800abc8 <__gethex+0x2d8>)
 800aa5e:	f8cd a004 	str.w	sl, [sp, #4]
 800aa62:	469b      	mov	fp, r3
 800aa64:	45a8      	cmp	r8, r5
 800aa66:	d342      	bcc.n	800aaee <__gethex+0x1fe>
 800aa68:	9801      	ldr	r0, [sp, #4]
 800aa6a:	f840 bb04 	str.w	fp, [r0], #4
 800aa6e:	eba0 000a 	sub.w	r0, r0, sl
 800aa72:	1080      	asrs	r0, r0, #2
 800aa74:	6120      	str	r0, [r4, #16]
 800aa76:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800aa7a:	4658      	mov	r0, fp
 800aa7c:	f7fe f838 	bl	8008af0 <__hi0bits>
 800aa80:	683d      	ldr	r5, [r7, #0]
 800aa82:	eba8 0000 	sub.w	r0, r8, r0
 800aa86:	42a8      	cmp	r0, r5
 800aa88:	dd59      	ble.n	800ab3e <__gethex+0x24e>
 800aa8a:	eba0 0805 	sub.w	r8, r0, r5
 800aa8e:	4641      	mov	r1, r8
 800aa90:	4620      	mov	r0, r4
 800aa92:	f7fe fbc7 	bl	8009224 <__any_on>
 800aa96:	4683      	mov	fp, r0
 800aa98:	b1b8      	cbz	r0, 800aaca <__gethex+0x1da>
 800aa9a:	f108 33ff 	add.w	r3, r8, #4294967295
 800aa9e:	1159      	asrs	r1, r3, #5
 800aaa0:	f003 021f 	and.w	r2, r3, #31
 800aaa4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aaa8:	f04f 0b01 	mov.w	fp, #1
 800aaac:	fa0b f202 	lsl.w	r2, fp, r2
 800aab0:	420a      	tst	r2, r1
 800aab2:	d00a      	beq.n	800aaca <__gethex+0x1da>
 800aab4:	455b      	cmp	r3, fp
 800aab6:	dd06      	ble.n	800aac6 <__gethex+0x1d6>
 800aab8:	f1a8 0102 	sub.w	r1, r8, #2
 800aabc:	4620      	mov	r0, r4
 800aabe:	f7fe fbb1 	bl	8009224 <__any_on>
 800aac2:	2800      	cmp	r0, #0
 800aac4:	d138      	bne.n	800ab38 <__gethex+0x248>
 800aac6:	f04f 0b02 	mov.w	fp, #2
 800aaca:	4641      	mov	r1, r8
 800aacc:	4620      	mov	r0, r4
 800aace:	f7ff fea7 	bl	800a820 <rshift>
 800aad2:	4446      	add	r6, r8
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	42b3      	cmp	r3, r6
 800aad8:	da41      	bge.n	800ab5e <__gethex+0x26e>
 800aada:	4621      	mov	r1, r4
 800aadc:	4648      	mov	r0, r9
 800aade:	f7fd ff55 	bl	800898c <_Bfree>
 800aae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aae4:	2300      	movs	r3, #0
 800aae6:	6013      	str	r3, [r2, #0]
 800aae8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800aaec:	e78a      	b.n	800aa04 <__gethex+0x114>
 800aaee:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800aaf2:	2a2e      	cmp	r2, #46	; 0x2e
 800aaf4:	d014      	beq.n	800ab20 <__gethex+0x230>
 800aaf6:	2b20      	cmp	r3, #32
 800aaf8:	d106      	bne.n	800ab08 <__gethex+0x218>
 800aafa:	9b01      	ldr	r3, [sp, #4]
 800aafc:	f843 bb04 	str.w	fp, [r3], #4
 800ab00:	f04f 0b00 	mov.w	fp, #0
 800ab04:	9301      	str	r3, [sp, #4]
 800ab06:	465b      	mov	r3, fp
 800ab08:	7828      	ldrb	r0, [r5, #0]
 800ab0a:	9303      	str	r3, [sp, #12]
 800ab0c:	f7ff feda 	bl	800a8c4 <__hexdig_fun>
 800ab10:	9b03      	ldr	r3, [sp, #12]
 800ab12:	f000 000f 	and.w	r0, r0, #15
 800ab16:	4098      	lsls	r0, r3
 800ab18:	ea4b 0b00 	orr.w	fp, fp, r0
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	e7a1      	b.n	800aa64 <__gethex+0x174>
 800ab20:	45a8      	cmp	r8, r5
 800ab22:	d8e8      	bhi.n	800aaf6 <__gethex+0x206>
 800ab24:	2201      	movs	r2, #1
 800ab26:	4628      	mov	r0, r5
 800ab28:	9303      	str	r3, [sp, #12]
 800ab2a:	f7ff fdf9 	bl	800a720 <strncmp>
 800ab2e:	4926      	ldr	r1, [pc, #152]	; (800abc8 <__gethex+0x2d8>)
 800ab30:	9b03      	ldr	r3, [sp, #12]
 800ab32:	2800      	cmp	r0, #0
 800ab34:	d1df      	bne.n	800aaf6 <__gethex+0x206>
 800ab36:	e795      	b.n	800aa64 <__gethex+0x174>
 800ab38:	f04f 0b03 	mov.w	fp, #3
 800ab3c:	e7c5      	b.n	800aaca <__gethex+0x1da>
 800ab3e:	da0b      	bge.n	800ab58 <__gethex+0x268>
 800ab40:	eba5 0800 	sub.w	r8, r5, r0
 800ab44:	4621      	mov	r1, r4
 800ab46:	4642      	mov	r2, r8
 800ab48:	4648      	mov	r0, r9
 800ab4a:	f7fe f939 	bl	8008dc0 <__lshift>
 800ab4e:	eba6 0608 	sub.w	r6, r6, r8
 800ab52:	4604      	mov	r4, r0
 800ab54:	f100 0a14 	add.w	sl, r0, #20
 800ab58:	f04f 0b00 	mov.w	fp, #0
 800ab5c:	e7ba      	b.n	800aad4 <__gethex+0x1e4>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	42b3      	cmp	r3, r6
 800ab62:	dd73      	ble.n	800ac4c <__gethex+0x35c>
 800ab64:	1b9e      	subs	r6, r3, r6
 800ab66:	42b5      	cmp	r5, r6
 800ab68:	dc34      	bgt.n	800abd4 <__gethex+0x2e4>
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2b02      	cmp	r3, #2
 800ab6e:	d023      	beq.n	800abb8 <__gethex+0x2c8>
 800ab70:	2b03      	cmp	r3, #3
 800ab72:	d025      	beq.n	800abc0 <__gethex+0x2d0>
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d115      	bne.n	800aba4 <__gethex+0x2b4>
 800ab78:	42b5      	cmp	r5, r6
 800ab7a:	d113      	bne.n	800aba4 <__gethex+0x2b4>
 800ab7c:	2d01      	cmp	r5, #1
 800ab7e:	d10b      	bne.n	800ab98 <__gethex+0x2a8>
 800ab80:	9a02      	ldr	r2, [sp, #8]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6013      	str	r3, [r2, #0]
 800ab86:	2301      	movs	r3, #1
 800ab88:	6123      	str	r3, [r4, #16]
 800ab8a:	f8ca 3000 	str.w	r3, [sl]
 800ab8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab90:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ab94:	601c      	str	r4, [r3, #0]
 800ab96:	e735      	b.n	800aa04 <__gethex+0x114>
 800ab98:	1e69      	subs	r1, r5, #1
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f7fe fb42 	bl	8009224 <__any_on>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	d1ed      	bne.n	800ab80 <__gethex+0x290>
 800aba4:	4621      	mov	r1, r4
 800aba6:	4648      	mov	r0, r9
 800aba8:	f7fd fef0 	bl	800898c <_Bfree>
 800abac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abae:	2300      	movs	r3, #0
 800abb0:	6013      	str	r3, [r2, #0]
 800abb2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800abb6:	e725      	b.n	800aa04 <__gethex+0x114>
 800abb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1f2      	bne.n	800aba4 <__gethex+0x2b4>
 800abbe:	e7df      	b.n	800ab80 <__gethex+0x290>
 800abc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d1dc      	bne.n	800ab80 <__gethex+0x290>
 800abc6:	e7ed      	b.n	800aba4 <__gethex+0x2b4>
 800abc8:	0800b3bc 	.word	0x0800b3bc
 800abcc:	0800b255 	.word	0x0800b255
 800abd0:	0800b566 	.word	0x0800b566
 800abd4:	f106 38ff 	add.w	r8, r6, #4294967295
 800abd8:	f1bb 0f00 	cmp.w	fp, #0
 800abdc:	d133      	bne.n	800ac46 <__gethex+0x356>
 800abde:	f1b8 0f00 	cmp.w	r8, #0
 800abe2:	d004      	beq.n	800abee <__gethex+0x2fe>
 800abe4:	4641      	mov	r1, r8
 800abe6:	4620      	mov	r0, r4
 800abe8:	f7fe fb1c 	bl	8009224 <__any_on>
 800abec:	4683      	mov	fp, r0
 800abee:	ea4f 1268 	mov.w	r2, r8, asr #5
 800abf2:	2301      	movs	r3, #1
 800abf4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800abf8:	f008 081f 	and.w	r8, r8, #31
 800abfc:	fa03 f308 	lsl.w	r3, r3, r8
 800ac00:	4213      	tst	r3, r2
 800ac02:	4631      	mov	r1, r6
 800ac04:	4620      	mov	r0, r4
 800ac06:	bf18      	it	ne
 800ac08:	f04b 0b02 	orrne.w	fp, fp, #2
 800ac0c:	1bad      	subs	r5, r5, r6
 800ac0e:	f7ff fe07 	bl	800a820 <rshift>
 800ac12:	687e      	ldr	r6, [r7, #4]
 800ac14:	f04f 0802 	mov.w	r8, #2
 800ac18:	f1bb 0f00 	cmp.w	fp, #0
 800ac1c:	d04a      	beq.n	800acb4 <__gethex+0x3c4>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	d016      	beq.n	800ac52 <__gethex+0x362>
 800ac24:	2b03      	cmp	r3, #3
 800ac26:	d018      	beq.n	800ac5a <__gethex+0x36a>
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d109      	bne.n	800ac40 <__gethex+0x350>
 800ac2c:	f01b 0f02 	tst.w	fp, #2
 800ac30:	d006      	beq.n	800ac40 <__gethex+0x350>
 800ac32:	f8da 3000 	ldr.w	r3, [sl]
 800ac36:	ea4b 0b03 	orr.w	fp, fp, r3
 800ac3a:	f01b 0f01 	tst.w	fp, #1
 800ac3e:	d10f      	bne.n	800ac60 <__gethex+0x370>
 800ac40:	f048 0810 	orr.w	r8, r8, #16
 800ac44:	e036      	b.n	800acb4 <__gethex+0x3c4>
 800ac46:	f04f 0b01 	mov.w	fp, #1
 800ac4a:	e7d0      	b.n	800abee <__gethex+0x2fe>
 800ac4c:	f04f 0801 	mov.w	r8, #1
 800ac50:	e7e2      	b.n	800ac18 <__gethex+0x328>
 800ac52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac54:	f1c3 0301 	rsb	r3, r3, #1
 800ac58:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d0ef      	beq.n	800ac40 <__gethex+0x350>
 800ac60:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ac64:	f104 0214 	add.w	r2, r4, #20
 800ac68:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ac6c:	9301      	str	r3, [sp, #4]
 800ac6e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ac72:	2300      	movs	r3, #0
 800ac74:	4694      	mov	ip, r2
 800ac76:	f852 1b04 	ldr.w	r1, [r2], #4
 800ac7a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ac7e:	d01e      	beq.n	800acbe <__gethex+0x3ce>
 800ac80:	3101      	adds	r1, #1
 800ac82:	f8cc 1000 	str.w	r1, [ip]
 800ac86:	f1b8 0f02 	cmp.w	r8, #2
 800ac8a:	f104 0214 	add.w	r2, r4, #20
 800ac8e:	d13d      	bne.n	800ad0c <__gethex+0x41c>
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	3b01      	subs	r3, #1
 800ac94:	42ab      	cmp	r3, r5
 800ac96:	d10b      	bne.n	800acb0 <__gethex+0x3c0>
 800ac98:	1169      	asrs	r1, r5, #5
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	f005 051f 	and.w	r5, r5, #31
 800aca0:	fa03 f505 	lsl.w	r5, r3, r5
 800aca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aca8:	421d      	tst	r5, r3
 800acaa:	bf18      	it	ne
 800acac:	f04f 0801 	movne.w	r8, #1
 800acb0:	f048 0820 	orr.w	r8, r8, #32
 800acb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800acb6:	601c      	str	r4, [r3, #0]
 800acb8:	9b02      	ldr	r3, [sp, #8]
 800acba:	601e      	str	r6, [r3, #0]
 800acbc:	e6a2      	b.n	800aa04 <__gethex+0x114>
 800acbe:	4290      	cmp	r0, r2
 800acc0:	f842 3c04 	str.w	r3, [r2, #-4]
 800acc4:	d8d6      	bhi.n	800ac74 <__gethex+0x384>
 800acc6:	68a2      	ldr	r2, [r4, #8]
 800acc8:	4593      	cmp	fp, r2
 800acca:	db17      	blt.n	800acfc <__gethex+0x40c>
 800accc:	6861      	ldr	r1, [r4, #4]
 800acce:	4648      	mov	r0, r9
 800acd0:	3101      	adds	r1, #1
 800acd2:	f7fd fe1b 	bl	800890c <_Balloc>
 800acd6:	4682      	mov	sl, r0
 800acd8:	b918      	cbnz	r0, 800ace2 <__gethex+0x3f2>
 800acda:	4b1b      	ldr	r3, [pc, #108]	; (800ad48 <__gethex+0x458>)
 800acdc:	4602      	mov	r2, r0
 800acde:	2184      	movs	r1, #132	; 0x84
 800ace0:	e6b3      	b.n	800aa4a <__gethex+0x15a>
 800ace2:	6922      	ldr	r2, [r4, #16]
 800ace4:	3202      	adds	r2, #2
 800ace6:	f104 010c 	add.w	r1, r4, #12
 800acea:	0092      	lsls	r2, r2, #2
 800acec:	300c      	adds	r0, #12
 800acee:	f7fc fe7e 	bl	80079ee <memcpy>
 800acf2:	4621      	mov	r1, r4
 800acf4:	4648      	mov	r0, r9
 800acf6:	f7fd fe49 	bl	800898c <_Bfree>
 800acfa:	4654      	mov	r4, sl
 800acfc:	6922      	ldr	r2, [r4, #16]
 800acfe:	1c51      	adds	r1, r2, #1
 800ad00:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ad04:	6121      	str	r1, [r4, #16]
 800ad06:	2101      	movs	r1, #1
 800ad08:	6151      	str	r1, [r2, #20]
 800ad0a:	e7bc      	b.n	800ac86 <__gethex+0x396>
 800ad0c:	6921      	ldr	r1, [r4, #16]
 800ad0e:	4559      	cmp	r1, fp
 800ad10:	dd0b      	ble.n	800ad2a <__gethex+0x43a>
 800ad12:	2101      	movs	r1, #1
 800ad14:	4620      	mov	r0, r4
 800ad16:	f7ff fd83 	bl	800a820 <rshift>
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	3601      	adds	r6, #1
 800ad1e:	42b3      	cmp	r3, r6
 800ad20:	f6ff aedb 	blt.w	800aada <__gethex+0x1ea>
 800ad24:	f04f 0801 	mov.w	r8, #1
 800ad28:	e7c2      	b.n	800acb0 <__gethex+0x3c0>
 800ad2a:	f015 051f 	ands.w	r5, r5, #31
 800ad2e:	d0f9      	beq.n	800ad24 <__gethex+0x434>
 800ad30:	9b01      	ldr	r3, [sp, #4]
 800ad32:	441a      	add	r2, r3
 800ad34:	f1c5 0520 	rsb	r5, r5, #32
 800ad38:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ad3c:	f7fd fed8 	bl	8008af0 <__hi0bits>
 800ad40:	42a8      	cmp	r0, r5
 800ad42:	dbe6      	blt.n	800ad12 <__gethex+0x422>
 800ad44:	e7ee      	b.n	800ad24 <__gethex+0x434>
 800ad46:	bf00      	nop
 800ad48:	0800b255 	.word	0x0800b255

0800ad4c <L_shift>:
 800ad4c:	f1c2 0208 	rsb	r2, r2, #8
 800ad50:	0092      	lsls	r2, r2, #2
 800ad52:	b570      	push	{r4, r5, r6, lr}
 800ad54:	f1c2 0620 	rsb	r6, r2, #32
 800ad58:	6843      	ldr	r3, [r0, #4]
 800ad5a:	6804      	ldr	r4, [r0, #0]
 800ad5c:	fa03 f506 	lsl.w	r5, r3, r6
 800ad60:	432c      	orrs	r4, r5
 800ad62:	40d3      	lsrs	r3, r2
 800ad64:	6004      	str	r4, [r0, #0]
 800ad66:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad6a:	4288      	cmp	r0, r1
 800ad6c:	d3f4      	bcc.n	800ad58 <L_shift+0xc>
 800ad6e:	bd70      	pop	{r4, r5, r6, pc}

0800ad70 <__match>:
 800ad70:	b530      	push	{r4, r5, lr}
 800ad72:	6803      	ldr	r3, [r0, #0]
 800ad74:	3301      	adds	r3, #1
 800ad76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad7a:	b914      	cbnz	r4, 800ad82 <__match+0x12>
 800ad7c:	6003      	str	r3, [r0, #0]
 800ad7e:	2001      	movs	r0, #1
 800ad80:	bd30      	pop	{r4, r5, pc}
 800ad82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ad8a:	2d19      	cmp	r5, #25
 800ad8c:	bf98      	it	ls
 800ad8e:	3220      	addls	r2, #32
 800ad90:	42a2      	cmp	r2, r4
 800ad92:	d0f0      	beq.n	800ad76 <__match+0x6>
 800ad94:	2000      	movs	r0, #0
 800ad96:	e7f3      	b.n	800ad80 <__match+0x10>

0800ad98 <__hexnan>:
 800ad98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad9c:	680b      	ldr	r3, [r1, #0]
 800ad9e:	6801      	ldr	r1, [r0, #0]
 800ada0:	115e      	asrs	r6, r3, #5
 800ada2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ada6:	f013 031f 	ands.w	r3, r3, #31
 800adaa:	b087      	sub	sp, #28
 800adac:	bf18      	it	ne
 800adae:	3604      	addne	r6, #4
 800adb0:	2500      	movs	r5, #0
 800adb2:	1f37      	subs	r7, r6, #4
 800adb4:	4682      	mov	sl, r0
 800adb6:	4690      	mov	r8, r2
 800adb8:	9301      	str	r3, [sp, #4]
 800adba:	f846 5c04 	str.w	r5, [r6, #-4]
 800adbe:	46b9      	mov	r9, r7
 800adc0:	463c      	mov	r4, r7
 800adc2:	9502      	str	r5, [sp, #8]
 800adc4:	46ab      	mov	fp, r5
 800adc6:	784a      	ldrb	r2, [r1, #1]
 800adc8:	1c4b      	adds	r3, r1, #1
 800adca:	9303      	str	r3, [sp, #12]
 800adcc:	b342      	cbz	r2, 800ae20 <__hexnan+0x88>
 800adce:	4610      	mov	r0, r2
 800add0:	9105      	str	r1, [sp, #20]
 800add2:	9204      	str	r2, [sp, #16]
 800add4:	f7ff fd76 	bl	800a8c4 <__hexdig_fun>
 800add8:	2800      	cmp	r0, #0
 800adda:	d14f      	bne.n	800ae7c <__hexnan+0xe4>
 800addc:	9a04      	ldr	r2, [sp, #16]
 800adde:	9905      	ldr	r1, [sp, #20]
 800ade0:	2a20      	cmp	r2, #32
 800ade2:	d818      	bhi.n	800ae16 <__hexnan+0x7e>
 800ade4:	9b02      	ldr	r3, [sp, #8]
 800ade6:	459b      	cmp	fp, r3
 800ade8:	dd13      	ble.n	800ae12 <__hexnan+0x7a>
 800adea:	454c      	cmp	r4, r9
 800adec:	d206      	bcs.n	800adfc <__hexnan+0x64>
 800adee:	2d07      	cmp	r5, #7
 800adf0:	dc04      	bgt.n	800adfc <__hexnan+0x64>
 800adf2:	462a      	mov	r2, r5
 800adf4:	4649      	mov	r1, r9
 800adf6:	4620      	mov	r0, r4
 800adf8:	f7ff ffa8 	bl	800ad4c <L_shift>
 800adfc:	4544      	cmp	r4, r8
 800adfe:	d950      	bls.n	800aea2 <__hexnan+0x10a>
 800ae00:	2300      	movs	r3, #0
 800ae02:	f1a4 0904 	sub.w	r9, r4, #4
 800ae06:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae0a:	f8cd b008 	str.w	fp, [sp, #8]
 800ae0e:	464c      	mov	r4, r9
 800ae10:	461d      	mov	r5, r3
 800ae12:	9903      	ldr	r1, [sp, #12]
 800ae14:	e7d7      	b.n	800adc6 <__hexnan+0x2e>
 800ae16:	2a29      	cmp	r2, #41	; 0x29
 800ae18:	d155      	bne.n	800aec6 <__hexnan+0x12e>
 800ae1a:	3102      	adds	r1, #2
 800ae1c:	f8ca 1000 	str.w	r1, [sl]
 800ae20:	f1bb 0f00 	cmp.w	fp, #0
 800ae24:	d04f      	beq.n	800aec6 <__hexnan+0x12e>
 800ae26:	454c      	cmp	r4, r9
 800ae28:	d206      	bcs.n	800ae38 <__hexnan+0xa0>
 800ae2a:	2d07      	cmp	r5, #7
 800ae2c:	dc04      	bgt.n	800ae38 <__hexnan+0xa0>
 800ae2e:	462a      	mov	r2, r5
 800ae30:	4649      	mov	r1, r9
 800ae32:	4620      	mov	r0, r4
 800ae34:	f7ff ff8a 	bl	800ad4c <L_shift>
 800ae38:	4544      	cmp	r4, r8
 800ae3a:	d934      	bls.n	800aea6 <__hexnan+0x10e>
 800ae3c:	f1a8 0204 	sub.w	r2, r8, #4
 800ae40:	4623      	mov	r3, r4
 800ae42:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae46:	f842 1f04 	str.w	r1, [r2, #4]!
 800ae4a:	429f      	cmp	r7, r3
 800ae4c:	d2f9      	bcs.n	800ae42 <__hexnan+0xaa>
 800ae4e:	1b3b      	subs	r3, r7, r4
 800ae50:	f023 0303 	bic.w	r3, r3, #3
 800ae54:	3304      	adds	r3, #4
 800ae56:	3e03      	subs	r6, #3
 800ae58:	3401      	adds	r4, #1
 800ae5a:	42a6      	cmp	r6, r4
 800ae5c:	bf38      	it	cc
 800ae5e:	2304      	movcc	r3, #4
 800ae60:	4443      	add	r3, r8
 800ae62:	2200      	movs	r2, #0
 800ae64:	f843 2b04 	str.w	r2, [r3], #4
 800ae68:	429f      	cmp	r7, r3
 800ae6a:	d2fb      	bcs.n	800ae64 <__hexnan+0xcc>
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	b91b      	cbnz	r3, 800ae78 <__hexnan+0xe0>
 800ae70:	4547      	cmp	r7, r8
 800ae72:	d126      	bne.n	800aec2 <__hexnan+0x12a>
 800ae74:	2301      	movs	r3, #1
 800ae76:	603b      	str	r3, [r7, #0]
 800ae78:	2005      	movs	r0, #5
 800ae7a:	e025      	b.n	800aec8 <__hexnan+0x130>
 800ae7c:	3501      	adds	r5, #1
 800ae7e:	2d08      	cmp	r5, #8
 800ae80:	f10b 0b01 	add.w	fp, fp, #1
 800ae84:	dd06      	ble.n	800ae94 <__hexnan+0xfc>
 800ae86:	4544      	cmp	r4, r8
 800ae88:	d9c3      	bls.n	800ae12 <__hexnan+0x7a>
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae90:	2501      	movs	r5, #1
 800ae92:	3c04      	subs	r4, #4
 800ae94:	6822      	ldr	r2, [r4, #0]
 800ae96:	f000 000f 	and.w	r0, r0, #15
 800ae9a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ae9e:	6020      	str	r0, [r4, #0]
 800aea0:	e7b7      	b.n	800ae12 <__hexnan+0x7a>
 800aea2:	2508      	movs	r5, #8
 800aea4:	e7b5      	b.n	800ae12 <__hexnan+0x7a>
 800aea6:	9b01      	ldr	r3, [sp, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d0df      	beq.n	800ae6c <__hexnan+0xd4>
 800aeac:	f1c3 0320 	rsb	r3, r3, #32
 800aeb0:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb4:	40da      	lsrs	r2, r3
 800aeb6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aeba:	4013      	ands	r3, r2
 800aebc:	f846 3c04 	str.w	r3, [r6, #-4]
 800aec0:	e7d4      	b.n	800ae6c <__hexnan+0xd4>
 800aec2:	3f04      	subs	r7, #4
 800aec4:	e7d2      	b.n	800ae6c <__hexnan+0xd4>
 800aec6:	2004      	movs	r0, #4
 800aec8:	b007      	add	sp, #28
 800aeca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aece <__ascii_mbtowc>:
 800aece:	b082      	sub	sp, #8
 800aed0:	b901      	cbnz	r1, 800aed4 <__ascii_mbtowc+0x6>
 800aed2:	a901      	add	r1, sp, #4
 800aed4:	b142      	cbz	r2, 800aee8 <__ascii_mbtowc+0x1a>
 800aed6:	b14b      	cbz	r3, 800aeec <__ascii_mbtowc+0x1e>
 800aed8:	7813      	ldrb	r3, [r2, #0]
 800aeda:	600b      	str	r3, [r1, #0]
 800aedc:	7812      	ldrb	r2, [r2, #0]
 800aede:	1e10      	subs	r0, r2, #0
 800aee0:	bf18      	it	ne
 800aee2:	2001      	movne	r0, #1
 800aee4:	b002      	add	sp, #8
 800aee6:	4770      	bx	lr
 800aee8:	4610      	mov	r0, r2
 800aeea:	e7fb      	b.n	800aee4 <__ascii_mbtowc+0x16>
 800aeec:	f06f 0001 	mvn.w	r0, #1
 800aef0:	e7f8      	b.n	800aee4 <__ascii_mbtowc+0x16>

0800aef2 <_realloc_r>:
 800aef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aef6:	4680      	mov	r8, r0
 800aef8:	4614      	mov	r4, r2
 800aefa:	460e      	mov	r6, r1
 800aefc:	b921      	cbnz	r1, 800af08 <_realloc_r+0x16>
 800aefe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af02:	4611      	mov	r1, r2
 800af04:	f7fd bc76 	b.w	80087f4 <_malloc_r>
 800af08:	b92a      	cbnz	r2, 800af16 <_realloc_r+0x24>
 800af0a:	f7fd fbff 	bl	800870c <_free_r>
 800af0e:	4625      	mov	r5, r4
 800af10:	4628      	mov	r0, r5
 800af12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af16:	f000 f842 	bl	800af9e <_malloc_usable_size_r>
 800af1a:	4284      	cmp	r4, r0
 800af1c:	4607      	mov	r7, r0
 800af1e:	d802      	bhi.n	800af26 <_realloc_r+0x34>
 800af20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af24:	d812      	bhi.n	800af4c <_realloc_r+0x5a>
 800af26:	4621      	mov	r1, r4
 800af28:	4640      	mov	r0, r8
 800af2a:	f7fd fc63 	bl	80087f4 <_malloc_r>
 800af2e:	4605      	mov	r5, r0
 800af30:	2800      	cmp	r0, #0
 800af32:	d0ed      	beq.n	800af10 <_realloc_r+0x1e>
 800af34:	42bc      	cmp	r4, r7
 800af36:	4622      	mov	r2, r4
 800af38:	4631      	mov	r1, r6
 800af3a:	bf28      	it	cs
 800af3c:	463a      	movcs	r2, r7
 800af3e:	f7fc fd56 	bl	80079ee <memcpy>
 800af42:	4631      	mov	r1, r6
 800af44:	4640      	mov	r0, r8
 800af46:	f7fd fbe1 	bl	800870c <_free_r>
 800af4a:	e7e1      	b.n	800af10 <_realloc_r+0x1e>
 800af4c:	4635      	mov	r5, r6
 800af4e:	e7df      	b.n	800af10 <_realloc_r+0x1e>

0800af50 <__ascii_wctomb>:
 800af50:	b149      	cbz	r1, 800af66 <__ascii_wctomb+0x16>
 800af52:	2aff      	cmp	r2, #255	; 0xff
 800af54:	bf85      	ittet	hi
 800af56:	238a      	movhi	r3, #138	; 0x8a
 800af58:	6003      	strhi	r3, [r0, #0]
 800af5a:	700a      	strbls	r2, [r1, #0]
 800af5c:	f04f 30ff 	movhi.w	r0, #4294967295
 800af60:	bf98      	it	ls
 800af62:	2001      	movls	r0, #1
 800af64:	4770      	bx	lr
 800af66:	4608      	mov	r0, r1
 800af68:	4770      	bx	lr
	...

0800af6c <fiprintf>:
 800af6c:	b40e      	push	{r1, r2, r3}
 800af6e:	b503      	push	{r0, r1, lr}
 800af70:	4601      	mov	r1, r0
 800af72:	ab03      	add	r3, sp, #12
 800af74:	4805      	ldr	r0, [pc, #20]	; (800af8c <fiprintf+0x20>)
 800af76:	f853 2b04 	ldr.w	r2, [r3], #4
 800af7a:	6800      	ldr	r0, [r0, #0]
 800af7c:	9301      	str	r3, [sp, #4]
 800af7e:	f7ff f98b 	bl	800a298 <_vfiprintf_r>
 800af82:	b002      	add	sp, #8
 800af84:	f85d eb04 	ldr.w	lr, [sp], #4
 800af88:	b003      	add	sp, #12
 800af8a:	4770      	bx	lr
 800af8c:	20000068 	.word	0x20000068

0800af90 <abort>:
 800af90:	b508      	push	{r3, lr}
 800af92:	2006      	movs	r0, #6
 800af94:	f000 f834 	bl	800b000 <raise>
 800af98:	2001      	movs	r0, #1
 800af9a:	f7f6 fd49 	bl	8001a30 <_exit>

0800af9e <_malloc_usable_size_r>:
 800af9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800afa2:	1f18      	subs	r0, r3, #4
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	bfbc      	itt	lt
 800afa8:	580b      	ldrlt	r3, [r1, r0]
 800afaa:	18c0      	addlt	r0, r0, r3
 800afac:	4770      	bx	lr

0800afae <_raise_r>:
 800afae:	291f      	cmp	r1, #31
 800afb0:	b538      	push	{r3, r4, r5, lr}
 800afb2:	4604      	mov	r4, r0
 800afb4:	460d      	mov	r5, r1
 800afb6:	d904      	bls.n	800afc2 <_raise_r+0x14>
 800afb8:	2316      	movs	r3, #22
 800afba:	6003      	str	r3, [r0, #0]
 800afbc:	f04f 30ff 	mov.w	r0, #4294967295
 800afc0:	bd38      	pop	{r3, r4, r5, pc}
 800afc2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800afc4:	b112      	cbz	r2, 800afcc <_raise_r+0x1e>
 800afc6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800afca:	b94b      	cbnz	r3, 800afe0 <_raise_r+0x32>
 800afcc:	4620      	mov	r0, r4
 800afce:	f000 f831 	bl	800b034 <_getpid_r>
 800afd2:	462a      	mov	r2, r5
 800afd4:	4601      	mov	r1, r0
 800afd6:	4620      	mov	r0, r4
 800afd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afdc:	f000 b818 	b.w	800b010 <_kill_r>
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d00a      	beq.n	800affa <_raise_r+0x4c>
 800afe4:	1c59      	adds	r1, r3, #1
 800afe6:	d103      	bne.n	800aff0 <_raise_r+0x42>
 800afe8:	2316      	movs	r3, #22
 800afea:	6003      	str	r3, [r0, #0]
 800afec:	2001      	movs	r0, #1
 800afee:	e7e7      	b.n	800afc0 <_raise_r+0x12>
 800aff0:	2400      	movs	r4, #0
 800aff2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aff6:	4628      	mov	r0, r5
 800aff8:	4798      	blx	r3
 800affa:	2000      	movs	r0, #0
 800affc:	e7e0      	b.n	800afc0 <_raise_r+0x12>
	...

0800b000 <raise>:
 800b000:	4b02      	ldr	r3, [pc, #8]	; (800b00c <raise+0xc>)
 800b002:	4601      	mov	r1, r0
 800b004:	6818      	ldr	r0, [r3, #0]
 800b006:	f7ff bfd2 	b.w	800afae <_raise_r>
 800b00a:	bf00      	nop
 800b00c:	20000068 	.word	0x20000068

0800b010 <_kill_r>:
 800b010:	b538      	push	{r3, r4, r5, lr}
 800b012:	4d07      	ldr	r5, [pc, #28]	; (800b030 <_kill_r+0x20>)
 800b014:	2300      	movs	r3, #0
 800b016:	4604      	mov	r4, r0
 800b018:	4608      	mov	r0, r1
 800b01a:	4611      	mov	r1, r2
 800b01c:	602b      	str	r3, [r5, #0]
 800b01e:	f7f6 fcf7 	bl	8001a10 <_kill>
 800b022:	1c43      	adds	r3, r0, #1
 800b024:	d102      	bne.n	800b02c <_kill_r+0x1c>
 800b026:	682b      	ldr	r3, [r5, #0]
 800b028:	b103      	cbz	r3, 800b02c <_kill_r+0x1c>
 800b02a:	6023      	str	r3, [r4, #0]
 800b02c:	bd38      	pop	{r3, r4, r5, pc}
 800b02e:	bf00      	nop
 800b030:	20004424 	.word	0x20004424

0800b034 <_getpid_r>:
 800b034:	f7f6 bce4 	b.w	8001a00 <_getpid>

0800b038 <_init>:
 800b038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03a:	bf00      	nop
 800b03c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b03e:	bc08      	pop	{r3}
 800b040:	469e      	mov	lr, r3
 800b042:	4770      	bx	lr

0800b044 <_fini>:
 800b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b046:	bf00      	nop
 800b048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b04a:	bc08      	pop	{r3}
 800b04c:	469e      	mov	lr, r3
 800b04e:	4770      	bx	lr
