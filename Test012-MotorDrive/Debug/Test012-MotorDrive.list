
Test012-MotorDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d80  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08007f20  08007f20  00017f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080b4  080080b4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080080b4  080080b4  000180b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080bc  080080bc  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080bc  080080bc  000180bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080c0  080080c0  000180c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080080c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042a4  2000007c  08008140  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004320  08008140  00024320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166e1  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e8  00000000  00000000  000367d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  00039cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9c  00000000  00000000  0003af88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000193ba  00000000  00000000  0003be24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000153ec  00000000  00000000  000551de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009918e  00000000  00000000  0006a5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058b0  00000000  00000000  00103758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00109008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007f08 	.word	0x08007f08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08007f08 	.word	0x08007f08

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b970 	b.w	8000b94 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9e08      	ldr	r6, [sp, #32]
 80008d2:	460d      	mov	r5, r1
 80008d4:	4604      	mov	r4, r0
 80008d6:	460f      	mov	r7, r1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d14a      	bne.n	8000972 <__udivmoddi4+0xa6>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4694      	mov	ip, r2
 80008e0:	d965      	bls.n	80009ae <__udivmoddi4+0xe2>
 80008e2:	fab2 f382 	clz	r3, r2
 80008e6:	b143      	cbz	r3, 80008fa <__udivmoddi4+0x2e>
 80008e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008ec:	f1c3 0220 	rsb	r2, r3, #32
 80008f0:	409f      	lsls	r7, r3
 80008f2:	fa20 f202 	lsr.w	r2, r0, r2
 80008f6:	4317      	orrs	r7, r2
 80008f8:	409c      	lsls	r4, r3
 80008fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008fe:	fa1f f58c 	uxth.w	r5, ip
 8000902:	fbb7 f1fe 	udiv	r1, r7, lr
 8000906:	0c22      	lsrs	r2, r4, #16
 8000908:	fb0e 7711 	mls	r7, lr, r1, r7
 800090c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000910:	fb01 f005 	mul.w	r0, r1, r5
 8000914:	4290      	cmp	r0, r2
 8000916:	d90a      	bls.n	800092e <__udivmoddi4+0x62>
 8000918:	eb1c 0202 	adds.w	r2, ip, r2
 800091c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000920:	f080 811c 	bcs.w	8000b5c <__udivmoddi4+0x290>
 8000924:	4290      	cmp	r0, r2
 8000926:	f240 8119 	bls.w	8000b5c <__udivmoddi4+0x290>
 800092a:	3902      	subs	r1, #2
 800092c:	4462      	add	r2, ip
 800092e:	1a12      	subs	r2, r2, r0
 8000930:	b2a4      	uxth	r4, r4
 8000932:	fbb2 f0fe 	udiv	r0, r2, lr
 8000936:	fb0e 2210 	mls	r2, lr, r0, r2
 800093a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800093e:	fb00 f505 	mul.w	r5, r0, r5
 8000942:	42a5      	cmp	r5, r4
 8000944:	d90a      	bls.n	800095c <__udivmoddi4+0x90>
 8000946:	eb1c 0404 	adds.w	r4, ip, r4
 800094a:	f100 32ff 	add.w	r2, r0, #4294967295
 800094e:	f080 8107 	bcs.w	8000b60 <__udivmoddi4+0x294>
 8000952:	42a5      	cmp	r5, r4
 8000954:	f240 8104 	bls.w	8000b60 <__udivmoddi4+0x294>
 8000958:	4464      	add	r4, ip
 800095a:	3802      	subs	r0, #2
 800095c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000960:	1b64      	subs	r4, r4, r5
 8000962:	2100      	movs	r1, #0
 8000964:	b11e      	cbz	r6, 800096e <__udivmoddi4+0xa2>
 8000966:	40dc      	lsrs	r4, r3
 8000968:	2300      	movs	r3, #0
 800096a:	e9c6 4300 	strd	r4, r3, [r6]
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	428b      	cmp	r3, r1
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0xbc>
 8000976:	2e00      	cmp	r6, #0
 8000978:	f000 80ed 	beq.w	8000b56 <__udivmoddi4+0x28a>
 800097c:	2100      	movs	r1, #0
 800097e:	e9c6 0500 	strd	r0, r5, [r6]
 8000982:	4608      	mov	r0, r1
 8000984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000988:	fab3 f183 	clz	r1, r3
 800098c:	2900      	cmp	r1, #0
 800098e:	d149      	bne.n	8000a24 <__udivmoddi4+0x158>
 8000990:	42ab      	cmp	r3, r5
 8000992:	d302      	bcc.n	800099a <__udivmoddi4+0xce>
 8000994:	4282      	cmp	r2, r0
 8000996:	f200 80f8 	bhi.w	8000b8a <__udivmoddi4+0x2be>
 800099a:	1a84      	subs	r4, r0, r2
 800099c:	eb65 0203 	sbc.w	r2, r5, r3
 80009a0:	2001      	movs	r0, #1
 80009a2:	4617      	mov	r7, r2
 80009a4:	2e00      	cmp	r6, #0
 80009a6:	d0e2      	beq.n	800096e <__udivmoddi4+0xa2>
 80009a8:	e9c6 4700 	strd	r4, r7, [r6]
 80009ac:	e7df      	b.n	800096e <__udivmoddi4+0xa2>
 80009ae:	b902      	cbnz	r2, 80009b2 <__udivmoddi4+0xe6>
 80009b0:	deff      	udf	#255	; 0xff
 80009b2:	fab2 f382 	clz	r3, r2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f040 8090 	bne.w	8000adc <__udivmoddi4+0x210>
 80009bc:	1a8a      	subs	r2, r1, r2
 80009be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009c2:	fa1f fe8c 	uxth.w	lr, ip
 80009c6:	2101      	movs	r1, #1
 80009c8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009cc:	fb07 2015 	mls	r0, r7, r5, r2
 80009d0:	0c22      	lsrs	r2, r4, #16
 80009d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009d6:	fb0e f005 	mul.w	r0, lr, r5
 80009da:	4290      	cmp	r0, r2
 80009dc:	d908      	bls.n	80009f0 <__udivmoddi4+0x124>
 80009de:	eb1c 0202 	adds.w	r2, ip, r2
 80009e2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009e6:	d202      	bcs.n	80009ee <__udivmoddi4+0x122>
 80009e8:	4290      	cmp	r0, r2
 80009ea:	f200 80cb 	bhi.w	8000b84 <__udivmoddi4+0x2b8>
 80009ee:	4645      	mov	r5, r8
 80009f0:	1a12      	subs	r2, r2, r0
 80009f2:	b2a4      	uxth	r4, r4
 80009f4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009f8:	fb07 2210 	mls	r2, r7, r0, r2
 80009fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a00:	fb0e fe00 	mul.w	lr, lr, r0
 8000a04:	45a6      	cmp	lr, r4
 8000a06:	d908      	bls.n	8000a1a <__udivmoddi4+0x14e>
 8000a08:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a10:	d202      	bcs.n	8000a18 <__udivmoddi4+0x14c>
 8000a12:	45a6      	cmp	lr, r4
 8000a14:	f200 80bb 	bhi.w	8000b8e <__udivmoddi4+0x2c2>
 8000a18:	4610      	mov	r0, r2
 8000a1a:	eba4 040e 	sub.w	r4, r4, lr
 8000a1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a22:	e79f      	b.n	8000964 <__udivmoddi4+0x98>
 8000a24:	f1c1 0720 	rsb	r7, r1, #32
 8000a28:	408b      	lsls	r3, r1
 8000a2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a32:	fa05 f401 	lsl.w	r4, r5, r1
 8000a36:	fa20 f307 	lsr.w	r3, r0, r7
 8000a3a:	40fd      	lsrs	r5, r7
 8000a3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a40:	4323      	orrs	r3, r4
 8000a42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a46:	fa1f fe8c 	uxth.w	lr, ip
 8000a4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a4e:	0c1c      	lsrs	r4, r3, #16
 8000a50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a54:	fb08 f50e 	mul.w	r5, r8, lr
 8000a58:	42a5      	cmp	r5, r4
 8000a5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a62:	d90b      	bls.n	8000a7c <__udivmoddi4+0x1b0>
 8000a64:	eb1c 0404 	adds.w	r4, ip, r4
 8000a68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a6c:	f080 8088 	bcs.w	8000b80 <__udivmoddi4+0x2b4>
 8000a70:	42a5      	cmp	r5, r4
 8000a72:	f240 8085 	bls.w	8000b80 <__udivmoddi4+0x2b4>
 8000a76:	f1a8 0802 	sub.w	r8, r8, #2
 8000a7a:	4464      	add	r4, ip
 8000a7c:	1b64      	subs	r4, r4, r5
 8000a7e:	b29d      	uxth	r5, r3
 8000a80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a84:	fb09 4413 	mls	r4, r9, r3, r4
 8000a88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a90:	45a6      	cmp	lr, r4
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x1da>
 8000a94:	eb1c 0404 	adds.w	r4, ip, r4
 8000a98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a9c:	d26c      	bcs.n	8000b78 <__udivmoddi4+0x2ac>
 8000a9e:	45a6      	cmp	lr, r4
 8000aa0:	d96a      	bls.n	8000b78 <__udivmoddi4+0x2ac>
 8000aa2:	3b02      	subs	r3, #2
 8000aa4:	4464      	add	r4, ip
 8000aa6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aaa:	fba3 9502 	umull	r9, r5, r3, r2
 8000aae:	eba4 040e 	sub.w	r4, r4, lr
 8000ab2:	42ac      	cmp	r4, r5
 8000ab4:	46c8      	mov	r8, r9
 8000ab6:	46ae      	mov	lr, r5
 8000ab8:	d356      	bcc.n	8000b68 <__udivmoddi4+0x29c>
 8000aba:	d053      	beq.n	8000b64 <__udivmoddi4+0x298>
 8000abc:	b156      	cbz	r6, 8000ad4 <__udivmoddi4+0x208>
 8000abe:	ebb0 0208 	subs.w	r2, r0, r8
 8000ac2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ac6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aca:	40ca      	lsrs	r2, r1
 8000acc:	40cc      	lsrs	r4, r1
 8000ace:	4317      	orrs	r7, r2
 8000ad0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000adc:	f1c3 0120 	rsb	r1, r3, #32
 8000ae0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ae4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ae8:	fa25 f101 	lsr.w	r1, r5, r1
 8000aec:	409d      	lsls	r5, r3
 8000aee:	432a      	orrs	r2, r5
 8000af0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af4:	fa1f fe8c 	uxth.w	lr, ip
 8000af8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afc:	fb07 1510 	mls	r5, r7, r0, r1
 8000b00:	0c11      	lsrs	r1, r2, #16
 8000b02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b06:	fb00 f50e 	mul.w	r5, r0, lr
 8000b0a:	428d      	cmp	r5, r1
 8000b0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b10:	d908      	bls.n	8000b24 <__udivmoddi4+0x258>
 8000b12:	eb1c 0101 	adds.w	r1, ip, r1
 8000b16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b1a:	d22f      	bcs.n	8000b7c <__udivmoddi4+0x2b0>
 8000b1c:	428d      	cmp	r5, r1
 8000b1e:	d92d      	bls.n	8000b7c <__udivmoddi4+0x2b0>
 8000b20:	3802      	subs	r0, #2
 8000b22:	4461      	add	r1, ip
 8000b24:	1b49      	subs	r1, r1, r5
 8000b26:	b292      	uxth	r2, r2
 8000b28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b34:	fb05 f10e 	mul.w	r1, r5, lr
 8000b38:	4291      	cmp	r1, r2
 8000b3a:	d908      	bls.n	8000b4e <__udivmoddi4+0x282>
 8000b3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b44:	d216      	bcs.n	8000b74 <__udivmoddi4+0x2a8>
 8000b46:	4291      	cmp	r1, r2
 8000b48:	d914      	bls.n	8000b74 <__udivmoddi4+0x2a8>
 8000b4a:	3d02      	subs	r5, #2
 8000b4c:	4462      	add	r2, ip
 8000b4e:	1a52      	subs	r2, r2, r1
 8000b50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b54:	e738      	b.n	80009c8 <__udivmoddi4+0xfc>
 8000b56:	4631      	mov	r1, r6
 8000b58:	4630      	mov	r0, r6
 8000b5a:	e708      	b.n	800096e <__udivmoddi4+0xa2>
 8000b5c:	4639      	mov	r1, r7
 8000b5e:	e6e6      	b.n	800092e <__udivmoddi4+0x62>
 8000b60:	4610      	mov	r0, r2
 8000b62:	e6fb      	b.n	800095c <__udivmoddi4+0x90>
 8000b64:	4548      	cmp	r0, r9
 8000b66:	d2a9      	bcs.n	8000abc <__udivmoddi4+0x1f0>
 8000b68:	ebb9 0802 	subs.w	r8, r9, r2
 8000b6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b70:	3b01      	subs	r3, #1
 8000b72:	e7a3      	b.n	8000abc <__udivmoddi4+0x1f0>
 8000b74:	4645      	mov	r5, r8
 8000b76:	e7ea      	b.n	8000b4e <__udivmoddi4+0x282>
 8000b78:	462b      	mov	r3, r5
 8000b7a:	e794      	b.n	8000aa6 <__udivmoddi4+0x1da>
 8000b7c:	4640      	mov	r0, r8
 8000b7e:	e7d1      	b.n	8000b24 <__udivmoddi4+0x258>
 8000b80:	46d0      	mov	r8, sl
 8000b82:	e77b      	b.n	8000a7c <__udivmoddi4+0x1b0>
 8000b84:	3d02      	subs	r5, #2
 8000b86:	4462      	add	r2, ip
 8000b88:	e732      	b.n	80009f0 <__udivmoddi4+0x124>
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e70a      	b.n	80009a4 <__udivmoddi4+0xd8>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e742      	b.n	8000a1a <__udivmoddi4+0x14e>

08000b94 <__aeabi_idiv0>:
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__io_getchar>:
//#include "C:\Users\user\STM32Cube\Repository\STM32Cube_FW_F4_V1.28.1\Drivers\STM32F4xx_HAL_Driver\inc\stm32f4xx_hal_i2c.h"
extern UART_HandleTypeDef huart2;


int __io_getchar(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
   char ch;
   //데이터를 받을 때까지 기다려야 하므로 while을 사용해야 함
   while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 8000b9e:	bf00      	nop
 8000ba0:	1df9      	adds	r1, r7, #7
 8000ba2:	230a      	movs	r3, #10
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	480d      	ldr	r0, [pc, #52]	; (8000bdc <__io_getchar+0x44>)
 8000ba8:	f002 ffb3 	bl	8003b12 <HAL_UART_Receive>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d1f6      	bne.n	8000ba0 <__io_getchar+0x8>
   HAL_UART_Transmit(&huart2, &ch, 1, 10); // echo: Serial 통신에서 받은 데이터를 그대로 돌려주는 것
 8000bb2:	1df9      	adds	r1, r7, #7
 8000bb4:	230a      	movs	r3, #10
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4808      	ldr	r0, [pc, #32]	; (8000bdc <__io_getchar+0x44>)
 8000bba:	f002 ff1f 	bl	80039fc <HAL_UART_Transmit>
   if(ch == '\r') HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b0d      	cmp	r3, #13
 8000bc2:	d105      	bne.n	8000bd0 <__io_getchar+0x38>
 8000bc4:	230a      	movs	r3, #10
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4905      	ldr	r1, [pc, #20]	; (8000be0 <__io_getchar+0x48>)
 8000bca:	4804      	ldr	r0, [pc, #16]	; (8000bdc <__io_getchar+0x44>)
 8000bcc:	f002 ff16 	bl	80039fc <HAL_UART_Transmit>
   return ch;
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200003c8 	.word	0x200003c8
 8000be0:	08007f20 	.word	0x08007f20

08000be4 <__io_putchar>:
int __io_putchar(int ch) // Lowest output Function
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10); // timeout: 10ms
 8000bec:	1d39      	adds	r1, r7, #4
 8000bee:	230a      	movs	r3, #10
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4804      	ldr	r0, [pc, #16]	; (8000c04 <__io_putchar+0x20>)
 8000bf4:	f002 ff02 	bl	80039fc <HAL_UART_Transmit>
   return ch;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200003c8 	.word	0x200003c8

08000c08 <ProgramStart>:
void ProgramStart(char *str)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
   //printf("\033[2J\033[0;0H"); // printf("\033[2J"); : 화면 Clear
   cls();
 8000c10:	f000 f830 	bl	8000c74 <cls>
   Cursor(0,0);
 8000c14:	2100      	movs	r1, #0
 8000c16:	2000      	movs	r0, #0
 8000c18:	f000 f836 	bl	8000c88 <Cursor>
   printf("Program Name - %s\r\n", str);
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	480a      	ldr	r0, [pc, #40]	; (8000c48 <ProgramStart+0x40>)
 8000c20:	f005 ffbe 	bl	8006ba0 <iprintf>
   printf("Press Blue-button(B1) to Start ...\r\n");
 8000c24:	4809      	ldr	r0, [pc, #36]	; (8000c4c <ProgramStart+0x44>)
 8000c26:	f006 f821 	bl	8006c6c <puts>
   StandBy();
 8000c2a:	f000 f813 	bl	8000c54 <StandBy>
   setvbuf(stdin, NULL, _IONBF, 0);
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <ProgramStart+0x48>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6858      	ldr	r0, [r3, #4]
 8000c34:	2300      	movs	r3, #0
 8000c36:	2202      	movs	r2, #2
 8000c38:	2100      	movs	r1, #0
 8000c3a:	f006 f81f 	bl	8006c7c <setvbuf>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	08007f24 	.word	0x08007f24
 8000c4c:	08007f38 	.word	0x08007f38
 8000c50:	20000078 	.word	0x20000078

08000c54 <StandBy>:

void StandBy()
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 8000c58:	bf00      	nop
 8000c5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c5e:	4804      	ldr	r0, [pc, #16]	; (8000c70 <StandBy+0x1c>)
 8000c60:	f001 f956 	bl	8001f10 <HAL_GPIO_ReadPin>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f7      	bne.n	8000c5a <StandBy+0x6>
}
 8000c6a:	bf00      	nop
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40020800 	.word	0x40020800

08000c74 <cls>:

void cls() // 화면 clear
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
   printf("\033[2J");
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <cls+0x10>)
 8000c7a:	f005 ff91 	bl	8006ba0 <iprintf>
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	08007f5c 	.word	0x08007f5c

08000c88 <Cursor>:

void Cursor(int x, int y)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
   char buf[20];
   sprintf(buf, "\033[%d;%dH", y,x);
 8000c92:	f107 000c 	add.w	r0, r7, #12
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	4906      	ldr	r1, [pc, #24]	; (8000cb4 <Cursor+0x2c>)
 8000c9c:	f006 f89c 	bl	8006dd8 <siprintf>
   puts(buf);
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f005 ffe1 	bl	8006c6c <puts>
}
 8000caa:	bf00      	nop
 8000cac:	3720      	adds	r7, #32
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	08007f64 	.word	0x08007f64

08000cb8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000cc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <vApplicationGetIdleTaskMemory+0x30>)
 8000cce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000098 	.word	0x20000098
 8000ce8:	20000138 	.word	0x20000138

08000cec <microDelay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void microDelay(int us) // us : micro second
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	int t1 = htim2.Instance->CNT;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <microDelay+0x30>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfa:	60fb      	str	r3, [r7, #12]
	// {

	// if(htim2.Instance->CNT - t1 >= us) break;

	// }
	while(htim2.Instance->CNT - t1 < us);
 8000cfc:	bf00      	nop
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <microDelay+0x30>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	1ad2      	subs	r2, r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d3f7      	bcc.n	8000cfe <microDelay+0x12>

	// htim2.Instance->CNT = 0;

	// while(htim2.Instance->CNT < us);
}
 8000d0e:	bf00      	nop
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	20000338 	.word	0x20000338

08000d20 <Trigger>:

void Trigger()
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2140      	movs	r1, #64	; 0x40
 8000d28:	480a      	ldr	r0, [pc, #40]	; (8000d54 <Trigger+0x34>)
 8000d2a:	f001 f909 	bl	8001f40 <HAL_GPIO_WritePin>
	microDelay(10);
 8000d2e:	200a      	movs	r0, #10
 8000d30:	f7ff ffdc 	bl	8000cec <microDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 1);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2140      	movs	r1, #64	; 0x40
 8000d38:	4806      	ldr	r0, [pc, #24]	; (8000d54 <Trigger+0x34>)
 8000d3a:	f001 f901 	bl	8001f40 <HAL_GPIO_WritePin>
	microDelay(10);
 8000d3e:	200a      	movs	r0, #10
 8000d40:	f7ff ffd4 	bl	8000cec <microDelay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2140      	movs	r1, #64	; 0x40
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <Trigger+0x34>)
 8000d4a:	f001 f8f9 	bl	8001f40 <HAL_GPIO_WritePin>
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40020400 	.word	0x40020400

08000d58 <HAL_GPIO_EXTI_Callback>:

int t0= 0; t1=0;
volatile int dist=0;// mm
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Echo_Pin)
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	2b80      	cmp	r3, #128	; 0x80
 8000d66:	d127      	bne.n	8000db8 <HAL_GPIO_EXTI_Callback+0x60>
	{
		int tt = htim2.Instance->CNT;
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_GPIO_EXTI_Callback+0x70>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6e:	60fb      	str	r3, [r7, #12]
		if(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == 1)//rising
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	4816      	ldr	r0, [pc, #88]	; (8000dcc <HAL_GPIO_EXTI_Callback+0x74>)
 8000d74:	f001 f8cc 	bl	8001f10 <HAL_GPIO_ReadPin>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d103      	bne.n	8000d86 <HAL_GPIO_EXTI_Callback+0x2e>
		{
			t0=tt;
 8000d7e:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	6013      	str	r3, [r2, #0]
		{
			t1=tt;
			dist=(double)0.17*(t1-t0);
		}
	}
}
 8000d84:	e018      	b.n	8000db8 <HAL_GPIO_EXTI_Callback+0x60>
			t1=tt;
 8000d86:	4a13      	ldr	r2, [pc, #76]	; (8000dd4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6013      	str	r3, [r2, #0]
			dist=(double)0.17*(t1-t0);
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fcee 	bl	8000778 <__aeabi_i2d>
 8000d9c:	a308      	add	r3, pc, #32	; (adr r3, 8000dc0 <HAL_GPIO_EXTI_Callback+0x68>)
 8000d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da2:	f7ff fa6d 	bl	8000280 <__aeabi_dmul>
 8000da6:	4602      	mov	r2, r0
 8000da8:	460b      	mov	r3, r1
 8000daa:	4610      	mov	r0, r2
 8000dac:	4619      	mov	r1, r3
 8000dae:	f7ff fd4d 	bl	800084c <__aeabi_d2iz>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a08      	ldr	r2, [pc, #32]	; (8000dd8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	5c28f5c3 	.word	0x5c28f5c3
 8000dc4:	3fc5c28f 	.word	0x3fc5c28f
 8000dc8:	20000338 	.word	0x20000338
 8000dcc:	40020000 	.word	0x40020000
 8000dd0:	20000424 	.word	0x20000424
 8000dd4:	20000428 	.word	0x20000428
 8000dd8:	2000042c 	.word	0x2000042c

08000ddc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ddc:	b5b0      	push	{r4, r5, r7, lr}
 8000dde:	b0a0      	sub	sp, #128	; 0x80
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de2:	f000 fdc9 	bl	8001978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de6:	f000 f897 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dea:	f000 f9eb 	bl	80011c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dee:	f000 f9bf 	bl	8001170 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000df2:	f000 f947 	bl	8001084 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000df6:	f000 f8f9 	bl	8000fec <MX_TIM2_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	673b      	str	r3, [r7, #112]	; 0x70
 8000dfe:	2300      	movs	r3, #0
 8000e00:	677b      	str	r3, [r7, #116]	; 0x74
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000e02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000e06:	2101      	movs	r1, #1
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f003 fada 	bl	80043c2 <osSemaphoreCreate>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a34      	ldr	r2, [pc, #208]	; (8000ee4 <main+0x108>)
 8000e12:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, StartTask01, osPriorityNormal, 0, 128);
 8000e14:	4b34      	ldr	r3, [pc, #208]	; (8000ee8 <main+0x10c>)
 8000e16:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000e1a:	461d      	mov	r5, r3
 8000e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 8000e28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f003 fa67 	bl	8004302 <osThreadCreate>
 8000e34:	4603      	mov	r3, r0
 8000e36:	4a2d      	ldr	r2, [pc, #180]	; (8000eec <main+0x110>)
 8000e38:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityBelowNormal, 0, 128);
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <main+0x114>)
 8000e3c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000e40:	461d      	mov	r5, r3
 8000e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000e4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e52:	2100      	movs	r1, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f003 fa54 	bl	8004302 <osThreadCreate>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a25      	ldr	r2, [pc, #148]	; (8000ef4 <main+0x118>)
 8000e5e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityLow, 0, 128);
 8000e60:	4b25      	ldr	r3, [pc, #148]	; (8000ef8 <main+0x11c>)
 8000e62:	f107 041c 	add.w	r4, r7, #28
 8000e66:	461d      	mov	r5, r3
 8000e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f003 fa41 	bl	8004302 <osThreadCreate>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4a1e      	ldr	r2, [pc, #120]	; (8000efc <main+0x120>)
 8000e84:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <main+0x124>)
 8000e88:	463c      	mov	r4, r7
 8000e8a:	461d      	mov	r5, r3
 8000e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e90:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 8000e98:	463b      	mov	r3, r7
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 fa30 	bl	8004302 <osThreadCreate>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <main+0x128>)
 8000ea6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ProgramStart("DC Motor & Motor Driver Test");
 8000ea8:	4817      	ldr	r0, [pc, #92]	; (8000f08 <main+0x12c>)
 8000eaa:	f7ff fead 	bl	8000c08 <ProgramStart>
  HAL_GPIO_WritePin(Dir_A1_GPIO_Port, Dir_A1_Pin, 1);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2108      	movs	r1, #8
 8000eb2:	4816      	ldr	r0, [pc, #88]	; (8000f0c <main+0x130>)
 8000eb4:	f001 f844 	bl	8001f40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Dir_A2_GPIO_Port, Dir_A2_Pin, 0);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2120      	movs	r1, #32
 8000ebc:	4813      	ldr	r0, [pc, #76]	; (8000f0c <main+0x130>)
 8000ebe:	f001 f83f 	bl	8001f40 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4812      	ldr	r0, [pc, #72]	; (8000f10 <main+0x134>)
 8000ec6:	f001 fe9d 	bl	8002c04 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim2);
 8000eca:	4812      	ldr	r0, [pc, #72]	; (8000f14 <main+0x138>)
 8000ecc:	f001 fd84 	bl	80029d8 <HAL_TIM_Base_Start>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ed0:	f003 fa10 	bl	80042f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int ccr1 = 0, op=10;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ed8:	230a      	movs	r3, #10
 8000eda:	67bb      	str	r3, [r7, #120]	; 0x78
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(50);
 8000edc:	2032      	movs	r0, #50	; 0x32
 8000ede:	f000 fd8d 	bl	80019fc <HAL_Delay>
 8000ee2:	e7fb      	b.n	8000edc <main+0x100>
 8000ee4:	20000420 	.word	0x20000420
 8000ee8:	08007f9c 	.word	0x08007f9c
 8000eec:	20000410 	.word	0x20000410
 8000ef0:	08007fc4 	.word	0x08007fc4
 8000ef4:	20000414 	.word	0x20000414
 8000ef8:	08007fec 	.word	0x08007fec
 8000efc:	20000418 	.word	0x20000418
 8000f00:	08008014 	.word	0x08008014
 8000f04:	2000041c 	.word	0x2000041c
 8000f08:	08007f70 	.word	0x08007f70
 8000f0c:	40020400 	.word	0x40020400
 8000f10:	20000380 	.word	0x20000380
 8000f14:	20000338 	.word	0x20000338

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b094      	sub	sp, #80	; 0x50
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 0320 	add.w	r3, r7, #32
 8000f22:	2230      	movs	r2, #48	; 0x30
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f006 f84e 	bl	8006fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <SystemClock_Config+0xcc>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	4a27      	ldr	r2, [pc, #156]	; (8000fe4 <SystemClock_Config+0xcc>)
 8000f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4c:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <SystemClock_Config+0xcc>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <SystemClock_Config+0xd0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <SystemClock_Config+0xd0>)
 8000f62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <SystemClock_Config+0xd0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f74:	2302      	movs	r3, #2
 8000f76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f80:	2302      	movs	r3, #2
 8000f82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f84:	2300      	movs	r3, #0
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f88:	2310      	movs	r3, #16
 8000f8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f8c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f92:	2304      	movs	r3, #4
 8000f94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f96:	2304      	movs	r3, #4
 8000f98:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9a:	f107 0320 	add.w	r3, r7, #32
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 f800 	bl	8001fa4 <HAL_RCC_OscConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000faa:	f000 fa81 	bl	80014b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fae:	230f      	movs	r3, #15
 8000fb0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fbe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2102      	movs	r1, #2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 fa62 	bl	8002494 <HAL_RCC_ClockConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fd6:	f000 fa6b 	bl	80014b0 <Error_Handler>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3750      	adds	r7, #80	; 0x50
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40007000 	.word	0x40007000

08000fec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001000:	463b      	mov	r3, r7
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <MX_TIM2_Init+0x94>)
 800100a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <MX_TIM2_Init+0x94>)
 8001012:	2253      	movs	r2, #83	; 0x53
 8001014:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_TIM2_Init+0x94>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800101c:	4b18      	ldr	r3, [pc, #96]	; (8001080 <MX_TIM2_Init+0x94>)
 800101e:	f04f 32ff 	mov.w	r2, #4294967295
 8001022:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <MX_TIM2_Init+0x94>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_TIM2_Init+0x94>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001030:	4813      	ldr	r0, [pc, #76]	; (8001080 <MX_TIM2_Init+0x94>)
 8001032:	f001 fc81 	bl	8002938 <HAL_TIM_Base_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800103c:	f000 fa38 	bl	80014b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001044:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001046:	f107 0308 	add.w	r3, r7, #8
 800104a:	4619      	mov	r1, r3
 800104c:	480c      	ldr	r0, [pc, #48]	; (8001080 <MX_TIM2_Init+0x94>)
 800104e:	f002 f83b 	bl	80030c8 <HAL_TIM_ConfigClockSource>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001058:	f000 fa2a 	bl	80014b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105c:	2300      	movs	r3, #0
 800105e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001064:	463b      	mov	r3, r7
 8001066:	4619      	mov	r1, r3
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_TIM2_Init+0x94>)
 800106a:	f002 fbf5 	bl	8003858 <HAL_TIMEx_MasterConfigSynchronization>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001074:	f000 fa1c 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001078:	bf00      	nop
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000338 	.word	0x20000338

08001084 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08e      	sub	sp, #56	; 0x38
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001098:	f107 0320 	add.w	r3, r7, #32
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
 80010b0:	615a      	str	r2, [r3, #20]
 80010b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010b4:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <MX_TIM3_Init+0xe4>)
 80010b6:	4a2d      	ldr	r2, [pc, #180]	; (800116c <MX_TIM3_Init+0xe8>)
 80010b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80010ba:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <MX_TIM3_Init+0xe4>)
 80010bc:	2253      	movs	r2, #83	; 0x53
 80010be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c0:	4b29      	ldr	r3, [pc, #164]	; (8001168 <MX_TIM3_Init+0xe4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80010c6:	4b28      	ldr	r3, [pc, #160]	; (8001168 <MX_TIM3_Init+0xe4>)
 80010c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ce:	4b26      	ldr	r3, [pc, #152]	; (8001168 <MX_TIM3_Init+0xe4>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <MX_TIM3_Init+0xe4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010da:	4823      	ldr	r0, [pc, #140]	; (8001168 <MX_TIM3_Init+0xe4>)
 80010dc:	f001 fc2c 	bl	8002938 <HAL_TIM_Base_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80010e6:	f000 f9e3 	bl	80014b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f4:	4619      	mov	r1, r3
 80010f6:	481c      	ldr	r0, [pc, #112]	; (8001168 <MX_TIM3_Init+0xe4>)
 80010f8:	f001 ffe6 	bl	80030c8 <HAL_TIM_ConfigClockSource>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001102:	f000 f9d5 	bl	80014b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001106:	4818      	ldr	r0, [pc, #96]	; (8001168 <MX_TIM3_Init+0xe4>)
 8001108:	f001 fd22 	bl	8002b50 <HAL_TIM_PWM_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001112:	f000 f9cd 	bl	80014b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	4619      	mov	r1, r3
 8001124:	4810      	ldr	r0, [pc, #64]	; (8001168 <MX_TIM3_Init+0xe4>)
 8001126:	f002 fb97 	bl	8003858 <HAL_TIMEx_MasterConfigSynchronization>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001130:	f000 f9be 	bl	80014b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001134:	2360      	movs	r3, #96	; 0x60
 8001136:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	2200      	movs	r2, #0
 8001148:	4619      	mov	r1, r3
 800114a:	4807      	ldr	r0, [pc, #28]	; (8001168 <MX_TIM3_Init+0xe4>)
 800114c:	f001 fefa 	bl	8002f44 <HAL_TIM_PWM_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001156:	f000 f9ab 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800115a:	4803      	ldr	r0, [pc, #12]	; (8001168 <MX_TIM3_Init+0xe4>)
 800115c:	f000 fa10 	bl	8001580 <HAL_TIM_MspPostInit>

}
 8001160:	bf00      	nop
 8001162:	3738      	adds	r7, #56	; 0x38
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000380 	.word	0x20000380
 800116c:	40000400 	.word	0x40000400

08001170 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <MX_USART2_UART_Init+0x50>)
 8001178:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 800117c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001180:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_USART2_UART_Init+0x4c>)
 80011a8:	f002 fbd8 	bl	800395c <HAL_UART_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011b2:	f000 f97d 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200003c8 	.word	0x200003c8
 80011c0:	40004400 	.word	0x40004400

080011c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	4b41      	ldr	r3, [pc, #260]	; (80012e4 <MX_GPIO_Init+0x120>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a40      	ldr	r2, [pc, #256]	; (80012e4 <MX_GPIO_Init+0x120>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b3e      	ldr	r3, [pc, #248]	; (80012e4 <MX_GPIO_Init+0x120>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	4b3a      	ldr	r3, [pc, #232]	; (80012e4 <MX_GPIO_Init+0x120>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a39      	ldr	r2, [pc, #228]	; (80012e4 <MX_GPIO_Init+0x120>)
 8001200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <MX_GPIO_Init+0x120>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <MX_GPIO_Init+0x120>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a32      	ldr	r2, [pc, #200]	; (80012e4 <MX_GPIO_Init+0x120>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b30      	ldr	r3, [pc, #192]	; (80012e4 <MX_GPIO_Init+0x120>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <MX_GPIO_Init+0x120>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a2b      	ldr	r2, [pc, #172]	; (80012e4 <MX_GPIO_Init+0x120>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <MX_GPIO_Init+0x120>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2120      	movs	r1, #32
 800124e:	4826      	ldr	r0, [pc, #152]	; (80012e8 <MX_GPIO_Init+0x124>)
 8001250:	f000 fe76 	bl	8001f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Dir_A1_Pin|Dir_A2_Pin|Trig_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	2168      	movs	r1, #104	; 0x68
 8001258:	4824      	ldr	r0, [pc, #144]	; (80012ec <MX_GPIO_Init+0x128>)
 800125a:	f000 fe71 	bl	8001f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800125e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001264:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001268:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	481e      	ldr	r0, [pc, #120]	; (80012f0 <MX_GPIO_Init+0x12c>)
 8001276:	f000 fcc7 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800127a:	2320      	movs	r3, #32
 800127c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800128a:	f107 0314 	add.w	r3, r7, #20
 800128e:	4619      	mov	r1, r3
 8001290:	4815      	ldr	r0, [pc, #84]	; (80012e8 <MX_GPIO_Init+0x124>)
 8001292:	f000 fcb9 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800129a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800129e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	4619      	mov	r1, r3
 80012aa:	480f      	ldr	r0, [pc, #60]	; (80012e8 <MX_GPIO_Init+0x124>)
 80012ac:	f000 fcac 	bl	8001c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dir_A1_Pin Dir_A2_Pin Trig_Pin */
  GPIO_InitStruct.Pin = Dir_A1_Pin|Dir_A2_Pin|Trig_Pin;
 80012b0:	2368      	movs	r3, #104	; 0x68
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	4809      	ldr	r0, [pc, #36]	; (80012ec <MX_GPIO_Init+0x128>)
 80012c8:	f000 fc9e 	bl	8001c08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2105      	movs	r1, #5
 80012d0:	2017      	movs	r0, #23
 80012d2:	f000 fc6f 	bl	8001bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012d6:	2017      	movs	r0, #23
 80012d8:	f000 fc88 	bl	8001bec <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012dc:	bf00      	nop
 80012de:	3728      	adds	r7, #40	; 0x28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020000 	.word	0x40020000
 80012ec:	40020400 	.word	0x40020400
 80012f0:	40020800 	.word	0x40020800

080012f4 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(myBinarySem01Handle,0) == osOK)
 80012fc:	4b0b      	ldr	r3, [pc, #44]	; (800132c <StartTask01+0x38>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f003 f890 	bl	8004428 <osSemaphoreWait>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d109      	bne.n	8001322 <StartTask01+0x2e>
	  {
	  	Trigger(); HAL_Delay(60);//delay�? ?���??��?�� 처리?���? Release
 800130e:	f7ff fd07 	bl	8000d20 <Trigger>
 8001312:	203c      	movs	r0, #60	; 0x3c
 8001314:	f000 fb72 	bl	80019fc <HAL_Delay>
	  	osSemaphoreRelease(myBinarySem01Handle);
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <StartTask01+0x38>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f003 f8d1 	bl	80044c4 <osSemaphoreRelease>
	  }
	  osDelay(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f003 f839 	bl	800439a <osDelay>
	  if(osSemaphoreWait(myBinarySem01Handle,0) == osOK)
 8001328:	e7e8      	b.n	80012fc <StartTask01+0x8>
 800132a:	bf00      	nop
 800132c:	20000420 	.word	0x20000420

08001330 <StartTask02>:
* @retval None
*/
/* USER CODE END Header_StartTask02 */
int dr = 30, dr1 = 30, dr2 = 50, dr3 = 90;  //duty rate step
void StartTask02(void const * argument)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if(osSemaphoreWait(myBinarySem01Handle,0) == osOK)
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <StartTask02+0x94>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f003 f872 	bl	8004428 <osSemaphoreWait>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d137      	bne.n	80013ba <StartTask02+0x8a>
	  {
		  //dutyrate
		  if(dist < 500)
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <StartTask02+0x98>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001352:	da03      	bge.n	800135c <StartTask02+0x2c>
		  {
			  dr = 0;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <StartTask02+0x9c>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	e017      	b.n	800138c <StartTask02+0x5c>
		  }//1. dr=0 2. A1,A2 0,0 or 1,1 -> stop
		  else if(dist < 1000) dr = dr1;
 800135c:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <StartTask02+0x98>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001364:	da04      	bge.n	8001370 <StartTask02+0x40>
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <StartTask02+0xa0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a18      	ldr	r2, [pc, #96]	; (80013cc <StartTask02+0x9c>)
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e00d      	b.n	800138c <StartTask02+0x5c>
		  else if(dist < 2000) dr = dr2;
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <StartTask02+0x98>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001378:	da04      	bge.n	8001384 <StartTask02+0x54>
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <StartTask02+0xa4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a13      	ldr	r2, [pc, #76]	; (80013cc <StartTask02+0x9c>)
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e003      	b.n	800138c <StartTask02+0x5c>
		  else dr = dr3;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <StartTask02+0xa8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a10      	ldr	r2, [pc, #64]	; (80013cc <StartTask02+0x9c>)
 800138a:	6013      	str	r3, [r2, #0]
		  htim3.Instance->CCR1 = htim3.Instance->ARR / 100 * dr;
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <StartTask02+0xac>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001392:	4a13      	ldr	r2, [pc, #76]	; (80013e0 <StartTask02+0xb0>)
 8001394:	fba2 2303 	umull	r2, r3, r2, r3
 8001398:	095a      	lsrs	r2, r3, #5
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <StartTask02+0x9c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4619      	mov	r1, r3
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <StartTask02+0xac>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	fb01 f202 	mul.w	r2, r1, r2
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(100);
 80013aa:	2064      	movs	r0, #100	; 0x64
 80013ac:	f000 fb26 	bl	80019fc <HAL_Delay>
	      osSemaphoreRelease(myBinarySem01Handle);
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <StartTask02+0x94>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f003 f885 	bl	80044c4 <osSemaphoreRelease>
	  }
	  osDelay(1);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f002 ffed 	bl	800439a <osDelay>
	  if(osSemaphoreWait(myBinarySem01Handle,0) == osOK)
 80013c0:	e7ba      	b.n	8001338 <StartTask02+0x8>
 80013c2:	bf00      	nop
 80013c4:	20000420 	.word	0x20000420
 80013c8:	2000042c 	.word	0x2000042c
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000004 	.word	0x20000004
 80013d4:	20000008 	.word	0x20000008
 80013d8:	2000000c 	.word	0x2000000c
 80013dc:	20000380 	.word	0x20000380
 80013e0:	51eb851f 	.word	0x51eb851f

080013e4 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013ec:	2001      	movs	r0, #1
 80013ee:	f002 ffd4 	bl	800439a <osDelay>
 80013f2:	e7fb      	b.n	80013ec <StartTask03+0x8>

080013f4 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	if(osSemaphoreWait(myBinarySem01Handle,0) == osOK)
 80013fc:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <StartTask04+0x7c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f003 f810 	bl	8004428 <osSemaphoreWait>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d12c      	bne.n	8001468 <StartTask04+0x74>
	{
	  		int dm = dist / 1000;
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <StartTask04+0x80>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a19      	ldr	r2, [pc, #100]	; (8001478 <StartTask04+0x84>)
 8001414:	fb82 1203 	smull	r1, r2, r2, r3
 8001418:	1192      	asrs	r2, r2, #6
 800141a:	17db      	asrs	r3, r3, #31
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	60fb      	str	r3, [r7, #12]
	  		int dc = ((int)(dist * 10))%100;
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <StartTask04+0x80>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4a13      	ldr	r2, [pc, #76]	; (800147c <StartTask04+0x88>)
 800142e:	fb82 1203 	smull	r1, r2, r2, r3
 8001432:	1151      	asrs	r1, r2, #5
 8001434:	17da      	asrs	r2, r3, #31
 8001436:	1a8a      	subs	r2, r1, r2
 8001438:	2164      	movs	r1, #100	; 0x64
 800143a:	fb01 f202 	mul.w	r2, r1, r2
 800143e:	1a9b      	subs	r3, r3, r2
 8001440:	60bb      	str	r3, [r7, #8]
	  		printf("Current Distance : %d m %d cm (%d mm)(%d-%d)\r\n", dm, dc, dist,t1,t0);
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <StartTask04+0x80>)
 8001444:	6819      	ldr	r1, [r3, #0]
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <StartTask04+0x8c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <StartTask04+0x90>)
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	9201      	str	r2, [sp, #4]
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	460b      	mov	r3, r1
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	68f9      	ldr	r1, [r7, #12]
 8001458:	480b      	ldr	r0, [pc, #44]	; (8001488 <StartTask04+0x94>)
 800145a:	f005 fba1 	bl	8006ba0 <iprintf>
	  		osSemaphoreRelease(myBinarySem01Handle);
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <StartTask04+0x7c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f003 f82e 	bl	80044c4 <osSemaphoreRelease>
	}
    osDelay(1);
 8001468:	2001      	movs	r0, #1
 800146a:	f002 ff96 	bl	800439a <osDelay>
	if(osSemaphoreWait(myBinarySem01Handle,0) == osOK)
 800146e:	e7c5      	b.n	80013fc <StartTask04+0x8>
 8001470:	20000420 	.word	0x20000420
 8001474:	2000042c 	.word	0x2000042c
 8001478:	10624dd3 	.word	0x10624dd3
 800147c:	51eb851f 	.word	0x51eb851f
 8001480:	20000428 	.word	0x20000428
 8001484:	20000424 	.word	0x20000424
 8001488:	08008030 	.word	0x08008030

0800148c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a04      	ldr	r2, [pc, #16]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d101      	bne.n	80014a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800149e:	f000 fa8d 	bl	80019bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40014400 	.word	0x40014400

080014b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b4:	b672      	cpsid	i
}
 80014b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <Error_Handler+0x8>
	...

080014bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_MspInit+0x54>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	4a11      	ldr	r2, [pc, #68]	; (8001510 <HAL_MspInit+0x54>)
 80014cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d0:	6453      	str	r3, [r2, #68]	; 0x44
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_MspInit+0x54>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_MspInit+0x54>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <HAL_MspInit+0x54>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <HAL_MspInit+0x54>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	210f      	movs	r1, #15
 80014fe:	f06f 0001 	mvn.w	r0, #1
 8001502:	f000 fb57 	bl	8001bb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800

08001514 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001524:	d10e      	bne.n	8001544 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b13      	ldr	r3, [pc, #76]	; (8001578 <HAL_TIM_Base_MspInit+0x64>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <HAL_TIM_Base_MspInit+0x64>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6413      	str	r3, [r2, #64]	; 0x40
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <HAL_TIM_Base_MspInit+0x64>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001542:	e012      	b.n	800156a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0c      	ldr	r2, [pc, #48]	; (800157c <HAL_TIM_Base_MspInit+0x68>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d10d      	bne.n	800156a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_TIM_Base_MspInit+0x64>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_TIM_Base_MspInit+0x64>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_TIM_Base_MspInit+0x64>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40000400 	.word	0x40000400

08001580 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 030c 	add.w	r3, r7, #12
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <HAL_TIM_MspPostInit+0x68>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d11d      	bne.n	80015de <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_TIM_MspPostInit+0x6c>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a10      	ldr	r2, [pc, #64]	; (80015ec <HAL_TIM_MspPostInit+0x6c>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <HAL_TIM_MspPostInit+0x6c>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015be:	2310      	movs	r3, #16
 80015c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015ce:	2302      	movs	r3, #2
 80015d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <HAL_TIM_MspPostInit+0x70>)
 80015da:	f000 fb15 	bl	8001c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	3720      	adds	r7, #32
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40000400 	.word	0x40000400
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020400 	.word	0x40020400

080015f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a19      	ldr	r2, [pc, #100]	; (8001678 <HAL_UART_MspInit+0x84>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d12b      	bne.n	800166e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <HAL_UART_MspInit+0x88>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a17      	ldr	r2, [pc, #92]	; (800167c <HAL_UART_MspInit+0x88>)
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_UART_MspInit+0x88>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_UART_MspInit+0x88>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a10      	ldr	r2, [pc, #64]	; (800167c <HAL_UART_MspInit+0x88>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b0e      	ldr	r3, [pc, #56]	; (800167c <HAL_UART_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800164e:	230c      	movs	r3, #12
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800165e:	2307      	movs	r3, #7
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <HAL_UART_MspInit+0x8c>)
 800166a:	f000 facd 	bl	8001c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	; 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40004400 	.word	0x40004400
 800167c:	40023800 	.word	0x40023800
 8001680:	40020000 	.word	0x40020000

08001684 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08c      	sub	sp, #48	; 0x30
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <HAL_InitTick+0xd0>)
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	4a2d      	ldr	r2, [pc, #180]	; (8001754 <HAL_InitTick+0xd0>)
 800169e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a2:	6453      	str	r3, [r2, #68]	; 0x44
 80016a4:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <HAL_InitTick+0xd0>)
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016b0:	f107 020c 	add.w	r2, r7, #12
 80016b4:	f107 0310 	add.w	r3, r7, #16
 80016b8:	4611      	mov	r1, r2
 80016ba:	4618      	mov	r0, r3
 80016bc:	f001 f90a 	bl	80028d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016c0:	f001 f8f4 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 80016c4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c8:	4a23      	ldr	r2, [pc, #140]	; (8001758 <HAL_InitTick+0xd4>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	0c9b      	lsrs	r3, r3, #18
 80016d0:	3b01      	subs	r3, #1
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80016d4:	4b21      	ldr	r3, [pc, #132]	; (800175c <HAL_InitTick+0xd8>)
 80016d6:	4a22      	ldr	r2, [pc, #136]	; (8001760 <HAL_InitTick+0xdc>)
 80016d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <HAL_InitTick+0xd8>)
 80016dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80016e2:	4a1e      	ldr	r2, [pc, #120]	; (800175c <HAL_InitTick+0xd8>)
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <HAL_InitTick+0xd8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_InitTick+0xd8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_InitTick+0xd8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 80016fa:	4818      	ldr	r0, [pc, #96]	; (800175c <HAL_InitTick+0xd8>)
 80016fc:	f001 f91c 	bl	8002938 <HAL_TIM_Base_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001706:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800170a:	2b00      	cmp	r3, #0
 800170c:	d11b      	bne.n	8001746 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800170e:	4813      	ldr	r0, [pc, #76]	; (800175c <HAL_InitTick+0xd8>)
 8001710:	f001 f9bc 	bl	8002a8c <HAL_TIM_Base_Start_IT>
 8001714:	4603      	mov	r3, r0
 8001716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800171a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800171e:	2b00      	cmp	r3, #0
 8001720:	d111      	bne.n	8001746 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001722:	2019      	movs	r0, #25
 8001724:	f000 fa62 	bl	8001bec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b0f      	cmp	r3, #15
 800172c:	d808      	bhi.n	8001740 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800172e:	2200      	movs	r2, #0
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	2019      	movs	r0, #25
 8001734:	f000 fa3e 	bl	8001bb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001738:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <HAL_InitTick+0xe0>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e002      	b.n	8001746 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001746:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800174a:	4618      	mov	r0, r3
 800174c:	3730      	adds	r7, #48	; 0x30
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	431bde83 	.word	0x431bde83
 800175c:	20000430 	.word	0x20000430
 8001760:	40014400 	.word	0x40014400
 8001764:	20000014 	.word	0x20000014

08001768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800176c:	e7fe      	b.n	800176c <NMI_Handler+0x4>

0800176e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001772:	e7fe      	b.n	8001772 <HardFault_Handler+0x4>

08001774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001778:	e7fe      	b.n	8001778 <MemManage_Handler+0x4>

0800177a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800177e:	e7fe      	b.n	800177e <BusFault_Handler+0x4>

08001780 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001784:	e7fe      	b.n	8001784 <UsageFault_Handler+0x4>

08001786 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Echo_Pin);
 8001798:	2080      	movs	r0, #128	; 0x80
 800179a:	f000 fbeb 	bl	8001f74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80017aa:	f001 fadb 	bl	8002d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000430 	.word	0x20000430

080017b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	e00a      	b.n	80017e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ca:	f7ff f9e5 	bl	8000b98 <__io_getchar>
 80017ce:	4601      	mov	r1, r0
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	60ba      	str	r2, [r7, #8]
 80017d6:	b2ca      	uxtb	r2, r1
 80017d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbf0      	blt.n	80017ca <_read+0x12>
  }

  return len;
 80017e8:	687b      	ldr	r3, [r7, #4]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	e009      	b.n	8001818 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff f9e9 	bl	8000be4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	dbf1      	blt.n	8001804 <_write+0x12>
  }
  return len;
 8001820:	687b      	ldr	r3, [r7, #4]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <_close>:

int _close(int file)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001852:	605a      	str	r2, [r3, #4]
  return 0;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <_isatty>:

int _isatty(int file)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800186a:	2301      	movs	r3, #1
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800189c:	4a14      	ldr	r2, [pc, #80]	; (80018f0 <_sbrk+0x5c>)
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <_sbrk+0x60>)
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a8:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <_sbrk+0x64>)
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <_sbrk+0x68>)
 80018b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d207      	bcs.n	80018d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c4:	f005 fc24 	bl	8007110 <__errno>
 80018c8:	4603      	mov	r3, r0
 80018ca:	220c      	movs	r2, #12
 80018cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	e009      	b.n	80018e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <_sbrk+0x64>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <_sbrk+0x64>)
 80018e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e6:	68fb      	ldr	r3, [r7, #12]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20020000 	.word	0x20020000
 80018f4:	00000400 	.word	0x00000400
 80018f8:	20000478 	.word	0x20000478
 80018fc:	20004320 	.word	0x20004320

08001900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <SystemInit+0x20>)
 8001906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <SystemInit+0x20>)
 800190c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001924:	f8df d034 	ldr.w	sp, [pc, #52]	; 800195c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001928:	f7ff ffea 	bl	8001900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800192c:	480c      	ldr	r0, [pc, #48]	; (8001960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800192e:	490d      	ldr	r1, [pc, #52]	; (8001964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001930:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001944:	4c0a      	ldr	r4, [pc, #40]	; (8001970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001952:	f005 fbe3 	bl	800711c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001956:	f7ff fa41 	bl	8000ddc <main>
  bx  lr    
 800195a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800195c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001964:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001968:	080080c4 	.word	0x080080c4
  ldr r2, =_sbss
 800196c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001970:	20004320 	.word	0x20004320

08001974 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001974:	e7fe      	b.n	8001974 <ADC_IRQHandler>
	...

08001978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0d      	ldr	r2, [pc, #52]	; (80019b8 <HAL_Init+0x40>)
 8001982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001986:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <HAL_Init+0x40>)
 800198e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001992:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <HAL_Init+0x40>)
 800199a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a0:	2003      	movs	r0, #3
 80019a2:	f000 f8fc 	bl	8001b9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a6:	200f      	movs	r0, #15
 80019a8:	f7ff fe6c 	bl	8001684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ac:	f7ff fd86 	bl	80014bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023c00 	.word	0x40023c00

080019bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_IncTick+0x20>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_IncTick+0x24>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <HAL_IncTick+0x24>)
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000018 	.word	0x20000018
 80019e0:	2000047c 	.word	0x2000047c

080019e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return uwTick;
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <HAL_GetTick+0x14>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	2000047c 	.word	0x2000047c

080019fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a04:	f7ff ffee 	bl	80019e4 <HAL_GetTick>
 8001a08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a14:	d005      	beq.n	8001a22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_Delay+0x44>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a22:	bf00      	nop
 8001a24:	f7ff ffde 	bl	80019e4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d8f7      	bhi.n	8001a24 <HAL_Delay+0x28>
  {
  }
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000018 	.word	0x20000018

08001a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	f003 0307 	and.w	r3, r3, #7
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	db0b      	blt.n	8001ad2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	f003 021f 	and.w	r2, r3, #31
 8001ac0:	4907      	ldr	r1, [pc, #28]	; (8001ae0 <__NVIC_EnableIRQ+0x38>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	2001      	movs	r0, #1
 8001aca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000e100 	.word	0xe000e100

08001ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db0a      	blt.n	8001b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	490c      	ldr	r1, [pc, #48]	; (8001b30 <__NVIC_SetPriority+0x4c>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	0112      	lsls	r2, r2, #4
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	440b      	add	r3, r1
 8001b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b0c:	e00a      	b.n	8001b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4908      	ldr	r1, [pc, #32]	; (8001b34 <__NVIC_SetPriority+0x50>)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	3b04      	subs	r3, #4
 8001b1c:	0112      	lsls	r2, r2, #4
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	440b      	add	r3, r1
 8001b22:	761a      	strb	r2, [r3, #24]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000e100 	.word	0xe000e100
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	; 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f1c3 0307 	rsb	r3, r3, #7
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	bf28      	it	cs
 8001b56:	2304      	movcs	r3, #4
 8001b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d902      	bls.n	8001b68 <NVIC_EncodePriority+0x30>
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3b03      	subs	r3, #3
 8001b66:	e000      	b.n	8001b6a <NVIC_EncodePriority+0x32>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43da      	mvns	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b80:	f04f 31ff 	mov.w	r1, #4294967295
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	43d9      	mvns	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	4313      	orrs	r3, r2
         );
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3724      	adds	r7, #36	; 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ff4c 	bl	8001a44 <__NVIC_SetPriorityGrouping>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc6:	f7ff ff61 	bl	8001a8c <__NVIC_GetPriorityGrouping>
 8001bca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	68b9      	ldr	r1, [r7, #8]
 8001bd0:	6978      	ldr	r0, [r7, #20]
 8001bd2:	f7ff ffb1 	bl	8001b38 <NVIC_EncodePriority>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff ff80 	bl	8001ae4 <__NVIC_SetPriority>
}
 8001be4:	bf00      	nop
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff54 	bl	8001aa8 <__NVIC_EnableIRQ>
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	; 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	e159      	b.n	8001ed8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c24:	2201      	movs	r2, #1
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	f040 8148 	bne.w	8001ed2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d005      	beq.n	8001c5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d130      	bne.n	8001cbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c90:	2201      	movs	r2, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 0201 	and.w	r2, r3, #1
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d017      	beq.n	8001cf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d123      	bne.n	8001d4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	08da      	lsrs	r2, r3, #3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3208      	adds	r2, #8
 8001d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	220f      	movs	r2, #15
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	08da      	lsrs	r2, r3, #3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3208      	adds	r2, #8
 8001d46:	69b9      	ldr	r1, [r7, #24]
 8001d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	2203      	movs	r2, #3
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0203 	and.w	r2, r3, #3
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80a2 	beq.w	8001ed2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b57      	ldr	r3, [pc, #348]	; (8001ef0 <HAL_GPIO_Init+0x2e8>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	4a56      	ldr	r2, [pc, #344]	; (8001ef0 <HAL_GPIO_Init+0x2e8>)
 8001d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9e:	4b54      	ldr	r3, [pc, #336]	; (8001ef0 <HAL_GPIO_Init+0x2e8>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001daa:	4a52      	ldr	r2, [pc, #328]	; (8001ef4 <HAL_GPIO_Init+0x2ec>)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a49      	ldr	r2, [pc, #292]	; (8001ef8 <HAL_GPIO_Init+0x2f0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d019      	beq.n	8001e0a <HAL_GPIO_Init+0x202>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a48      	ldr	r2, [pc, #288]	; (8001efc <HAL_GPIO_Init+0x2f4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <HAL_GPIO_Init+0x1fe>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a47      	ldr	r2, [pc, #284]	; (8001f00 <HAL_GPIO_Init+0x2f8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00d      	beq.n	8001e02 <HAL_GPIO_Init+0x1fa>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a46      	ldr	r2, [pc, #280]	; (8001f04 <HAL_GPIO_Init+0x2fc>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d007      	beq.n	8001dfe <HAL_GPIO_Init+0x1f6>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a45      	ldr	r2, [pc, #276]	; (8001f08 <HAL_GPIO_Init+0x300>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d101      	bne.n	8001dfa <HAL_GPIO_Init+0x1f2>
 8001df6:	2304      	movs	r3, #4
 8001df8:	e008      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	e006      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e004      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e002      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_GPIO_Init+0x204>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	f002 0203 	and.w	r2, r2, #3
 8001e12:	0092      	lsls	r2, r2, #2
 8001e14:	4093      	lsls	r3, r2
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e1c:	4935      	ldr	r1, [pc, #212]	; (8001ef4 <HAL_GPIO_Init+0x2ec>)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e2a:	4b38      	ldr	r3, [pc, #224]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e4e:	4a2f      	ldr	r2, [pc, #188]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e54:	4b2d      	ldr	r3, [pc, #180]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e78:	4a24      	ldr	r2, [pc, #144]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e7e:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea2:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea8:	4b18      	ldr	r3, [pc, #96]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ecc:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <HAL_GPIO_Init+0x304>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2b0f      	cmp	r3, #15
 8001edc:	f67f aea2 	bls.w	8001c24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40013800 	.word	0x40013800
 8001ef8:	40020000 	.word	0x40020000
 8001efc:	40020400 	.word	0x40020400
 8001f00:	40020800 	.word	0x40020800
 8001f04:	40020c00 	.word	0x40020c00
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40013c00 	.word	0x40013c00

08001f10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691a      	ldr	r2, [r3, #16]
 8001f20:	887b      	ldrh	r3, [r7, #2]
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
 8001f2c:	e001      	b.n	8001f32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	807b      	strh	r3, [r7, #2]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f50:	787b      	ldrb	r3, [r7, #1]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f5c:	e003      	b.n	8001f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	041a      	lsls	r2, r3, #16
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	619a      	str	r2, [r3, #24]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f80:	695a      	ldr	r2, [r3, #20]
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d006      	beq.n	8001f98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f8a:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f8c:	88fb      	ldrh	r3, [r7, #6]
 8001f8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f90:	88fb      	ldrh	r3, [r7, #6]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fee0 	bl	8000d58 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40013c00 	.word	0x40013c00

08001fa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e267      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d075      	beq.n	80020ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001fc2:	4b88      	ldr	r3, [pc, #544]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fce:	4b85      	ldr	r3, [pc, #532]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d112      	bne.n	8002000 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fda:	4b82      	ldr	r3, [pc, #520]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fe6:	d10b      	bne.n	8002000 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	4b7e      	ldr	r3, [pc, #504]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d05b      	beq.n	80020ac <HAL_RCC_OscConfig+0x108>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d157      	bne.n	80020ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e242      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002008:	d106      	bne.n	8002018 <HAL_RCC_OscConfig+0x74>
 800200a:	4b76      	ldr	r3, [pc, #472]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a75      	ldr	r2, [pc, #468]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e01d      	b.n	8002054 <HAL_RCC_OscConfig+0xb0>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002020:	d10c      	bne.n	800203c <HAL_RCC_OscConfig+0x98>
 8002022:	4b70      	ldr	r3, [pc, #448]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a6f      	ldr	r2, [pc, #444]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	4b6d      	ldr	r3, [pc, #436]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a6c      	ldr	r2, [pc, #432]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	e00b      	b.n	8002054 <HAL_RCC_OscConfig+0xb0>
 800203c:	4b69      	ldr	r3, [pc, #420]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a68      	ldr	r2, [pc, #416]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b66      	ldr	r3, [pc, #408]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a65      	ldr	r2, [pc, #404]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 800204e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d013      	beq.n	8002084 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7ff fcc2 	bl	80019e4 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002064:	f7ff fcbe 	bl	80019e4 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e207      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002076:	4b5b      	ldr	r3, [pc, #364]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0xc0>
 8002082:	e014      	b.n	80020ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7ff fcae 	bl	80019e4 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208c:	f7ff fcaa 	bl	80019e4 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	; 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e1f3      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800209e:	4b51      	ldr	r3, [pc, #324]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0xe8>
 80020aa:	e000      	b.n	80020ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d063      	beq.n	8002182 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020ba:	4b4a      	ldr	r3, [pc, #296]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00b      	beq.n	80020de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020c6:	4b47      	ldr	r3, [pc, #284]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d11c      	bne.n	800210c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020d2:	4b44      	ldr	r3, [pc, #272]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d116      	bne.n	800210c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020de:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_RCC_OscConfig+0x152>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d001      	beq.n	80020f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e1c7      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f6:	4b3b      	ldr	r3, [pc, #236]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4937      	ldr	r1, [pc, #220]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800210a:	e03a      	b.n	8002182 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d020      	beq.n	8002156 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002114:	4b34      	ldr	r3, [pc, #208]	; (80021e8 <HAL_RCC_OscConfig+0x244>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211a:	f7ff fc63 	bl	80019e4 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002122:	f7ff fc5f 	bl	80019e4 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e1a8      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002140:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4925      	ldr	r1, [pc, #148]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]
 8002154:	e015      	b.n	8002182 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002156:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <HAL_RCC_OscConfig+0x244>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7ff fc42 	bl	80019e4 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002164:	f7ff fc3e 	bl	80019e4 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e187      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002176:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0308 	and.w	r3, r3, #8
 800218a:	2b00      	cmp	r3, #0
 800218c:	d036      	beq.n	80021fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d016      	beq.n	80021c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_RCC_OscConfig+0x248>)
 8002198:	2201      	movs	r2, #1
 800219a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219c:	f7ff fc22 	bl	80019e4 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a4:	f7ff fc1e 	bl	80019e4 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e167      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_OscConfig+0x240>)
 80021b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x200>
 80021c2:	e01b      	b.n	80021fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <HAL_RCC_OscConfig+0x248>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ca:	f7ff fc0b 	bl	80019e4 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d0:	e00e      	b.n	80021f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d2:	f7ff fc07 	bl	80019e4 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d907      	bls.n	80021f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e150      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
 80021e4:	40023800 	.word	0x40023800
 80021e8:	42470000 	.word	0x42470000
 80021ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f0:	4b88      	ldr	r3, [pc, #544]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80021f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1ea      	bne.n	80021d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8097 	beq.w	8002338 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220e:	4b81      	ldr	r3, [pc, #516]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10f      	bne.n	800223a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	4b7d      	ldr	r3, [pc, #500]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	4a7c      	ldr	r2, [pc, #496]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 8002224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002228:	6413      	str	r3, [r2, #64]	; 0x40
 800222a:	4b7a      	ldr	r3, [pc, #488]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002236:	2301      	movs	r3, #1
 8002238:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223a:	4b77      	ldr	r3, [pc, #476]	; (8002418 <HAL_RCC_OscConfig+0x474>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d118      	bne.n	8002278 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002246:	4b74      	ldr	r3, [pc, #464]	; (8002418 <HAL_RCC_OscConfig+0x474>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a73      	ldr	r2, [pc, #460]	; (8002418 <HAL_RCC_OscConfig+0x474>)
 800224c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002252:	f7ff fbc7 	bl	80019e4 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225a:	f7ff fbc3 	bl	80019e4 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e10c      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226c:	4b6a      	ldr	r3, [pc, #424]	; (8002418 <HAL_RCC_OscConfig+0x474>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0f0      	beq.n	800225a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x2ea>
 8002280:	4b64      	ldr	r3, [pc, #400]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	4a63      	ldr	r2, [pc, #396]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	6713      	str	r3, [r2, #112]	; 0x70
 800228c:	e01c      	b.n	80022c8 <HAL_RCC_OscConfig+0x324>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b05      	cmp	r3, #5
 8002294:	d10c      	bne.n	80022b0 <HAL_RCC_OscConfig+0x30c>
 8002296:	4b5f      	ldr	r3, [pc, #380]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	4a5e      	ldr	r2, [pc, #376]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	6713      	str	r3, [r2, #112]	; 0x70
 80022a2:	4b5c      	ldr	r3, [pc, #368]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	4a5b      	ldr	r2, [pc, #364]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	6713      	str	r3, [r2, #112]	; 0x70
 80022ae:	e00b      	b.n	80022c8 <HAL_RCC_OscConfig+0x324>
 80022b0:	4b58      	ldr	r3, [pc, #352]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b4:	4a57      	ldr	r2, [pc, #348]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	6713      	str	r3, [r2, #112]	; 0x70
 80022bc:	4b55      	ldr	r3, [pc, #340]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c0:	4a54      	ldr	r2, [pc, #336]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80022c2:	f023 0304 	bic.w	r3, r3, #4
 80022c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d015      	beq.n	80022fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d0:	f7ff fb88 	bl	80019e4 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d6:	e00a      	b.n	80022ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d8:	f7ff fb84 	bl	80019e4 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e0cb      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ee:	4b49      	ldr	r3, [pc, #292]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0ee      	beq.n	80022d8 <HAL_RCC_OscConfig+0x334>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fc:	f7ff fb72 	bl	80019e4 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002302:	e00a      	b.n	800231a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002304:	f7ff fb6e 	bl	80019e4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002312:	4293      	cmp	r3, r2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e0b5      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231a:	4b3e      	ldr	r3, [pc, #248]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1ee      	bne.n	8002304 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002326:	7dfb      	ldrb	r3, [r7, #23]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232c:	4b39      	ldr	r3, [pc, #228]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	4a38      	ldr	r2, [pc, #224]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 8002332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002336:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 80a1 	beq.w	8002484 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002342:	4b34      	ldr	r3, [pc, #208]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b08      	cmp	r3, #8
 800234c:	d05c      	beq.n	8002408 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b02      	cmp	r3, #2
 8002354:	d141      	bne.n	80023da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002356:	4b31      	ldr	r3, [pc, #196]	; (800241c <HAL_RCC_OscConfig+0x478>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235c:	f7ff fb42 	bl	80019e4 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002364:	f7ff fb3e 	bl	80019e4 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e087      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	4b27      	ldr	r3, [pc, #156]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	019b      	lsls	r3, r3, #6
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	085b      	lsrs	r3, r3, #1
 800239a:	3b01      	subs	r3, #1
 800239c:	041b      	lsls	r3, r3, #16
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	061b      	lsls	r3, r3, #24
 80023a6:	491b      	ldr	r1, [pc, #108]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ac:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_RCC_OscConfig+0x478>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b2:	f7ff fb17 	bl	80019e4 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ba:	f7ff fb13 	bl	80019e4 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e05c      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x416>
 80023d8:	e054      	b.n	8002484 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_RCC_OscConfig+0x478>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff fb00 	bl	80019e4 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7ff fafc 	bl	80019e4 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e045      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_RCC_OscConfig+0x470>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x444>
 8002406:	e03d      	b.n	8002484 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d107      	bne.n	8002420 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e038      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
 8002414:	40023800 	.word	0x40023800
 8002418:	40007000 	.word	0x40007000
 800241c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002420:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_RCC_OscConfig+0x4ec>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d028      	beq.n	8002480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002438:	429a      	cmp	r2, r3
 800243a:	d121      	bne.n	8002480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d11a      	bne.n	8002480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002450:	4013      	ands	r3, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002456:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002458:	4293      	cmp	r3, r2
 800245a:	d111      	bne.n	8002480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	085b      	lsrs	r3, r3, #1
 8002468:	3b01      	subs	r3, #1
 800246a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d107      	bne.n	8002480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800

08002494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0cc      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a8:	4b68      	ldr	r3, [pc, #416]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d90c      	bls.n	80024d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b65      	ldr	r3, [pc, #404]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b63      	ldr	r3, [pc, #396]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0b8      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d020      	beq.n	800251e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e8:	4b59      	ldr	r3, [pc, #356]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	4a58      	ldr	r2, [pc, #352]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002500:	4b53      	ldr	r3, [pc, #332]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a52      	ldr	r2, [pc, #328]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800250a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800250c:	4b50      	ldr	r3, [pc, #320]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	494d      	ldr	r1, [pc, #308]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d044      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d107      	bne.n	8002542 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	4b47      	ldr	r3, [pc, #284]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d119      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e07f      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d003      	beq.n	8002552 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800254e:	2b03      	cmp	r3, #3
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002552:	4b3f      	ldr	r3, [pc, #252]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e06f      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002562:	4b3b      	ldr	r3, [pc, #236]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e067      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002572:	4b37      	ldr	r3, [pc, #220]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f023 0203 	bic.w	r2, r3, #3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4934      	ldr	r1, [pc, #208]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002580:	4313      	orrs	r3, r2
 8002582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002584:	f7ff fa2e 	bl	80019e4 <HAL_GetTick>
 8002588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	e00a      	b.n	80025a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800258c:	f7ff fa2a 	bl	80019e4 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	f241 3288 	movw	r2, #5000	; 0x1388
 800259a:	4293      	cmp	r3, r2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e04f      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 020c 	and.w	r2, r3, #12
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d1eb      	bne.n	800258c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025b4:	4b25      	ldr	r3, [pc, #148]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d20c      	bcs.n	80025dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b20      	ldr	r3, [pc, #128]	; (800264c <HAL_RCC_ClockConfig+0x1b8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e032      	b.n	8002642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d008      	beq.n	80025fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e8:	4b19      	ldr	r3, [pc, #100]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4916      	ldr	r1, [pc, #88]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002606:	4b12      	ldr	r3, [pc, #72]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	490e      	ldr	r1, [pc, #56]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800261a:	f000 f821 	bl	8002660 <HAL_RCC_GetSysClockFreq>
 800261e:	4602      	mov	r2, r0
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	490a      	ldr	r1, [pc, #40]	; (8002654 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	5ccb      	ldrb	r3, [r1, r3]
 800262e:	fa22 f303 	lsr.w	r3, r2, r3
 8002632:	4a09      	ldr	r2, [pc, #36]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002636:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff f822 	bl	8001684 <HAL_InitTick>

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40023c00 	.word	0x40023c00
 8002650:	40023800 	.word	0x40023800
 8002654:	08008068 	.word	0x08008068
 8002658:	20000010 	.word	0x20000010
 800265c:	20000014 	.word	0x20000014

08002660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002664:	b094      	sub	sp, #80	; 0x50
 8002666:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002678:	4b79      	ldr	r3, [pc, #484]	; (8002860 <HAL_RCC_GetSysClockFreq+0x200>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 030c 	and.w	r3, r3, #12
 8002680:	2b08      	cmp	r3, #8
 8002682:	d00d      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002684:	2b08      	cmp	r3, #8
 8002686:	f200 80e1 	bhi.w	800284c <HAL_RCC_GetSysClockFreq+0x1ec>
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0x34>
 800268e:	2b04      	cmp	r3, #4
 8002690:	d003      	beq.n	800269a <HAL_RCC_GetSysClockFreq+0x3a>
 8002692:	e0db      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002694:	4b73      	ldr	r3, [pc, #460]	; (8002864 <HAL_RCC_GetSysClockFreq+0x204>)
 8002696:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002698:	e0db      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800269a:	4b73      	ldr	r3, [pc, #460]	; (8002868 <HAL_RCC_GetSysClockFreq+0x208>)
 800269c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800269e:	e0d8      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026a0:	4b6f      	ldr	r3, [pc, #444]	; (8002860 <HAL_RCC_GetSysClockFreq+0x200>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026aa:	4b6d      	ldr	r3, [pc, #436]	; (8002860 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d063      	beq.n	800277e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b6:	4b6a      	ldr	r3, [pc, #424]	; (8002860 <HAL_RCC_GetSysClockFreq+0x200>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	099b      	lsrs	r3, r3, #6
 80026bc:	2200      	movs	r2, #0
 80026be:	63bb      	str	r3, [r7, #56]	; 0x38
 80026c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c8:	633b      	str	r3, [r7, #48]	; 0x30
 80026ca:	2300      	movs	r3, #0
 80026cc:	637b      	str	r3, [r7, #52]	; 0x34
 80026ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026d2:	4622      	mov	r2, r4
 80026d4:	462b      	mov	r3, r5
 80026d6:	f04f 0000 	mov.w	r0, #0
 80026da:	f04f 0100 	mov.w	r1, #0
 80026de:	0159      	lsls	r1, r3, #5
 80026e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026e4:	0150      	lsls	r0, r2, #5
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4621      	mov	r1, r4
 80026ec:	1a51      	subs	r1, r2, r1
 80026ee:	6139      	str	r1, [r7, #16]
 80026f0:	4629      	mov	r1, r5
 80026f2:	eb63 0301 	sbc.w	r3, r3, r1
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002704:	4659      	mov	r1, fp
 8002706:	018b      	lsls	r3, r1, #6
 8002708:	4651      	mov	r1, sl
 800270a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800270e:	4651      	mov	r1, sl
 8002710:	018a      	lsls	r2, r1, #6
 8002712:	4651      	mov	r1, sl
 8002714:	ebb2 0801 	subs.w	r8, r2, r1
 8002718:	4659      	mov	r1, fp
 800271a:	eb63 0901 	sbc.w	r9, r3, r1
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800272a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800272e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002732:	4690      	mov	r8, r2
 8002734:	4699      	mov	r9, r3
 8002736:	4623      	mov	r3, r4
 8002738:	eb18 0303 	adds.w	r3, r8, r3
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	462b      	mov	r3, r5
 8002740:	eb49 0303 	adc.w	r3, r9, r3
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002752:	4629      	mov	r1, r5
 8002754:	024b      	lsls	r3, r1, #9
 8002756:	4621      	mov	r1, r4
 8002758:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800275c:	4621      	mov	r1, r4
 800275e:	024a      	lsls	r2, r1, #9
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002766:	2200      	movs	r2, #0
 8002768:	62bb      	str	r3, [r7, #40]	; 0x28
 800276a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800276c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002770:	f7fe f894 	bl	800089c <__aeabi_uldivmod>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4613      	mov	r3, r2
 800277a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800277c:	e058      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800277e:	4b38      	ldr	r3, [pc, #224]	; (8002860 <HAL_RCC_GetSysClockFreq+0x200>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	099b      	lsrs	r3, r3, #6
 8002784:	2200      	movs	r2, #0
 8002786:	4618      	mov	r0, r3
 8002788:	4611      	mov	r1, r2
 800278a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800278e:	623b      	str	r3, [r7, #32]
 8002790:	2300      	movs	r3, #0
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
 8002794:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002798:	4642      	mov	r2, r8
 800279a:	464b      	mov	r3, r9
 800279c:	f04f 0000 	mov.w	r0, #0
 80027a0:	f04f 0100 	mov.w	r1, #0
 80027a4:	0159      	lsls	r1, r3, #5
 80027a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027aa:	0150      	lsls	r0, r2, #5
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4641      	mov	r1, r8
 80027b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80027b6:	4649      	mov	r1, r9
 80027b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027d0:	ebb2 040a 	subs.w	r4, r2, sl
 80027d4:	eb63 050b 	sbc.w	r5, r3, fp
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	00eb      	lsls	r3, r5, #3
 80027e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027e6:	00e2      	lsls	r2, r4, #3
 80027e8:	4614      	mov	r4, r2
 80027ea:	461d      	mov	r5, r3
 80027ec:	4643      	mov	r3, r8
 80027ee:	18e3      	adds	r3, r4, r3
 80027f0:	603b      	str	r3, [r7, #0]
 80027f2:	464b      	mov	r3, r9
 80027f4:	eb45 0303 	adc.w	r3, r5, r3
 80027f8:	607b      	str	r3, [r7, #4]
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002806:	4629      	mov	r1, r5
 8002808:	028b      	lsls	r3, r1, #10
 800280a:	4621      	mov	r1, r4
 800280c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002810:	4621      	mov	r1, r4
 8002812:	028a      	lsls	r2, r1, #10
 8002814:	4610      	mov	r0, r2
 8002816:	4619      	mov	r1, r3
 8002818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800281a:	2200      	movs	r2, #0
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	61fa      	str	r2, [r7, #28]
 8002820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002824:	f7fe f83a 	bl	800089c <__aeabi_uldivmod>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4613      	mov	r3, r2
 800282e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_RCC_GetSysClockFreq+0x200>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	0c1b      	lsrs	r3, r3, #16
 8002836:	f003 0303 	and.w	r3, r3, #3
 800283a:	3301      	adds	r3, #1
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002840:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002844:	fbb2 f3f3 	udiv	r3, r2, r3
 8002848:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800284a:	e002      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_GetSysClockFreq+0x204>)
 800284e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002854:	4618      	mov	r0, r3
 8002856:	3750      	adds	r7, #80	; 0x50
 8002858:	46bd      	mov	sp, r7
 800285a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	00f42400 	.word	0x00f42400
 8002868:	007a1200 	.word	0x007a1200

0800286c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <HAL_RCC_GetHCLKFreq+0x14>)
 8002872:	681b      	ldr	r3, [r3, #0]
}
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20000010 	.word	0x20000010

08002884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002888:	f7ff fff0 	bl	800286c <HAL_RCC_GetHCLKFreq>
 800288c:	4602      	mov	r2, r0
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	0a9b      	lsrs	r3, r3, #10
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	4903      	ldr	r1, [pc, #12]	; (80028a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800289a:	5ccb      	ldrb	r3, [r1, r3]
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40023800 	.word	0x40023800
 80028a8:	08008078 	.word	0x08008078

080028ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028b0:	f7ff ffdc 	bl	800286c <HAL_RCC_GetHCLKFreq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	0b5b      	lsrs	r3, r3, #13
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	4903      	ldr	r1, [pc, #12]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028c2:	5ccb      	ldrb	r3, [r1, r3]
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	08008078 	.word	0x08008078

080028d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	220f      	movs	r2, #15
 80028e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_RCC_GetClockConfig+0x5c>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0203 	and.w	r2, r3, #3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80028f0:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <HAL_RCC_GetClockConfig+0x5c>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <HAL_RCC_GetClockConfig+0x5c>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_RCC_GetClockConfig+0x5c>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	08db      	lsrs	r3, r3, #3
 800290e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002916:	4b07      	ldr	r3, [pc, #28]	; (8002934 <HAL_RCC_GetClockConfig+0x60>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0207 	and.w	r2, r3, #7
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	601a      	str	r2, [r3, #0]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40023800 	.word	0x40023800
 8002934:	40023c00 	.word	0x40023c00

08002938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e041      	b.n	80029ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fe fdd8 	bl	8001514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3304      	adds	r3, #4
 8002974:	4619      	mov	r1, r3
 8002976:	4610      	mov	r0, r2
 8002978:	f000 fc96 	bl	80032a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d001      	beq.n	80029f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e03c      	b.n	8002a6a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <HAL_TIM_Base_Start+0xa0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d018      	beq.n	8002a34 <HAL_TIM_Base_Start+0x5c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0a:	d013      	beq.n	8002a34 <HAL_TIM_Base_Start+0x5c>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a1a      	ldr	r2, [pc, #104]	; (8002a7c <HAL_TIM_Base_Start+0xa4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00e      	beq.n	8002a34 <HAL_TIM_Base_Start+0x5c>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <HAL_TIM_Base_Start+0xa8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d009      	beq.n	8002a34 <HAL_TIM_Base_Start+0x5c>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a17      	ldr	r2, [pc, #92]	; (8002a84 <HAL_TIM_Base_Start+0xac>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d004      	beq.n	8002a34 <HAL_TIM_Base_Start+0x5c>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a16      	ldr	r2, [pc, #88]	; (8002a88 <HAL_TIM_Base_Start+0xb0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d111      	bne.n	8002a58 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b06      	cmp	r3, #6
 8002a44:	d010      	beq.n	8002a68 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0201 	orr.w	r2, r2, #1
 8002a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a56:	e007      	b.n	8002a68 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40010000 	.word	0x40010000
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40000800 	.word	0x40000800
 8002a84:	40000c00 	.word	0x40000c00
 8002a88:	40014000 	.word	0x40014000

08002a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d001      	beq.n	8002aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e044      	b.n	8002b2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a1e      	ldr	r2, [pc, #120]	; (8002b3c <HAL_TIM_Base_Start_IT+0xb0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d018      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ace:	d013      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1a      	ldr	r2, [pc, #104]	; (8002b40 <HAL_TIM_Base_Start_IT+0xb4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00e      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a19      	ldr	r2, [pc, #100]	; (8002b44 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d009      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a17      	ldr	r2, [pc, #92]	; (8002b48 <HAL_TIM_Base_Start_IT+0xbc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d004      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x6c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a16      	ldr	r2, [pc, #88]	; (8002b4c <HAL_TIM_Base_Start_IT+0xc0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d111      	bne.n	8002b1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b06      	cmp	r3, #6
 8002b08:	d010      	beq.n	8002b2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1a:	e007      	b.n	8002b2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40010000 	.word	0x40010000
 8002b40:	40000400 	.word	0x40000400
 8002b44:	40000800 	.word	0x40000800
 8002b48:	40000c00 	.word	0x40000c00
 8002b4c:	40014000 	.word	0x40014000

08002b50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e041      	b.n	8002be6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f839 	bl	8002bee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4610      	mov	r0, r2
 8002b90:	f000 fb8a 	bl	80032a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d109      	bne.n	8002c28 <HAL_TIM_PWM_Start+0x24>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	bf14      	ite	ne
 8002c20:	2301      	movne	r3, #1
 8002c22:	2300      	moveq	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	e022      	b.n	8002c6e <HAL_TIM_PWM_Start+0x6a>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d109      	bne.n	8002c42 <HAL_TIM_PWM_Start+0x3e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	bf14      	ite	ne
 8002c3a:	2301      	movne	r3, #1
 8002c3c:	2300      	moveq	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	e015      	b.n	8002c6e <HAL_TIM_PWM_Start+0x6a>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d109      	bne.n	8002c5c <HAL_TIM_PWM_Start+0x58>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	bf14      	ite	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	2300      	moveq	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	e008      	b.n	8002c6e <HAL_TIM_PWM_Start+0x6a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	bf14      	ite	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	2300      	moveq	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e068      	b.n	8002d48 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d104      	bne.n	8002c86 <HAL_TIM_PWM_Start+0x82>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c84:	e013      	b.n	8002cae <HAL_TIM_PWM_Start+0xaa>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d104      	bne.n	8002c96 <HAL_TIM_PWM_Start+0x92>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c94:	e00b      	b.n	8002cae <HAL_TIM_PWM_Start+0xaa>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d104      	bne.n	8002ca6 <HAL_TIM_PWM_Start+0xa2>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ca4:	e003      	b.n	8002cae <HAL_TIM_PWM_Start+0xaa>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	6839      	ldr	r1, [r7, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fda8 	bl	800380c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a23      	ldr	r2, [pc, #140]	; (8002d50 <HAL_TIM_PWM_Start+0x14c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d107      	bne.n	8002cd6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1d      	ldr	r2, [pc, #116]	; (8002d50 <HAL_TIM_PWM_Start+0x14c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d018      	beq.n	8002d12 <HAL_TIM_PWM_Start+0x10e>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce8:	d013      	beq.n	8002d12 <HAL_TIM_PWM_Start+0x10e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a19      	ldr	r2, [pc, #100]	; (8002d54 <HAL_TIM_PWM_Start+0x150>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d00e      	beq.n	8002d12 <HAL_TIM_PWM_Start+0x10e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a17      	ldr	r2, [pc, #92]	; (8002d58 <HAL_TIM_PWM_Start+0x154>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d009      	beq.n	8002d12 <HAL_TIM_PWM_Start+0x10e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a16      	ldr	r2, [pc, #88]	; (8002d5c <HAL_TIM_PWM_Start+0x158>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d004      	beq.n	8002d12 <HAL_TIM_PWM_Start+0x10e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <HAL_TIM_PWM_Start+0x15c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d111      	bne.n	8002d36 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b06      	cmp	r3, #6
 8002d22:	d010      	beq.n	8002d46 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d34:	e007      	b.n	8002d46 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f042 0201 	orr.w	r2, r2, #1
 8002d44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40010000 	.word	0x40010000
 8002d54:	40000400 	.word	0x40000400
 8002d58:	40000800 	.word	0x40000800
 8002d5c:	40000c00 	.word	0x40000c00
 8002d60:	40014000 	.word	0x40014000

08002d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d020      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01b      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f06f 0202 	mvn.w	r2, #2
 8002d98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fa5b 	bl	800326a <HAL_TIM_IC_CaptureCallback>
 8002db4:	e005      	b.n	8002dc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fa4d 	bl	8003256 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fa5e 	bl	800327e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d020      	beq.n	8002e14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01b      	beq.n	8002e14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0204 	mvn.w	r2, #4
 8002de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fa35 	bl	800326a <HAL_TIM_IC_CaptureCallback>
 8002e00:	e005      	b.n	8002e0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fa27 	bl	8003256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fa38 	bl	800327e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d020      	beq.n	8002e60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d01b      	beq.n	8002e60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0208 	mvn.w	r2, #8
 8002e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2204      	movs	r2, #4
 8002e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fa0f 	bl	800326a <HAL_TIM_IC_CaptureCallback>
 8002e4c:	e005      	b.n	8002e5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 fa01 	bl	8003256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fa12 	bl	800327e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d020      	beq.n	8002eac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d01b      	beq.n	8002eac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0210 	mvn.w	r2, #16
 8002e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2208      	movs	r2, #8
 8002e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f9e9 	bl	800326a <HAL_TIM_IC_CaptureCallback>
 8002e98:	e005      	b.n	8002ea6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f9db 	bl	8003256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f9ec 	bl	800327e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00c      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d007      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0201 	mvn.w	r2, #1
 8002ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fe fade 	bl	800148c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00c      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 fd2a 	bl	8003948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00c      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f9bd 	bl	8003292 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00c      	beq.n	8002f3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0220 	mvn.w	r2, #32
 8002f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fcfc 	bl	8003934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e0ae      	b.n	80030c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b0c      	cmp	r3, #12
 8002f6e:	f200 809f 	bhi.w	80030b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f72:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f78:	08002fad 	.word	0x08002fad
 8002f7c:	080030b1 	.word	0x080030b1
 8002f80:	080030b1 	.word	0x080030b1
 8002f84:	080030b1 	.word	0x080030b1
 8002f88:	08002fed 	.word	0x08002fed
 8002f8c:	080030b1 	.word	0x080030b1
 8002f90:	080030b1 	.word	0x080030b1
 8002f94:	080030b1 	.word	0x080030b1
 8002f98:	0800302f 	.word	0x0800302f
 8002f9c:	080030b1 	.word	0x080030b1
 8002fa0:	080030b1 	.word	0x080030b1
 8002fa4:	080030b1 	.word	0x080030b1
 8002fa8:	0800306f 	.word	0x0800306f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fa04 	bl	80033c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0208 	orr.w	r2, r2, #8
 8002fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0204 	bic.w	r2, r2, #4
 8002fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6999      	ldr	r1, [r3, #24]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	619a      	str	r2, [r3, #24]
      break;
 8002fea:	e064      	b.n	80030b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fa4a 	bl	800348c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6999      	ldr	r1, [r3, #24]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	021a      	lsls	r2, r3, #8
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	619a      	str	r2, [r3, #24]
      break;
 800302c:	e043      	b.n	80030b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68b9      	ldr	r1, [r7, #8]
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fa95 	bl	8003564 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0208 	orr.w	r2, r2, #8
 8003048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0204 	bic.w	r2, r2, #4
 8003058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69d9      	ldr	r1, [r3, #28]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	61da      	str	r2, [r3, #28]
      break;
 800306c:	e023      	b.n	80030b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fadf 	bl	8003638 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69da      	ldr	r2, [r3, #28]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69da      	ldr	r2, [r3, #28]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69d9      	ldr	r1, [r3, #28]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	021a      	lsls	r2, r3, #8
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	61da      	str	r2, [r3, #28]
      break;
 80030ae:	e002      	b.n	80030b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	75fb      	strb	r3, [r7, #23]
      break;
 80030b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030be:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_TIM_ConfigClockSource+0x1c>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e0b4      	b.n	800324e <HAL_TIM_ConfigClockSource+0x186>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800310a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800311c:	d03e      	beq.n	800319c <HAL_TIM_ConfigClockSource+0xd4>
 800311e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003122:	f200 8087 	bhi.w	8003234 <HAL_TIM_ConfigClockSource+0x16c>
 8003126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312a:	f000 8086 	beq.w	800323a <HAL_TIM_ConfigClockSource+0x172>
 800312e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003132:	d87f      	bhi.n	8003234 <HAL_TIM_ConfigClockSource+0x16c>
 8003134:	2b70      	cmp	r3, #112	; 0x70
 8003136:	d01a      	beq.n	800316e <HAL_TIM_ConfigClockSource+0xa6>
 8003138:	2b70      	cmp	r3, #112	; 0x70
 800313a:	d87b      	bhi.n	8003234 <HAL_TIM_ConfigClockSource+0x16c>
 800313c:	2b60      	cmp	r3, #96	; 0x60
 800313e:	d050      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x11a>
 8003140:	2b60      	cmp	r3, #96	; 0x60
 8003142:	d877      	bhi.n	8003234 <HAL_TIM_ConfigClockSource+0x16c>
 8003144:	2b50      	cmp	r3, #80	; 0x50
 8003146:	d03c      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0xfa>
 8003148:	2b50      	cmp	r3, #80	; 0x50
 800314a:	d873      	bhi.n	8003234 <HAL_TIM_ConfigClockSource+0x16c>
 800314c:	2b40      	cmp	r3, #64	; 0x40
 800314e:	d058      	beq.n	8003202 <HAL_TIM_ConfigClockSource+0x13a>
 8003150:	2b40      	cmp	r3, #64	; 0x40
 8003152:	d86f      	bhi.n	8003234 <HAL_TIM_ConfigClockSource+0x16c>
 8003154:	2b30      	cmp	r3, #48	; 0x30
 8003156:	d064      	beq.n	8003222 <HAL_TIM_ConfigClockSource+0x15a>
 8003158:	2b30      	cmp	r3, #48	; 0x30
 800315a:	d86b      	bhi.n	8003234 <HAL_TIM_ConfigClockSource+0x16c>
 800315c:	2b20      	cmp	r3, #32
 800315e:	d060      	beq.n	8003222 <HAL_TIM_ConfigClockSource+0x15a>
 8003160:	2b20      	cmp	r3, #32
 8003162:	d867      	bhi.n	8003234 <HAL_TIM_ConfigClockSource+0x16c>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d05c      	beq.n	8003222 <HAL_TIM_ConfigClockSource+0x15a>
 8003168:	2b10      	cmp	r3, #16
 800316a:	d05a      	beq.n	8003222 <HAL_TIM_ConfigClockSource+0x15a>
 800316c:	e062      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800317e:	f000 fb25 	bl	80037cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003190:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	609a      	str	r2, [r3, #8]
      break;
 800319a:	e04f      	b.n	800323c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031ac:	f000 fb0e 	bl	80037cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031be:	609a      	str	r2, [r3, #8]
      break;
 80031c0:	e03c      	b.n	800323c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ce:	461a      	mov	r2, r3
 80031d0:	f000 fa82 	bl	80036d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2150      	movs	r1, #80	; 0x50
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 fadb 	bl	8003796 <TIM_ITRx_SetConfig>
      break;
 80031e0:	e02c      	b.n	800323c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ee:	461a      	mov	r2, r3
 80031f0:	f000 faa1 	bl	8003736 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2160      	movs	r1, #96	; 0x60
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 facb 	bl	8003796 <TIM_ITRx_SetConfig>
      break;
 8003200:	e01c      	b.n	800323c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800320e:	461a      	mov	r2, r3
 8003210:	f000 fa62 	bl	80036d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2140      	movs	r1, #64	; 0x40
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fabb 	bl	8003796 <TIM_ITRx_SetConfig>
      break;
 8003220:	e00c      	b.n	800323c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4619      	mov	r1, r3
 800322c:	4610      	mov	r0, r2
 800322e:	f000 fab2 	bl	8003796 <TIM_ITRx_SetConfig>
      break;
 8003232:	e003      	b.n	800323c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
      break;
 8003238:	e000      	b.n	800323c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800323a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800324c:	7bfb      	ldrb	r3, [r7, #15]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
	...

080032a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a3a      	ldr	r2, [pc, #232]	; (80033a4 <TIM_Base_SetConfig+0xfc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00f      	beq.n	80032e0 <TIM_Base_SetConfig+0x38>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c6:	d00b      	beq.n	80032e0 <TIM_Base_SetConfig+0x38>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a37      	ldr	r2, [pc, #220]	; (80033a8 <TIM_Base_SetConfig+0x100>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d007      	beq.n	80032e0 <TIM_Base_SetConfig+0x38>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a36      	ldr	r2, [pc, #216]	; (80033ac <TIM_Base_SetConfig+0x104>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d003      	beq.n	80032e0 <TIM_Base_SetConfig+0x38>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a35      	ldr	r2, [pc, #212]	; (80033b0 <TIM_Base_SetConfig+0x108>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d108      	bne.n	80032f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2b      	ldr	r2, [pc, #172]	; (80033a4 <TIM_Base_SetConfig+0xfc>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01b      	beq.n	8003332 <TIM_Base_SetConfig+0x8a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003300:	d017      	beq.n	8003332 <TIM_Base_SetConfig+0x8a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a28      	ldr	r2, [pc, #160]	; (80033a8 <TIM_Base_SetConfig+0x100>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d013      	beq.n	8003332 <TIM_Base_SetConfig+0x8a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a27      	ldr	r2, [pc, #156]	; (80033ac <TIM_Base_SetConfig+0x104>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00f      	beq.n	8003332 <TIM_Base_SetConfig+0x8a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a26      	ldr	r2, [pc, #152]	; (80033b0 <TIM_Base_SetConfig+0x108>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00b      	beq.n	8003332 <TIM_Base_SetConfig+0x8a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a25      	ldr	r2, [pc, #148]	; (80033b4 <TIM_Base_SetConfig+0x10c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d007      	beq.n	8003332 <TIM_Base_SetConfig+0x8a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a24      	ldr	r2, [pc, #144]	; (80033b8 <TIM_Base_SetConfig+0x110>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d003      	beq.n	8003332 <TIM_Base_SetConfig+0x8a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a23      	ldr	r2, [pc, #140]	; (80033bc <TIM_Base_SetConfig+0x114>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d108      	bne.n	8003344 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a0e      	ldr	r2, [pc, #56]	; (80033a4 <TIM_Base_SetConfig+0xfc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d103      	bne.n	8003378 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b01      	cmp	r3, #1
 8003388:	d105      	bne.n	8003396 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f023 0201 	bic.w	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	611a      	str	r2, [r3, #16]
  }
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40010000 	.word	0x40010000
 80033a8:	40000400 	.word	0x40000400
 80033ac:	40000800 	.word	0x40000800
 80033b0:	40000c00 	.word	0x40000c00
 80033b4:	40014000 	.word	0x40014000
 80033b8:	40014400 	.word	0x40014400
 80033bc:	40014800 	.word	0x40014800

080033c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	f023 0201 	bic.w	r2, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0303 	bic.w	r3, r3, #3
 80033f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f023 0302 	bic.w	r3, r3, #2
 8003408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <TIM_OC1_SetConfig+0xc8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d10c      	bne.n	8003436 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f023 0308 	bic.w	r3, r3, #8
 8003422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f023 0304 	bic.w	r3, r3, #4
 8003434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a13      	ldr	r2, [pc, #76]	; (8003488 <TIM_OC1_SetConfig+0xc8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d111      	bne.n	8003462 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800344c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4313      	orrs	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	621a      	str	r2, [r3, #32]
}
 800347c:	bf00      	nop
 800347e:	371c      	adds	r7, #28
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	40010000 	.word	0x40010000

0800348c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a1b      	ldr	r3, [r3, #32]
 80034a0:	f023 0210 	bic.w	r2, r3, #16
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f023 0320 	bic.w	r3, r3, #32
 80034d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a1e      	ldr	r2, [pc, #120]	; (8003560 <TIM_OC2_SetConfig+0xd4>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d10d      	bne.n	8003508 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003506:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a15      	ldr	r2, [pc, #84]	; (8003560 <TIM_OC2_SetConfig+0xd4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d113      	bne.n	8003538 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800351e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	621a      	str	r2, [r3, #32]
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	40010000 	.word	0x40010000

08003564 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0303 	bic.w	r3, r3, #3
 800359a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <TIM_OC3_SetConfig+0xd0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d10d      	bne.n	80035de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	021b      	lsls	r3, r3, #8
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a14      	ldr	r2, [pc, #80]	; (8003634 <TIM_OC3_SetConfig+0xd0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d113      	bne.n	800360e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	621a      	str	r2, [r3, #32]
}
 8003628:	bf00      	nop
 800362a:	371c      	adds	r7, #28
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	40010000 	.word	0x40010000

08003638 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800366e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003682:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	031b      	lsls	r3, r3, #12
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a10      	ldr	r2, [pc, #64]	; (80036d4 <TIM_OC4_SetConfig+0x9c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d109      	bne.n	80036ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800369e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	019b      	lsls	r3, r3, #6
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	621a      	str	r2, [r3, #32]
}
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40010000 	.word	0x40010000

080036d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	f023 0201 	bic.w	r2, r3, #1
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f023 030a 	bic.w	r3, r3, #10
 8003714:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	621a      	str	r2, [r3, #32]
}
 800372a:	bf00      	nop
 800372c:	371c      	adds	r7, #28
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003736:	b480      	push	{r7}
 8003738:	b087      	sub	sp, #28
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f023 0210 	bic.w	r2, r3, #16
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003760:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	031b      	lsls	r3, r3, #12
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003772:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	621a      	str	r2, [r3, #32]
}
 800378a:	bf00      	nop
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003796:	b480      	push	{r7}
 8003798:	b085      	sub	sp, #20
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f043 0307 	orr.w	r3, r3, #7
 80037b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	609a      	str	r2, [r3, #8]
}
 80037c0:	bf00      	nop
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	021a      	lsls	r2, r3, #8
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	609a      	str	r2, [r3, #8]
}
 8003800:	bf00      	nop
 8003802:	371c      	adds	r7, #28
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800380c:	b480      	push	{r7}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	f003 031f 	and.w	r3, r3, #31
 800381e:	2201      	movs	r2, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a1a      	ldr	r2, [r3, #32]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	43db      	mvns	r3, r3
 800382e:	401a      	ands	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1a      	ldr	r2, [r3, #32]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	fa01 f303 	lsl.w	r3, r1, r3
 8003844:	431a      	orrs	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	621a      	str	r2, [r3, #32]
}
 800384a:	bf00      	nop
 800384c:	371c      	adds	r7, #28
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
	...

08003858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800386c:	2302      	movs	r3, #2
 800386e:	e050      	b.n	8003912 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d018      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038bc:	d013      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a18      	ldr	r2, [pc, #96]	; (8003924 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00e      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a16      	ldr	r2, [pc, #88]	; (8003928 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d009      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a15      	ldr	r2, [pc, #84]	; (800392c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d004      	beq.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a13      	ldr	r2, [pc, #76]	; (8003930 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d10c      	bne.n	8003900 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40010000 	.word	0x40010000
 8003924:	40000400 	.word	0x40000400
 8003928:	40000800 	.word	0x40000800
 800392c:	40000c00 	.word	0x40000c00
 8003930:	40014000 	.word	0x40014000

08003934 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e042      	b.n	80039f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fd fe36 	bl	80015f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2224      	movs	r2, #36	; 0x24
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800399e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 fa09 	bl	8003db8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	603b      	str	r3, [r7, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	d175      	bne.n	8003b08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_UART_Transmit+0x2c>
 8003a22:	88fb      	ldrh	r3, [r7, #6]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e06e      	b.n	8003b0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2221      	movs	r2, #33	; 0x21
 8003a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a3a:	f7fd ffd3 	bl	80019e4 <HAL_GetTick>
 8003a3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	88fa      	ldrh	r2, [r7, #6]
 8003a44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	88fa      	ldrh	r2, [r7, #6]
 8003a4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a54:	d108      	bne.n	8003a68 <HAL_UART_Transmit+0x6c>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d104      	bne.n	8003a68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	e003      	b.n	8003a70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a70:	e02e      	b.n	8003ad0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2180      	movs	r1, #128	; 0x80
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f8df 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e03a      	b.n	8003b0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10b      	bne.n	8003ab2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	3302      	adds	r3, #2
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	e007      	b.n	8003ac2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	781a      	ldrb	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1cb      	bne.n	8003a72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2140      	movs	r1, #64	; 0x40
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f8ab 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d005      	beq.n	8003afc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e006      	b.n	8003b0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	e000      	b.n	8003b0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b08:	2302      	movs	r3, #2
  }
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3720      	adds	r7, #32
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b08a      	sub	sp, #40	; 0x28
 8003b16:	af02      	add	r7, sp, #8
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	603b      	str	r3, [r7, #0]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b20      	cmp	r3, #32
 8003b30:	f040 8081 	bne.w	8003c36 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <HAL_UART_Receive+0x2e>
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e079      	b.n	8003c38 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2222      	movs	r2, #34	; 0x22
 8003b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b58:	f7fd ff44 	bl	80019e4 <HAL_GetTick>
 8003b5c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	88fa      	ldrh	r2, [r7, #6]
 8003b62:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	88fa      	ldrh	r2, [r7, #6]
 8003b68:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b72:	d108      	bne.n	8003b86 <HAL_UART_Receive+0x74>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d104      	bne.n	8003b86 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	61bb      	str	r3, [r7, #24]
 8003b84:	e003      	b.n	8003b8e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b8e:	e047      	b.n	8003c20 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2200      	movs	r2, #0
 8003b98:	2120      	movs	r1, #32
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f850 	bl	8003c40 <UART_WaitOnFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e042      	b.n	8003c38 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10c      	bne.n	8003bd2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	3302      	adds	r3, #2
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	e01f      	b.n	8003c12 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bda:	d007      	beq.n	8003bec <HAL_UART_Receive+0xda>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10a      	bne.n	8003bfa <HAL_UART_Receive+0xe8>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d106      	bne.n	8003bfa <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	701a      	strb	r2, [r3, #0]
 8003bf8:	e008      	b.n	8003c0c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1b2      	bne.n	8003b90 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e000      	b.n	8003c38 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003c36:	2302      	movs	r3, #2
  }
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3720      	adds	r7, #32
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	603b      	str	r3, [r7, #0]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c50:	e03b      	b.n	8003cca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c58:	d037      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c5a:	f7fd fec3 	bl	80019e4 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	6a3a      	ldr	r2, [r7, #32]
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d302      	bcc.n	8003c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e03a      	b.n	8003cea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d023      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b80      	cmp	r3, #128	; 0x80
 8003c86:	d020      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b40      	cmp	r3, #64	; 0x40
 8003c8c:	d01d      	beq.n	8003cca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d116      	bne.n	8003cca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f81d 	bl	8003cf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2208      	movs	r2, #8
 8003cbc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e00f      	b.n	8003cea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	bf0c      	ite	eq
 8003cda:	2301      	moveq	r3, #1
 8003cdc:	2300      	movne	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d0b4      	beq.n	8003c52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b095      	sub	sp, #84	; 0x54
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	330c      	adds	r3, #12
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	330c      	adds	r3, #12
 8003d18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d1a:	643a      	str	r2, [r7, #64]	; 0x40
 8003d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e5      	bne.n	8003cfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3314      	adds	r3, #20
 8003d34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f023 0301 	bic.w	r3, r3, #1
 8003d44:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3314      	adds	r3, #20
 8003d4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e5      	bne.n	8003d2e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d119      	bne.n	8003d9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	330c      	adds	r3, #12
 8003d70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	e853 3f00 	ldrex	r3, [r3]
 8003d78:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f023 0310 	bic.w	r3, r3, #16
 8003d80:	647b      	str	r3, [r7, #68]	; 0x44
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	330c      	adds	r3, #12
 8003d88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d8a:	61ba      	str	r2, [r7, #24]
 8003d8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6979      	ldr	r1, [r7, #20]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	613b      	str	r3, [r7, #16]
   return(result);
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e5      	bne.n	8003d6a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003dac:	bf00      	nop
 8003dae:	3754      	adds	r7, #84	; 0x54
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dbc:	b0c0      	sub	sp, #256	; 0x100
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd4:	68d9      	ldr	r1, [r3, #12]
 8003dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	ea40 0301 	orr.w	r3, r0, r1
 8003de0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e10:	f021 010c 	bic.w	r1, r1, #12
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e32:	6999      	ldr	r1, [r3, #24]
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	ea40 0301 	orr.w	r3, r0, r1
 8003e3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	4b8f      	ldr	r3, [pc, #572]	; (8004084 <UART_SetConfig+0x2cc>)
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d005      	beq.n	8003e58 <UART_SetConfig+0xa0>
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4b8d      	ldr	r3, [pc, #564]	; (8004088 <UART_SetConfig+0x2d0>)
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d104      	bne.n	8003e62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e58:	f7fe fd28 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 8003e5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e60:	e003      	b.n	8003e6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e62:	f7fe fd0f 	bl	8002884 <HAL_RCC_GetPCLK1Freq>
 8003e66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e74:	f040 810c 	bne.w	8004090 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e8a:	4622      	mov	r2, r4
 8003e8c:	462b      	mov	r3, r5
 8003e8e:	1891      	adds	r1, r2, r2
 8003e90:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e92:	415b      	adcs	r3, r3
 8003e94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e9a:	4621      	mov	r1, r4
 8003e9c:	eb12 0801 	adds.w	r8, r2, r1
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	eb43 0901 	adc.w	r9, r3, r1
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eba:	4690      	mov	r8, r2
 8003ebc:	4699      	mov	r9, r3
 8003ebe:	4623      	mov	r3, r4
 8003ec0:	eb18 0303 	adds.w	r3, r8, r3
 8003ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ec8:	462b      	mov	r3, r5
 8003eca:	eb49 0303 	adc.w	r3, r9, r3
 8003ece:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ede:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ee2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	18db      	adds	r3, r3, r3
 8003eea:	653b      	str	r3, [r7, #80]	; 0x50
 8003eec:	4613      	mov	r3, r2
 8003eee:	eb42 0303 	adc.w	r3, r2, r3
 8003ef2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ef4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ef8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003efc:	f7fc fcce 	bl	800089c <__aeabi_uldivmod>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4b61      	ldr	r3, [pc, #388]	; (800408c <UART_SetConfig+0x2d4>)
 8003f06:	fba3 2302 	umull	r2, r3, r3, r2
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	011c      	lsls	r4, r3, #4
 8003f0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f12:	2200      	movs	r2, #0
 8003f14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f18:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f20:	4642      	mov	r2, r8
 8003f22:	464b      	mov	r3, r9
 8003f24:	1891      	adds	r1, r2, r2
 8003f26:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f28:	415b      	adcs	r3, r3
 8003f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f30:	4641      	mov	r1, r8
 8003f32:	eb12 0a01 	adds.w	sl, r2, r1
 8003f36:	4649      	mov	r1, r9
 8003f38:	eb43 0b01 	adc.w	fp, r3, r1
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f50:	4692      	mov	sl, r2
 8003f52:	469b      	mov	fp, r3
 8003f54:	4643      	mov	r3, r8
 8003f56:	eb1a 0303 	adds.w	r3, sl, r3
 8003f5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f5e:	464b      	mov	r3, r9
 8003f60:	eb4b 0303 	adc.w	r3, fp, r3
 8003f64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f74:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	18db      	adds	r3, r3, r3
 8003f80:	643b      	str	r3, [r7, #64]	; 0x40
 8003f82:	4613      	mov	r3, r2
 8003f84:	eb42 0303 	adc.w	r3, r2, r3
 8003f88:	647b      	str	r3, [r7, #68]	; 0x44
 8003f8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f92:	f7fc fc83 	bl	800089c <__aeabi_uldivmod>
 8003f96:	4602      	mov	r2, r0
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	4b3b      	ldr	r3, [pc, #236]	; (800408c <UART_SetConfig+0x2d4>)
 8003f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	2264      	movs	r2, #100	; 0x64
 8003fa6:	fb02 f303 	mul.w	r3, r2, r3
 8003faa:	1acb      	subs	r3, r1, r3
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003fb2:	4b36      	ldr	r3, [pc, #216]	; (800408c <UART_SetConfig+0x2d4>)
 8003fb4:	fba3 2302 	umull	r2, r3, r3, r2
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fc0:	441c      	add	r4, r3
 8003fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fcc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003fd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003fd4:	4642      	mov	r2, r8
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	1891      	adds	r1, r2, r2
 8003fda:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fdc:	415b      	adcs	r3, r3
 8003fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fe0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fe4:	4641      	mov	r1, r8
 8003fe6:	1851      	adds	r1, r2, r1
 8003fe8:	6339      	str	r1, [r7, #48]	; 0x30
 8003fea:	4649      	mov	r1, r9
 8003fec:	414b      	adcs	r3, r1
 8003fee:	637b      	str	r3, [r7, #52]	; 0x34
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ffc:	4659      	mov	r1, fp
 8003ffe:	00cb      	lsls	r3, r1, #3
 8004000:	4651      	mov	r1, sl
 8004002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004006:	4651      	mov	r1, sl
 8004008:	00ca      	lsls	r2, r1, #3
 800400a:	4610      	mov	r0, r2
 800400c:	4619      	mov	r1, r3
 800400e:	4603      	mov	r3, r0
 8004010:	4642      	mov	r2, r8
 8004012:	189b      	adds	r3, r3, r2
 8004014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004018:	464b      	mov	r3, r9
 800401a:	460a      	mov	r2, r1
 800401c:	eb42 0303 	adc.w	r3, r2, r3
 8004020:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004030:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004034:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004038:	460b      	mov	r3, r1
 800403a:	18db      	adds	r3, r3, r3
 800403c:	62bb      	str	r3, [r7, #40]	; 0x28
 800403e:	4613      	mov	r3, r2
 8004040:	eb42 0303 	adc.w	r3, r2, r3
 8004044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004046:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800404a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800404e:	f7fc fc25 	bl	800089c <__aeabi_uldivmod>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4b0d      	ldr	r3, [pc, #52]	; (800408c <UART_SetConfig+0x2d4>)
 8004058:	fba3 1302 	umull	r1, r3, r3, r2
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	2164      	movs	r1, #100	; 0x64
 8004060:	fb01 f303 	mul.w	r3, r1, r3
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	3332      	adds	r3, #50	; 0x32
 800406a:	4a08      	ldr	r2, [pc, #32]	; (800408c <UART_SetConfig+0x2d4>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	f003 0207 	and.w	r2, r3, #7
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4422      	add	r2, r4
 800407e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004080:	e106      	b.n	8004290 <UART_SetConfig+0x4d8>
 8004082:	bf00      	nop
 8004084:	40011000 	.word	0x40011000
 8004088:	40011400 	.word	0x40011400
 800408c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004094:	2200      	movs	r2, #0
 8004096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800409a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800409e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80040a2:	4642      	mov	r2, r8
 80040a4:	464b      	mov	r3, r9
 80040a6:	1891      	adds	r1, r2, r2
 80040a8:	6239      	str	r1, [r7, #32]
 80040aa:	415b      	adcs	r3, r3
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
 80040ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80040b2:	4641      	mov	r1, r8
 80040b4:	1854      	adds	r4, r2, r1
 80040b6:	4649      	mov	r1, r9
 80040b8:	eb43 0501 	adc.w	r5, r3, r1
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	f04f 0300 	mov.w	r3, #0
 80040c4:	00eb      	lsls	r3, r5, #3
 80040c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ca:	00e2      	lsls	r2, r4, #3
 80040cc:	4614      	mov	r4, r2
 80040ce:	461d      	mov	r5, r3
 80040d0:	4643      	mov	r3, r8
 80040d2:	18e3      	adds	r3, r4, r3
 80040d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040d8:	464b      	mov	r3, r9
 80040da:	eb45 0303 	adc.w	r3, r5, r3
 80040de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040fe:	4629      	mov	r1, r5
 8004100:	008b      	lsls	r3, r1, #2
 8004102:	4621      	mov	r1, r4
 8004104:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004108:	4621      	mov	r1, r4
 800410a:	008a      	lsls	r2, r1, #2
 800410c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004110:	f7fc fbc4 	bl	800089c <__aeabi_uldivmod>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4b60      	ldr	r3, [pc, #384]	; (800429c <UART_SetConfig+0x4e4>)
 800411a:	fba3 2302 	umull	r2, r3, r3, r2
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	011c      	lsls	r4, r3, #4
 8004122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004126:	2200      	movs	r2, #0
 8004128:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800412c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004130:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004134:	4642      	mov	r2, r8
 8004136:	464b      	mov	r3, r9
 8004138:	1891      	adds	r1, r2, r2
 800413a:	61b9      	str	r1, [r7, #24]
 800413c:	415b      	adcs	r3, r3
 800413e:	61fb      	str	r3, [r7, #28]
 8004140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004144:	4641      	mov	r1, r8
 8004146:	1851      	adds	r1, r2, r1
 8004148:	6139      	str	r1, [r7, #16]
 800414a:	4649      	mov	r1, r9
 800414c:	414b      	adcs	r3, r1
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800415c:	4659      	mov	r1, fp
 800415e:	00cb      	lsls	r3, r1, #3
 8004160:	4651      	mov	r1, sl
 8004162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004166:	4651      	mov	r1, sl
 8004168:	00ca      	lsls	r2, r1, #3
 800416a:	4610      	mov	r0, r2
 800416c:	4619      	mov	r1, r3
 800416e:	4603      	mov	r3, r0
 8004170:	4642      	mov	r2, r8
 8004172:	189b      	adds	r3, r3, r2
 8004174:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004178:	464b      	mov	r3, r9
 800417a:	460a      	mov	r2, r1
 800417c:	eb42 0303 	adc.w	r3, r2, r3
 8004180:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	67bb      	str	r3, [r7, #120]	; 0x78
 800418e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800419c:	4649      	mov	r1, r9
 800419e:	008b      	lsls	r3, r1, #2
 80041a0:	4641      	mov	r1, r8
 80041a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041a6:	4641      	mov	r1, r8
 80041a8:	008a      	lsls	r2, r1, #2
 80041aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80041ae:	f7fc fb75 	bl	800089c <__aeabi_uldivmod>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4611      	mov	r1, r2
 80041b8:	4b38      	ldr	r3, [pc, #224]	; (800429c <UART_SetConfig+0x4e4>)
 80041ba:	fba3 2301 	umull	r2, r3, r3, r1
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2264      	movs	r2, #100	; 0x64
 80041c2:	fb02 f303 	mul.w	r3, r2, r3
 80041c6:	1acb      	subs	r3, r1, r3
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	3332      	adds	r3, #50	; 0x32
 80041cc:	4a33      	ldr	r2, [pc, #204]	; (800429c <UART_SetConfig+0x4e4>)
 80041ce:	fba2 2303 	umull	r2, r3, r2, r3
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041d8:	441c      	add	r4, r3
 80041da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041de:	2200      	movs	r2, #0
 80041e0:	673b      	str	r3, [r7, #112]	; 0x70
 80041e2:	677a      	str	r2, [r7, #116]	; 0x74
 80041e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041e8:	4642      	mov	r2, r8
 80041ea:	464b      	mov	r3, r9
 80041ec:	1891      	adds	r1, r2, r2
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	415b      	adcs	r3, r3
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041f8:	4641      	mov	r1, r8
 80041fa:	1851      	adds	r1, r2, r1
 80041fc:	6039      	str	r1, [r7, #0]
 80041fe:	4649      	mov	r1, r9
 8004200:	414b      	adcs	r3, r1
 8004202:	607b      	str	r3, [r7, #4]
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004210:	4659      	mov	r1, fp
 8004212:	00cb      	lsls	r3, r1, #3
 8004214:	4651      	mov	r1, sl
 8004216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800421a:	4651      	mov	r1, sl
 800421c:	00ca      	lsls	r2, r1, #3
 800421e:	4610      	mov	r0, r2
 8004220:	4619      	mov	r1, r3
 8004222:	4603      	mov	r3, r0
 8004224:	4642      	mov	r2, r8
 8004226:	189b      	adds	r3, r3, r2
 8004228:	66bb      	str	r3, [r7, #104]	; 0x68
 800422a:	464b      	mov	r3, r9
 800422c:	460a      	mov	r2, r1
 800422e:	eb42 0303 	adc.w	r3, r2, r3
 8004232:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	663b      	str	r3, [r7, #96]	; 0x60
 800423e:	667a      	str	r2, [r7, #100]	; 0x64
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800424c:	4649      	mov	r1, r9
 800424e:	008b      	lsls	r3, r1, #2
 8004250:	4641      	mov	r1, r8
 8004252:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004256:	4641      	mov	r1, r8
 8004258:	008a      	lsls	r2, r1, #2
 800425a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800425e:	f7fc fb1d 	bl	800089c <__aeabi_uldivmod>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4b0d      	ldr	r3, [pc, #52]	; (800429c <UART_SetConfig+0x4e4>)
 8004268:	fba3 1302 	umull	r1, r3, r3, r2
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	2164      	movs	r1, #100	; 0x64
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	3332      	adds	r3, #50	; 0x32
 800427a:	4a08      	ldr	r2, [pc, #32]	; (800429c <UART_SetConfig+0x4e4>)
 800427c:	fba2 2303 	umull	r2, r3, r2, r3
 8004280:	095b      	lsrs	r3, r3, #5
 8004282:	f003 020f 	and.w	r2, r3, #15
 8004286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4422      	add	r2, r4
 800428e:	609a      	str	r2, [r3, #8]
}
 8004290:	bf00      	nop
 8004292:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004296:	46bd      	mov	sp, r7
 8004298:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800429c:	51eb851f 	.word	0x51eb851f

080042a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80042ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042b2:	2b84      	cmp	r3, #132	; 0x84
 80042b4:	d005      	beq.n	80042c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80042b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4413      	add	r3, r2
 80042be:	3303      	adds	r3, #3
 80042c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80042c2:	68fb      	ldr	r3, [r7, #12]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042d6:	f3ef 8305 	mrs	r3, IPSR
 80042da:	607b      	str	r3, [r7, #4]
  return(result);
 80042dc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80042de:	2b00      	cmp	r3, #0
 80042e0:	bf14      	ite	ne
 80042e2:	2301      	movne	r3, #1
 80042e4:	2300      	moveq	r3, #0
 80042e6:	b2db      	uxtb	r3, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80042f8:	f001 f926 	bl	8005548 <vTaskStartScheduler>
  
  return osOK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	bd80      	pop	{r7, pc}

08004302 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004302:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004304:	b089      	sub	sp, #36	; 0x24
 8004306:	af04      	add	r7, sp, #16
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d020      	beq.n	8004356 <osThreadCreate+0x54>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01c      	beq.n	8004356 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685c      	ldr	r4, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691e      	ldr	r6, [r3, #16]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff ffb6 	bl	80042a0 <makeFreeRtosPriority>
 8004334:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800433e:	9202      	str	r2, [sp, #8]
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	9100      	str	r1, [sp, #0]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	4632      	mov	r2, r6
 8004348:	4629      	mov	r1, r5
 800434a:	4620      	mov	r0, r4
 800434c:	f000 ff1e 	bl	800518c <xTaskCreateStatic>
 8004350:	4603      	mov	r3, r0
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e01c      	b.n	8004390 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685c      	ldr	r4, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004362:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff ff98 	bl	80042a0 <makeFreeRtosPriority>
 8004370:	4602      	mov	r2, r0
 8004372:	f107 030c 	add.w	r3, r7, #12
 8004376:	9301      	str	r3, [sp, #4]
 8004378:	9200      	str	r2, [sp, #0]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	4632      	mov	r2, r6
 800437e:	4629      	mov	r1, r5
 8004380:	4620      	mov	r0, r4
 8004382:	f000 ff60 	bl	8005246 <xTaskCreate>
 8004386:	4603      	mov	r3, r0
 8004388:	2b01      	cmp	r3, #1
 800438a:	d001      	beq.n	8004390 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800438c:	2300      	movs	r3, #0
 800438e:	e000      	b.n	8004392 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004390:	68fb      	ldr	r3, [r7, #12]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800439a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <osDelay+0x16>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	e000      	b.n	80043b2 <osDelay+0x18>
 80043b0:	2301      	movs	r3, #1
 80043b2:	4618      	mov	r0, r3
 80043b4:	f001 f894 	bl	80054e0 <vTaskDelay>
  
  return osOK;
 80043b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b086      	sub	sp, #24
 80043c6:	af02      	add	r7, sp, #8
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00f      	beq.n	80043f4 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d10a      	bne.n	80043f0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2203      	movs	r2, #3
 80043e0:	9200      	str	r2, [sp, #0]
 80043e2:	2200      	movs	r2, #0
 80043e4:	2100      	movs	r1, #0
 80043e6:	2001      	movs	r0, #1
 80043e8:	f000 f9be 	bl	8004768 <xQueueGenericCreateStatic>
 80043ec:	4603      	mov	r3, r0
 80043ee:	e016      	b.n	800441e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	e014      	b.n	800441e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d110      	bne.n	800441c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80043fa:	2203      	movs	r2, #3
 80043fc:	2100      	movs	r1, #0
 80043fe:	2001      	movs	r0, #1
 8004400:	f000 fa2a 	bl	8004858 <xQueueGenericCreate>
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <osSemaphoreCreate+0x56>
 800440c:	2300      	movs	r3, #0
 800440e:	2200      	movs	r2, #0
 8004410:	2100      	movs	r1, #0
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 fa7a 	bl	800490c <xQueueGenericSend>
      return sema;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	e000      	b.n	800441e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800441c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004432:	2300      	movs	r3, #0
 8004434:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800443c:	2380      	movs	r3, #128	; 0x80
 800443e:	e03a      	b.n	80044b6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444a:	d103      	bne.n	8004454 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800444c:	f04f 33ff 	mov.w	r3, #4294967295
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	e009      	b.n	8004468 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d006      	beq.n	8004468 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <osSemaphoreWait+0x40>
      ticks = 1;
 8004464:	2301      	movs	r3, #1
 8004466:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004468:	f7ff ff32 	bl	80042d0 <inHandlerMode>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d017      	beq.n	80044a2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004472:	f107 0308 	add.w	r3, r7, #8
 8004476:	461a      	mov	r2, r3
 8004478:	2100      	movs	r1, #0
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fcde 	bl	8004e3c <xQueueReceiveFromISR>
 8004480:	4603      	mov	r3, r0
 8004482:	2b01      	cmp	r3, #1
 8004484:	d001      	beq.n	800448a <osSemaphoreWait+0x62>
      return osErrorOS;
 8004486:	23ff      	movs	r3, #255	; 0xff
 8004488:	e015      	b.n	80044b6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d011      	beq.n	80044b4 <osSemaphoreWait+0x8c>
 8004490:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <osSemaphoreWait+0x98>)
 8004492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	e008      	b.n	80044b4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80044a2:	68f9      	ldr	r1, [r7, #12]
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fbbd 	bl	8004c24 <xQueueSemaphoreTake>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d001      	beq.n	80044b4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80044b0:	23ff      	movs	r3, #255	; 0xff
 80044b2:	e000      	b.n	80044b6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	e000ed04 	.word	0xe000ed04

080044c4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80044d4:	f7ff fefc 	bl	80042d0 <inHandlerMode>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d016      	beq.n	800450c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80044de:	f107 0308 	add.w	r3, r7, #8
 80044e2:	4619      	mov	r1, r3
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fb0f 	bl	8004b08 <xQueueGiveFromISR>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d001      	beq.n	80044f4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80044f0:	23ff      	movs	r3, #255	; 0xff
 80044f2:	e017      	b.n	8004524 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d013      	beq.n	8004522 <osSemaphoreRelease+0x5e>
 80044fa:	4b0c      	ldr	r3, [pc, #48]	; (800452c <osSemaphoreRelease+0x68>)
 80044fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	e00a      	b.n	8004522 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800450c:	2300      	movs	r3, #0
 800450e:	2200      	movs	r2, #0
 8004510:	2100      	movs	r1, #0
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f9fa 	bl	800490c <xQueueGenericSend>
 8004518:	4603      	mov	r3, r0
 800451a:	2b01      	cmp	r3, #1
 800451c:	d001      	beq.n	8004522 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800451e:	23ff      	movs	r3, #255	; 0xff
 8004520:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004522:	68fb      	ldr	r3, [r7, #12]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	e000ed04 	.word	0xe000ed04

08004530 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f103 0208 	add.w	r2, r3, #8
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f04f 32ff 	mov.w	r2, #4294967295
 8004548:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f103 0208 	add.w	r2, r3, #8
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f103 0208 	add.w	r2, r3, #8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	601a      	str	r2, [r3, #0]
}
 80045c6:	bf00      	nop
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d103      	bne.n	80045f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	e00c      	b.n	800460c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3308      	adds	r3, #8
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	e002      	b.n	8004600 <vListInsert+0x2e>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	429a      	cmp	r2, r3
 800460a:	d2f6      	bcs.n	80045fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	685a      	ldr	r2, [r3, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	601a      	str	r2, [r3, #0]
}
 8004638:	bf00      	nop
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6892      	ldr	r2, [r2, #8]
 800465a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6852      	ldr	r2, [r2, #4]
 8004664:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	429a      	cmp	r2, r3
 800466e:	d103      	bne.n	8004678 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	1e5a      	subs	r2, r3, #1
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80046c2:	f001 fe9f 	bl	8006404 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ce:	68f9      	ldr	r1, [r7, #12]
 80046d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046d2:	fb01 f303 	mul.w	r3, r1, r3
 80046d6:	441a      	add	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f2:	3b01      	subs	r3, #1
 80046f4:	68f9      	ldr	r1, [r7, #12]
 80046f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80046f8:	fb01 f303 	mul.w	r3, r1, r3
 80046fc:	441a      	add	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	22ff      	movs	r2, #255	; 0xff
 8004706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	22ff      	movs	r2, #255	; 0xff
 800470e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d114      	bne.n	8004742 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01a      	beq.n	8004756 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3310      	adds	r3, #16
 8004724:	4618      	mov	r0, r3
 8004726:	f001 f961 	bl	80059ec <xTaskRemoveFromEventList>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d012      	beq.n	8004756 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004730:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <xQueueGenericReset+0xcc>)
 8004732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	f3bf 8f4f 	dsb	sy
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	e009      	b.n	8004756 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	3310      	adds	r3, #16
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff fef2 	bl	8004530 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3324      	adds	r3, #36	; 0x24
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff feed 	bl	8004530 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004756:	f001 fe85 	bl	8006464 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800475a:	2301      	movs	r3, #1
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08e      	sub	sp, #56	; 0x38
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10a      	bne.n	8004792 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800478e:	bf00      	nop
 8004790:	e7fe      	b.n	8004790 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10a      	bne.n	80047ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d002      	beq.n	80047ba <xQueueGenericCreateStatic+0x52>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <xQueueGenericCreateStatic+0x56>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <xQueueGenericCreateStatic+0x58>
 80047be:	2300      	movs	r3, #0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10a      	bne.n	80047da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	623b      	str	r3, [r7, #32]
}
 80047d6:	bf00      	nop
 80047d8:	e7fe      	b.n	80047d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d102      	bne.n	80047e6 <xQueueGenericCreateStatic+0x7e>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <xQueueGenericCreateStatic+0x82>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <xQueueGenericCreateStatic+0x84>
 80047ea:	2300      	movs	r3, #0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	61fb      	str	r3, [r7, #28]
}
 8004802:	bf00      	nop
 8004804:	e7fe      	b.n	8004804 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004806:	2348      	movs	r3, #72	; 0x48
 8004808:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b48      	cmp	r3, #72	; 0x48
 800480e:	d00a      	beq.n	8004826 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	61bb      	str	r3, [r7, #24]
}
 8004822:	bf00      	nop
 8004824:	e7fe      	b.n	8004824 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004826:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800482c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00d      	beq.n	800484e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800483a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	4613      	mov	r3, r2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f83f 	bl	80048cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800484e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004850:	4618      	mov	r0, r3
 8004852:	3730      	adds	r7, #48	; 0x30
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004858:	b580      	push	{r7, lr}
 800485a:	b08a      	sub	sp, #40	; 0x28
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	4613      	mov	r3, r2
 8004864:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10a      	bne.n	8004882 <xQueueGenericCreate+0x2a>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	613b      	str	r3, [r7, #16]
}
 800487e:	bf00      	nop
 8004880:	e7fe      	b.n	8004880 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	fb02 f303 	mul.w	r3, r2, r3
 800488a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	3348      	adds	r3, #72	; 0x48
 8004890:	4618      	mov	r0, r3
 8004892:	f001 fed9 	bl	8006648 <pvPortMalloc>
 8004896:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004898:	69bb      	ldr	r3, [r7, #24]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d011      	beq.n	80048c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	3348      	adds	r3, #72	; 0x48
 80048a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048b0:	79fa      	ldrb	r2, [r7, #7]
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	4613      	mov	r3, r2
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f000 f805 	bl	80048cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80048c2:	69bb      	ldr	r3, [r7, #24]
	}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3720      	adds	r7, #32
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
 80048d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d103      	bne.n	80048e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	e002      	b.n	80048ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80048fa:	2101      	movs	r1, #1
 80048fc:	69b8      	ldr	r0, [r7, #24]
 80048fe:	f7ff fecb 	bl	8004698 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004902:	bf00      	nop
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08e      	sub	sp, #56	; 0x38
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800491a:	2300      	movs	r3, #0
 800491c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10a      	bne.n	800493e <xQueueGenericSend+0x32>
	__asm volatile
 8004928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492c:	f383 8811 	msr	BASEPRI, r3
 8004930:	f3bf 8f6f 	isb	sy
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800493a:	bf00      	nop
 800493c:	e7fe      	b.n	800493c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d103      	bne.n	800494c <xQueueGenericSend+0x40>
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <xQueueGenericSend+0x44>
 800494c:	2301      	movs	r3, #1
 800494e:	e000      	b.n	8004952 <xQueueGenericSend+0x46>
 8004950:	2300      	movs	r3, #0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10a      	bne.n	800496c <xQueueGenericSend+0x60>
	__asm volatile
 8004956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004968:	bf00      	nop
 800496a:	e7fe      	b.n	800496a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d103      	bne.n	800497a <xQueueGenericSend+0x6e>
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <xQueueGenericSend+0x72>
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <xQueueGenericSend+0x74>
 800497e:	2300      	movs	r3, #0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10a      	bne.n	800499a <xQueueGenericSend+0x8e>
	__asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	623b      	str	r3, [r7, #32]
}
 8004996:	bf00      	nop
 8004998:	e7fe      	b.n	8004998 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800499a:	f001 f9e7 	bl	8005d6c <xTaskGetSchedulerState>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d102      	bne.n	80049aa <xQueueGenericSend+0x9e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <xQueueGenericSend+0xa2>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <xQueueGenericSend+0xa4>
 80049ae:	2300      	movs	r3, #0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10a      	bne.n	80049ca <xQueueGenericSend+0xbe>
	__asm volatile
 80049b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	61fb      	str	r3, [r7, #28]
}
 80049c6:	bf00      	nop
 80049c8:	e7fe      	b.n	80049c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80049ca:	f001 fd1b 	bl	8006404 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d302      	bcc.n	80049e0 <xQueueGenericSend+0xd4>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d129      	bne.n	8004a34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	68b9      	ldr	r1, [r7, #8]
 80049e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049e6:	f000 fac1 	bl	8004f6c <prvCopyDataToQueue>
 80049ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d010      	beq.n	8004a16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f6:	3324      	adds	r3, #36	; 0x24
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fff7 	bl	80059ec <xTaskRemoveFromEventList>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d013      	beq.n	8004a2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004a04:	4b3f      	ldr	r3, [pc, #252]	; (8004b04 <xQueueGenericSend+0x1f8>)
 8004a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	e00a      	b.n	8004a2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d007      	beq.n	8004a2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004a1c:	4b39      	ldr	r3, [pc, #228]	; (8004b04 <xQueueGenericSend+0x1f8>)
 8004a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004a2c:	f001 fd1a 	bl	8006464 <vPortExitCritical>
				return pdPASS;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e063      	b.n	8004afc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d103      	bne.n	8004a42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004a3a:	f001 fd13 	bl	8006464 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e05c      	b.n	8004afc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d106      	bne.n	8004a56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004a48:	f107 0314 	add.w	r3, r7, #20
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f001 f82f 	bl	8005ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004a52:	2301      	movs	r3, #1
 8004a54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a56:	f001 fd05 	bl	8006464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a5a:	f000 fddf 	bl	800561c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a5e:	f001 fcd1 	bl	8006404 <vPortEnterCritical>
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a68:	b25b      	sxtb	r3, r3
 8004a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6e:	d103      	bne.n	8004a78 <xQueueGenericSend+0x16c>
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a7e:	b25b      	sxtb	r3, r3
 8004a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a84:	d103      	bne.n	8004a8e <xQueueGenericSend+0x182>
 8004a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a8e:	f001 fce9 	bl	8006464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a92:	1d3a      	adds	r2, r7, #4
 8004a94:	f107 0314 	add.w	r3, r7, #20
 8004a98:	4611      	mov	r1, r2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f001 f81e 	bl	8005adc <xTaskCheckForTimeOut>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d124      	bne.n	8004af0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004aa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aa8:	f000 fb58 	bl	800515c <prvIsQueueFull>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d018      	beq.n	8004ae4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	3310      	adds	r3, #16
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4611      	mov	r1, r2
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 ff72 	bl	80059a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ac2:	f000 fae3 	bl	800508c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ac6:	f000 fdb7 	bl	8005638 <xTaskResumeAll>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f47f af7c 	bne.w	80049ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <xQueueGenericSend+0x1f8>)
 8004ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	e772      	b.n	80049ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ae6:	f000 fad1 	bl	800508c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004aea:	f000 fda5 	bl	8005638 <xTaskResumeAll>
 8004aee:	e76c      	b.n	80049ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004af2:	f000 facb 	bl	800508c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004af6:	f000 fd9f 	bl	8005638 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004afa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3738      	adds	r7, #56	; 0x38
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	e000ed04 	.word	0xe000ed04

08004b08 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b08e      	sub	sp, #56	; 0x38
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10a      	bne.n	8004b32 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	623b      	str	r3, [r7, #32]
}
 8004b2e:	bf00      	nop
 8004b30:	e7fe      	b.n	8004b30 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	61fb      	str	r3, [r7, #28]
}
 8004b4c:	bf00      	nop
 8004b4e:	e7fe      	b.n	8004b4e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d103      	bne.n	8004b60 <xQueueGiveFromISR+0x58>
 8004b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <xQueueGiveFromISR+0x5c>
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <xQueueGiveFromISR+0x5e>
 8004b64:	2300      	movs	r3, #0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	61bb      	str	r3, [r7, #24]
}
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b80:	f001 fd22 	bl	80065c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b84:	f3ef 8211 	mrs	r2, BASEPRI
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	617a      	str	r2, [r7, #20]
 8004b9a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b9c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d22b      	bcs.n	8004c08 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004bc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bca:	d112      	bne.n	8004bf2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d016      	beq.n	8004c02 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd6:	3324      	adds	r3, #36	; 0x24
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 ff07 	bl	80059ec <xTaskRemoveFromEventList>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00e      	beq.n	8004c02 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2201      	movs	r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	e007      	b.n	8004c02 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	b25a      	sxtb	r2, r3
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004c02:	2301      	movs	r3, #1
 8004c04:	637b      	str	r3, [r7, #52]	; 0x34
 8004c06:	e001      	b.n	8004c0c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c16:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3738      	adds	r7, #56	; 0x38
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
	...

08004c24 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08e      	sub	sp, #56	; 0x38
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	623b      	str	r3, [r7, #32]
}
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	61fb      	str	r3, [r7, #28]
}
 8004c70:	bf00      	nop
 8004c72:	e7fe      	b.n	8004c72 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c74:	f001 f87a 	bl	8005d6c <xTaskGetSchedulerState>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d102      	bne.n	8004c84 <xQueueSemaphoreTake+0x60>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <xQueueSemaphoreTake+0x64>
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <xQueueSemaphoreTake+0x66>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	61bb      	str	r3, [r7, #24]
}
 8004ca0:	bf00      	nop
 8004ca2:	e7fe      	b.n	8004ca2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ca4:	f001 fbae 	bl	8006404 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d024      	beq.n	8004cfe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	1e5a      	subs	r2, r3, #1
 8004cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004cc4:	f001 f9fa 	bl	80060bc <pvTaskIncrementMutexHeldCount>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00f      	beq.n	8004cf6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	3310      	adds	r3, #16
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fe86 	bl	80059ec <xTaskRemoveFromEventList>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d007      	beq.n	8004cf6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ce6:	4b54      	ldr	r3, [pc, #336]	; (8004e38 <xQueueSemaphoreTake+0x214>)
 8004ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004cf6:	f001 fbb5 	bl	8006464 <vPortExitCritical>
				return pdPASS;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e097      	b.n	8004e2e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d111      	bne.n	8004d28 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	617b      	str	r3, [r7, #20]
}
 8004d1c:	bf00      	nop
 8004d1e:	e7fe      	b.n	8004d1e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004d20:	f001 fba0 	bl	8006464 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d24:	2300      	movs	r3, #0
 8004d26:	e082      	b.n	8004e2e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d2e:	f107 030c 	add.w	r3, r7, #12
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 febc 	bl	8005ab0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d3c:	f001 fb92 	bl	8006464 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d40:	f000 fc6c 	bl	800561c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d44:	f001 fb5e 	bl	8006404 <vPortEnterCritical>
 8004d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d4e:	b25b      	sxtb	r3, r3
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d103      	bne.n	8004d5e <xQueueSemaphoreTake+0x13a>
 8004d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d64:	b25b      	sxtb	r3, r3
 8004d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6a:	d103      	bne.n	8004d74 <xQueueSemaphoreTake+0x150>
 8004d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d74:	f001 fb76 	bl	8006464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d78:	463a      	mov	r2, r7
 8004d7a:	f107 030c 	add.w	r3, r7, #12
 8004d7e:	4611      	mov	r1, r2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 feab 	bl	8005adc <xTaskCheckForTimeOut>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d132      	bne.n	8004df2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d8e:	f000 f9cf 	bl	8005130 <prvIsQueueEmpty>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d026      	beq.n	8004de6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d109      	bne.n	8004db4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004da0:	f001 fb30 	bl	8006404 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fffd 	bl	8005da8 <xTaskPriorityInherit>
 8004dae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004db0:	f001 fb58 	bl	8006464 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db6:	3324      	adds	r3, #36	; 0x24
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	4611      	mov	r1, r2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fdf1 	bl	80059a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004dc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004dc4:	f000 f962 	bl	800508c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004dc8:	f000 fc36 	bl	8005638 <xTaskResumeAll>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f47f af68 	bne.w	8004ca4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004dd4:	4b18      	ldr	r3, [pc, #96]	; (8004e38 <xQueueSemaphoreTake+0x214>)
 8004dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	e75e      	b.n	8004ca4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004de6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004de8:	f000 f950 	bl	800508c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004dec:	f000 fc24 	bl	8005638 <xTaskResumeAll>
 8004df0:	e758      	b.n	8004ca4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004df2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004df4:	f000 f94a 	bl	800508c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004df8:	f000 fc1e 	bl	8005638 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004dfe:	f000 f997 	bl	8005130 <prvIsQueueEmpty>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f43f af4d 	beq.w	8004ca4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00d      	beq.n	8004e2c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004e10:	f001 faf8 	bl	8006404 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004e14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e16:	f000 f891 	bl	8004f3c <prvGetDisinheritPriorityAfterTimeout>
 8004e1a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e22:	4618      	mov	r0, r3
 8004e24:	f001 f8bc 	bl	8005fa0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004e28:	f001 fb1c 	bl	8006464 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3738      	adds	r7, #56	; 0x38
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	e000ed04 	.word	0xe000ed04

08004e3c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08e      	sub	sp, #56	; 0x38
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	623b      	str	r3, [r7, #32]
}
 8004e64:	bf00      	nop
 8004e66:	e7fe      	b.n	8004e66 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d103      	bne.n	8004e76 <xQueueReceiveFromISR+0x3a>
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <xQueueReceiveFromISR+0x3e>
 8004e76:	2301      	movs	r3, #1
 8004e78:	e000      	b.n	8004e7c <xQueueReceiveFromISR+0x40>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10a      	bne.n	8004e96 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	61fb      	str	r3, [r7, #28]
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e96:	f001 fb97 	bl	80065c8 <vPortValidateInterruptPriority>
	__asm volatile
 8004e9a:	f3ef 8211 	mrs	r2, BASEPRI
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	61ba      	str	r2, [r7, #24]
 8004eb0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004eb2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d02f      	beq.n	8004f22 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ed0:	f000 f8b6 	bl	8005040 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed6:	1e5a      	subs	r2, r3, #1
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004edc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee4:	d112      	bne.n	8004f0c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d016      	beq.n	8004f1c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	3310      	adds	r3, #16
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fd7a 	bl	80059ec <xTaskRemoveFromEventList>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00e      	beq.n	8004f1c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00b      	beq.n	8004f1c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	e007      	b.n	8004f1c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f10:	3301      	adds	r3, #1
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	b25a      	sxtb	r2, r3
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f20:	e001      	b.n	8004f26 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	637b      	str	r3, [r7, #52]	; 0x34
 8004f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f383 8811 	msr	BASEPRI, r3
}
 8004f30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3738      	adds	r7, #56	; 0x38
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d006      	beq.n	8004f5a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f1c3 0307 	rsb	r3, r3, #7
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	e001      	b.n	8004f5e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
	}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10d      	bne.n	8004fa6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d14d      	bne.n	800502e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 ff7c 	bl	8005e94 <xTaskPriorityDisinherit>
 8004f9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	609a      	str	r2, [r3, #8]
 8004fa4:	e043      	b.n	800502e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d119      	bne.n	8004fe0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6858      	ldr	r0, [r3, #4]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	68b9      	ldr	r1, [r7, #8]
 8004fb8:	f002 f8d7 	bl	800716a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	441a      	add	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d32b      	bcc.n	800502e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	605a      	str	r2, [r3, #4]
 8004fde:	e026      	b.n	800502e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	68d8      	ldr	r0, [r3, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	461a      	mov	r2, r3
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	f002 f8bd 	bl	800716a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	425b      	negs	r3, r3
 8004ffa:	441a      	add	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	68da      	ldr	r2, [r3, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d207      	bcs.n	800501c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	425b      	negs	r3, r3
 8005016:	441a      	add	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d105      	bne.n	800502e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	3b01      	subs	r3, #1
 800502c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005036:	697b      	ldr	r3, [r7, #20]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3718      	adds	r7, #24
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d018      	beq.n	8005084 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68da      	ldr	r2, [r3, #12]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	441a      	add	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	429a      	cmp	r2, r3
 800506a:	d303      	bcc.n	8005074 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68d9      	ldr	r1, [r3, #12]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	461a      	mov	r2, r3
 800507e:	6838      	ldr	r0, [r7, #0]
 8005080:	f002 f873 	bl	800716a <memcpy>
	}
}
 8005084:	bf00      	nop
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005094:	f001 f9b6 	bl	8006404 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800509e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050a0:	e011      	b.n	80050c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d012      	beq.n	80050d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3324      	adds	r3, #36	; 0x24
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fc9c 	bl	80059ec <xTaskRemoveFromEventList>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050ba:	f000 fd71 	bl	8005ba0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050be:	7bfb      	ldrb	r3, [r7, #15]
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	dce9      	bgt.n	80050a2 <prvUnlockQueue+0x16>
 80050ce:	e000      	b.n	80050d2 <prvUnlockQueue+0x46>
					break;
 80050d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	22ff      	movs	r2, #255	; 0xff
 80050d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80050da:	f001 f9c3 	bl	8006464 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050de:	f001 f991 	bl	8006404 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050ea:	e011      	b.n	8005110 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d012      	beq.n	800511a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3310      	adds	r3, #16
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fc77 	bl	80059ec <xTaskRemoveFromEventList>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005104:	f000 fd4c 	bl	8005ba0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005108:	7bbb      	ldrb	r3, [r7, #14]
 800510a:	3b01      	subs	r3, #1
 800510c:	b2db      	uxtb	r3, r3
 800510e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005114:	2b00      	cmp	r3, #0
 8005116:	dce9      	bgt.n	80050ec <prvUnlockQueue+0x60>
 8005118:	e000      	b.n	800511c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800511a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	22ff      	movs	r2, #255	; 0xff
 8005120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005124:	f001 f99e 	bl	8006464 <vPortExitCritical>
}
 8005128:	bf00      	nop
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005138:	f001 f964 	bl	8006404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005144:	2301      	movs	r3, #1
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	e001      	b.n	800514e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800514e:	f001 f989 	bl	8006464 <vPortExitCritical>

	return xReturn;
 8005152:	68fb      	ldr	r3, [r7, #12]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005164:	f001 f94e 	bl	8006404 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005170:	429a      	cmp	r2, r3
 8005172:	d102      	bne.n	800517a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005174:	2301      	movs	r3, #1
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	e001      	b.n	800517e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800517e:	f001 f971 	bl	8006464 <vPortExitCritical>

	return xReturn;
 8005182:	68fb      	ldr	r3, [r7, #12]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08e      	sub	sp, #56	; 0x38
 8005190:	af04      	add	r7, sp, #16
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
 8005198:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800519a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10a      	bne.n	80051b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	623b      	str	r3, [r7, #32]
}
 80051b2:	bf00      	nop
 80051b4:	e7fe      	b.n	80051b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80051b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10a      	bne.n	80051d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	61fb      	str	r3, [r7, #28]
}
 80051ce:	bf00      	nop
 80051d0:	e7fe      	b.n	80051d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80051d2:	23a0      	movs	r3, #160	; 0xa0
 80051d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2ba0      	cmp	r3, #160	; 0xa0
 80051da:	d00a      	beq.n	80051f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	61bb      	str	r3, [r7, #24]
}
 80051ee:	bf00      	nop
 80051f0:	e7fe      	b.n	80051f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80051f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80051f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d01e      	beq.n	8005238 <xTaskCreateStatic+0xac>
 80051fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01b      	beq.n	8005238 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005208:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	2202      	movs	r2, #2
 800520e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005212:	2300      	movs	r3, #0
 8005214:	9303      	str	r3, [sp, #12]
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	9302      	str	r3, [sp, #8]
 800521a:	f107 0314 	add.w	r3, r7, #20
 800521e:	9301      	str	r3, [sp, #4]
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	68b9      	ldr	r1, [r7, #8]
 800522a:	68f8      	ldr	r0, [r7, #12]
 800522c:	f000 f850 	bl	80052d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005232:	f000 f8eb 	bl	800540c <prvAddNewTaskToReadyList>
 8005236:	e001      	b.n	800523c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800523c:	697b      	ldr	r3, [r7, #20]
	}
 800523e:	4618      	mov	r0, r3
 8005240:	3728      	adds	r7, #40	; 0x28
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005246:	b580      	push	{r7, lr}
 8005248:	b08c      	sub	sp, #48	; 0x30
 800524a:	af04      	add	r7, sp, #16
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	603b      	str	r3, [r7, #0]
 8005252:	4613      	mov	r3, r2
 8005254:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005256:	88fb      	ldrh	r3, [r7, #6]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4618      	mov	r0, r3
 800525c:	f001 f9f4 	bl	8006648 <pvPortMalloc>
 8005260:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00e      	beq.n	8005286 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005268:	20a0      	movs	r0, #160	; 0xa0
 800526a:	f001 f9ed 	bl	8006648 <pvPortMalloc>
 800526e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	631a      	str	r2, [r3, #48]	; 0x30
 800527c:	e005      	b.n	800528a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800527e:	6978      	ldr	r0, [r7, #20]
 8005280:	f001 faae 	bl	80067e0 <vPortFree>
 8005284:	e001      	b.n	800528a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005286:	2300      	movs	r3, #0
 8005288:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d017      	beq.n	80052c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005298:	88fa      	ldrh	r2, [r7, #6]
 800529a:	2300      	movs	r3, #0
 800529c:	9303      	str	r3, [sp, #12]
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	9302      	str	r3, [sp, #8]
 80052a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a4:	9301      	str	r3, [sp, #4]
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 f80e 	bl	80052d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052b4:	69f8      	ldr	r0, [r7, #28]
 80052b6:	f000 f8a9 	bl	800540c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80052ba:	2301      	movs	r3, #1
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	e002      	b.n	80052c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052c0:	f04f 33ff 	mov.w	r3, #4294967295
 80052c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80052c6:	69bb      	ldr	r3, [r7, #24]
	}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3720      	adds	r7, #32
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80052e8:	3b01      	subs	r3, #1
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	f023 0307 	bic.w	r3, r3, #7
 80052f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	617b      	str	r3, [r7, #20]
}
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d01f      	beq.n	800535e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	e012      	b.n	800534a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	4413      	add	r3, r2
 800532a:	7819      	ldrb	r1, [r3, #0]
 800532c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4413      	add	r3, r2
 8005332:	3334      	adds	r3, #52	; 0x34
 8005334:	460a      	mov	r2, r1
 8005336:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	4413      	add	r3, r2
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d006      	beq.n	8005352 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	3301      	adds	r3, #1
 8005348:	61fb      	str	r3, [r7, #28]
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	2b0f      	cmp	r3, #15
 800534e:	d9e9      	bls.n	8005324 <prvInitialiseNewTask+0x54>
 8005350:	e000      	b.n	8005354 <prvInitialiseNewTask+0x84>
			{
				break;
 8005352:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800535c:	e003      	b.n	8005366 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005368:	2b06      	cmp	r3, #6
 800536a:	d901      	bls.n	8005370 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800536c:	2306      	movs	r3, #6
 800536e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005374:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800537a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	2200      	movs	r2, #0
 8005380:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	3304      	adds	r3, #4
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff f8f2 	bl	8004570 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538e:	3318      	adds	r3, #24
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff f8ed 	bl	8004570 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800539a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539e:	f1c3 0207 	rsb	r2, r3, #7
 80053a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	334c      	adds	r3, #76	; 0x4c
 80053c0:	224c      	movs	r2, #76	; 0x4c
 80053c2:	2100      	movs	r1, #0
 80053c4:	4618      	mov	r0, r3
 80053c6:	f001 fdff 	bl	8006fc8 <memset>
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	4a0c      	ldr	r2, [pc, #48]	; (8005400 <prvInitialiseNewTask+0x130>)
 80053ce:	651a      	str	r2, [r3, #80]	; 0x50
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	4a0c      	ldr	r2, [pc, #48]	; (8005404 <prvInitialiseNewTask+0x134>)
 80053d4:	655a      	str	r2, [r3, #84]	; 0x54
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	4a0b      	ldr	r2, [pc, #44]	; (8005408 <prvInitialiseNewTask+0x138>)
 80053da:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	68f9      	ldr	r1, [r7, #12]
 80053e0:	69b8      	ldr	r0, [r7, #24]
 80053e2:	f000 fee5 	bl	80061b0 <pxPortInitialiseStack>
 80053e6:	4602      	mov	r2, r0
 80053e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053f8:	bf00      	nop
 80053fa:	3720      	adds	r7, #32
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	200041d4 	.word	0x200041d4
 8005404:	2000423c 	.word	0x2000423c
 8005408:	200042a4 	.word	0x200042a4

0800540c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005414:	f000 fff6 	bl	8006404 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005418:	4b2a      	ldr	r3, [pc, #168]	; (80054c4 <prvAddNewTaskToReadyList+0xb8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3301      	adds	r3, #1
 800541e:	4a29      	ldr	r2, [pc, #164]	; (80054c4 <prvAddNewTaskToReadyList+0xb8>)
 8005420:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005422:	4b29      	ldr	r3, [pc, #164]	; (80054c8 <prvAddNewTaskToReadyList+0xbc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d109      	bne.n	800543e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800542a:	4a27      	ldr	r2, [pc, #156]	; (80054c8 <prvAddNewTaskToReadyList+0xbc>)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005430:	4b24      	ldr	r3, [pc, #144]	; (80054c4 <prvAddNewTaskToReadyList+0xb8>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d110      	bne.n	800545a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005438:	f000 fbd6 	bl	8005be8 <prvInitialiseTaskLists>
 800543c:	e00d      	b.n	800545a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800543e:	4b23      	ldr	r3, [pc, #140]	; (80054cc <prvAddNewTaskToReadyList+0xc0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d109      	bne.n	800545a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005446:	4b20      	ldr	r3, [pc, #128]	; (80054c8 <prvAddNewTaskToReadyList+0xbc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005450:	429a      	cmp	r2, r3
 8005452:	d802      	bhi.n	800545a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005454:	4a1c      	ldr	r2, [pc, #112]	; (80054c8 <prvAddNewTaskToReadyList+0xbc>)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800545a:	4b1d      	ldr	r3, [pc, #116]	; (80054d0 <prvAddNewTaskToReadyList+0xc4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3301      	adds	r3, #1
 8005460:	4a1b      	ldr	r2, [pc, #108]	; (80054d0 <prvAddNewTaskToReadyList+0xc4>)
 8005462:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	2201      	movs	r2, #1
 800546a:	409a      	lsls	r2, r3
 800546c:	4b19      	ldr	r3, [pc, #100]	; (80054d4 <prvAddNewTaskToReadyList+0xc8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4313      	orrs	r3, r2
 8005472:	4a18      	ldr	r2, [pc, #96]	; (80054d4 <prvAddNewTaskToReadyList+0xc8>)
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4a15      	ldr	r2, [pc, #84]	; (80054d8 <prvAddNewTaskToReadyList+0xcc>)
 8005484:	441a      	add	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3304      	adds	r3, #4
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f7ff f87c 	bl	800458a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005492:	f000 ffe7 	bl	8006464 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005496:	4b0d      	ldr	r3, [pc, #52]	; (80054cc <prvAddNewTaskToReadyList+0xc0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00e      	beq.n	80054bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800549e:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <prvAddNewTaskToReadyList+0xbc>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d207      	bcs.n	80054bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054ac:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <prvAddNewTaskToReadyList+0xd0>)
 80054ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000580 	.word	0x20000580
 80054c8:	20000480 	.word	0x20000480
 80054cc:	2000058c 	.word	0x2000058c
 80054d0:	2000059c 	.word	0x2000059c
 80054d4:	20000588 	.word	0x20000588
 80054d8:	20000484 	.word	0x20000484
 80054dc:	e000ed04 	.word	0xe000ed04

080054e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d017      	beq.n	8005522 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054f2:	4b13      	ldr	r3, [pc, #76]	; (8005540 <vTaskDelay+0x60>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00a      	beq.n	8005510 <vTaskDelay+0x30>
	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	60bb      	str	r3, [r7, #8]
}
 800550c:	bf00      	nop
 800550e:	e7fe      	b.n	800550e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005510:	f000 f884 	bl	800561c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005514:	2100      	movs	r1, #0
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 fde4 	bl	80060e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800551c:	f000 f88c 	bl	8005638 <xTaskResumeAll>
 8005520:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d107      	bne.n	8005538 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <vTaskDelay+0x64>)
 800552a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005538:	bf00      	nop
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	200005a8 	.word	0x200005a8
 8005544:	e000ed04 	.word	0xe000ed04

08005548 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08a      	sub	sp, #40	; 0x28
 800554c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005556:	463a      	mov	r2, r7
 8005558:	1d39      	adds	r1, r7, #4
 800555a:	f107 0308 	add.w	r3, r7, #8
 800555e:	4618      	mov	r0, r3
 8005560:	f7fb fbaa 	bl	8000cb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005564:	6839      	ldr	r1, [r7, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	9202      	str	r2, [sp, #8]
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	2300      	movs	r3, #0
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	2300      	movs	r3, #0
 8005574:	460a      	mov	r2, r1
 8005576:	4921      	ldr	r1, [pc, #132]	; (80055fc <vTaskStartScheduler+0xb4>)
 8005578:	4821      	ldr	r0, [pc, #132]	; (8005600 <vTaskStartScheduler+0xb8>)
 800557a:	f7ff fe07 	bl	800518c <xTaskCreateStatic>
 800557e:	4603      	mov	r3, r0
 8005580:	4a20      	ldr	r2, [pc, #128]	; (8005604 <vTaskStartScheduler+0xbc>)
 8005582:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005584:	4b1f      	ldr	r3, [pc, #124]	; (8005604 <vTaskStartScheduler+0xbc>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800558c:	2301      	movs	r3, #1
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	e001      	b.n	8005596 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d11b      	bne.n	80055d4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	613b      	str	r3, [r7, #16]
}
 80055ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055b0:	4b15      	ldr	r3, [pc, #84]	; (8005608 <vTaskStartScheduler+0xc0>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	334c      	adds	r3, #76	; 0x4c
 80055b6:	4a15      	ldr	r2, [pc, #84]	; (800560c <vTaskStartScheduler+0xc4>)
 80055b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055ba:	4b15      	ldr	r3, [pc, #84]	; (8005610 <vTaskStartScheduler+0xc8>)
 80055bc:	f04f 32ff 	mov.w	r2, #4294967295
 80055c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055c2:	4b14      	ldr	r3, [pc, #80]	; (8005614 <vTaskStartScheduler+0xcc>)
 80055c4:	2201      	movs	r2, #1
 80055c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055c8:	4b13      	ldr	r3, [pc, #76]	; (8005618 <vTaskStartScheduler+0xd0>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80055ce:	f000 fe77 	bl	80062c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80055d2:	e00e      	b.n	80055f2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055da:	d10a      	bne.n	80055f2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	60fb      	str	r3, [r7, #12]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <vTaskStartScheduler+0xa8>
}
 80055f2:	bf00      	nop
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	08008060 	.word	0x08008060
 8005600:	08005bb9 	.word	0x08005bb9
 8005604:	200005a4 	.word	0x200005a4
 8005608:	20000480 	.word	0x20000480
 800560c:	20000078 	.word	0x20000078
 8005610:	200005a0 	.word	0x200005a0
 8005614:	2000058c 	.word	0x2000058c
 8005618:	20000584 	.word	0x20000584

0800561c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005620:	4b04      	ldr	r3, [pc, #16]	; (8005634 <vTaskSuspendAll+0x18>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3301      	adds	r3, #1
 8005626:	4a03      	ldr	r2, [pc, #12]	; (8005634 <vTaskSuspendAll+0x18>)
 8005628:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800562a:	bf00      	nop
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	200005a8 	.word	0x200005a8

08005638 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005642:	2300      	movs	r3, #0
 8005644:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005646:	4b41      	ldr	r3, [pc, #260]	; (800574c <xTaskResumeAll+0x114>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10a      	bne.n	8005664 <xTaskResumeAll+0x2c>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	603b      	str	r3, [r7, #0]
}
 8005660:	bf00      	nop
 8005662:	e7fe      	b.n	8005662 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005664:	f000 fece 	bl	8006404 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005668:	4b38      	ldr	r3, [pc, #224]	; (800574c <xTaskResumeAll+0x114>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3b01      	subs	r3, #1
 800566e:	4a37      	ldr	r2, [pc, #220]	; (800574c <xTaskResumeAll+0x114>)
 8005670:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005672:	4b36      	ldr	r3, [pc, #216]	; (800574c <xTaskResumeAll+0x114>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d161      	bne.n	800573e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800567a:	4b35      	ldr	r3, [pc, #212]	; (8005750 <xTaskResumeAll+0x118>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d05d      	beq.n	800573e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005682:	e02e      	b.n	80056e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005684:	4b33      	ldr	r3, [pc, #204]	; (8005754 <xTaskResumeAll+0x11c>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3318      	adds	r3, #24
 8005690:	4618      	mov	r0, r3
 8005692:	f7fe ffd7 	bl	8004644 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3304      	adds	r3, #4
 800569a:	4618      	mov	r0, r3
 800569c:	f7fe ffd2 	bl	8004644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	2201      	movs	r2, #1
 80056a6:	409a      	lsls	r2, r3
 80056a8:	4b2b      	ldr	r3, [pc, #172]	; (8005758 <xTaskResumeAll+0x120>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	4a2a      	ldr	r2, [pc, #168]	; (8005758 <xTaskResumeAll+0x120>)
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b6:	4613      	mov	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4a27      	ldr	r2, [pc, #156]	; (800575c <xTaskResumeAll+0x124>)
 80056c0:	441a      	add	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3304      	adds	r3, #4
 80056c6:	4619      	mov	r1, r3
 80056c8:	4610      	mov	r0, r2
 80056ca:	f7fe ff5e 	bl	800458a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d2:	4b23      	ldr	r3, [pc, #140]	; (8005760 <xTaskResumeAll+0x128>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d8:	429a      	cmp	r2, r3
 80056da:	d302      	bcc.n	80056e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80056dc:	4b21      	ldr	r3, [pc, #132]	; (8005764 <xTaskResumeAll+0x12c>)
 80056de:	2201      	movs	r2, #1
 80056e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056e2:	4b1c      	ldr	r3, [pc, #112]	; (8005754 <xTaskResumeAll+0x11c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1cc      	bne.n	8005684 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80056f0:	f000 fb1c 	bl	8005d2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80056f4:	4b1c      	ldr	r3, [pc, #112]	; (8005768 <xTaskResumeAll+0x130>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d010      	beq.n	8005722 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005700:	f000 f836 	bl	8005770 <xTaskIncrementTick>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800570a:	4b16      	ldr	r3, [pc, #88]	; (8005764 <xTaskResumeAll+0x12c>)
 800570c:	2201      	movs	r2, #1
 800570e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3b01      	subs	r3, #1
 8005714:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1f1      	bne.n	8005700 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800571c:	4b12      	ldr	r3, [pc, #72]	; (8005768 <xTaskResumeAll+0x130>)
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005722:	4b10      	ldr	r3, [pc, #64]	; (8005764 <xTaskResumeAll+0x12c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d009      	beq.n	800573e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800572a:	2301      	movs	r3, #1
 800572c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800572e:	4b0f      	ldr	r3, [pc, #60]	; (800576c <xTaskResumeAll+0x134>)
 8005730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800573e:	f000 fe91 	bl	8006464 <vPortExitCritical>

	return xAlreadyYielded;
 8005742:	68bb      	ldr	r3, [r7, #8]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	200005a8 	.word	0x200005a8
 8005750:	20000580 	.word	0x20000580
 8005754:	20000540 	.word	0x20000540
 8005758:	20000588 	.word	0x20000588
 800575c:	20000484 	.word	0x20000484
 8005760:	20000480 	.word	0x20000480
 8005764:	20000594 	.word	0x20000594
 8005768:	20000590 	.word	0x20000590
 800576c:	e000ed04 	.word	0xe000ed04

08005770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800577a:	4b4e      	ldr	r3, [pc, #312]	; (80058b4 <xTaskIncrementTick+0x144>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	f040 808e 	bne.w	80058a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005784:	4b4c      	ldr	r3, [pc, #304]	; (80058b8 <xTaskIncrementTick+0x148>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	3301      	adds	r3, #1
 800578a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800578c:	4a4a      	ldr	r2, [pc, #296]	; (80058b8 <xTaskIncrementTick+0x148>)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d120      	bne.n	80057da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005798:	4b48      	ldr	r3, [pc, #288]	; (80058bc <xTaskIncrementTick+0x14c>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80057a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	603b      	str	r3, [r7, #0]
}
 80057b4:	bf00      	nop
 80057b6:	e7fe      	b.n	80057b6 <xTaskIncrementTick+0x46>
 80057b8:	4b40      	ldr	r3, [pc, #256]	; (80058bc <xTaskIncrementTick+0x14c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	4b40      	ldr	r3, [pc, #256]	; (80058c0 <xTaskIncrementTick+0x150>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a3e      	ldr	r2, [pc, #248]	; (80058bc <xTaskIncrementTick+0x14c>)
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	4a3e      	ldr	r2, [pc, #248]	; (80058c0 <xTaskIncrementTick+0x150>)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	4b3d      	ldr	r3, [pc, #244]	; (80058c4 <xTaskIncrementTick+0x154>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3301      	adds	r3, #1
 80057d2:	4a3c      	ldr	r2, [pc, #240]	; (80058c4 <xTaskIncrementTick+0x154>)
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	f000 faa9 	bl	8005d2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80057da:	4b3b      	ldr	r3, [pc, #236]	; (80058c8 <xTaskIncrementTick+0x158>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d348      	bcc.n	8005876 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057e4:	4b35      	ldr	r3, [pc, #212]	; (80058bc <xTaskIncrementTick+0x14c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d104      	bne.n	80057f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ee:	4b36      	ldr	r3, [pc, #216]	; (80058c8 <xTaskIncrementTick+0x158>)
 80057f0:	f04f 32ff 	mov.w	r2, #4294967295
 80057f4:	601a      	str	r2, [r3, #0]
					break;
 80057f6:	e03e      	b.n	8005876 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f8:	4b30      	ldr	r3, [pc, #192]	; (80058bc <xTaskIncrementTick+0x14c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	429a      	cmp	r2, r3
 800580e:	d203      	bcs.n	8005818 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005810:	4a2d      	ldr	r2, [pc, #180]	; (80058c8 <xTaskIncrementTick+0x158>)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005816:	e02e      	b.n	8005876 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	3304      	adds	r3, #4
 800581c:	4618      	mov	r0, r3
 800581e:	f7fe ff11 	bl	8004644 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005826:	2b00      	cmp	r3, #0
 8005828:	d004      	beq.n	8005834 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	3318      	adds	r3, #24
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe ff08 	bl	8004644 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	2201      	movs	r2, #1
 800583a:	409a      	lsls	r2, r3
 800583c:	4b23      	ldr	r3, [pc, #140]	; (80058cc <xTaskIncrementTick+0x15c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4313      	orrs	r3, r2
 8005842:	4a22      	ldr	r2, [pc, #136]	; (80058cc <xTaskIncrementTick+0x15c>)
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800584a:	4613      	mov	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	4a1f      	ldr	r2, [pc, #124]	; (80058d0 <xTaskIncrementTick+0x160>)
 8005854:	441a      	add	r2, r3
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	3304      	adds	r3, #4
 800585a:	4619      	mov	r1, r3
 800585c:	4610      	mov	r0, r2
 800585e:	f7fe fe94 	bl	800458a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005866:	4b1b      	ldr	r3, [pc, #108]	; (80058d4 <xTaskIncrementTick+0x164>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586c:	429a      	cmp	r2, r3
 800586e:	d3b9      	bcc.n	80057e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005870:	2301      	movs	r3, #1
 8005872:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005874:	e7b6      	b.n	80057e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005876:	4b17      	ldr	r3, [pc, #92]	; (80058d4 <xTaskIncrementTick+0x164>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587c:	4914      	ldr	r1, [pc, #80]	; (80058d0 <xTaskIncrementTick+0x160>)
 800587e:	4613      	mov	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	440b      	add	r3, r1
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d901      	bls.n	8005892 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800588e:	2301      	movs	r3, #1
 8005890:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005892:	4b11      	ldr	r3, [pc, #68]	; (80058d8 <xTaskIncrementTick+0x168>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d007      	beq.n	80058aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800589a:	2301      	movs	r3, #1
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	e004      	b.n	80058aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80058a0:	4b0e      	ldr	r3, [pc, #56]	; (80058dc <xTaskIncrementTick+0x16c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3301      	adds	r3, #1
 80058a6:	4a0d      	ldr	r2, [pc, #52]	; (80058dc <xTaskIncrementTick+0x16c>)
 80058a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80058aa:	697b      	ldr	r3, [r7, #20]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	200005a8 	.word	0x200005a8
 80058b8:	20000584 	.word	0x20000584
 80058bc:	20000538 	.word	0x20000538
 80058c0:	2000053c 	.word	0x2000053c
 80058c4:	20000598 	.word	0x20000598
 80058c8:	200005a0 	.word	0x200005a0
 80058cc:	20000588 	.word	0x20000588
 80058d0:	20000484 	.word	0x20000484
 80058d4:	20000480 	.word	0x20000480
 80058d8:	20000594 	.word	0x20000594
 80058dc:	20000590 	.word	0x20000590

080058e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058e6:	4b29      	ldr	r3, [pc, #164]	; (800598c <vTaskSwitchContext+0xac>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058ee:	4b28      	ldr	r3, [pc, #160]	; (8005990 <vTaskSwitchContext+0xb0>)
 80058f0:	2201      	movs	r2, #1
 80058f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058f4:	e044      	b.n	8005980 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80058f6:	4b26      	ldr	r3, [pc, #152]	; (8005990 <vTaskSwitchContext+0xb0>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058fc:	4b25      	ldr	r3, [pc, #148]	; (8005994 <vTaskSwitchContext+0xb4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	fab3 f383 	clz	r3, r3
 8005908:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800590a:	7afb      	ldrb	r3, [r7, #11]
 800590c:	f1c3 031f 	rsb	r3, r3, #31
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	4921      	ldr	r1, [pc, #132]	; (8005998 <vTaskSwitchContext+0xb8>)
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4613      	mov	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	440b      	add	r3, r1
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10a      	bne.n	800593c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	607b      	str	r3, [r7, #4]
}
 8005938:	bf00      	nop
 800593a:	e7fe      	b.n	800593a <vTaskSwitchContext+0x5a>
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	4613      	mov	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4a14      	ldr	r2, [pc, #80]	; (8005998 <vTaskSwitchContext+0xb8>)
 8005948:	4413      	add	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	605a      	str	r2, [r3, #4]
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	3308      	adds	r3, #8
 800595e:	429a      	cmp	r2, r3
 8005960:	d104      	bne.n	800596c <vTaskSwitchContext+0x8c>
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	605a      	str	r2, [r3, #4]
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	4a0a      	ldr	r2, [pc, #40]	; (800599c <vTaskSwitchContext+0xbc>)
 8005974:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005976:	4b09      	ldr	r3, [pc, #36]	; (800599c <vTaskSwitchContext+0xbc>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	334c      	adds	r3, #76	; 0x4c
 800597c:	4a08      	ldr	r2, [pc, #32]	; (80059a0 <vTaskSwitchContext+0xc0>)
 800597e:	6013      	str	r3, [r2, #0]
}
 8005980:	bf00      	nop
 8005982:	371c      	adds	r7, #28
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	200005a8 	.word	0x200005a8
 8005990:	20000594 	.word	0x20000594
 8005994:	20000588 	.word	0x20000588
 8005998:	20000484 	.word	0x20000484
 800599c:	20000480 	.word	0x20000480
 80059a0:	20000078 	.word	0x20000078

080059a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10a      	bne.n	80059ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	60fb      	str	r3, [r7, #12]
}
 80059c6:	bf00      	nop
 80059c8:	e7fe      	b.n	80059c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059ca:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <vTaskPlaceOnEventList+0x44>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3318      	adds	r3, #24
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fe fdfd 	bl	80045d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059d8:	2101      	movs	r1, #1
 80059da:	6838      	ldr	r0, [r7, #0]
 80059dc:	f000 fb82 	bl	80060e4 <prvAddCurrentTaskToDelayedList>
}
 80059e0:	bf00      	nop
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	20000480 	.word	0x20000480

080059ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b086      	sub	sp, #24
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10a      	bne.n	8005a18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	60fb      	str	r3, [r7, #12]
}
 8005a14:	bf00      	nop
 8005a16:	e7fe      	b.n	8005a16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	3318      	adds	r3, #24
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7fe fe11 	bl	8004644 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a22:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <xTaskRemoveFromEventList+0xac>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d11c      	bne.n	8005a64 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe fe08 	bl	8004644 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	2201      	movs	r2, #1
 8005a3a:	409a      	lsls	r2, r3
 8005a3c:	4b17      	ldr	r3, [pc, #92]	; (8005a9c <xTaskRemoveFromEventList+0xb0>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	4a16      	ldr	r2, [pc, #88]	; (8005a9c <xTaskRemoveFromEventList+0xb0>)
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4a13      	ldr	r2, [pc, #76]	; (8005aa0 <xTaskRemoveFromEventList+0xb4>)
 8005a54:	441a      	add	r2, r3
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	3304      	adds	r3, #4
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	f7fe fd94 	bl	800458a <vListInsertEnd>
 8005a62:	e005      	b.n	8005a70 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	3318      	adds	r3, #24
 8005a68:	4619      	mov	r1, r3
 8005a6a:	480e      	ldr	r0, [pc, #56]	; (8005aa4 <xTaskRemoveFromEventList+0xb8>)
 8005a6c:	f7fe fd8d 	bl	800458a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a74:	4b0c      	ldr	r3, [pc, #48]	; (8005aa8 <xTaskRemoveFromEventList+0xbc>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d905      	bls.n	8005a8a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005a82:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <xTaskRemoveFromEventList+0xc0>)
 8005a84:	2201      	movs	r2, #1
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	e001      	b.n	8005a8e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005a8e:	697b      	ldr	r3, [r7, #20]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	200005a8 	.word	0x200005a8
 8005a9c:	20000588 	.word	0x20000588
 8005aa0:	20000484 	.word	0x20000484
 8005aa4:	20000540 	.word	0x20000540
 8005aa8:	20000480 	.word	0x20000480
 8005aac:	20000594 	.word	0x20000594

08005ab0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005ab8:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <vTaskInternalSetTimeOutState+0x24>)
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ac0:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <vTaskInternalSetTimeOutState+0x28>)
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	605a      	str	r2, [r3, #4]
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	20000598 	.word	0x20000598
 8005ad8:	20000584 	.word	0x20000584

08005adc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b088      	sub	sp, #32
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10a      	bne.n	8005b02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	613b      	str	r3, [r7, #16]
}
 8005afe:	bf00      	nop
 8005b00:	e7fe      	b.n	8005b00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10a      	bne.n	8005b1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0c:	f383 8811 	msr	BASEPRI, r3
 8005b10:	f3bf 8f6f 	isb	sy
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	60fb      	str	r3, [r7, #12]
}
 8005b1a:	bf00      	nop
 8005b1c:	e7fe      	b.n	8005b1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005b1e:	f000 fc71 	bl	8006404 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b22:	4b1d      	ldr	r3, [pc, #116]	; (8005b98 <xTaskCheckForTimeOut+0xbc>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3a:	d102      	bne.n	8005b42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	e023      	b.n	8005b8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	4b15      	ldr	r3, [pc, #84]	; (8005b9c <xTaskCheckForTimeOut+0xc0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d007      	beq.n	8005b5e <xTaskCheckForTimeOut+0x82>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d302      	bcc.n	8005b5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	61fb      	str	r3, [r7, #28]
 8005b5c:	e015      	b.n	8005b8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d20b      	bcs.n	8005b80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	1ad2      	subs	r2, r2, r3
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff ff9b 	bl	8005ab0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	61fb      	str	r3, [r7, #28]
 8005b7e:	e004      	b.n	8005b8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005b86:	2301      	movs	r3, #1
 8005b88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005b8a:	f000 fc6b 	bl	8006464 <vPortExitCritical>

	return xReturn;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3720      	adds	r7, #32
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20000584 	.word	0x20000584
 8005b9c:	20000598 	.word	0x20000598

08005ba0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ba4:	4b03      	ldr	r3, [pc, #12]	; (8005bb4 <vTaskMissedYield+0x14>)
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
}
 8005baa:	bf00      	nop
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	20000594 	.word	0x20000594

08005bb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005bc0:	f000 f852 	bl	8005c68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bc4:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <prvIdleTask+0x28>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d9f9      	bls.n	8005bc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bcc:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <prvIdleTask+0x2c>)
 8005bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	f3bf 8f4f 	dsb	sy
 8005bd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005bdc:	e7f0      	b.n	8005bc0 <prvIdleTask+0x8>
 8005bde:	bf00      	nop
 8005be0:	20000484 	.word	0x20000484
 8005be4:	e000ed04 	.word	0xe000ed04

08005be8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005bee:	2300      	movs	r3, #0
 8005bf0:	607b      	str	r3, [r7, #4]
 8005bf2:	e00c      	b.n	8005c0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4a12      	ldr	r2, [pc, #72]	; (8005c48 <prvInitialiseTaskLists+0x60>)
 8005c00:	4413      	add	r3, r2
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fe fc94 	bl	8004530 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	607b      	str	r3, [r7, #4]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b06      	cmp	r3, #6
 8005c12:	d9ef      	bls.n	8005bf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c14:	480d      	ldr	r0, [pc, #52]	; (8005c4c <prvInitialiseTaskLists+0x64>)
 8005c16:	f7fe fc8b 	bl	8004530 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c1a:	480d      	ldr	r0, [pc, #52]	; (8005c50 <prvInitialiseTaskLists+0x68>)
 8005c1c:	f7fe fc88 	bl	8004530 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c20:	480c      	ldr	r0, [pc, #48]	; (8005c54 <prvInitialiseTaskLists+0x6c>)
 8005c22:	f7fe fc85 	bl	8004530 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c26:	480c      	ldr	r0, [pc, #48]	; (8005c58 <prvInitialiseTaskLists+0x70>)
 8005c28:	f7fe fc82 	bl	8004530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c2c:	480b      	ldr	r0, [pc, #44]	; (8005c5c <prvInitialiseTaskLists+0x74>)
 8005c2e:	f7fe fc7f 	bl	8004530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c32:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <prvInitialiseTaskLists+0x78>)
 8005c34:	4a05      	ldr	r2, [pc, #20]	; (8005c4c <prvInitialiseTaskLists+0x64>)
 8005c36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c38:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <prvInitialiseTaskLists+0x7c>)
 8005c3a:	4a05      	ldr	r2, [pc, #20]	; (8005c50 <prvInitialiseTaskLists+0x68>)
 8005c3c:	601a      	str	r2, [r3, #0]
}
 8005c3e:	bf00      	nop
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20000484 	.word	0x20000484
 8005c4c:	20000510 	.word	0x20000510
 8005c50:	20000524 	.word	0x20000524
 8005c54:	20000540 	.word	0x20000540
 8005c58:	20000554 	.word	0x20000554
 8005c5c:	2000056c 	.word	0x2000056c
 8005c60:	20000538 	.word	0x20000538
 8005c64:	2000053c 	.word	0x2000053c

08005c68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c6e:	e019      	b.n	8005ca4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c70:	f000 fbc8 	bl	8006404 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c74:	4b10      	ldr	r3, [pc, #64]	; (8005cb8 <prvCheckTasksWaitingTermination+0x50>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fe fcdf 	bl	8004644 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005c86:	4b0d      	ldr	r3, [pc, #52]	; (8005cbc <prvCheckTasksWaitingTermination+0x54>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	4a0b      	ldr	r2, [pc, #44]	; (8005cbc <prvCheckTasksWaitingTermination+0x54>)
 8005c8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <prvCheckTasksWaitingTermination+0x58>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3b01      	subs	r3, #1
 8005c96:	4a0a      	ldr	r2, [pc, #40]	; (8005cc0 <prvCheckTasksWaitingTermination+0x58>)
 8005c98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005c9a:	f000 fbe3 	bl	8006464 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f810 	bl	8005cc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ca4:	4b06      	ldr	r3, [pc, #24]	; (8005cc0 <prvCheckTasksWaitingTermination+0x58>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1e1      	bne.n	8005c70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cac:	bf00      	nop
 8005cae:	bf00      	nop
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000554 	.word	0x20000554
 8005cbc:	20000580 	.word	0x20000580
 8005cc0:	20000568 	.word	0x20000568

08005cc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	334c      	adds	r3, #76	; 0x4c
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f001 f991 	bl	8006ff8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d108      	bne.n	8005cf2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 fd7b 	bl	80067e0 <vPortFree>
				vPortFree( pxTCB );
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fd78 	bl	80067e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005cf0:	e018      	b.n	8005d24 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d103      	bne.n	8005d04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fd6f 	bl	80067e0 <vPortFree>
	}
 8005d02:	e00f      	b.n	8005d24 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d00a      	beq.n	8005d24 <prvDeleteTCB+0x60>
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	60fb      	str	r3, [r7, #12]
}
 8005d20:	bf00      	nop
 8005d22:	e7fe      	b.n	8005d22 <prvDeleteTCB+0x5e>
	}
 8005d24:	bf00      	nop
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d32:	4b0c      	ldr	r3, [pc, #48]	; (8005d64 <prvResetNextTaskUnblockTime+0x38>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d104      	bne.n	8005d46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005d3c:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <prvResetNextTaskUnblockTime+0x3c>)
 8005d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005d44:	e008      	b.n	8005d58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d46:	4b07      	ldr	r3, [pc, #28]	; (8005d64 <prvResetNextTaskUnblockTime+0x38>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	4a04      	ldr	r2, [pc, #16]	; (8005d68 <prvResetNextTaskUnblockTime+0x3c>)
 8005d56:	6013      	str	r3, [r2, #0]
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	20000538 	.word	0x20000538
 8005d68:	200005a0 	.word	0x200005a0

08005d6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005d72:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <xTaskGetSchedulerState+0x34>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d102      	bne.n	8005d80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	607b      	str	r3, [r7, #4]
 8005d7e:	e008      	b.n	8005d92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d80:	4b08      	ldr	r3, [pc, #32]	; (8005da4 <xTaskGetSchedulerState+0x38>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d102      	bne.n	8005d8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005d88:	2302      	movs	r3, #2
 8005d8a:	607b      	str	r3, [r7, #4]
 8005d8c:	e001      	b.n	8005d92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005d92:	687b      	ldr	r3, [r7, #4]
	}
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	2000058c 	.word	0x2000058c
 8005da4:	200005a8 	.word	0x200005a8

08005da8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d05e      	beq.n	8005e7c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dc2:	4b31      	ldr	r3, [pc, #196]	; (8005e88 <xTaskPriorityInherit+0xe0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d24e      	bcs.n	8005e6a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	db06      	blt.n	8005de2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dd4:	4b2c      	ldr	r3, [pc, #176]	; (8005e88 <xTaskPriorityInherit+0xe0>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dda:	f1c3 0207 	rsb	r2, r3, #7
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	6959      	ldr	r1, [r3, #20]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dea:	4613      	mov	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4a26      	ldr	r2, [pc, #152]	; (8005e8c <xTaskPriorityInherit+0xe4>)
 8005df4:	4413      	add	r3, r2
 8005df6:	4299      	cmp	r1, r3
 8005df8:	d12f      	bne.n	8005e5a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe fc20 	bl	8004644 <uxListRemove>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10a      	bne.n	8005e20 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	2201      	movs	r2, #1
 8005e10:	fa02 f303 	lsl.w	r3, r2, r3
 8005e14:	43da      	mvns	r2, r3
 8005e16:	4b1e      	ldr	r3, [pc, #120]	; (8005e90 <xTaskPriorityInherit+0xe8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	4a1c      	ldr	r2, [pc, #112]	; (8005e90 <xTaskPriorityInherit+0xe8>)
 8005e1e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e20:	4b19      	ldr	r3, [pc, #100]	; (8005e88 <xTaskPriorityInherit+0xe0>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2e:	2201      	movs	r2, #1
 8005e30:	409a      	lsls	r2, r3
 8005e32:	4b17      	ldr	r3, [pc, #92]	; (8005e90 <xTaskPriorityInherit+0xe8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	4a15      	ldr	r2, [pc, #84]	; (8005e90 <xTaskPriorityInherit+0xe8>)
 8005e3a:	6013      	str	r3, [r2, #0]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4a10      	ldr	r2, [pc, #64]	; (8005e8c <xTaskPriorityInherit+0xe4>)
 8005e4a:	441a      	add	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	4619      	mov	r1, r3
 8005e52:	4610      	mov	r0, r2
 8005e54:	f7fe fb99 	bl	800458a <vListInsertEnd>
 8005e58:	e004      	b.n	8005e64 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005e5a:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <xTaskPriorityInherit+0xe0>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005e64:	2301      	movs	r3, #1
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	e008      	b.n	8005e7c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e6e:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <xTaskPriorityInherit+0xe0>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d201      	bcs.n	8005e7c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
	}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20000480 	.word	0x20000480
 8005e8c:	20000484 	.word	0x20000484
 8005e90:	20000588 	.word	0x20000588

08005e94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d06e      	beq.n	8005f88 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005eaa:	4b3a      	ldr	r3, [pc, #232]	; (8005f94 <xTaskPriorityDisinherit+0x100>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d00a      	beq.n	8005eca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	60fb      	str	r3, [r7, #12]
}
 8005ec6:	bf00      	nop
 8005ec8:	e7fe      	b.n	8005ec8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10a      	bne.n	8005ee8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	60bb      	str	r3, [r7, #8]
}
 8005ee4:	bf00      	nop
 8005ee6:	e7fe      	b.n	8005ee6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eec:	1e5a      	subs	r2, r3, #1
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d044      	beq.n	8005f88 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d140      	bne.n	8005f88 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	3304      	adds	r3, #4
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fe fb9a 	bl	8004644 <uxListRemove>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d115      	bne.n	8005f42 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f1a:	491f      	ldr	r1, [pc, #124]	; (8005f98 <xTaskPriorityDisinherit+0x104>)
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10a      	bne.n	8005f42 <xTaskPriorityDisinherit+0xae>
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	2201      	movs	r2, #1
 8005f32:	fa02 f303 	lsl.w	r3, r2, r3
 8005f36:	43da      	mvns	r2, r3
 8005f38:	4b18      	ldr	r3, [pc, #96]	; (8005f9c <xTaskPriorityDisinherit+0x108>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	4a17      	ldr	r2, [pc, #92]	; (8005f9c <xTaskPriorityDisinherit+0x108>)
 8005f40:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4e:	f1c3 0207 	rsb	r2, r3, #7
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	409a      	lsls	r2, r3
 8005f5e:	4b0f      	ldr	r3, [pc, #60]	; (8005f9c <xTaskPriorityDisinherit+0x108>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	4a0d      	ldr	r2, [pc, #52]	; (8005f9c <xTaskPriorityDisinherit+0x108>)
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4a08      	ldr	r2, [pc, #32]	; (8005f98 <xTaskPriorityDisinherit+0x104>)
 8005f76:	441a      	add	r2, r3
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	3304      	adds	r3, #4
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4610      	mov	r0, r2
 8005f80:	f7fe fb03 	bl	800458a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f84:	2301      	movs	r3, #1
 8005f86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f88:	697b      	ldr	r3, [r7, #20]
	}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	20000480 	.word	0x20000480
 8005f98:	20000484 	.word	0x20000484
 8005f9c:	20000588 	.word	0x20000588

08005fa0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d077      	beq.n	80060a8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	60fb      	str	r3, [r7, #12]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d902      	bls.n	8005fe6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	61fb      	str	r3, [r7, #28]
 8005fe4:	e002      	b.n	8005fec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d058      	beq.n	80060a8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d153      	bne.n	80060a8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006000:	4b2b      	ldr	r3, [pc, #172]	; (80060b0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	429a      	cmp	r2, r3
 8006008:	d10a      	bne.n	8006020 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	60bb      	str	r3, [r7, #8]
}
 800601c:	bf00      	nop
 800601e:	e7fe      	b.n	800601e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	2b00      	cmp	r3, #0
 8006032:	db04      	blt.n	800603e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	f1c3 0207 	rsb	r2, r3, #7
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	6959      	ldr	r1, [r3, #20]
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4a19      	ldr	r2, [pc, #100]	; (80060b4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800604e:	4413      	add	r3, r2
 8006050:	4299      	cmp	r1, r3
 8006052:	d129      	bne.n	80060a8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	3304      	adds	r3, #4
 8006058:	4618      	mov	r0, r3
 800605a:	f7fe faf3 	bl	8004644 <uxListRemove>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10a      	bne.n	800607a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	2201      	movs	r2, #1
 800606a:	fa02 f303 	lsl.w	r3, r2, r3
 800606e:	43da      	mvns	r2, r3
 8006070:	4b11      	ldr	r3, [pc, #68]	; (80060b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4013      	ands	r3, r2
 8006076:	4a10      	ldr	r2, [pc, #64]	; (80060b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006078:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607e:	2201      	movs	r2, #1
 8006080:	409a      	lsls	r2, r3
 8006082:	4b0d      	ldr	r3, [pc, #52]	; (80060b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4313      	orrs	r3, r2
 8006088:	4a0b      	ldr	r2, [pc, #44]	; (80060b8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800608a:	6013      	str	r3, [r2, #0]
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006090:	4613      	mov	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4a06      	ldr	r2, [pc, #24]	; (80060b4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800609a:	441a      	add	r2, r3
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	3304      	adds	r3, #4
 80060a0:	4619      	mov	r1, r3
 80060a2:	4610      	mov	r0, r2
 80060a4:	f7fe fa71 	bl	800458a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060a8:	bf00      	nop
 80060aa:	3720      	adds	r7, #32
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20000480 	.word	0x20000480
 80060b4:	20000484 	.word	0x20000484
 80060b8:	20000588 	.word	0x20000588

080060bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80060c0:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d004      	beq.n	80060d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80060c8:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060ce:	3201      	adds	r2, #1
 80060d0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80060d2:	4b03      	ldr	r3, [pc, #12]	; (80060e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80060d4:	681b      	ldr	r3, [r3, #0]
	}
 80060d6:	4618      	mov	r0, r3
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	20000480 	.word	0x20000480

080060e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060ee:	4b29      	ldr	r3, [pc, #164]	; (8006194 <prvAddCurrentTaskToDelayedList+0xb0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060f4:	4b28      	ldr	r3, [pc, #160]	; (8006198 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3304      	adds	r3, #4
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fe faa2 	bl	8004644 <uxListRemove>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10b      	bne.n	800611e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006106:	4b24      	ldr	r3, [pc, #144]	; (8006198 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	2201      	movs	r2, #1
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	43da      	mvns	r2, r3
 8006114:	4b21      	ldr	r3, [pc, #132]	; (800619c <prvAddCurrentTaskToDelayedList+0xb8>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4013      	ands	r3, r2
 800611a:	4a20      	ldr	r2, [pc, #128]	; (800619c <prvAddCurrentTaskToDelayedList+0xb8>)
 800611c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006124:	d10a      	bne.n	800613c <prvAddCurrentTaskToDelayedList+0x58>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800612c:	4b1a      	ldr	r3, [pc, #104]	; (8006198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3304      	adds	r3, #4
 8006132:	4619      	mov	r1, r3
 8006134:	481a      	ldr	r0, [pc, #104]	; (80061a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006136:	f7fe fa28 	bl	800458a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800613a:	e026      	b.n	800618a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4413      	add	r3, r2
 8006142:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006144:	4b14      	ldr	r3, [pc, #80]	; (8006198 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	429a      	cmp	r2, r3
 8006152:	d209      	bcs.n	8006168 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006154:	4b13      	ldr	r3, [pc, #76]	; (80061a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	4b0f      	ldr	r3, [pc, #60]	; (8006198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3304      	adds	r3, #4
 800615e:	4619      	mov	r1, r3
 8006160:	4610      	mov	r0, r2
 8006162:	f7fe fa36 	bl	80045d2 <vListInsert>
}
 8006166:	e010      	b.n	800618a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006168:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3304      	adds	r3, #4
 8006172:	4619      	mov	r1, r3
 8006174:	4610      	mov	r0, r2
 8006176:	f7fe fa2c 	bl	80045d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800617a:	4b0c      	ldr	r3, [pc, #48]	; (80061ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	429a      	cmp	r2, r3
 8006182:	d202      	bcs.n	800618a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006184:	4a09      	ldr	r2, [pc, #36]	; (80061ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	6013      	str	r3, [r2, #0]
}
 800618a:	bf00      	nop
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20000584 	.word	0x20000584
 8006198:	20000480 	.word	0x20000480
 800619c:	20000588 	.word	0x20000588
 80061a0:	2000056c 	.word	0x2000056c
 80061a4:	2000053c 	.word	0x2000053c
 80061a8:	20000538 	.word	0x20000538
 80061ac:	200005a0 	.word	0x200005a0

080061b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3b04      	subs	r3, #4
 80061c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3b04      	subs	r3, #4
 80061ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f023 0201 	bic.w	r2, r3, #1
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	3b04      	subs	r3, #4
 80061de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061e0:	4a0c      	ldr	r2, [pc, #48]	; (8006214 <pxPortInitialiseStack+0x64>)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3b14      	subs	r3, #20
 80061ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	3b04      	subs	r3, #4
 80061f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f06f 0202 	mvn.w	r2, #2
 80061fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3b20      	subs	r3, #32
 8006204:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006206:	68fb      	ldr	r3, [r7, #12]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3714      	adds	r7, #20
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	08006219 	.word	0x08006219

08006218 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006222:	4b12      	ldr	r3, [pc, #72]	; (800626c <prvTaskExitError+0x54>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622a:	d00a      	beq.n	8006242 <prvTaskExitError+0x2a>
	__asm volatile
 800622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	60fb      	str	r3, [r7, #12]
}
 800623e:	bf00      	nop
 8006240:	e7fe      	b.n	8006240 <prvTaskExitError+0x28>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	60bb      	str	r3, [r7, #8]
}
 8006254:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006256:	bf00      	nop
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0fc      	beq.n	8006258 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800625e:	bf00      	nop
 8006260:	bf00      	nop
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	2000001c 	.word	0x2000001c

08006270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006270:	4b07      	ldr	r3, [pc, #28]	; (8006290 <pxCurrentTCBConst2>)
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	6808      	ldr	r0, [r1, #0]
 8006276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627a:	f380 8809 	msr	PSP, r0
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f380 8811 	msr	BASEPRI, r0
 800628a:	4770      	bx	lr
 800628c:	f3af 8000 	nop.w

08006290 <pxCurrentTCBConst2>:
 8006290:	20000480 	.word	0x20000480
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop

08006298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006298:	4808      	ldr	r0, [pc, #32]	; (80062bc <prvPortStartFirstTask+0x24>)
 800629a:	6800      	ldr	r0, [r0, #0]
 800629c:	6800      	ldr	r0, [r0, #0]
 800629e:	f380 8808 	msr	MSP, r0
 80062a2:	f04f 0000 	mov.w	r0, #0
 80062a6:	f380 8814 	msr	CONTROL, r0
 80062aa:	b662      	cpsie	i
 80062ac:	b661      	cpsie	f
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	df00      	svc	0
 80062b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80062ba:	bf00      	nop
 80062bc:	e000ed08 	.word	0xe000ed08

080062c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062c6:	4b46      	ldr	r3, [pc, #280]	; (80063e0 <xPortStartScheduler+0x120>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a46      	ldr	r2, [pc, #280]	; (80063e4 <xPortStartScheduler+0x124>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10a      	bne.n	80062e6 <xPortStartScheduler+0x26>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	613b      	str	r3, [r7, #16]
}
 80062e2:	bf00      	nop
 80062e4:	e7fe      	b.n	80062e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062e6:	4b3e      	ldr	r3, [pc, #248]	; (80063e0 <xPortStartScheduler+0x120>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a3f      	ldr	r2, [pc, #252]	; (80063e8 <xPortStartScheduler+0x128>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d10a      	bne.n	8006306 <xPortStartScheduler+0x46>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	60fb      	str	r3, [r7, #12]
}
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006306:	4b39      	ldr	r3, [pc, #228]	; (80063ec <xPortStartScheduler+0x12c>)
 8006308:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	b2db      	uxtb	r3, r3
 8006310:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	22ff      	movs	r2, #255	; 0xff
 8006316:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006328:	b2da      	uxtb	r2, r3
 800632a:	4b31      	ldr	r3, [pc, #196]	; (80063f0 <xPortStartScheduler+0x130>)
 800632c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800632e:	4b31      	ldr	r3, [pc, #196]	; (80063f4 <xPortStartScheduler+0x134>)
 8006330:	2207      	movs	r2, #7
 8006332:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006334:	e009      	b.n	800634a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006336:	4b2f      	ldr	r3, [pc, #188]	; (80063f4 <xPortStartScheduler+0x134>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3b01      	subs	r3, #1
 800633c:	4a2d      	ldr	r2, [pc, #180]	; (80063f4 <xPortStartScheduler+0x134>)
 800633e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	b2db      	uxtb	r3, r3
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	b2db      	uxtb	r3, r3
 8006348:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800634a:	78fb      	ldrb	r3, [r7, #3]
 800634c:	b2db      	uxtb	r3, r3
 800634e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006352:	2b80      	cmp	r3, #128	; 0x80
 8006354:	d0ef      	beq.n	8006336 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006356:	4b27      	ldr	r3, [pc, #156]	; (80063f4 <xPortStartScheduler+0x134>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f1c3 0307 	rsb	r3, r3, #7
 800635e:	2b04      	cmp	r3, #4
 8006360:	d00a      	beq.n	8006378 <xPortStartScheduler+0xb8>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	60bb      	str	r3, [r7, #8]
}
 8006374:	bf00      	nop
 8006376:	e7fe      	b.n	8006376 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006378:	4b1e      	ldr	r3, [pc, #120]	; (80063f4 <xPortStartScheduler+0x134>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	4a1d      	ldr	r2, [pc, #116]	; (80063f4 <xPortStartScheduler+0x134>)
 8006380:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006382:	4b1c      	ldr	r3, [pc, #112]	; (80063f4 <xPortStartScheduler+0x134>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800638a:	4a1a      	ldr	r2, [pc, #104]	; (80063f4 <xPortStartScheduler+0x134>)
 800638c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	b2da      	uxtb	r2, r3
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006396:	4b18      	ldr	r3, [pc, #96]	; (80063f8 <xPortStartScheduler+0x138>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a17      	ldr	r2, [pc, #92]	; (80063f8 <xPortStartScheduler+0x138>)
 800639c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80063a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80063a2:	4b15      	ldr	r3, [pc, #84]	; (80063f8 <xPortStartScheduler+0x138>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a14      	ldr	r2, [pc, #80]	; (80063f8 <xPortStartScheduler+0x138>)
 80063a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80063ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80063ae:	f000 f8dd 	bl	800656c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80063b2:	4b12      	ldr	r3, [pc, #72]	; (80063fc <xPortStartScheduler+0x13c>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80063b8:	f000 f8fc 	bl	80065b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063bc:	4b10      	ldr	r3, [pc, #64]	; (8006400 <xPortStartScheduler+0x140>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a0f      	ldr	r2, [pc, #60]	; (8006400 <xPortStartScheduler+0x140>)
 80063c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80063c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063c8:	f7ff ff66 	bl	8006298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063cc:	f7ff fa88 	bl	80058e0 <vTaskSwitchContext>
	prvTaskExitError();
 80063d0:	f7ff ff22 	bl	8006218 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	e000ed00 	.word	0xe000ed00
 80063e4:	410fc271 	.word	0x410fc271
 80063e8:	410fc270 	.word	0x410fc270
 80063ec:	e000e400 	.word	0xe000e400
 80063f0:	200005ac 	.word	0x200005ac
 80063f4:	200005b0 	.word	0x200005b0
 80063f8:	e000ed20 	.word	0xe000ed20
 80063fc:	2000001c 	.word	0x2000001c
 8006400:	e000ef34 	.word	0xe000ef34

08006404 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	607b      	str	r3, [r7, #4]
}
 800641c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800641e:	4b0f      	ldr	r3, [pc, #60]	; (800645c <vPortEnterCritical+0x58>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3301      	adds	r3, #1
 8006424:	4a0d      	ldr	r2, [pc, #52]	; (800645c <vPortEnterCritical+0x58>)
 8006426:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006428:	4b0c      	ldr	r3, [pc, #48]	; (800645c <vPortEnterCritical+0x58>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d10f      	bne.n	8006450 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006430:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <vPortEnterCritical+0x5c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <vPortEnterCritical+0x4c>
	__asm volatile
 800643a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	603b      	str	r3, [r7, #0]
}
 800644c:	bf00      	nop
 800644e:	e7fe      	b.n	800644e <vPortEnterCritical+0x4a>
	}
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	2000001c 	.word	0x2000001c
 8006460:	e000ed04 	.word	0xe000ed04

08006464 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800646a:	4b12      	ldr	r3, [pc, #72]	; (80064b4 <vPortExitCritical+0x50>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10a      	bne.n	8006488 <vPortExitCritical+0x24>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	607b      	str	r3, [r7, #4]
}
 8006484:	bf00      	nop
 8006486:	e7fe      	b.n	8006486 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006488:	4b0a      	ldr	r3, [pc, #40]	; (80064b4 <vPortExitCritical+0x50>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3b01      	subs	r3, #1
 800648e:	4a09      	ldr	r2, [pc, #36]	; (80064b4 <vPortExitCritical+0x50>)
 8006490:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006492:	4b08      	ldr	r3, [pc, #32]	; (80064b4 <vPortExitCritical+0x50>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d105      	bne.n	80064a6 <vPortExitCritical+0x42>
 800649a:	2300      	movs	r3, #0
 800649c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	f383 8811 	msr	BASEPRI, r3
}
 80064a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80064a6:	bf00      	nop
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	2000001c 	.word	0x2000001c
	...

080064c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064c0:	f3ef 8009 	mrs	r0, PSP
 80064c4:	f3bf 8f6f 	isb	sy
 80064c8:	4b15      	ldr	r3, [pc, #84]	; (8006520 <pxCurrentTCBConst>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	f01e 0f10 	tst.w	lr, #16
 80064d0:	bf08      	it	eq
 80064d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064da:	6010      	str	r0, [r2, #0]
 80064dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80064e4:	f380 8811 	msr	BASEPRI, r0
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f7ff f9f6 	bl	80058e0 <vTaskSwitchContext>
 80064f4:	f04f 0000 	mov.w	r0, #0
 80064f8:	f380 8811 	msr	BASEPRI, r0
 80064fc:	bc09      	pop	{r0, r3}
 80064fe:	6819      	ldr	r1, [r3, #0]
 8006500:	6808      	ldr	r0, [r1, #0]
 8006502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006506:	f01e 0f10 	tst.w	lr, #16
 800650a:	bf08      	it	eq
 800650c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006510:	f380 8809 	msr	PSP, r0
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	f3af 8000 	nop.w

08006520 <pxCurrentTCBConst>:
 8006520:	20000480 	.word	0x20000480
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop

08006528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	607b      	str	r3, [r7, #4]
}
 8006540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006542:	f7ff f915 	bl	8005770 <xTaskIncrementTick>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800654c:	4b06      	ldr	r3, [pc, #24]	; (8006568 <SysTick_Handler+0x40>)
 800654e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006552:	601a      	str	r2, [r3, #0]
 8006554:	2300      	movs	r3, #0
 8006556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	f383 8811 	msr	BASEPRI, r3
}
 800655e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006560:	bf00      	nop
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	e000ed04 	.word	0xe000ed04

0800656c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006570:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <vPortSetupTimerInterrupt+0x34>)
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006576:	4b0b      	ldr	r3, [pc, #44]	; (80065a4 <vPortSetupTimerInterrupt+0x38>)
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800657c:	4b0a      	ldr	r3, [pc, #40]	; (80065a8 <vPortSetupTimerInterrupt+0x3c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a0a      	ldr	r2, [pc, #40]	; (80065ac <vPortSetupTimerInterrupt+0x40>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	099b      	lsrs	r3, r3, #6
 8006588:	4a09      	ldr	r2, [pc, #36]	; (80065b0 <vPortSetupTimerInterrupt+0x44>)
 800658a:	3b01      	subs	r3, #1
 800658c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800658e:	4b04      	ldr	r3, [pc, #16]	; (80065a0 <vPortSetupTimerInterrupt+0x34>)
 8006590:	2207      	movs	r2, #7
 8006592:	601a      	str	r2, [r3, #0]
}
 8006594:	bf00      	nop
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	e000e010 	.word	0xe000e010
 80065a4:	e000e018 	.word	0xe000e018
 80065a8:	20000010 	.word	0x20000010
 80065ac:	10624dd3 	.word	0x10624dd3
 80065b0:	e000e014 	.word	0xe000e014

080065b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80065b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80065c4 <vPortEnableVFP+0x10>
 80065b8:	6801      	ldr	r1, [r0, #0]
 80065ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80065be:	6001      	str	r1, [r0, #0]
 80065c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065c2:	bf00      	nop
 80065c4:	e000ed88 	.word	0xe000ed88

080065c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065ce:	f3ef 8305 	mrs	r3, IPSR
 80065d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b0f      	cmp	r3, #15
 80065d8:	d914      	bls.n	8006604 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065da:	4a17      	ldr	r2, [pc, #92]	; (8006638 <vPortValidateInterruptPriority+0x70>)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065e4:	4b15      	ldr	r3, [pc, #84]	; (800663c <vPortValidateInterruptPriority+0x74>)
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	7afa      	ldrb	r2, [r7, #11]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d20a      	bcs.n	8006604 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	607b      	str	r3, [r7, #4]
}
 8006600:	bf00      	nop
 8006602:	e7fe      	b.n	8006602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006604:	4b0e      	ldr	r3, [pc, #56]	; (8006640 <vPortValidateInterruptPriority+0x78>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800660c:	4b0d      	ldr	r3, [pc, #52]	; (8006644 <vPortValidateInterruptPriority+0x7c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	d90a      	bls.n	800662a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	603b      	str	r3, [r7, #0]
}
 8006626:	bf00      	nop
 8006628:	e7fe      	b.n	8006628 <vPortValidateInterruptPriority+0x60>
	}
 800662a:	bf00      	nop
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	e000e3f0 	.word	0xe000e3f0
 800663c:	200005ac 	.word	0x200005ac
 8006640:	e000ed0c 	.word	0xe000ed0c
 8006644:	200005b0 	.word	0x200005b0

08006648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08a      	sub	sp, #40	; 0x28
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006650:	2300      	movs	r3, #0
 8006652:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006654:	f7fe ffe2 	bl	800561c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006658:	4b5b      	ldr	r3, [pc, #364]	; (80067c8 <pvPortMalloc+0x180>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d101      	bne.n	8006664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006660:	f000 f920 	bl	80068a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006664:	4b59      	ldr	r3, [pc, #356]	; (80067cc <pvPortMalloc+0x184>)
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4013      	ands	r3, r2
 800666c:	2b00      	cmp	r3, #0
 800666e:	f040 8093 	bne.w	8006798 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01d      	beq.n	80066b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006678:	2208      	movs	r2, #8
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4413      	add	r3, r2
 800667e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	2b00      	cmp	r3, #0
 8006688:	d014      	beq.n	80066b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f023 0307 	bic.w	r3, r3, #7
 8006690:	3308      	adds	r3, #8
 8006692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <pvPortMalloc+0x6c>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	617b      	str	r3, [r7, #20]
}
 80066b0:	bf00      	nop
 80066b2:	e7fe      	b.n	80066b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d06e      	beq.n	8006798 <pvPortMalloc+0x150>
 80066ba:	4b45      	ldr	r3, [pc, #276]	; (80067d0 <pvPortMalloc+0x188>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d869      	bhi.n	8006798 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066c4:	4b43      	ldr	r3, [pc, #268]	; (80067d4 <pvPortMalloc+0x18c>)
 80066c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066c8:	4b42      	ldr	r3, [pc, #264]	; (80067d4 <pvPortMalloc+0x18c>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066ce:	e004      	b.n	80066da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d903      	bls.n	80066ec <pvPortMalloc+0xa4>
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f1      	bne.n	80066d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066ec:	4b36      	ldr	r3, [pc, #216]	; (80067c8 <pvPortMalloc+0x180>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d050      	beq.n	8006798 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2208      	movs	r2, #8
 80066fc:	4413      	add	r3, r2
 80066fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	1ad2      	subs	r2, r2, r3
 8006710:	2308      	movs	r3, #8
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	429a      	cmp	r2, r3
 8006716:	d91f      	bls.n	8006758 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4413      	add	r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <pvPortMalloc+0xf8>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	613b      	str	r3, [r7, #16]
}
 800673c:	bf00      	nop
 800673e:	e7fe      	b.n	800673e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	1ad2      	subs	r2, r2, r3
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006752:	69b8      	ldr	r0, [r7, #24]
 8006754:	f000 f908 	bl	8006968 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006758:	4b1d      	ldr	r3, [pc, #116]	; (80067d0 <pvPortMalloc+0x188>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	4a1b      	ldr	r2, [pc, #108]	; (80067d0 <pvPortMalloc+0x188>)
 8006764:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006766:	4b1a      	ldr	r3, [pc, #104]	; (80067d0 <pvPortMalloc+0x188>)
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	4b1b      	ldr	r3, [pc, #108]	; (80067d8 <pvPortMalloc+0x190>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	429a      	cmp	r2, r3
 8006770:	d203      	bcs.n	800677a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006772:	4b17      	ldr	r3, [pc, #92]	; (80067d0 <pvPortMalloc+0x188>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a18      	ldr	r2, [pc, #96]	; (80067d8 <pvPortMalloc+0x190>)
 8006778:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	4b13      	ldr	r3, [pc, #76]	; (80067cc <pvPortMalloc+0x184>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	431a      	orrs	r2, r3
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	2200      	movs	r2, #0
 800678c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800678e:	4b13      	ldr	r3, [pc, #76]	; (80067dc <pvPortMalloc+0x194>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3301      	adds	r3, #1
 8006794:	4a11      	ldr	r2, [pc, #68]	; (80067dc <pvPortMalloc+0x194>)
 8006796:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006798:	f7fe ff4e 	bl	8005638 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	f003 0307 	and.w	r3, r3, #7
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <pvPortMalloc+0x174>
	__asm volatile
 80067a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	60fb      	str	r3, [r7, #12]
}
 80067b8:	bf00      	nop
 80067ba:	e7fe      	b.n	80067ba <pvPortMalloc+0x172>
	return pvReturn;
 80067bc:	69fb      	ldr	r3, [r7, #28]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3728      	adds	r7, #40	; 0x28
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	200041bc 	.word	0x200041bc
 80067cc:	200041d0 	.word	0x200041d0
 80067d0:	200041c0 	.word	0x200041c0
 80067d4:	200041b4 	.word	0x200041b4
 80067d8:	200041c4 	.word	0x200041c4
 80067dc:	200041c8 	.word	0x200041c8

080067e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d04d      	beq.n	800688e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067f2:	2308      	movs	r3, #8
 80067f4:	425b      	negs	r3, r3
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4413      	add	r3, r2
 80067fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	4b24      	ldr	r3, [pc, #144]	; (8006898 <vPortFree+0xb8>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4013      	ands	r3, r2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10a      	bne.n	8006824 <vPortFree+0x44>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	60fb      	str	r3, [r7, #12]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00a      	beq.n	8006842 <vPortFree+0x62>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	60bb      	str	r3, [r7, #8]
}
 800683e:	bf00      	nop
 8006840:	e7fe      	b.n	8006840 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	4b14      	ldr	r3, [pc, #80]	; (8006898 <vPortFree+0xb8>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4013      	ands	r3, r2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01e      	beq.n	800688e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d11a      	bne.n	800688e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	4b0e      	ldr	r3, [pc, #56]	; (8006898 <vPortFree+0xb8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	43db      	mvns	r3, r3
 8006862:	401a      	ands	r2, r3
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006868:	f7fe fed8 	bl	800561c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	4b0a      	ldr	r3, [pc, #40]	; (800689c <vPortFree+0xbc>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4413      	add	r3, r2
 8006876:	4a09      	ldr	r2, [pc, #36]	; (800689c <vPortFree+0xbc>)
 8006878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800687a:	6938      	ldr	r0, [r7, #16]
 800687c:	f000 f874 	bl	8006968 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006880:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <vPortFree+0xc0>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3301      	adds	r3, #1
 8006886:	4a06      	ldr	r2, [pc, #24]	; (80068a0 <vPortFree+0xc0>)
 8006888:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800688a:	f7fe fed5 	bl	8005638 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800688e:	bf00      	nop
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	200041d0 	.word	0x200041d0
 800689c:	200041c0 	.word	0x200041c0
 80068a0:	200041cc 	.word	0x200041cc

080068a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80068aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80068ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068b0:	4b27      	ldr	r3, [pc, #156]	; (8006950 <prvHeapInit+0xac>)
 80068b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00c      	beq.n	80068d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3307      	adds	r3, #7
 80068c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 0307 	bic.w	r3, r3, #7
 80068ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	4a1f      	ldr	r2, [pc, #124]	; (8006950 <prvHeapInit+0xac>)
 80068d4:	4413      	add	r3, r2
 80068d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068dc:	4a1d      	ldr	r2, [pc, #116]	; (8006954 <prvHeapInit+0xb0>)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068e2:	4b1c      	ldr	r3, [pc, #112]	; (8006954 <prvHeapInit+0xb0>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68ba      	ldr	r2, [r7, #8]
 80068ec:	4413      	add	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068f0:	2208      	movs	r2, #8
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0307 	bic.w	r3, r3, #7
 80068fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4a15      	ldr	r2, [pc, #84]	; (8006958 <prvHeapInit+0xb4>)
 8006904:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006906:	4b14      	ldr	r3, [pc, #80]	; (8006958 <prvHeapInit+0xb4>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2200      	movs	r2, #0
 800690c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800690e:	4b12      	ldr	r3, [pc, #72]	; (8006958 <prvHeapInit+0xb4>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2200      	movs	r2, #0
 8006914:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	1ad2      	subs	r2, r2, r3
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006924:	4b0c      	ldr	r3, [pc, #48]	; (8006958 <prvHeapInit+0xb4>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	4a0a      	ldr	r2, [pc, #40]	; (800695c <prvHeapInit+0xb8>)
 8006932:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	4a09      	ldr	r2, [pc, #36]	; (8006960 <prvHeapInit+0xbc>)
 800693a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800693c:	4b09      	ldr	r3, [pc, #36]	; (8006964 <prvHeapInit+0xc0>)
 800693e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006942:	601a      	str	r2, [r3, #0]
}
 8006944:	bf00      	nop
 8006946:	3714      	adds	r7, #20
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	200005b4 	.word	0x200005b4
 8006954:	200041b4 	.word	0x200041b4
 8006958:	200041bc 	.word	0x200041bc
 800695c:	200041c4 	.word	0x200041c4
 8006960:	200041c0 	.word	0x200041c0
 8006964:	200041d0 	.word	0x200041d0

08006968 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006970:	4b28      	ldr	r3, [pc, #160]	; (8006a14 <prvInsertBlockIntoFreeList+0xac>)
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	e002      	b.n	800697c <prvInsertBlockIntoFreeList+0x14>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	429a      	cmp	r2, r3
 8006984:	d8f7      	bhi.n	8006976 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	4413      	add	r3, r2
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	429a      	cmp	r2, r3
 8006996:	d108      	bne.n	80069aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	441a      	add	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	441a      	add	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d118      	bne.n	80069f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	4b15      	ldr	r3, [pc, #84]	; (8006a18 <prvInsertBlockIntoFreeList+0xb0>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d00d      	beq.n	80069e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	441a      	add	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	e008      	b.n	80069f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069e6:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <prvInsertBlockIntoFreeList+0xb0>)
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	601a      	str	r2, [r3, #0]
 80069ee:	e003      	b.n	80069f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d002      	beq.n	8006a06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a06:	bf00      	nop
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	200041b4 	.word	0x200041b4
 8006a18:	200041bc 	.word	0x200041bc

08006a1c <std>:
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	b510      	push	{r4, lr}
 8006a20:	4604      	mov	r4, r0
 8006a22:	e9c0 3300 	strd	r3, r3, [r0]
 8006a26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a2a:	6083      	str	r3, [r0, #8]
 8006a2c:	8181      	strh	r1, [r0, #12]
 8006a2e:	6643      	str	r3, [r0, #100]	; 0x64
 8006a30:	81c2      	strh	r2, [r0, #14]
 8006a32:	6183      	str	r3, [r0, #24]
 8006a34:	4619      	mov	r1, r3
 8006a36:	2208      	movs	r2, #8
 8006a38:	305c      	adds	r0, #92	; 0x5c
 8006a3a:	f000 fac5 	bl	8006fc8 <memset>
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <std+0x58>)
 8006a40:	6263      	str	r3, [r4, #36]	; 0x24
 8006a42:	4b0d      	ldr	r3, [pc, #52]	; (8006a78 <std+0x5c>)
 8006a44:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a46:	4b0d      	ldr	r3, [pc, #52]	; (8006a7c <std+0x60>)
 8006a48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a4a:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <std+0x64>)
 8006a4c:	6323      	str	r3, [r4, #48]	; 0x30
 8006a4e:	4b0d      	ldr	r3, [pc, #52]	; (8006a84 <std+0x68>)
 8006a50:	6224      	str	r4, [r4, #32]
 8006a52:	429c      	cmp	r4, r3
 8006a54:	d006      	beq.n	8006a64 <std+0x48>
 8006a56:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006a5a:	4294      	cmp	r4, r2
 8006a5c:	d002      	beq.n	8006a64 <std+0x48>
 8006a5e:	33d0      	adds	r3, #208	; 0xd0
 8006a60:	429c      	cmp	r4, r3
 8006a62:	d105      	bne.n	8006a70 <std+0x54>
 8006a64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a6c:	f000 bb7a 	b.w	8007164 <__retarget_lock_init_recursive>
 8006a70:	bd10      	pop	{r4, pc}
 8006a72:	bf00      	nop
 8006a74:	08006e19 	.word	0x08006e19
 8006a78:	08006e3b 	.word	0x08006e3b
 8006a7c:	08006e73 	.word	0x08006e73
 8006a80:	08006e97 	.word	0x08006e97
 8006a84:	200041d4 	.word	0x200041d4

08006a88 <stdio_exit_handler>:
 8006a88:	4a02      	ldr	r2, [pc, #8]	; (8006a94 <stdio_exit_handler+0xc>)
 8006a8a:	4903      	ldr	r1, [pc, #12]	; (8006a98 <stdio_exit_handler+0x10>)
 8006a8c:	4803      	ldr	r0, [pc, #12]	; (8006a9c <stdio_exit_handler+0x14>)
 8006a8e:	f000 b869 	b.w	8006b64 <_fwalk_sglue>
 8006a92:	bf00      	nop
 8006a94:	20000020 	.word	0x20000020
 8006a98:	08007ced 	.word	0x08007ced
 8006a9c:	2000002c 	.word	0x2000002c

08006aa0 <cleanup_stdio>:
 8006aa0:	6841      	ldr	r1, [r0, #4]
 8006aa2:	4b0c      	ldr	r3, [pc, #48]	; (8006ad4 <cleanup_stdio+0x34>)
 8006aa4:	4299      	cmp	r1, r3
 8006aa6:	b510      	push	{r4, lr}
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	d001      	beq.n	8006ab0 <cleanup_stdio+0x10>
 8006aac:	f001 f91e 	bl	8007cec <_fflush_r>
 8006ab0:	68a1      	ldr	r1, [r4, #8]
 8006ab2:	4b09      	ldr	r3, [pc, #36]	; (8006ad8 <cleanup_stdio+0x38>)
 8006ab4:	4299      	cmp	r1, r3
 8006ab6:	d002      	beq.n	8006abe <cleanup_stdio+0x1e>
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f001 f917 	bl	8007cec <_fflush_r>
 8006abe:	68e1      	ldr	r1, [r4, #12]
 8006ac0:	4b06      	ldr	r3, [pc, #24]	; (8006adc <cleanup_stdio+0x3c>)
 8006ac2:	4299      	cmp	r1, r3
 8006ac4:	d004      	beq.n	8006ad0 <cleanup_stdio+0x30>
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006acc:	f001 b90e 	b.w	8007cec <_fflush_r>
 8006ad0:	bd10      	pop	{r4, pc}
 8006ad2:	bf00      	nop
 8006ad4:	200041d4 	.word	0x200041d4
 8006ad8:	2000423c 	.word	0x2000423c
 8006adc:	200042a4 	.word	0x200042a4

08006ae0 <global_stdio_init.part.0>:
 8006ae0:	b510      	push	{r4, lr}
 8006ae2:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <global_stdio_init.part.0+0x30>)
 8006ae4:	4c0b      	ldr	r4, [pc, #44]	; (8006b14 <global_stdio_init.part.0+0x34>)
 8006ae6:	4a0c      	ldr	r2, [pc, #48]	; (8006b18 <global_stdio_init.part.0+0x38>)
 8006ae8:	601a      	str	r2, [r3, #0]
 8006aea:	4620      	mov	r0, r4
 8006aec:	2200      	movs	r2, #0
 8006aee:	2104      	movs	r1, #4
 8006af0:	f7ff ff94 	bl	8006a1c <std>
 8006af4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006af8:	2201      	movs	r2, #1
 8006afa:	2109      	movs	r1, #9
 8006afc:	f7ff ff8e 	bl	8006a1c <std>
 8006b00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006b04:	2202      	movs	r2, #2
 8006b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b0a:	2112      	movs	r1, #18
 8006b0c:	f7ff bf86 	b.w	8006a1c <std>
 8006b10:	2000430c 	.word	0x2000430c
 8006b14:	200041d4 	.word	0x200041d4
 8006b18:	08006a89 	.word	0x08006a89

08006b1c <__sfp_lock_acquire>:
 8006b1c:	4801      	ldr	r0, [pc, #4]	; (8006b24 <__sfp_lock_acquire+0x8>)
 8006b1e:	f000 bb22 	b.w	8007166 <__retarget_lock_acquire_recursive>
 8006b22:	bf00      	nop
 8006b24:	20004315 	.word	0x20004315

08006b28 <__sfp_lock_release>:
 8006b28:	4801      	ldr	r0, [pc, #4]	; (8006b30 <__sfp_lock_release+0x8>)
 8006b2a:	f000 bb1d 	b.w	8007168 <__retarget_lock_release_recursive>
 8006b2e:	bf00      	nop
 8006b30:	20004315 	.word	0x20004315

08006b34 <__sinit>:
 8006b34:	b510      	push	{r4, lr}
 8006b36:	4604      	mov	r4, r0
 8006b38:	f7ff fff0 	bl	8006b1c <__sfp_lock_acquire>
 8006b3c:	6a23      	ldr	r3, [r4, #32]
 8006b3e:	b11b      	cbz	r3, 8006b48 <__sinit+0x14>
 8006b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b44:	f7ff bff0 	b.w	8006b28 <__sfp_lock_release>
 8006b48:	4b04      	ldr	r3, [pc, #16]	; (8006b5c <__sinit+0x28>)
 8006b4a:	6223      	str	r3, [r4, #32]
 8006b4c:	4b04      	ldr	r3, [pc, #16]	; (8006b60 <__sinit+0x2c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1f5      	bne.n	8006b40 <__sinit+0xc>
 8006b54:	f7ff ffc4 	bl	8006ae0 <global_stdio_init.part.0>
 8006b58:	e7f2      	b.n	8006b40 <__sinit+0xc>
 8006b5a:	bf00      	nop
 8006b5c:	08006aa1 	.word	0x08006aa1
 8006b60:	2000430c 	.word	0x2000430c

08006b64 <_fwalk_sglue>:
 8006b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b68:	4607      	mov	r7, r0
 8006b6a:	4688      	mov	r8, r1
 8006b6c:	4614      	mov	r4, r2
 8006b6e:	2600      	movs	r6, #0
 8006b70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b74:	f1b9 0901 	subs.w	r9, r9, #1
 8006b78:	d505      	bpl.n	8006b86 <_fwalk_sglue+0x22>
 8006b7a:	6824      	ldr	r4, [r4, #0]
 8006b7c:	2c00      	cmp	r4, #0
 8006b7e:	d1f7      	bne.n	8006b70 <_fwalk_sglue+0xc>
 8006b80:	4630      	mov	r0, r6
 8006b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b86:	89ab      	ldrh	r3, [r5, #12]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d907      	bls.n	8006b9c <_fwalk_sglue+0x38>
 8006b8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b90:	3301      	adds	r3, #1
 8006b92:	d003      	beq.n	8006b9c <_fwalk_sglue+0x38>
 8006b94:	4629      	mov	r1, r5
 8006b96:	4638      	mov	r0, r7
 8006b98:	47c0      	blx	r8
 8006b9a:	4306      	orrs	r6, r0
 8006b9c:	3568      	adds	r5, #104	; 0x68
 8006b9e:	e7e9      	b.n	8006b74 <_fwalk_sglue+0x10>

08006ba0 <iprintf>:
 8006ba0:	b40f      	push	{r0, r1, r2, r3}
 8006ba2:	b507      	push	{r0, r1, r2, lr}
 8006ba4:	4906      	ldr	r1, [pc, #24]	; (8006bc0 <iprintf+0x20>)
 8006ba6:	ab04      	add	r3, sp, #16
 8006ba8:	6808      	ldr	r0, [r1, #0]
 8006baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bae:	6881      	ldr	r1, [r0, #8]
 8006bb0:	9301      	str	r3, [sp, #4]
 8006bb2:	f000 fd6b 	bl	800768c <_vfiprintf_r>
 8006bb6:	b003      	add	sp, #12
 8006bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bbc:	b004      	add	sp, #16
 8006bbe:	4770      	bx	lr
 8006bc0:	20000078 	.word	0x20000078

08006bc4 <_puts_r>:
 8006bc4:	6a03      	ldr	r3, [r0, #32]
 8006bc6:	b570      	push	{r4, r5, r6, lr}
 8006bc8:	6884      	ldr	r4, [r0, #8]
 8006bca:	4605      	mov	r5, r0
 8006bcc:	460e      	mov	r6, r1
 8006bce:	b90b      	cbnz	r3, 8006bd4 <_puts_r+0x10>
 8006bd0:	f7ff ffb0 	bl	8006b34 <__sinit>
 8006bd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bd6:	07db      	lsls	r3, r3, #31
 8006bd8:	d405      	bmi.n	8006be6 <_puts_r+0x22>
 8006bda:	89a3      	ldrh	r3, [r4, #12]
 8006bdc:	0598      	lsls	r0, r3, #22
 8006bde:	d402      	bmi.n	8006be6 <_puts_r+0x22>
 8006be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006be2:	f000 fac0 	bl	8007166 <__retarget_lock_acquire_recursive>
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	0719      	lsls	r1, r3, #28
 8006bea:	d513      	bpl.n	8006c14 <_puts_r+0x50>
 8006bec:	6923      	ldr	r3, [r4, #16]
 8006bee:	b18b      	cbz	r3, 8006c14 <_puts_r+0x50>
 8006bf0:	3e01      	subs	r6, #1
 8006bf2:	68a3      	ldr	r3, [r4, #8]
 8006bf4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	60a3      	str	r3, [r4, #8]
 8006bfc:	b9e9      	cbnz	r1, 8006c3a <_puts_r+0x76>
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	da2e      	bge.n	8006c60 <_puts_r+0x9c>
 8006c02:	4622      	mov	r2, r4
 8006c04:	210a      	movs	r1, #10
 8006c06:	4628      	mov	r0, r5
 8006c08:	f000 f949 	bl	8006e9e <__swbuf_r>
 8006c0c:	3001      	adds	r0, #1
 8006c0e:	d007      	beq.n	8006c20 <_puts_r+0x5c>
 8006c10:	250a      	movs	r5, #10
 8006c12:	e007      	b.n	8006c24 <_puts_r+0x60>
 8006c14:	4621      	mov	r1, r4
 8006c16:	4628      	mov	r0, r5
 8006c18:	f000 f97e 	bl	8006f18 <__swsetup_r>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d0e7      	beq.n	8006bf0 <_puts_r+0x2c>
 8006c20:	f04f 35ff 	mov.w	r5, #4294967295
 8006c24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c26:	07da      	lsls	r2, r3, #31
 8006c28:	d405      	bmi.n	8006c36 <_puts_r+0x72>
 8006c2a:	89a3      	ldrh	r3, [r4, #12]
 8006c2c:	059b      	lsls	r3, r3, #22
 8006c2e:	d402      	bmi.n	8006c36 <_puts_r+0x72>
 8006c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c32:	f000 fa99 	bl	8007168 <__retarget_lock_release_recursive>
 8006c36:	4628      	mov	r0, r5
 8006c38:	bd70      	pop	{r4, r5, r6, pc}
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	da04      	bge.n	8006c48 <_puts_r+0x84>
 8006c3e:	69a2      	ldr	r2, [r4, #24]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	dc06      	bgt.n	8006c52 <_puts_r+0x8e>
 8006c44:	290a      	cmp	r1, #10
 8006c46:	d004      	beq.n	8006c52 <_puts_r+0x8e>
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	6022      	str	r2, [r4, #0]
 8006c4e:	7019      	strb	r1, [r3, #0]
 8006c50:	e7cf      	b.n	8006bf2 <_puts_r+0x2e>
 8006c52:	4622      	mov	r2, r4
 8006c54:	4628      	mov	r0, r5
 8006c56:	f000 f922 	bl	8006e9e <__swbuf_r>
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	d1c9      	bne.n	8006bf2 <_puts_r+0x2e>
 8006c5e:	e7df      	b.n	8006c20 <_puts_r+0x5c>
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	250a      	movs	r5, #10
 8006c64:	1c5a      	adds	r2, r3, #1
 8006c66:	6022      	str	r2, [r4, #0]
 8006c68:	701d      	strb	r5, [r3, #0]
 8006c6a:	e7db      	b.n	8006c24 <_puts_r+0x60>

08006c6c <puts>:
 8006c6c:	4b02      	ldr	r3, [pc, #8]	; (8006c78 <puts+0xc>)
 8006c6e:	4601      	mov	r1, r0
 8006c70:	6818      	ldr	r0, [r3, #0]
 8006c72:	f7ff bfa7 	b.w	8006bc4 <_puts_r>
 8006c76:	bf00      	nop
 8006c78:	20000078 	.word	0x20000078

08006c7c <setvbuf>:
 8006c7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c80:	461d      	mov	r5, r3
 8006c82:	4b54      	ldr	r3, [pc, #336]	; (8006dd4 <setvbuf+0x158>)
 8006c84:	681f      	ldr	r7, [r3, #0]
 8006c86:	4604      	mov	r4, r0
 8006c88:	460e      	mov	r6, r1
 8006c8a:	4690      	mov	r8, r2
 8006c8c:	b127      	cbz	r7, 8006c98 <setvbuf+0x1c>
 8006c8e:	6a3b      	ldr	r3, [r7, #32]
 8006c90:	b913      	cbnz	r3, 8006c98 <setvbuf+0x1c>
 8006c92:	4638      	mov	r0, r7
 8006c94:	f7ff ff4e 	bl	8006b34 <__sinit>
 8006c98:	f1b8 0f02 	cmp.w	r8, #2
 8006c9c:	d006      	beq.n	8006cac <setvbuf+0x30>
 8006c9e:	f1b8 0f01 	cmp.w	r8, #1
 8006ca2:	f200 8094 	bhi.w	8006dce <setvbuf+0x152>
 8006ca6:	2d00      	cmp	r5, #0
 8006ca8:	f2c0 8091 	blt.w	8006dce <setvbuf+0x152>
 8006cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cae:	07da      	lsls	r2, r3, #31
 8006cb0:	d405      	bmi.n	8006cbe <setvbuf+0x42>
 8006cb2:	89a3      	ldrh	r3, [r4, #12]
 8006cb4:	059b      	lsls	r3, r3, #22
 8006cb6:	d402      	bmi.n	8006cbe <setvbuf+0x42>
 8006cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cba:	f000 fa54 	bl	8007166 <__retarget_lock_acquire_recursive>
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	4638      	mov	r0, r7
 8006cc2:	f001 f813 	bl	8007cec <_fflush_r>
 8006cc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cc8:	b141      	cbz	r1, 8006cdc <setvbuf+0x60>
 8006cca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cce:	4299      	cmp	r1, r3
 8006cd0:	d002      	beq.n	8006cd8 <setvbuf+0x5c>
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	f000 fa58 	bl	8007188 <_free_r>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	6363      	str	r3, [r4, #52]	; 0x34
 8006cdc:	2300      	movs	r3, #0
 8006cde:	61a3      	str	r3, [r4, #24]
 8006ce0:	6063      	str	r3, [r4, #4]
 8006ce2:	89a3      	ldrh	r3, [r4, #12]
 8006ce4:	0618      	lsls	r0, r3, #24
 8006ce6:	d503      	bpl.n	8006cf0 <setvbuf+0x74>
 8006ce8:	6921      	ldr	r1, [r4, #16]
 8006cea:	4638      	mov	r0, r7
 8006cec:	f000 fa4c 	bl	8007188 <_free_r>
 8006cf0:	89a3      	ldrh	r3, [r4, #12]
 8006cf2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006cf6:	f023 0303 	bic.w	r3, r3, #3
 8006cfa:	f1b8 0f02 	cmp.w	r8, #2
 8006cfe:	81a3      	strh	r3, [r4, #12]
 8006d00:	d05f      	beq.n	8006dc2 <setvbuf+0x146>
 8006d02:	ab01      	add	r3, sp, #4
 8006d04:	466a      	mov	r2, sp
 8006d06:	4621      	mov	r1, r4
 8006d08:	4638      	mov	r0, r7
 8006d0a:	f001 f817 	bl	8007d3c <__swhatbuf_r>
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	4318      	orrs	r0, r3
 8006d12:	81a0      	strh	r0, [r4, #12]
 8006d14:	bb2d      	cbnz	r5, 8006d62 <setvbuf+0xe6>
 8006d16:	9d00      	ldr	r5, [sp, #0]
 8006d18:	4628      	mov	r0, r5
 8006d1a:	f000 fa81 	bl	8007220 <malloc>
 8006d1e:	4606      	mov	r6, r0
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d150      	bne.n	8006dc6 <setvbuf+0x14a>
 8006d24:	f8dd 9000 	ldr.w	r9, [sp]
 8006d28:	45a9      	cmp	r9, r5
 8006d2a:	d13e      	bne.n	8006daa <setvbuf+0x12e>
 8006d2c:	f04f 35ff 	mov.w	r5, #4294967295
 8006d30:	2200      	movs	r2, #0
 8006d32:	60a2      	str	r2, [r4, #8]
 8006d34:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006d38:	6022      	str	r2, [r4, #0]
 8006d3a:	6122      	str	r2, [r4, #16]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d42:	6162      	str	r2, [r4, #20]
 8006d44:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d46:	f043 0302 	orr.w	r3, r3, #2
 8006d4a:	07d1      	lsls	r1, r2, #31
 8006d4c:	81a3      	strh	r3, [r4, #12]
 8006d4e:	d404      	bmi.n	8006d5a <setvbuf+0xde>
 8006d50:	059b      	lsls	r3, r3, #22
 8006d52:	d402      	bmi.n	8006d5a <setvbuf+0xde>
 8006d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d56:	f000 fa07 	bl	8007168 <__retarget_lock_release_recursive>
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	b003      	add	sp, #12
 8006d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d62:	2e00      	cmp	r6, #0
 8006d64:	d0d8      	beq.n	8006d18 <setvbuf+0x9c>
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	b913      	cbnz	r3, 8006d70 <setvbuf+0xf4>
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	f7ff fee2 	bl	8006b34 <__sinit>
 8006d70:	f1b8 0f01 	cmp.w	r8, #1
 8006d74:	bf08      	it	eq
 8006d76:	89a3      	ldrheq	r3, [r4, #12]
 8006d78:	6026      	str	r6, [r4, #0]
 8006d7a:	bf04      	itt	eq
 8006d7c:	f043 0301 	orreq.w	r3, r3, #1
 8006d80:	81a3      	strheq	r3, [r4, #12]
 8006d82:	89a3      	ldrh	r3, [r4, #12]
 8006d84:	f013 0208 	ands.w	r2, r3, #8
 8006d88:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006d8c:	d01d      	beq.n	8006dca <setvbuf+0x14e>
 8006d8e:	07da      	lsls	r2, r3, #31
 8006d90:	bf41      	itttt	mi
 8006d92:	2200      	movmi	r2, #0
 8006d94:	426d      	negmi	r5, r5
 8006d96:	60a2      	strmi	r2, [r4, #8]
 8006d98:	61a5      	strmi	r5, [r4, #24]
 8006d9a:	bf58      	it	pl
 8006d9c:	60a5      	strpl	r5, [r4, #8]
 8006d9e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006da0:	f015 0501 	ands.w	r5, r5, #1
 8006da4:	d0d4      	beq.n	8006d50 <setvbuf+0xd4>
 8006da6:	2500      	movs	r5, #0
 8006da8:	e7d7      	b.n	8006d5a <setvbuf+0xde>
 8006daa:	4648      	mov	r0, r9
 8006dac:	f000 fa38 	bl	8007220 <malloc>
 8006db0:	4606      	mov	r6, r0
 8006db2:	2800      	cmp	r0, #0
 8006db4:	d0ba      	beq.n	8006d2c <setvbuf+0xb0>
 8006db6:	89a3      	ldrh	r3, [r4, #12]
 8006db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dbc:	81a3      	strh	r3, [r4, #12]
 8006dbe:	464d      	mov	r5, r9
 8006dc0:	e7d1      	b.n	8006d66 <setvbuf+0xea>
 8006dc2:	2500      	movs	r5, #0
 8006dc4:	e7b4      	b.n	8006d30 <setvbuf+0xb4>
 8006dc6:	46a9      	mov	r9, r5
 8006dc8:	e7f5      	b.n	8006db6 <setvbuf+0x13a>
 8006dca:	60a2      	str	r2, [r4, #8]
 8006dcc:	e7e7      	b.n	8006d9e <setvbuf+0x122>
 8006dce:	f04f 35ff 	mov.w	r5, #4294967295
 8006dd2:	e7c2      	b.n	8006d5a <setvbuf+0xde>
 8006dd4:	20000078 	.word	0x20000078

08006dd8 <siprintf>:
 8006dd8:	b40e      	push	{r1, r2, r3}
 8006dda:	b500      	push	{lr}
 8006ddc:	b09c      	sub	sp, #112	; 0x70
 8006dde:	ab1d      	add	r3, sp, #116	; 0x74
 8006de0:	9002      	str	r0, [sp, #8]
 8006de2:	9006      	str	r0, [sp, #24]
 8006de4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006de8:	4809      	ldr	r0, [pc, #36]	; (8006e10 <siprintf+0x38>)
 8006dea:	9107      	str	r1, [sp, #28]
 8006dec:	9104      	str	r1, [sp, #16]
 8006dee:	4909      	ldr	r1, [pc, #36]	; (8006e14 <siprintf+0x3c>)
 8006df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006df4:	9105      	str	r1, [sp, #20]
 8006df6:	6800      	ldr	r0, [r0, #0]
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	a902      	add	r1, sp, #8
 8006dfc:	f000 fb1e 	bl	800743c <_svfiprintf_r>
 8006e00:	9b02      	ldr	r3, [sp, #8]
 8006e02:	2200      	movs	r2, #0
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	b01c      	add	sp, #112	; 0x70
 8006e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e0c:	b003      	add	sp, #12
 8006e0e:	4770      	bx	lr
 8006e10:	20000078 	.word	0x20000078
 8006e14:	ffff0208 	.word	0xffff0208

08006e18 <__sread>:
 8006e18:	b510      	push	{r4, lr}
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e20:	f000 f952 	bl	80070c8 <_read_r>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	bfab      	itete	ge
 8006e28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8006e2c:	181b      	addge	r3, r3, r0
 8006e2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e32:	bfac      	ite	ge
 8006e34:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e36:	81a3      	strhlt	r3, [r4, #12]
 8006e38:	bd10      	pop	{r4, pc}

08006e3a <__swrite>:
 8006e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e3e:	461f      	mov	r7, r3
 8006e40:	898b      	ldrh	r3, [r1, #12]
 8006e42:	05db      	lsls	r3, r3, #23
 8006e44:	4605      	mov	r5, r0
 8006e46:	460c      	mov	r4, r1
 8006e48:	4616      	mov	r6, r2
 8006e4a:	d505      	bpl.n	8006e58 <__swrite+0x1e>
 8006e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e50:	2302      	movs	r3, #2
 8006e52:	2200      	movs	r2, #0
 8006e54:	f000 f926 	bl	80070a4 <_lseek_r>
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e62:	81a3      	strh	r3, [r4, #12]
 8006e64:	4632      	mov	r2, r6
 8006e66:	463b      	mov	r3, r7
 8006e68:	4628      	mov	r0, r5
 8006e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6e:	f000 b93d 	b.w	80070ec <_write_r>

08006e72 <__sseek>:
 8006e72:	b510      	push	{r4, lr}
 8006e74:	460c      	mov	r4, r1
 8006e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e7a:	f000 f913 	bl	80070a4 <_lseek_r>
 8006e7e:	1c43      	adds	r3, r0, #1
 8006e80:	89a3      	ldrh	r3, [r4, #12]
 8006e82:	bf15      	itete	ne
 8006e84:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e8e:	81a3      	strheq	r3, [r4, #12]
 8006e90:	bf18      	it	ne
 8006e92:	81a3      	strhne	r3, [r4, #12]
 8006e94:	bd10      	pop	{r4, pc}

08006e96 <__sclose>:
 8006e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e9a:	f000 b89d 	b.w	8006fd8 <_close_r>

08006e9e <__swbuf_r>:
 8006e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea0:	460e      	mov	r6, r1
 8006ea2:	4614      	mov	r4, r2
 8006ea4:	4605      	mov	r5, r0
 8006ea6:	b118      	cbz	r0, 8006eb0 <__swbuf_r+0x12>
 8006ea8:	6a03      	ldr	r3, [r0, #32]
 8006eaa:	b90b      	cbnz	r3, 8006eb0 <__swbuf_r+0x12>
 8006eac:	f7ff fe42 	bl	8006b34 <__sinit>
 8006eb0:	69a3      	ldr	r3, [r4, #24]
 8006eb2:	60a3      	str	r3, [r4, #8]
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	071a      	lsls	r2, r3, #28
 8006eb8:	d525      	bpl.n	8006f06 <__swbuf_r+0x68>
 8006eba:	6923      	ldr	r3, [r4, #16]
 8006ebc:	b31b      	cbz	r3, 8006f06 <__swbuf_r+0x68>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	6922      	ldr	r2, [r4, #16]
 8006ec2:	1a98      	subs	r0, r3, r2
 8006ec4:	6963      	ldr	r3, [r4, #20]
 8006ec6:	b2f6      	uxtb	r6, r6
 8006ec8:	4283      	cmp	r3, r0
 8006eca:	4637      	mov	r7, r6
 8006ecc:	dc04      	bgt.n	8006ed8 <__swbuf_r+0x3a>
 8006ece:	4621      	mov	r1, r4
 8006ed0:	4628      	mov	r0, r5
 8006ed2:	f000 ff0b 	bl	8007cec <_fflush_r>
 8006ed6:	b9e0      	cbnz	r0, 8006f12 <__swbuf_r+0x74>
 8006ed8:	68a3      	ldr	r3, [r4, #8]
 8006eda:	3b01      	subs	r3, #1
 8006edc:	60a3      	str	r3, [r4, #8]
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	6022      	str	r2, [r4, #0]
 8006ee4:	701e      	strb	r6, [r3, #0]
 8006ee6:	6962      	ldr	r2, [r4, #20]
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d004      	beq.n	8006ef8 <__swbuf_r+0x5a>
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	07db      	lsls	r3, r3, #31
 8006ef2:	d506      	bpl.n	8006f02 <__swbuf_r+0x64>
 8006ef4:	2e0a      	cmp	r6, #10
 8006ef6:	d104      	bne.n	8006f02 <__swbuf_r+0x64>
 8006ef8:	4621      	mov	r1, r4
 8006efa:	4628      	mov	r0, r5
 8006efc:	f000 fef6 	bl	8007cec <_fflush_r>
 8006f00:	b938      	cbnz	r0, 8006f12 <__swbuf_r+0x74>
 8006f02:	4638      	mov	r0, r7
 8006f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f06:	4621      	mov	r1, r4
 8006f08:	4628      	mov	r0, r5
 8006f0a:	f000 f805 	bl	8006f18 <__swsetup_r>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d0d5      	beq.n	8006ebe <__swbuf_r+0x20>
 8006f12:	f04f 37ff 	mov.w	r7, #4294967295
 8006f16:	e7f4      	b.n	8006f02 <__swbuf_r+0x64>

08006f18 <__swsetup_r>:
 8006f18:	b538      	push	{r3, r4, r5, lr}
 8006f1a:	4b2a      	ldr	r3, [pc, #168]	; (8006fc4 <__swsetup_r+0xac>)
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	6818      	ldr	r0, [r3, #0]
 8006f20:	460c      	mov	r4, r1
 8006f22:	b118      	cbz	r0, 8006f2c <__swsetup_r+0x14>
 8006f24:	6a03      	ldr	r3, [r0, #32]
 8006f26:	b90b      	cbnz	r3, 8006f2c <__swsetup_r+0x14>
 8006f28:	f7ff fe04 	bl	8006b34 <__sinit>
 8006f2c:	89a3      	ldrh	r3, [r4, #12]
 8006f2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f32:	0718      	lsls	r0, r3, #28
 8006f34:	d422      	bmi.n	8006f7c <__swsetup_r+0x64>
 8006f36:	06d9      	lsls	r1, r3, #27
 8006f38:	d407      	bmi.n	8006f4a <__swsetup_r+0x32>
 8006f3a:	2309      	movs	r3, #9
 8006f3c:	602b      	str	r3, [r5, #0]
 8006f3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f42:	81a3      	strh	r3, [r4, #12]
 8006f44:	f04f 30ff 	mov.w	r0, #4294967295
 8006f48:	e034      	b.n	8006fb4 <__swsetup_r+0x9c>
 8006f4a:	0758      	lsls	r0, r3, #29
 8006f4c:	d512      	bpl.n	8006f74 <__swsetup_r+0x5c>
 8006f4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f50:	b141      	cbz	r1, 8006f64 <__swsetup_r+0x4c>
 8006f52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f56:	4299      	cmp	r1, r3
 8006f58:	d002      	beq.n	8006f60 <__swsetup_r+0x48>
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f000 f914 	bl	8007188 <_free_r>
 8006f60:	2300      	movs	r3, #0
 8006f62:	6363      	str	r3, [r4, #52]	; 0x34
 8006f64:	89a3      	ldrh	r3, [r4, #12]
 8006f66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f6a:	81a3      	strh	r3, [r4, #12]
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	6063      	str	r3, [r4, #4]
 8006f70:	6923      	ldr	r3, [r4, #16]
 8006f72:	6023      	str	r3, [r4, #0]
 8006f74:	89a3      	ldrh	r3, [r4, #12]
 8006f76:	f043 0308 	orr.w	r3, r3, #8
 8006f7a:	81a3      	strh	r3, [r4, #12]
 8006f7c:	6923      	ldr	r3, [r4, #16]
 8006f7e:	b94b      	cbnz	r3, 8006f94 <__swsetup_r+0x7c>
 8006f80:	89a3      	ldrh	r3, [r4, #12]
 8006f82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f8a:	d003      	beq.n	8006f94 <__swsetup_r+0x7c>
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f000 fefa 	bl	8007d88 <__smakebuf_r>
 8006f94:	89a0      	ldrh	r0, [r4, #12]
 8006f96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f9a:	f010 0301 	ands.w	r3, r0, #1
 8006f9e:	d00a      	beq.n	8006fb6 <__swsetup_r+0x9e>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60a3      	str	r3, [r4, #8]
 8006fa4:	6963      	ldr	r3, [r4, #20]
 8006fa6:	425b      	negs	r3, r3
 8006fa8:	61a3      	str	r3, [r4, #24]
 8006faa:	6923      	ldr	r3, [r4, #16]
 8006fac:	b943      	cbnz	r3, 8006fc0 <__swsetup_r+0xa8>
 8006fae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006fb2:	d1c4      	bne.n	8006f3e <__swsetup_r+0x26>
 8006fb4:	bd38      	pop	{r3, r4, r5, pc}
 8006fb6:	0781      	lsls	r1, r0, #30
 8006fb8:	bf58      	it	pl
 8006fba:	6963      	ldrpl	r3, [r4, #20]
 8006fbc:	60a3      	str	r3, [r4, #8]
 8006fbe:	e7f4      	b.n	8006faa <__swsetup_r+0x92>
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	e7f7      	b.n	8006fb4 <__swsetup_r+0x9c>
 8006fc4:	20000078 	.word	0x20000078

08006fc8 <memset>:
 8006fc8:	4402      	add	r2, r0
 8006fca:	4603      	mov	r3, r0
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d100      	bne.n	8006fd2 <memset+0xa>
 8006fd0:	4770      	bx	lr
 8006fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8006fd6:	e7f9      	b.n	8006fcc <memset+0x4>

08006fd8 <_close_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4d06      	ldr	r5, [pc, #24]	; (8006ff4 <_close_r+0x1c>)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	602b      	str	r3, [r5, #0]
 8006fe4:	f7fa fc21 	bl	800182a <_close>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_close_r+0x1a>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_close_r+0x1a>
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	20004310 	.word	0x20004310

08006ff8 <_reclaim_reent>:
 8006ff8:	4b29      	ldr	r3, [pc, #164]	; (80070a0 <_reclaim_reent+0xa8>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4283      	cmp	r3, r0
 8006ffe:	b570      	push	{r4, r5, r6, lr}
 8007000:	4604      	mov	r4, r0
 8007002:	d04b      	beq.n	800709c <_reclaim_reent+0xa4>
 8007004:	69c3      	ldr	r3, [r0, #28]
 8007006:	b143      	cbz	r3, 800701a <_reclaim_reent+0x22>
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d144      	bne.n	8007098 <_reclaim_reent+0xa0>
 800700e:	69e3      	ldr	r3, [r4, #28]
 8007010:	6819      	ldr	r1, [r3, #0]
 8007012:	b111      	cbz	r1, 800701a <_reclaim_reent+0x22>
 8007014:	4620      	mov	r0, r4
 8007016:	f000 f8b7 	bl	8007188 <_free_r>
 800701a:	6961      	ldr	r1, [r4, #20]
 800701c:	b111      	cbz	r1, 8007024 <_reclaim_reent+0x2c>
 800701e:	4620      	mov	r0, r4
 8007020:	f000 f8b2 	bl	8007188 <_free_r>
 8007024:	69e1      	ldr	r1, [r4, #28]
 8007026:	b111      	cbz	r1, 800702e <_reclaim_reent+0x36>
 8007028:	4620      	mov	r0, r4
 800702a:	f000 f8ad 	bl	8007188 <_free_r>
 800702e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007030:	b111      	cbz	r1, 8007038 <_reclaim_reent+0x40>
 8007032:	4620      	mov	r0, r4
 8007034:	f000 f8a8 	bl	8007188 <_free_r>
 8007038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800703a:	b111      	cbz	r1, 8007042 <_reclaim_reent+0x4a>
 800703c:	4620      	mov	r0, r4
 800703e:	f000 f8a3 	bl	8007188 <_free_r>
 8007042:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007044:	b111      	cbz	r1, 800704c <_reclaim_reent+0x54>
 8007046:	4620      	mov	r0, r4
 8007048:	f000 f89e 	bl	8007188 <_free_r>
 800704c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800704e:	b111      	cbz	r1, 8007056 <_reclaim_reent+0x5e>
 8007050:	4620      	mov	r0, r4
 8007052:	f000 f899 	bl	8007188 <_free_r>
 8007056:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007058:	b111      	cbz	r1, 8007060 <_reclaim_reent+0x68>
 800705a:	4620      	mov	r0, r4
 800705c:	f000 f894 	bl	8007188 <_free_r>
 8007060:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007062:	b111      	cbz	r1, 800706a <_reclaim_reent+0x72>
 8007064:	4620      	mov	r0, r4
 8007066:	f000 f88f 	bl	8007188 <_free_r>
 800706a:	6a23      	ldr	r3, [r4, #32]
 800706c:	b1b3      	cbz	r3, 800709c <_reclaim_reent+0xa4>
 800706e:	4620      	mov	r0, r4
 8007070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007074:	4718      	bx	r3
 8007076:	5949      	ldr	r1, [r1, r5]
 8007078:	b941      	cbnz	r1, 800708c <_reclaim_reent+0x94>
 800707a:	3504      	adds	r5, #4
 800707c:	69e3      	ldr	r3, [r4, #28]
 800707e:	2d80      	cmp	r5, #128	; 0x80
 8007080:	68d9      	ldr	r1, [r3, #12]
 8007082:	d1f8      	bne.n	8007076 <_reclaim_reent+0x7e>
 8007084:	4620      	mov	r0, r4
 8007086:	f000 f87f 	bl	8007188 <_free_r>
 800708a:	e7c0      	b.n	800700e <_reclaim_reent+0x16>
 800708c:	680e      	ldr	r6, [r1, #0]
 800708e:	4620      	mov	r0, r4
 8007090:	f000 f87a 	bl	8007188 <_free_r>
 8007094:	4631      	mov	r1, r6
 8007096:	e7ef      	b.n	8007078 <_reclaim_reent+0x80>
 8007098:	2500      	movs	r5, #0
 800709a:	e7ef      	b.n	800707c <_reclaim_reent+0x84>
 800709c:	bd70      	pop	{r4, r5, r6, pc}
 800709e:	bf00      	nop
 80070a0:	20000078 	.word	0x20000078

080070a4 <_lseek_r>:
 80070a4:	b538      	push	{r3, r4, r5, lr}
 80070a6:	4d07      	ldr	r5, [pc, #28]	; (80070c4 <_lseek_r+0x20>)
 80070a8:	4604      	mov	r4, r0
 80070aa:	4608      	mov	r0, r1
 80070ac:	4611      	mov	r1, r2
 80070ae:	2200      	movs	r2, #0
 80070b0:	602a      	str	r2, [r5, #0]
 80070b2:	461a      	mov	r2, r3
 80070b4:	f7fa fbe0 	bl	8001878 <_lseek>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d102      	bne.n	80070c2 <_lseek_r+0x1e>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	b103      	cbz	r3, 80070c2 <_lseek_r+0x1e>
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	20004310 	.word	0x20004310

080070c8 <_read_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4d07      	ldr	r5, [pc, #28]	; (80070e8 <_read_r+0x20>)
 80070cc:	4604      	mov	r4, r0
 80070ce:	4608      	mov	r0, r1
 80070d0:	4611      	mov	r1, r2
 80070d2:	2200      	movs	r2, #0
 80070d4:	602a      	str	r2, [r5, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	f7fa fb6e 	bl	80017b8 <_read>
 80070dc:	1c43      	adds	r3, r0, #1
 80070de:	d102      	bne.n	80070e6 <_read_r+0x1e>
 80070e0:	682b      	ldr	r3, [r5, #0]
 80070e2:	b103      	cbz	r3, 80070e6 <_read_r+0x1e>
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	bd38      	pop	{r3, r4, r5, pc}
 80070e8:	20004310 	.word	0x20004310

080070ec <_write_r>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	4d07      	ldr	r5, [pc, #28]	; (800710c <_write_r+0x20>)
 80070f0:	4604      	mov	r4, r0
 80070f2:	4608      	mov	r0, r1
 80070f4:	4611      	mov	r1, r2
 80070f6:	2200      	movs	r2, #0
 80070f8:	602a      	str	r2, [r5, #0]
 80070fa:	461a      	mov	r2, r3
 80070fc:	f7fa fb79 	bl	80017f2 <_write>
 8007100:	1c43      	adds	r3, r0, #1
 8007102:	d102      	bne.n	800710a <_write_r+0x1e>
 8007104:	682b      	ldr	r3, [r5, #0]
 8007106:	b103      	cbz	r3, 800710a <_write_r+0x1e>
 8007108:	6023      	str	r3, [r4, #0]
 800710a:	bd38      	pop	{r3, r4, r5, pc}
 800710c:	20004310 	.word	0x20004310

08007110 <__errno>:
 8007110:	4b01      	ldr	r3, [pc, #4]	; (8007118 <__errno+0x8>)
 8007112:	6818      	ldr	r0, [r3, #0]
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	20000078 	.word	0x20000078

0800711c <__libc_init_array>:
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	4d0d      	ldr	r5, [pc, #52]	; (8007154 <__libc_init_array+0x38>)
 8007120:	4c0d      	ldr	r4, [pc, #52]	; (8007158 <__libc_init_array+0x3c>)
 8007122:	1b64      	subs	r4, r4, r5
 8007124:	10a4      	asrs	r4, r4, #2
 8007126:	2600      	movs	r6, #0
 8007128:	42a6      	cmp	r6, r4
 800712a:	d109      	bne.n	8007140 <__libc_init_array+0x24>
 800712c:	4d0b      	ldr	r5, [pc, #44]	; (800715c <__libc_init_array+0x40>)
 800712e:	4c0c      	ldr	r4, [pc, #48]	; (8007160 <__libc_init_array+0x44>)
 8007130:	f000 feea 	bl	8007f08 <_init>
 8007134:	1b64      	subs	r4, r4, r5
 8007136:	10a4      	asrs	r4, r4, #2
 8007138:	2600      	movs	r6, #0
 800713a:	42a6      	cmp	r6, r4
 800713c:	d105      	bne.n	800714a <__libc_init_array+0x2e>
 800713e:	bd70      	pop	{r4, r5, r6, pc}
 8007140:	f855 3b04 	ldr.w	r3, [r5], #4
 8007144:	4798      	blx	r3
 8007146:	3601      	adds	r6, #1
 8007148:	e7ee      	b.n	8007128 <__libc_init_array+0xc>
 800714a:	f855 3b04 	ldr.w	r3, [r5], #4
 800714e:	4798      	blx	r3
 8007150:	3601      	adds	r6, #1
 8007152:	e7f2      	b.n	800713a <__libc_init_array+0x1e>
 8007154:	080080bc 	.word	0x080080bc
 8007158:	080080bc 	.word	0x080080bc
 800715c:	080080bc 	.word	0x080080bc
 8007160:	080080c0 	.word	0x080080c0

08007164 <__retarget_lock_init_recursive>:
 8007164:	4770      	bx	lr

08007166 <__retarget_lock_acquire_recursive>:
 8007166:	4770      	bx	lr

08007168 <__retarget_lock_release_recursive>:
 8007168:	4770      	bx	lr

0800716a <memcpy>:
 800716a:	440a      	add	r2, r1
 800716c:	4291      	cmp	r1, r2
 800716e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007172:	d100      	bne.n	8007176 <memcpy+0xc>
 8007174:	4770      	bx	lr
 8007176:	b510      	push	{r4, lr}
 8007178:	f811 4b01 	ldrb.w	r4, [r1], #1
 800717c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007180:	4291      	cmp	r1, r2
 8007182:	d1f9      	bne.n	8007178 <memcpy+0xe>
 8007184:	bd10      	pop	{r4, pc}
	...

08007188 <_free_r>:
 8007188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800718a:	2900      	cmp	r1, #0
 800718c:	d044      	beq.n	8007218 <_free_r+0x90>
 800718e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007192:	9001      	str	r0, [sp, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	f1a1 0404 	sub.w	r4, r1, #4
 800719a:	bfb8      	it	lt
 800719c:	18e4      	addlt	r4, r4, r3
 800719e:	f000 f8e7 	bl	8007370 <__malloc_lock>
 80071a2:	4a1e      	ldr	r2, [pc, #120]	; (800721c <_free_r+0x94>)
 80071a4:	9801      	ldr	r0, [sp, #4]
 80071a6:	6813      	ldr	r3, [r2, #0]
 80071a8:	b933      	cbnz	r3, 80071b8 <_free_r+0x30>
 80071aa:	6063      	str	r3, [r4, #4]
 80071ac:	6014      	str	r4, [r2, #0]
 80071ae:	b003      	add	sp, #12
 80071b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071b4:	f000 b8e2 	b.w	800737c <__malloc_unlock>
 80071b8:	42a3      	cmp	r3, r4
 80071ba:	d908      	bls.n	80071ce <_free_r+0x46>
 80071bc:	6825      	ldr	r5, [r4, #0]
 80071be:	1961      	adds	r1, r4, r5
 80071c0:	428b      	cmp	r3, r1
 80071c2:	bf01      	itttt	eq
 80071c4:	6819      	ldreq	r1, [r3, #0]
 80071c6:	685b      	ldreq	r3, [r3, #4]
 80071c8:	1949      	addeq	r1, r1, r5
 80071ca:	6021      	streq	r1, [r4, #0]
 80071cc:	e7ed      	b.n	80071aa <_free_r+0x22>
 80071ce:	461a      	mov	r2, r3
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	b10b      	cbz	r3, 80071d8 <_free_r+0x50>
 80071d4:	42a3      	cmp	r3, r4
 80071d6:	d9fa      	bls.n	80071ce <_free_r+0x46>
 80071d8:	6811      	ldr	r1, [r2, #0]
 80071da:	1855      	adds	r5, r2, r1
 80071dc:	42a5      	cmp	r5, r4
 80071de:	d10b      	bne.n	80071f8 <_free_r+0x70>
 80071e0:	6824      	ldr	r4, [r4, #0]
 80071e2:	4421      	add	r1, r4
 80071e4:	1854      	adds	r4, r2, r1
 80071e6:	42a3      	cmp	r3, r4
 80071e8:	6011      	str	r1, [r2, #0]
 80071ea:	d1e0      	bne.n	80071ae <_free_r+0x26>
 80071ec:	681c      	ldr	r4, [r3, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	6053      	str	r3, [r2, #4]
 80071f2:	440c      	add	r4, r1
 80071f4:	6014      	str	r4, [r2, #0]
 80071f6:	e7da      	b.n	80071ae <_free_r+0x26>
 80071f8:	d902      	bls.n	8007200 <_free_r+0x78>
 80071fa:	230c      	movs	r3, #12
 80071fc:	6003      	str	r3, [r0, #0]
 80071fe:	e7d6      	b.n	80071ae <_free_r+0x26>
 8007200:	6825      	ldr	r5, [r4, #0]
 8007202:	1961      	adds	r1, r4, r5
 8007204:	428b      	cmp	r3, r1
 8007206:	bf04      	itt	eq
 8007208:	6819      	ldreq	r1, [r3, #0]
 800720a:	685b      	ldreq	r3, [r3, #4]
 800720c:	6063      	str	r3, [r4, #4]
 800720e:	bf04      	itt	eq
 8007210:	1949      	addeq	r1, r1, r5
 8007212:	6021      	streq	r1, [r4, #0]
 8007214:	6054      	str	r4, [r2, #4]
 8007216:	e7ca      	b.n	80071ae <_free_r+0x26>
 8007218:	b003      	add	sp, #12
 800721a:	bd30      	pop	{r4, r5, pc}
 800721c:	20004318 	.word	0x20004318

08007220 <malloc>:
 8007220:	4b02      	ldr	r3, [pc, #8]	; (800722c <malloc+0xc>)
 8007222:	4601      	mov	r1, r0
 8007224:	6818      	ldr	r0, [r3, #0]
 8007226:	f000 b823 	b.w	8007270 <_malloc_r>
 800722a:	bf00      	nop
 800722c:	20000078 	.word	0x20000078

08007230 <sbrk_aligned>:
 8007230:	b570      	push	{r4, r5, r6, lr}
 8007232:	4e0e      	ldr	r6, [pc, #56]	; (800726c <sbrk_aligned+0x3c>)
 8007234:	460c      	mov	r4, r1
 8007236:	6831      	ldr	r1, [r6, #0]
 8007238:	4605      	mov	r5, r0
 800723a:	b911      	cbnz	r1, 8007242 <sbrk_aligned+0x12>
 800723c:	f000 fe1c 	bl	8007e78 <_sbrk_r>
 8007240:	6030      	str	r0, [r6, #0]
 8007242:	4621      	mov	r1, r4
 8007244:	4628      	mov	r0, r5
 8007246:	f000 fe17 	bl	8007e78 <_sbrk_r>
 800724a:	1c43      	adds	r3, r0, #1
 800724c:	d00a      	beq.n	8007264 <sbrk_aligned+0x34>
 800724e:	1cc4      	adds	r4, r0, #3
 8007250:	f024 0403 	bic.w	r4, r4, #3
 8007254:	42a0      	cmp	r0, r4
 8007256:	d007      	beq.n	8007268 <sbrk_aligned+0x38>
 8007258:	1a21      	subs	r1, r4, r0
 800725a:	4628      	mov	r0, r5
 800725c:	f000 fe0c 	bl	8007e78 <_sbrk_r>
 8007260:	3001      	adds	r0, #1
 8007262:	d101      	bne.n	8007268 <sbrk_aligned+0x38>
 8007264:	f04f 34ff 	mov.w	r4, #4294967295
 8007268:	4620      	mov	r0, r4
 800726a:	bd70      	pop	{r4, r5, r6, pc}
 800726c:	2000431c 	.word	0x2000431c

08007270 <_malloc_r>:
 8007270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007274:	1ccd      	adds	r5, r1, #3
 8007276:	f025 0503 	bic.w	r5, r5, #3
 800727a:	3508      	adds	r5, #8
 800727c:	2d0c      	cmp	r5, #12
 800727e:	bf38      	it	cc
 8007280:	250c      	movcc	r5, #12
 8007282:	2d00      	cmp	r5, #0
 8007284:	4607      	mov	r7, r0
 8007286:	db01      	blt.n	800728c <_malloc_r+0x1c>
 8007288:	42a9      	cmp	r1, r5
 800728a:	d905      	bls.n	8007298 <_malloc_r+0x28>
 800728c:	230c      	movs	r3, #12
 800728e:	603b      	str	r3, [r7, #0]
 8007290:	2600      	movs	r6, #0
 8007292:	4630      	mov	r0, r6
 8007294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007298:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800736c <_malloc_r+0xfc>
 800729c:	f000 f868 	bl	8007370 <__malloc_lock>
 80072a0:	f8d8 3000 	ldr.w	r3, [r8]
 80072a4:	461c      	mov	r4, r3
 80072a6:	bb5c      	cbnz	r4, 8007300 <_malloc_r+0x90>
 80072a8:	4629      	mov	r1, r5
 80072aa:	4638      	mov	r0, r7
 80072ac:	f7ff ffc0 	bl	8007230 <sbrk_aligned>
 80072b0:	1c43      	adds	r3, r0, #1
 80072b2:	4604      	mov	r4, r0
 80072b4:	d155      	bne.n	8007362 <_malloc_r+0xf2>
 80072b6:	f8d8 4000 	ldr.w	r4, [r8]
 80072ba:	4626      	mov	r6, r4
 80072bc:	2e00      	cmp	r6, #0
 80072be:	d145      	bne.n	800734c <_malloc_r+0xdc>
 80072c0:	2c00      	cmp	r4, #0
 80072c2:	d048      	beq.n	8007356 <_malloc_r+0xe6>
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	4631      	mov	r1, r6
 80072c8:	4638      	mov	r0, r7
 80072ca:	eb04 0903 	add.w	r9, r4, r3
 80072ce:	f000 fdd3 	bl	8007e78 <_sbrk_r>
 80072d2:	4581      	cmp	r9, r0
 80072d4:	d13f      	bne.n	8007356 <_malloc_r+0xe6>
 80072d6:	6821      	ldr	r1, [r4, #0]
 80072d8:	1a6d      	subs	r5, r5, r1
 80072da:	4629      	mov	r1, r5
 80072dc:	4638      	mov	r0, r7
 80072de:	f7ff ffa7 	bl	8007230 <sbrk_aligned>
 80072e2:	3001      	adds	r0, #1
 80072e4:	d037      	beq.n	8007356 <_malloc_r+0xe6>
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	442b      	add	r3, r5
 80072ea:	6023      	str	r3, [r4, #0]
 80072ec:	f8d8 3000 	ldr.w	r3, [r8]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d038      	beq.n	8007366 <_malloc_r+0xf6>
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	42a2      	cmp	r2, r4
 80072f8:	d12b      	bne.n	8007352 <_malloc_r+0xe2>
 80072fa:	2200      	movs	r2, #0
 80072fc:	605a      	str	r2, [r3, #4]
 80072fe:	e00f      	b.n	8007320 <_malloc_r+0xb0>
 8007300:	6822      	ldr	r2, [r4, #0]
 8007302:	1b52      	subs	r2, r2, r5
 8007304:	d41f      	bmi.n	8007346 <_malloc_r+0xd6>
 8007306:	2a0b      	cmp	r2, #11
 8007308:	d917      	bls.n	800733a <_malloc_r+0xca>
 800730a:	1961      	adds	r1, r4, r5
 800730c:	42a3      	cmp	r3, r4
 800730e:	6025      	str	r5, [r4, #0]
 8007310:	bf18      	it	ne
 8007312:	6059      	strne	r1, [r3, #4]
 8007314:	6863      	ldr	r3, [r4, #4]
 8007316:	bf08      	it	eq
 8007318:	f8c8 1000 	streq.w	r1, [r8]
 800731c:	5162      	str	r2, [r4, r5]
 800731e:	604b      	str	r3, [r1, #4]
 8007320:	4638      	mov	r0, r7
 8007322:	f104 060b 	add.w	r6, r4, #11
 8007326:	f000 f829 	bl	800737c <__malloc_unlock>
 800732a:	f026 0607 	bic.w	r6, r6, #7
 800732e:	1d23      	adds	r3, r4, #4
 8007330:	1af2      	subs	r2, r6, r3
 8007332:	d0ae      	beq.n	8007292 <_malloc_r+0x22>
 8007334:	1b9b      	subs	r3, r3, r6
 8007336:	50a3      	str	r3, [r4, r2]
 8007338:	e7ab      	b.n	8007292 <_malloc_r+0x22>
 800733a:	42a3      	cmp	r3, r4
 800733c:	6862      	ldr	r2, [r4, #4]
 800733e:	d1dd      	bne.n	80072fc <_malloc_r+0x8c>
 8007340:	f8c8 2000 	str.w	r2, [r8]
 8007344:	e7ec      	b.n	8007320 <_malloc_r+0xb0>
 8007346:	4623      	mov	r3, r4
 8007348:	6864      	ldr	r4, [r4, #4]
 800734a:	e7ac      	b.n	80072a6 <_malloc_r+0x36>
 800734c:	4634      	mov	r4, r6
 800734e:	6876      	ldr	r6, [r6, #4]
 8007350:	e7b4      	b.n	80072bc <_malloc_r+0x4c>
 8007352:	4613      	mov	r3, r2
 8007354:	e7cc      	b.n	80072f0 <_malloc_r+0x80>
 8007356:	230c      	movs	r3, #12
 8007358:	603b      	str	r3, [r7, #0]
 800735a:	4638      	mov	r0, r7
 800735c:	f000 f80e 	bl	800737c <__malloc_unlock>
 8007360:	e797      	b.n	8007292 <_malloc_r+0x22>
 8007362:	6025      	str	r5, [r4, #0]
 8007364:	e7dc      	b.n	8007320 <_malloc_r+0xb0>
 8007366:	605b      	str	r3, [r3, #4]
 8007368:	deff      	udf	#255	; 0xff
 800736a:	bf00      	nop
 800736c:	20004318 	.word	0x20004318

08007370 <__malloc_lock>:
 8007370:	4801      	ldr	r0, [pc, #4]	; (8007378 <__malloc_lock+0x8>)
 8007372:	f7ff bef8 	b.w	8007166 <__retarget_lock_acquire_recursive>
 8007376:	bf00      	nop
 8007378:	20004314 	.word	0x20004314

0800737c <__malloc_unlock>:
 800737c:	4801      	ldr	r0, [pc, #4]	; (8007384 <__malloc_unlock+0x8>)
 800737e:	f7ff bef3 	b.w	8007168 <__retarget_lock_release_recursive>
 8007382:	bf00      	nop
 8007384:	20004314 	.word	0x20004314

08007388 <__ssputs_r>:
 8007388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800738c:	688e      	ldr	r6, [r1, #8]
 800738e:	461f      	mov	r7, r3
 8007390:	42be      	cmp	r6, r7
 8007392:	680b      	ldr	r3, [r1, #0]
 8007394:	4682      	mov	sl, r0
 8007396:	460c      	mov	r4, r1
 8007398:	4690      	mov	r8, r2
 800739a:	d82c      	bhi.n	80073f6 <__ssputs_r+0x6e>
 800739c:	898a      	ldrh	r2, [r1, #12]
 800739e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073a2:	d026      	beq.n	80073f2 <__ssputs_r+0x6a>
 80073a4:	6965      	ldr	r5, [r4, #20]
 80073a6:	6909      	ldr	r1, [r1, #16]
 80073a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073ac:	eba3 0901 	sub.w	r9, r3, r1
 80073b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073b4:	1c7b      	adds	r3, r7, #1
 80073b6:	444b      	add	r3, r9
 80073b8:	106d      	asrs	r5, r5, #1
 80073ba:	429d      	cmp	r5, r3
 80073bc:	bf38      	it	cc
 80073be:	461d      	movcc	r5, r3
 80073c0:	0553      	lsls	r3, r2, #21
 80073c2:	d527      	bpl.n	8007414 <__ssputs_r+0x8c>
 80073c4:	4629      	mov	r1, r5
 80073c6:	f7ff ff53 	bl	8007270 <_malloc_r>
 80073ca:	4606      	mov	r6, r0
 80073cc:	b360      	cbz	r0, 8007428 <__ssputs_r+0xa0>
 80073ce:	6921      	ldr	r1, [r4, #16]
 80073d0:	464a      	mov	r2, r9
 80073d2:	f7ff feca 	bl	800716a <memcpy>
 80073d6:	89a3      	ldrh	r3, [r4, #12]
 80073d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073e0:	81a3      	strh	r3, [r4, #12]
 80073e2:	6126      	str	r6, [r4, #16]
 80073e4:	6165      	str	r5, [r4, #20]
 80073e6:	444e      	add	r6, r9
 80073e8:	eba5 0509 	sub.w	r5, r5, r9
 80073ec:	6026      	str	r6, [r4, #0]
 80073ee:	60a5      	str	r5, [r4, #8]
 80073f0:	463e      	mov	r6, r7
 80073f2:	42be      	cmp	r6, r7
 80073f4:	d900      	bls.n	80073f8 <__ssputs_r+0x70>
 80073f6:	463e      	mov	r6, r7
 80073f8:	6820      	ldr	r0, [r4, #0]
 80073fa:	4632      	mov	r2, r6
 80073fc:	4641      	mov	r1, r8
 80073fe:	f000 fcff 	bl	8007e00 <memmove>
 8007402:	68a3      	ldr	r3, [r4, #8]
 8007404:	1b9b      	subs	r3, r3, r6
 8007406:	60a3      	str	r3, [r4, #8]
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	4433      	add	r3, r6
 800740c:	6023      	str	r3, [r4, #0]
 800740e:	2000      	movs	r0, #0
 8007410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007414:	462a      	mov	r2, r5
 8007416:	f000 fd3f 	bl	8007e98 <_realloc_r>
 800741a:	4606      	mov	r6, r0
 800741c:	2800      	cmp	r0, #0
 800741e:	d1e0      	bne.n	80073e2 <__ssputs_r+0x5a>
 8007420:	6921      	ldr	r1, [r4, #16]
 8007422:	4650      	mov	r0, sl
 8007424:	f7ff feb0 	bl	8007188 <_free_r>
 8007428:	230c      	movs	r3, #12
 800742a:	f8ca 3000 	str.w	r3, [sl]
 800742e:	89a3      	ldrh	r3, [r4, #12]
 8007430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007434:	81a3      	strh	r3, [r4, #12]
 8007436:	f04f 30ff 	mov.w	r0, #4294967295
 800743a:	e7e9      	b.n	8007410 <__ssputs_r+0x88>

0800743c <_svfiprintf_r>:
 800743c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007440:	4698      	mov	r8, r3
 8007442:	898b      	ldrh	r3, [r1, #12]
 8007444:	061b      	lsls	r3, r3, #24
 8007446:	b09d      	sub	sp, #116	; 0x74
 8007448:	4607      	mov	r7, r0
 800744a:	460d      	mov	r5, r1
 800744c:	4614      	mov	r4, r2
 800744e:	d50e      	bpl.n	800746e <_svfiprintf_r+0x32>
 8007450:	690b      	ldr	r3, [r1, #16]
 8007452:	b963      	cbnz	r3, 800746e <_svfiprintf_r+0x32>
 8007454:	2140      	movs	r1, #64	; 0x40
 8007456:	f7ff ff0b 	bl	8007270 <_malloc_r>
 800745a:	6028      	str	r0, [r5, #0]
 800745c:	6128      	str	r0, [r5, #16]
 800745e:	b920      	cbnz	r0, 800746a <_svfiprintf_r+0x2e>
 8007460:	230c      	movs	r3, #12
 8007462:	603b      	str	r3, [r7, #0]
 8007464:	f04f 30ff 	mov.w	r0, #4294967295
 8007468:	e0d0      	b.n	800760c <_svfiprintf_r+0x1d0>
 800746a:	2340      	movs	r3, #64	; 0x40
 800746c:	616b      	str	r3, [r5, #20]
 800746e:	2300      	movs	r3, #0
 8007470:	9309      	str	r3, [sp, #36]	; 0x24
 8007472:	2320      	movs	r3, #32
 8007474:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007478:	f8cd 800c 	str.w	r8, [sp, #12]
 800747c:	2330      	movs	r3, #48	; 0x30
 800747e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007624 <_svfiprintf_r+0x1e8>
 8007482:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007486:	f04f 0901 	mov.w	r9, #1
 800748a:	4623      	mov	r3, r4
 800748c:	469a      	mov	sl, r3
 800748e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007492:	b10a      	cbz	r2, 8007498 <_svfiprintf_r+0x5c>
 8007494:	2a25      	cmp	r2, #37	; 0x25
 8007496:	d1f9      	bne.n	800748c <_svfiprintf_r+0x50>
 8007498:	ebba 0b04 	subs.w	fp, sl, r4
 800749c:	d00b      	beq.n	80074b6 <_svfiprintf_r+0x7a>
 800749e:	465b      	mov	r3, fp
 80074a0:	4622      	mov	r2, r4
 80074a2:	4629      	mov	r1, r5
 80074a4:	4638      	mov	r0, r7
 80074a6:	f7ff ff6f 	bl	8007388 <__ssputs_r>
 80074aa:	3001      	adds	r0, #1
 80074ac:	f000 80a9 	beq.w	8007602 <_svfiprintf_r+0x1c6>
 80074b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074b2:	445a      	add	r2, fp
 80074b4:	9209      	str	r2, [sp, #36]	; 0x24
 80074b6:	f89a 3000 	ldrb.w	r3, [sl]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f000 80a1 	beq.w	8007602 <_svfiprintf_r+0x1c6>
 80074c0:	2300      	movs	r3, #0
 80074c2:	f04f 32ff 	mov.w	r2, #4294967295
 80074c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074ca:	f10a 0a01 	add.w	sl, sl, #1
 80074ce:	9304      	str	r3, [sp, #16]
 80074d0:	9307      	str	r3, [sp, #28]
 80074d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074d6:	931a      	str	r3, [sp, #104]	; 0x68
 80074d8:	4654      	mov	r4, sl
 80074da:	2205      	movs	r2, #5
 80074dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074e0:	4850      	ldr	r0, [pc, #320]	; (8007624 <_svfiprintf_r+0x1e8>)
 80074e2:	f7f8 fe7d 	bl	80001e0 <memchr>
 80074e6:	9a04      	ldr	r2, [sp, #16]
 80074e8:	b9d8      	cbnz	r0, 8007522 <_svfiprintf_r+0xe6>
 80074ea:	06d0      	lsls	r0, r2, #27
 80074ec:	bf44      	itt	mi
 80074ee:	2320      	movmi	r3, #32
 80074f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074f4:	0711      	lsls	r1, r2, #28
 80074f6:	bf44      	itt	mi
 80074f8:	232b      	movmi	r3, #43	; 0x2b
 80074fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007502:	2b2a      	cmp	r3, #42	; 0x2a
 8007504:	d015      	beq.n	8007532 <_svfiprintf_r+0xf6>
 8007506:	9a07      	ldr	r2, [sp, #28]
 8007508:	4654      	mov	r4, sl
 800750a:	2000      	movs	r0, #0
 800750c:	f04f 0c0a 	mov.w	ip, #10
 8007510:	4621      	mov	r1, r4
 8007512:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007516:	3b30      	subs	r3, #48	; 0x30
 8007518:	2b09      	cmp	r3, #9
 800751a:	d94d      	bls.n	80075b8 <_svfiprintf_r+0x17c>
 800751c:	b1b0      	cbz	r0, 800754c <_svfiprintf_r+0x110>
 800751e:	9207      	str	r2, [sp, #28]
 8007520:	e014      	b.n	800754c <_svfiprintf_r+0x110>
 8007522:	eba0 0308 	sub.w	r3, r0, r8
 8007526:	fa09 f303 	lsl.w	r3, r9, r3
 800752a:	4313      	orrs	r3, r2
 800752c:	9304      	str	r3, [sp, #16]
 800752e:	46a2      	mov	sl, r4
 8007530:	e7d2      	b.n	80074d8 <_svfiprintf_r+0x9c>
 8007532:	9b03      	ldr	r3, [sp, #12]
 8007534:	1d19      	adds	r1, r3, #4
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	9103      	str	r1, [sp, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	bfbb      	ittet	lt
 800753e:	425b      	neglt	r3, r3
 8007540:	f042 0202 	orrlt.w	r2, r2, #2
 8007544:	9307      	strge	r3, [sp, #28]
 8007546:	9307      	strlt	r3, [sp, #28]
 8007548:	bfb8      	it	lt
 800754a:	9204      	strlt	r2, [sp, #16]
 800754c:	7823      	ldrb	r3, [r4, #0]
 800754e:	2b2e      	cmp	r3, #46	; 0x2e
 8007550:	d10c      	bne.n	800756c <_svfiprintf_r+0x130>
 8007552:	7863      	ldrb	r3, [r4, #1]
 8007554:	2b2a      	cmp	r3, #42	; 0x2a
 8007556:	d134      	bne.n	80075c2 <_svfiprintf_r+0x186>
 8007558:	9b03      	ldr	r3, [sp, #12]
 800755a:	1d1a      	adds	r2, r3, #4
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	9203      	str	r2, [sp, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	bfb8      	it	lt
 8007564:	f04f 33ff 	movlt.w	r3, #4294967295
 8007568:	3402      	adds	r4, #2
 800756a:	9305      	str	r3, [sp, #20]
 800756c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007634 <_svfiprintf_r+0x1f8>
 8007570:	7821      	ldrb	r1, [r4, #0]
 8007572:	2203      	movs	r2, #3
 8007574:	4650      	mov	r0, sl
 8007576:	f7f8 fe33 	bl	80001e0 <memchr>
 800757a:	b138      	cbz	r0, 800758c <_svfiprintf_r+0x150>
 800757c:	9b04      	ldr	r3, [sp, #16]
 800757e:	eba0 000a 	sub.w	r0, r0, sl
 8007582:	2240      	movs	r2, #64	; 0x40
 8007584:	4082      	lsls	r2, r0
 8007586:	4313      	orrs	r3, r2
 8007588:	3401      	adds	r4, #1
 800758a:	9304      	str	r3, [sp, #16]
 800758c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007590:	4825      	ldr	r0, [pc, #148]	; (8007628 <_svfiprintf_r+0x1ec>)
 8007592:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007596:	2206      	movs	r2, #6
 8007598:	f7f8 fe22 	bl	80001e0 <memchr>
 800759c:	2800      	cmp	r0, #0
 800759e:	d038      	beq.n	8007612 <_svfiprintf_r+0x1d6>
 80075a0:	4b22      	ldr	r3, [pc, #136]	; (800762c <_svfiprintf_r+0x1f0>)
 80075a2:	bb1b      	cbnz	r3, 80075ec <_svfiprintf_r+0x1b0>
 80075a4:	9b03      	ldr	r3, [sp, #12]
 80075a6:	3307      	adds	r3, #7
 80075a8:	f023 0307 	bic.w	r3, r3, #7
 80075ac:	3308      	adds	r3, #8
 80075ae:	9303      	str	r3, [sp, #12]
 80075b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b2:	4433      	add	r3, r6
 80075b4:	9309      	str	r3, [sp, #36]	; 0x24
 80075b6:	e768      	b.n	800748a <_svfiprintf_r+0x4e>
 80075b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80075bc:	460c      	mov	r4, r1
 80075be:	2001      	movs	r0, #1
 80075c0:	e7a6      	b.n	8007510 <_svfiprintf_r+0xd4>
 80075c2:	2300      	movs	r3, #0
 80075c4:	3401      	adds	r4, #1
 80075c6:	9305      	str	r3, [sp, #20]
 80075c8:	4619      	mov	r1, r3
 80075ca:	f04f 0c0a 	mov.w	ip, #10
 80075ce:	4620      	mov	r0, r4
 80075d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075d4:	3a30      	subs	r2, #48	; 0x30
 80075d6:	2a09      	cmp	r2, #9
 80075d8:	d903      	bls.n	80075e2 <_svfiprintf_r+0x1a6>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d0c6      	beq.n	800756c <_svfiprintf_r+0x130>
 80075de:	9105      	str	r1, [sp, #20]
 80075e0:	e7c4      	b.n	800756c <_svfiprintf_r+0x130>
 80075e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80075e6:	4604      	mov	r4, r0
 80075e8:	2301      	movs	r3, #1
 80075ea:	e7f0      	b.n	80075ce <_svfiprintf_r+0x192>
 80075ec:	ab03      	add	r3, sp, #12
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	462a      	mov	r2, r5
 80075f2:	4b0f      	ldr	r3, [pc, #60]	; (8007630 <_svfiprintf_r+0x1f4>)
 80075f4:	a904      	add	r1, sp, #16
 80075f6:	4638      	mov	r0, r7
 80075f8:	f3af 8000 	nop.w
 80075fc:	1c42      	adds	r2, r0, #1
 80075fe:	4606      	mov	r6, r0
 8007600:	d1d6      	bne.n	80075b0 <_svfiprintf_r+0x174>
 8007602:	89ab      	ldrh	r3, [r5, #12]
 8007604:	065b      	lsls	r3, r3, #25
 8007606:	f53f af2d 	bmi.w	8007464 <_svfiprintf_r+0x28>
 800760a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800760c:	b01d      	add	sp, #116	; 0x74
 800760e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007612:	ab03      	add	r3, sp, #12
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	462a      	mov	r2, r5
 8007618:	4b05      	ldr	r3, [pc, #20]	; (8007630 <_svfiprintf_r+0x1f4>)
 800761a:	a904      	add	r1, sp, #16
 800761c:	4638      	mov	r0, r7
 800761e:	f000 f9bd 	bl	800799c <_printf_i>
 8007622:	e7eb      	b.n	80075fc <_svfiprintf_r+0x1c0>
 8007624:	08008080 	.word	0x08008080
 8007628:	0800808a 	.word	0x0800808a
 800762c:	00000000 	.word	0x00000000
 8007630:	08007389 	.word	0x08007389
 8007634:	08008086 	.word	0x08008086

08007638 <__sfputc_r>:
 8007638:	6893      	ldr	r3, [r2, #8]
 800763a:	3b01      	subs	r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	b410      	push	{r4}
 8007640:	6093      	str	r3, [r2, #8]
 8007642:	da08      	bge.n	8007656 <__sfputc_r+0x1e>
 8007644:	6994      	ldr	r4, [r2, #24]
 8007646:	42a3      	cmp	r3, r4
 8007648:	db01      	blt.n	800764e <__sfputc_r+0x16>
 800764a:	290a      	cmp	r1, #10
 800764c:	d103      	bne.n	8007656 <__sfputc_r+0x1e>
 800764e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007652:	f7ff bc24 	b.w	8006e9e <__swbuf_r>
 8007656:	6813      	ldr	r3, [r2, #0]
 8007658:	1c58      	adds	r0, r3, #1
 800765a:	6010      	str	r0, [r2, #0]
 800765c:	7019      	strb	r1, [r3, #0]
 800765e:	4608      	mov	r0, r1
 8007660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007664:	4770      	bx	lr

08007666 <__sfputs_r>:
 8007666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007668:	4606      	mov	r6, r0
 800766a:	460f      	mov	r7, r1
 800766c:	4614      	mov	r4, r2
 800766e:	18d5      	adds	r5, r2, r3
 8007670:	42ac      	cmp	r4, r5
 8007672:	d101      	bne.n	8007678 <__sfputs_r+0x12>
 8007674:	2000      	movs	r0, #0
 8007676:	e007      	b.n	8007688 <__sfputs_r+0x22>
 8007678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800767c:	463a      	mov	r2, r7
 800767e:	4630      	mov	r0, r6
 8007680:	f7ff ffda 	bl	8007638 <__sfputc_r>
 8007684:	1c43      	adds	r3, r0, #1
 8007686:	d1f3      	bne.n	8007670 <__sfputs_r+0xa>
 8007688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800768c <_vfiprintf_r>:
 800768c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007690:	460d      	mov	r5, r1
 8007692:	b09d      	sub	sp, #116	; 0x74
 8007694:	4614      	mov	r4, r2
 8007696:	4698      	mov	r8, r3
 8007698:	4606      	mov	r6, r0
 800769a:	b118      	cbz	r0, 80076a4 <_vfiprintf_r+0x18>
 800769c:	6a03      	ldr	r3, [r0, #32]
 800769e:	b90b      	cbnz	r3, 80076a4 <_vfiprintf_r+0x18>
 80076a0:	f7ff fa48 	bl	8006b34 <__sinit>
 80076a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076a6:	07d9      	lsls	r1, r3, #31
 80076a8:	d405      	bmi.n	80076b6 <_vfiprintf_r+0x2a>
 80076aa:	89ab      	ldrh	r3, [r5, #12]
 80076ac:	059a      	lsls	r2, r3, #22
 80076ae:	d402      	bmi.n	80076b6 <_vfiprintf_r+0x2a>
 80076b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076b2:	f7ff fd58 	bl	8007166 <__retarget_lock_acquire_recursive>
 80076b6:	89ab      	ldrh	r3, [r5, #12]
 80076b8:	071b      	lsls	r3, r3, #28
 80076ba:	d501      	bpl.n	80076c0 <_vfiprintf_r+0x34>
 80076bc:	692b      	ldr	r3, [r5, #16]
 80076be:	b99b      	cbnz	r3, 80076e8 <_vfiprintf_r+0x5c>
 80076c0:	4629      	mov	r1, r5
 80076c2:	4630      	mov	r0, r6
 80076c4:	f7ff fc28 	bl	8006f18 <__swsetup_r>
 80076c8:	b170      	cbz	r0, 80076e8 <_vfiprintf_r+0x5c>
 80076ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076cc:	07dc      	lsls	r4, r3, #31
 80076ce:	d504      	bpl.n	80076da <_vfiprintf_r+0x4e>
 80076d0:	f04f 30ff 	mov.w	r0, #4294967295
 80076d4:	b01d      	add	sp, #116	; 0x74
 80076d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076da:	89ab      	ldrh	r3, [r5, #12]
 80076dc:	0598      	lsls	r0, r3, #22
 80076de:	d4f7      	bmi.n	80076d0 <_vfiprintf_r+0x44>
 80076e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076e2:	f7ff fd41 	bl	8007168 <__retarget_lock_release_recursive>
 80076e6:	e7f3      	b.n	80076d0 <_vfiprintf_r+0x44>
 80076e8:	2300      	movs	r3, #0
 80076ea:	9309      	str	r3, [sp, #36]	; 0x24
 80076ec:	2320      	movs	r3, #32
 80076ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80076f6:	2330      	movs	r3, #48	; 0x30
 80076f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80078ac <_vfiprintf_r+0x220>
 80076fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007700:	f04f 0901 	mov.w	r9, #1
 8007704:	4623      	mov	r3, r4
 8007706:	469a      	mov	sl, r3
 8007708:	f813 2b01 	ldrb.w	r2, [r3], #1
 800770c:	b10a      	cbz	r2, 8007712 <_vfiprintf_r+0x86>
 800770e:	2a25      	cmp	r2, #37	; 0x25
 8007710:	d1f9      	bne.n	8007706 <_vfiprintf_r+0x7a>
 8007712:	ebba 0b04 	subs.w	fp, sl, r4
 8007716:	d00b      	beq.n	8007730 <_vfiprintf_r+0xa4>
 8007718:	465b      	mov	r3, fp
 800771a:	4622      	mov	r2, r4
 800771c:	4629      	mov	r1, r5
 800771e:	4630      	mov	r0, r6
 8007720:	f7ff ffa1 	bl	8007666 <__sfputs_r>
 8007724:	3001      	adds	r0, #1
 8007726:	f000 80a9 	beq.w	800787c <_vfiprintf_r+0x1f0>
 800772a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800772c:	445a      	add	r2, fp
 800772e:	9209      	str	r2, [sp, #36]	; 0x24
 8007730:	f89a 3000 	ldrb.w	r3, [sl]
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 80a1 	beq.w	800787c <_vfiprintf_r+0x1f0>
 800773a:	2300      	movs	r3, #0
 800773c:	f04f 32ff 	mov.w	r2, #4294967295
 8007740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007744:	f10a 0a01 	add.w	sl, sl, #1
 8007748:	9304      	str	r3, [sp, #16]
 800774a:	9307      	str	r3, [sp, #28]
 800774c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007750:	931a      	str	r3, [sp, #104]	; 0x68
 8007752:	4654      	mov	r4, sl
 8007754:	2205      	movs	r2, #5
 8007756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800775a:	4854      	ldr	r0, [pc, #336]	; (80078ac <_vfiprintf_r+0x220>)
 800775c:	f7f8 fd40 	bl	80001e0 <memchr>
 8007760:	9a04      	ldr	r2, [sp, #16]
 8007762:	b9d8      	cbnz	r0, 800779c <_vfiprintf_r+0x110>
 8007764:	06d1      	lsls	r1, r2, #27
 8007766:	bf44      	itt	mi
 8007768:	2320      	movmi	r3, #32
 800776a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800776e:	0713      	lsls	r3, r2, #28
 8007770:	bf44      	itt	mi
 8007772:	232b      	movmi	r3, #43	; 0x2b
 8007774:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007778:	f89a 3000 	ldrb.w	r3, [sl]
 800777c:	2b2a      	cmp	r3, #42	; 0x2a
 800777e:	d015      	beq.n	80077ac <_vfiprintf_r+0x120>
 8007780:	9a07      	ldr	r2, [sp, #28]
 8007782:	4654      	mov	r4, sl
 8007784:	2000      	movs	r0, #0
 8007786:	f04f 0c0a 	mov.w	ip, #10
 800778a:	4621      	mov	r1, r4
 800778c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007790:	3b30      	subs	r3, #48	; 0x30
 8007792:	2b09      	cmp	r3, #9
 8007794:	d94d      	bls.n	8007832 <_vfiprintf_r+0x1a6>
 8007796:	b1b0      	cbz	r0, 80077c6 <_vfiprintf_r+0x13a>
 8007798:	9207      	str	r2, [sp, #28]
 800779a:	e014      	b.n	80077c6 <_vfiprintf_r+0x13a>
 800779c:	eba0 0308 	sub.w	r3, r0, r8
 80077a0:	fa09 f303 	lsl.w	r3, r9, r3
 80077a4:	4313      	orrs	r3, r2
 80077a6:	9304      	str	r3, [sp, #16]
 80077a8:	46a2      	mov	sl, r4
 80077aa:	e7d2      	b.n	8007752 <_vfiprintf_r+0xc6>
 80077ac:	9b03      	ldr	r3, [sp, #12]
 80077ae:	1d19      	adds	r1, r3, #4
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	9103      	str	r1, [sp, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	bfbb      	ittet	lt
 80077b8:	425b      	neglt	r3, r3
 80077ba:	f042 0202 	orrlt.w	r2, r2, #2
 80077be:	9307      	strge	r3, [sp, #28]
 80077c0:	9307      	strlt	r3, [sp, #28]
 80077c2:	bfb8      	it	lt
 80077c4:	9204      	strlt	r2, [sp, #16]
 80077c6:	7823      	ldrb	r3, [r4, #0]
 80077c8:	2b2e      	cmp	r3, #46	; 0x2e
 80077ca:	d10c      	bne.n	80077e6 <_vfiprintf_r+0x15a>
 80077cc:	7863      	ldrb	r3, [r4, #1]
 80077ce:	2b2a      	cmp	r3, #42	; 0x2a
 80077d0:	d134      	bne.n	800783c <_vfiprintf_r+0x1b0>
 80077d2:	9b03      	ldr	r3, [sp, #12]
 80077d4:	1d1a      	adds	r2, r3, #4
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	9203      	str	r2, [sp, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	bfb8      	it	lt
 80077de:	f04f 33ff 	movlt.w	r3, #4294967295
 80077e2:	3402      	adds	r4, #2
 80077e4:	9305      	str	r3, [sp, #20]
 80077e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80078bc <_vfiprintf_r+0x230>
 80077ea:	7821      	ldrb	r1, [r4, #0]
 80077ec:	2203      	movs	r2, #3
 80077ee:	4650      	mov	r0, sl
 80077f0:	f7f8 fcf6 	bl	80001e0 <memchr>
 80077f4:	b138      	cbz	r0, 8007806 <_vfiprintf_r+0x17a>
 80077f6:	9b04      	ldr	r3, [sp, #16]
 80077f8:	eba0 000a 	sub.w	r0, r0, sl
 80077fc:	2240      	movs	r2, #64	; 0x40
 80077fe:	4082      	lsls	r2, r0
 8007800:	4313      	orrs	r3, r2
 8007802:	3401      	adds	r4, #1
 8007804:	9304      	str	r3, [sp, #16]
 8007806:	f814 1b01 	ldrb.w	r1, [r4], #1
 800780a:	4829      	ldr	r0, [pc, #164]	; (80078b0 <_vfiprintf_r+0x224>)
 800780c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007810:	2206      	movs	r2, #6
 8007812:	f7f8 fce5 	bl	80001e0 <memchr>
 8007816:	2800      	cmp	r0, #0
 8007818:	d03f      	beq.n	800789a <_vfiprintf_r+0x20e>
 800781a:	4b26      	ldr	r3, [pc, #152]	; (80078b4 <_vfiprintf_r+0x228>)
 800781c:	bb1b      	cbnz	r3, 8007866 <_vfiprintf_r+0x1da>
 800781e:	9b03      	ldr	r3, [sp, #12]
 8007820:	3307      	adds	r3, #7
 8007822:	f023 0307 	bic.w	r3, r3, #7
 8007826:	3308      	adds	r3, #8
 8007828:	9303      	str	r3, [sp, #12]
 800782a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800782c:	443b      	add	r3, r7
 800782e:	9309      	str	r3, [sp, #36]	; 0x24
 8007830:	e768      	b.n	8007704 <_vfiprintf_r+0x78>
 8007832:	fb0c 3202 	mla	r2, ip, r2, r3
 8007836:	460c      	mov	r4, r1
 8007838:	2001      	movs	r0, #1
 800783a:	e7a6      	b.n	800778a <_vfiprintf_r+0xfe>
 800783c:	2300      	movs	r3, #0
 800783e:	3401      	adds	r4, #1
 8007840:	9305      	str	r3, [sp, #20]
 8007842:	4619      	mov	r1, r3
 8007844:	f04f 0c0a 	mov.w	ip, #10
 8007848:	4620      	mov	r0, r4
 800784a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800784e:	3a30      	subs	r2, #48	; 0x30
 8007850:	2a09      	cmp	r2, #9
 8007852:	d903      	bls.n	800785c <_vfiprintf_r+0x1d0>
 8007854:	2b00      	cmp	r3, #0
 8007856:	d0c6      	beq.n	80077e6 <_vfiprintf_r+0x15a>
 8007858:	9105      	str	r1, [sp, #20]
 800785a:	e7c4      	b.n	80077e6 <_vfiprintf_r+0x15a>
 800785c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007860:	4604      	mov	r4, r0
 8007862:	2301      	movs	r3, #1
 8007864:	e7f0      	b.n	8007848 <_vfiprintf_r+0x1bc>
 8007866:	ab03      	add	r3, sp, #12
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	462a      	mov	r2, r5
 800786c:	4b12      	ldr	r3, [pc, #72]	; (80078b8 <_vfiprintf_r+0x22c>)
 800786e:	a904      	add	r1, sp, #16
 8007870:	4630      	mov	r0, r6
 8007872:	f3af 8000 	nop.w
 8007876:	4607      	mov	r7, r0
 8007878:	1c78      	adds	r0, r7, #1
 800787a:	d1d6      	bne.n	800782a <_vfiprintf_r+0x19e>
 800787c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800787e:	07d9      	lsls	r1, r3, #31
 8007880:	d405      	bmi.n	800788e <_vfiprintf_r+0x202>
 8007882:	89ab      	ldrh	r3, [r5, #12]
 8007884:	059a      	lsls	r2, r3, #22
 8007886:	d402      	bmi.n	800788e <_vfiprintf_r+0x202>
 8007888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800788a:	f7ff fc6d 	bl	8007168 <__retarget_lock_release_recursive>
 800788e:	89ab      	ldrh	r3, [r5, #12]
 8007890:	065b      	lsls	r3, r3, #25
 8007892:	f53f af1d 	bmi.w	80076d0 <_vfiprintf_r+0x44>
 8007896:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007898:	e71c      	b.n	80076d4 <_vfiprintf_r+0x48>
 800789a:	ab03      	add	r3, sp, #12
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	462a      	mov	r2, r5
 80078a0:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <_vfiprintf_r+0x22c>)
 80078a2:	a904      	add	r1, sp, #16
 80078a4:	4630      	mov	r0, r6
 80078a6:	f000 f879 	bl	800799c <_printf_i>
 80078aa:	e7e4      	b.n	8007876 <_vfiprintf_r+0x1ea>
 80078ac:	08008080 	.word	0x08008080
 80078b0:	0800808a 	.word	0x0800808a
 80078b4:	00000000 	.word	0x00000000
 80078b8:	08007667 	.word	0x08007667
 80078bc:	08008086 	.word	0x08008086

080078c0 <_printf_common>:
 80078c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078c4:	4616      	mov	r6, r2
 80078c6:	4699      	mov	r9, r3
 80078c8:	688a      	ldr	r2, [r1, #8]
 80078ca:	690b      	ldr	r3, [r1, #16]
 80078cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078d0:	4293      	cmp	r3, r2
 80078d2:	bfb8      	it	lt
 80078d4:	4613      	movlt	r3, r2
 80078d6:	6033      	str	r3, [r6, #0]
 80078d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078dc:	4607      	mov	r7, r0
 80078de:	460c      	mov	r4, r1
 80078e0:	b10a      	cbz	r2, 80078e6 <_printf_common+0x26>
 80078e2:	3301      	adds	r3, #1
 80078e4:	6033      	str	r3, [r6, #0]
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	0699      	lsls	r1, r3, #26
 80078ea:	bf42      	ittt	mi
 80078ec:	6833      	ldrmi	r3, [r6, #0]
 80078ee:	3302      	addmi	r3, #2
 80078f0:	6033      	strmi	r3, [r6, #0]
 80078f2:	6825      	ldr	r5, [r4, #0]
 80078f4:	f015 0506 	ands.w	r5, r5, #6
 80078f8:	d106      	bne.n	8007908 <_printf_common+0x48>
 80078fa:	f104 0a19 	add.w	sl, r4, #25
 80078fe:	68e3      	ldr	r3, [r4, #12]
 8007900:	6832      	ldr	r2, [r6, #0]
 8007902:	1a9b      	subs	r3, r3, r2
 8007904:	42ab      	cmp	r3, r5
 8007906:	dc26      	bgt.n	8007956 <_printf_common+0x96>
 8007908:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800790c:	1e13      	subs	r3, r2, #0
 800790e:	6822      	ldr	r2, [r4, #0]
 8007910:	bf18      	it	ne
 8007912:	2301      	movne	r3, #1
 8007914:	0692      	lsls	r2, r2, #26
 8007916:	d42b      	bmi.n	8007970 <_printf_common+0xb0>
 8007918:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800791c:	4649      	mov	r1, r9
 800791e:	4638      	mov	r0, r7
 8007920:	47c0      	blx	r8
 8007922:	3001      	adds	r0, #1
 8007924:	d01e      	beq.n	8007964 <_printf_common+0xa4>
 8007926:	6823      	ldr	r3, [r4, #0]
 8007928:	6922      	ldr	r2, [r4, #16]
 800792a:	f003 0306 	and.w	r3, r3, #6
 800792e:	2b04      	cmp	r3, #4
 8007930:	bf02      	ittt	eq
 8007932:	68e5      	ldreq	r5, [r4, #12]
 8007934:	6833      	ldreq	r3, [r6, #0]
 8007936:	1aed      	subeq	r5, r5, r3
 8007938:	68a3      	ldr	r3, [r4, #8]
 800793a:	bf0c      	ite	eq
 800793c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007940:	2500      	movne	r5, #0
 8007942:	4293      	cmp	r3, r2
 8007944:	bfc4      	itt	gt
 8007946:	1a9b      	subgt	r3, r3, r2
 8007948:	18ed      	addgt	r5, r5, r3
 800794a:	2600      	movs	r6, #0
 800794c:	341a      	adds	r4, #26
 800794e:	42b5      	cmp	r5, r6
 8007950:	d11a      	bne.n	8007988 <_printf_common+0xc8>
 8007952:	2000      	movs	r0, #0
 8007954:	e008      	b.n	8007968 <_printf_common+0xa8>
 8007956:	2301      	movs	r3, #1
 8007958:	4652      	mov	r2, sl
 800795a:	4649      	mov	r1, r9
 800795c:	4638      	mov	r0, r7
 800795e:	47c0      	blx	r8
 8007960:	3001      	adds	r0, #1
 8007962:	d103      	bne.n	800796c <_printf_common+0xac>
 8007964:	f04f 30ff 	mov.w	r0, #4294967295
 8007968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796c:	3501      	adds	r5, #1
 800796e:	e7c6      	b.n	80078fe <_printf_common+0x3e>
 8007970:	18e1      	adds	r1, r4, r3
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	2030      	movs	r0, #48	; 0x30
 8007976:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800797a:	4422      	add	r2, r4
 800797c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007980:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007984:	3302      	adds	r3, #2
 8007986:	e7c7      	b.n	8007918 <_printf_common+0x58>
 8007988:	2301      	movs	r3, #1
 800798a:	4622      	mov	r2, r4
 800798c:	4649      	mov	r1, r9
 800798e:	4638      	mov	r0, r7
 8007990:	47c0      	blx	r8
 8007992:	3001      	adds	r0, #1
 8007994:	d0e6      	beq.n	8007964 <_printf_common+0xa4>
 8007996:	3601      	adds	r6, #1
 8007998:	e7d9      	b.n	800794e <_printf_common+0x8e>
	...

0800799c <_printf_i>:
 800799c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079a0:	7e0f      	ldrb	r7, [r1, #24]
 80079a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079a4:	2f78      	cmp	r7, #120	; 0x78
 80079a6:	4691      	mov	r9, r2
 80079a8:	4680      	mov	r8, r0
 80079aa:	460c      	mov	r4, r1
 80079ac:	469a      	mov	sl, r3
 80079ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079b2:	d807      	bhi.n	80079c4 <_printf_i+0x28>
 80079b4:	2f62      	cmp	r7, #98	; 0x62
 80079b6:	d80a      	bhi.n	80079ce <_printf_i+0x32>
 80079b8:	2f00      	cmp	r7, #0
 80079ba:	f000 80d4 	beq.w	8007b66 <_printf_i+0x1ca>
 80079be:	2f58      	cmp	r7, #88	; 0x58
 80079c0:	f000 80c0 	beq.w	8007b44 <_printf_i+0x1a8>
 80079c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079cc:	e03a      	b.n	8007a44 <_printf_i+0xa8>
 80079ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079d2:	2b15      	cmp	r3, #21
 80079d4:	d8f6      	bhi.n	80079c4 <_printf_i+0x28>
 80079d6:	a101      	add	r1, pc, #4	; (adr r1, 80079dc <_printf_i+0x40>)
 80079d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079dc:	08007a35 	.word	0x08007a35
 80079e0:	08007a49 	.word	0x08007a49
 80079e4:	080079c5 	.word	0x080079c5
 80079e8:	080079c5 	.word	0x080079c5
 80079ec:	080079c5 	.word	0x080079c5
 80079f0:	080079c5 	.word	0x080079c5
 80079f4:	08007a49 	.word	0x08007a49
 80079f8:	080079c5 	.word	0x080079c5
 80079fc:	080079c5 	.word	0x080079c5
 8007a00:	080079c5 	.word	0x080079c5
 8007a04:	080079c5 	.word	0x080079c5
 8007a08:	08007b4d 	.word	0x08007b4d
 8007a0c:	08007a75 	.word	0x08007a75
 8007a10:	08007b07 	.word	0x08007b07
 8007a14:	080079c5 	.word	0x080079c5
 8007a18:	080079c5 	.word	0x080079c5
 8007a1c:	08007b6f 	.word	0x08007b6f
 8007a20:	080079c5 	.word	0x080079c5
 8007a24:	08007a75 	.word	0x08007a75
 8007a28:	080079c5 	.word	0x080079c5
 8007a2c:	080079c5 	.word	0x080079c5
 8007a30:	08007b0f 	.word	0x08007b0f
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	1d1a      	adds	r2, r3, #4
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	602a      	str	r2, [r5, #0]
 8007a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a44:	2301      	movs	r3, #1
 8007a46:	e09f      	b.n	8007b88 <_printf_i+0x1ec>
 8007a48:	6820      	ldr	r0, [r4, #0]
 8007a4a:	682b      	ldr	r3, [r5, #0]
 8007a4c:	0607      	lsls	r7, r0, #24
 8007a4e:	f103 0104 	add.w	r1, r3, #4
 8007a52:	6029      	str	r1, [r5, #0]
 8007a54:	d501      	bpl.n	8007a5a <_printf_i+0xbe>
 8007a56:	681e      	ldr	r6, [r3, #0]
 8007a58:	e003      	b.n	8007a62 <_printf_i+0xc6>
 8007a5a:	0646      	lsls	r6, r0, #25
 8007a5c:	d5fb      	bpl.n	8007a56 <_printf_i+0xba>
 8007a5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007a62:	2e00      	cmp	r6, #0
 8007a64:	da03      	bge.n	8007a6e <_printf_i+0xd2>
 8007a66:	232d      	movs	r3, #45	; 0x2d
 8007a68:	4276      	negs	r6, r6
 8007a6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a6e:	485a      	ldr	r0, [pc, #360]	; (8007bd8 <_printf_i+0x23c>)
 8007a70:	230a      	movs	r3, #10
 8007a72:	e012      	b.n	8007a9a <_printf_i+0xfe>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	6820      	ldr	r0, [r4, #0]
 8007a78:	1d19      	adds	r1, r3, #4
 8007a7a:	6029      	str	r1, [r5, #0]
 8007a7c:	0605      	lsls	r5, r0, #24
 8007a7e:	d501      	bpl.n	8007a84 <_printf_i+0xe8>
 8007a80:	681e      	ldr	r6, [r3, #0]
 8007a82:	e002      	b.n	8007a8a <_printf_i+0xee>
 8007a84:	0641      	lsls	r1, r0, #25
 8007a86:	d5fb      	bpl.n	8007a80 <_printf_i+0xe4>
 8007a88:	881e      	ldrh	r6, [r3, #0]
 8007a8a:	4853      	ldr	r0, [pc, #332]	; (8007bd8 <_printf_i+0x23c>)
 8007a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8007a8e:	bf0c      	ite	eq
 8007a90:	2308      	moveq	r3, #8
 8007a92:	230a      	movne	r3, #10
 8007a94:	2100      	movs	r1, #0
 8007a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a9a:	6865      	ldr	r5, [r4, #4]
 8007a9c:	60a5      	str	r5, [r4, #8]
 8007a9e:	2d00      	cmp	r5, #0
 8007aa0:	bfa2      	ittt	ge
 8007aa2:	6821      	ldrge	r1, [r4, #0]
 8007aa4:	f021 0104 	bicge.w	r1, r1, #4
 8007aa8:	6021      	strge	r1, [r4, #0]
 8007aaa:	b90e      	cbnz	r6, 8007ab0 <_printf_i+0x114>
 8007aac:	2d00      	cmp	r5, #0
 8007aae:	d04b      	beq.n	8007b48 <_printf_i+0x1ac>
 8007ab0:	4615      	mov	r5, r2
 8007ab2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ab6:	fb03 6711 	mls	r7, r3, r1, r6
 8007aba:	5dc7      	ldrb	r7, [r0, r7]
 8007abc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ac0:	4637      	mov	r7, r6
 8007ac2:	42bb      	cmp	r3, r7
 8007ac4:	460e      	mov	r6, r1
 8007ac6:	d9f4      	bls.n	8007ab2 <_printf_i+0x116>
 8007ac8:	2b08      	cmp	r3, #8
 8007aca:	d10b      	bne.n	8007ae4 <_printf_i+0x148>
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	07de      	lsls	r6, r3, #31
 8007ad0:	d508      	bpl.n	8007ae4 <_printf_i+0x148>
 8007ad2:	6923      	ldr	r3, [r4, #16]
 8007ad4:	6861      	ldr	r1, [r4, #4]
 8007ad6:	4299      	cmp	r1, r3
 8007ad8:	bfde      	ittt	le
 8007ada:	2330      	movle	r3, #48	; 0x30
 8007adc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ae0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ae4:	1b52      	subs	r2, r2, r5
 8007ae6:	6122      	str	r2, [r4, #16]
 8007ae8:	f8cd a000 	str.w	sl, [sp]
 8007aec:	464b      	mov	r3, r9
 8007aee:	aa03      	add	r2, sp, #12
 8007af0:	4621      	mov	r1, r4
 8007af2:	4640      	mov	r0, r8
 8007af4:	f7ff fee4 	bl	80078c0 <_printf_common>
 8007af8:	3001      	adds	r0, #1
 8007afa:	d14a      	bne.n	8007b92 <_printf_i+0x1f6>
 8007afc:	f04f 30ff 	mov.w	r0, #4294967295
 8007b00:	b004      	add	sp, #16
 8007b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b06:	6823      	ldr	r3, [r4, #0]
 8007b08:	f043 0320 	orr.w	r3, r3, #32
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	4833      	ldr	r0, [pc, #204]	; (8007bdc <_printf_i+0x240>)
 8007b10:	2778      	movs	r7, #120	; 0x78
 8007b12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	6829      	ldr	r1, [r5, #0]
 8007b1a:	061f      	lsls	r7, r3, #24
 8007b1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b20:	d402      	bmi.n	8007b28 <_printf_i+0x18c>
 8007b22:	065f      	lsls	r7, r3, #25
 8007b24:	bf48      	it	mi
 8007b26:	b2b6      	uxthmi	r6, r6
 8007b28:	07df      	lsls	r7, r3, #31
 8007b2a:	bf48      	it	mi
 8007b2c:	f043 0320 	orrmi.w	r3, r3, #32
 8007b30:	6029      	str	r1, [r5, #0]
 8007b32:	bf48      	it	mi
 8007b34:	6023      	strmi	r3, [r4, #0]
 8007b36:	b91e      	cbnz	r6, 8007b40 <_printf_i+0x1a4>
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	f023 0320 	bic.w	r3, r3, #32
 8007b3e:	6023      	str	r3, [r4, #0]
 8007b40:	2310      	movs	r3, #16
 8007b42:	e7a7      	b.n	8007a94 <_printf_i+0xf8>
 8007b44:	4824      	ldr	r0, [pc, #144]	; (8007bd8 <_printf_i+0x23c>)
 8007b46:	e7e4      	b.n	8007b12 <_printf_i+0x176>
 8007b48:	4615      	mov	r5, r2
 8007b4a:	e7bd      	b.n	8007ac8 <_printf_i+0x12c>
 8007b4c:	682b      	ldr	r3, [r5, #0]
 8007b4e:	6826      	ldr	r6, [r4, #0]
 8007b50:	6961      	ldr	r1, [r4, #20]
 8007b52:	1d18      	adds	r0, r3, #4
 8007b54:	6028      	str	r0, [r5, #0]
 8007b56:	0635      	lsls	r5, r6, #24
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	d501      	bpl.n	8007b60 <_printf_i+0x1c4>
 8007b5c:	6019      	str	r1, [r3, #0]
 8007b5e:	e002      	b.n	8007b66 <_printf_i+0x1ca>
 8007b60:	0670      	lsls	r0, r6, #25
 8007b62:	d5fb      	bpl.n	8007b5c <_printf_i+0x1c0>
 8007b64:	8019      	strh	r1, [r3, #0]
 8007b66:	2300      	movs	r3, #0
 8007b68:	6123      	str	r3, [r4, #16]
 8007b6a:	4615      	mov	r5, r2
 8007b6c:	e7bc      	b.n	8007ae8 <_printf_i+0x14c>
 8007b6e:	682b      	ldr	r3, [r5, #0]
 8007b70:	1d1a      	adds	r2, r3, #4
 8007b72:	602a      	str	r2, [r5, #0]
 8007b74:	681d      	ldr	r5, [r3, #0]
 8007b76:	6862      	ldr	r2, [r4, #4]
 8007b78:	2100      	movs	r1, #0
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	f7f8 fb30 	bl	80001e0 <memchr>
 8007b80:	b108      	cbz	r0, 8007b86 <_printf_i+0x1ea>
 8007b82:	1b40      	subs	r0, r0, r5
 8007b84:	6060      	str	r0, [r4, #4]
 8007b86:	6863      	ldr	r3, [r4, #4]
 8007b88:	6123      	str	r3, [r4, #16]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b90:	e7aa      	b.n	8007ae8 <_printf_i+0x14c>
 8007b92:	6923      	ldr	r3, [r4, #16]
 8007b94:	462a      	mov	r2, r5
 8007b96:	4649      	mov	r1, r9
 8007b98:	4640      	mov	r0, r8
 8007b9a:	47d0      	blx	sl
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d0ad      	beq.n	8007afc <_printf_i+0x160>
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	079b      	lsls	r3, r3, #30
 8007ba4:	d413      	bmi.n	8007bce <_printf_i+0x232>
 8007ba6:	68e0      	ldr	r0, [r4, #12]
 8007ba8:	9b03      	ldr	r3, [sp, #12]
 8007baa:	4298      	cmp	r0, r3
 8007bac:	bfb8      	it	lt
 8007bae:	4618      	movlt	r0, r3
 8007bb0:	e7a6      	b.n	8007b00 <_printf_i+0x164>
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	4632      	mov	r2, r6
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	4640      	mov	r0, r8
 8007bba:	47d0      	blx	sl
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d09d      	beq.n	8007afc <_printf_i+0x160>
 8007bc0:	3501      	adds	r5, #1
 8007bc2:	68e3      	ldr	r3, [r4, #12]
 8007bc4:	9903      	ldr	r1, [sp, #12]
 8007bc6:	1a5b      	subs	r3, r3, r1
 8007bc8:	42ab      	cmp	r3, r5
 8007bca:	dcf2      	bgt.n	8007bb2 <_printf_i+0x216>
 8007bcc:	e7eb      	b.n	8007ba6 <_printf_i+0x20a>
 8007bce:	2500      	movs	r5, #0
 8007bd0:	f104 0619 	add.w	r6, r4, #25
 8007bd4:	e7f5      	b.n	8007bc2 <_printf_i+0x226>
 8007bd6:	bf00      	nop
 8007bd8:	08008091 	.word	0x08008091
 8007bdc:	080080a2 	.word	0x080080a2

08007be0 <__sflush_r>:
 8007be0:	898a      	ldrh	r2, [r1, #12]
 8007be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be6:	4605      	mov	r5, r0
 8007be8:	0710      	lsls	r0, r2, #28
 8007bea:	460c      	mov	r4, r1
 8007bec:	d458      	bmi.n	8007ca0 <__sflush_r+0xc0>
 8007bee:	684b      	ldr	r3, [r1, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	dc05      	bgt.n	8007c00 <__sflush_r+0x20>
 8007bf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	dc02      	bgt.n	8007c00 <__sflush_r+0x20>
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c02:	2e00      	cmp	r6, #0
 8007c04:	d0f9      	beq.n	8007bfa <__sflush_r+0x1a>
 8007c06:	2300      	movs	r3, #0
 8007c08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c0c:	682f      	ldr	r7, [r5, #0]
 8007c0e:	6a21      	ldr	r1, [r4, #32]
 8007c10:	602b      	str	r3, [r5, #0]
 8007c12:	d032      	beq.n	8007c7a <__sflush_r+0x9a>
 8007c14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c16:	89a3      	ldrh	r3, [r4, #12]
 8007c18:	075a      	lsls	r2, r3, #29
 8007c1a:	d505      	bpl.n	8007c28 <__sflush_r+0x48>
 8007c1c:	6863      	ldr	r3, [r4, #4]
 8007c1e:	1ac0      	subs	r0, r0, r3
 8007c20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c22:	b10b      	cbz	r3, 8007c28 <__sflush_r+0x48>
 8007c24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c26:	1ac0      	subs	r0, r0, r3
 8007c28:	2300      	movs	r3, #0
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c2e:	6a21      	ldr	r1, [r4, #32]
 8007c30:	4628      	mov	r0, r5
 8007c32:	47b0      	blx	r6
 8007c34:	1c43      	adds	r3, r0, #1
 8007c36:	89a3      	ldrh	r3, [r4, #12]
 8007c38:	d106      	bne.n	8007c48 <__sflush_r+0x68>
 8007c3a:	6829      	ldr	r1, [r5, #0]
 8007c3c:	291d      	cmp	r1, #29
 8007c3e:	d82b      	bhi.n	8007c98 <__sflush_r+0xb8>
 8007c40:	4a29      	ldr	r2, [pc, #164]	; (8007ce8 <__sflush_r+0x108>)
 8007c42:	410a      	asrs	r2, r1
 8007c44:	07d6      	lsls	r6, r2, #31
 8007c46:	d427      	bmi.n	8007c98 <__sflush_r+0xb8>
 8007c48:	2200      	movs	r2, #0
 8007c4a:	6062      	str	r2, [r4, #4]
 8007c4c:	04d9      	lsls	r1, r3, #19
 8007c4e:	6922      	ldr	r2, [r4, #16]
 8007c50:	6022      	str	r2, [r4, #0]
 8007c52:	d504      	bpl.n	8007c5e <__sflush_r+0x7e>
 8007c54:	1c42      	adds	r2, r0, #1
 8007c56:	d101      	bne.n	8007c5c <__sflush_r+0x7c>
 8007c58:	682b      	ldr	r3, [r5, #0]
 8007c5a:	b903      	cbnz	r3, 8007c5e <__sflush_r+0x7e>
 8007c5c:	6560      	str	r0, [r4, #84]	; 0x54
 8007c5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c60:	602f      	str	r7, [r5, #0]
 8007c62:	2900      	cmp	r1, #0
 8007c64:	d0c9      	beq.n	8007bfa <__sflush_r+0x1a>
 8007c66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c6a:	4299      	cmp	r1, r3
 8007c6c:	d002      	beq.n	8007c74 <__sflush_r+0x94>
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f7ff fa8a 	bl	8007188 <_free_r>
 8007c74:	2000      	movs	r0, #0
 8007c76:	6360      	str	r0, [r4, #52]	; 0x34
 8007c78:	e7c0      	b.n	8007bfc <__sflush_r+0x1c>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	4628      	mov	r0, r5
 8007c7e:	47b0      	blx	r6
 8007c80:	1c41      	adds	r1, r0, #1
 8007c82:	d1c8      	bne.n	8007c16 <__sflush_r+0x36>
 8007c84:	682b      	ldr	r3, [r5, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d0c5      	beq.n	8007c16 <__sflush_r+0x36>
 8007c8a:	2b1d      	cmp	r3, #29
 8007c8c:	d001      	beq.n	8007c92 <__sflush_r+0xb2>
 8007c8e:	2b16      	cmp	r3, #22
 8007c90:	d101      	bne.n	8007c96 <__sflush_r+0xb6>
 8007c92:	602f      	str	r7, [r5, #0]
 8007c94:	e7b1      	b.n	8007bfa <__sflush_r+0x1a>
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c9c:	81a3      	strh	r3, [r4, #12]
 8007c9e:	e7ad      	b.n	8007bfc <__sflush_r+0x1c>
 8007ca0:	690f      	ldr	r7, [r1, #16]
 8007ca2:	2f00      	cmp	r7, #0
 8007ca4:	d0a9      	beq.n	8007bfa <__sflush_r+0x1a>
 8007ca6:	0793      	lsls	r3, r2, #30
 8007ca8:	680e      	ldr	r6, [r1, #0]
 8007caa:	bf08      	it	eq
 8007cac:	694b      	ldreq	r3, [r1, #20]
 8007cae:	600f      	str	r7, [r1, #0]
 8007cb0:	bf18      	it	ne
 8007cb2:	2300      	movne	r3, #0
 8007cb4:	eba6 0807 	sub.w	r8, r6, r7
 8007cb8:	608b      	str	r3, [r1, #8]
 8007cba:	f1b8 0f00 	cmp.w	r8, #0
 8007cbe:	dd9c      	ble.n	8007bfa <__sflush_r+0x1a>
 8007cc0:	6a21      	ldr	r1, [r4, #32]
 8007cc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cc4:	4643      	mov	r3, r8
 8007cc6:	463a      	mov	r2, r7
 8007cc8:	4628      	mov	r0, r5
 8007cca:	47b0      	blx	r6
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	dc06      	bgt.n	8007cde <__sflush_r+0xfe>
 8007cd0:	89a3      	ldrh	r3, [r4, #12]
 8007cd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd6:	81a3      	strh	r3, [r4, #12]
 8007cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cdc:	e78e      	b.n	8007bfc <__sflush_r+0x1c>
 8007cde:	4407      	add	r7, r0
 8007ce0:	eba8 0800 	sub.w	r8, r8, r0
 8007ce4:	e7e9      	b.n	8007cba <__sflush_r+0xda>
 8007ce6:	bf00      	nop
 8007ce8:	dfbffffe 	.word	0xdfbffffe

08007cec <_fflush_r>:
 8007cec:	b538      	push	{r3, r4, r5, lr}
 8007cee:	690b      	ldr	r3, [r1, #16]
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	b913      	cbnz	r3, 8007cfc <_fflush_r+0x10>
 8007cf6:	2500      	movs	r5, #0
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	bd38      	pop	{r3, r4, r5, pc}
 8007cfc:	b118      	cbz	r0, 8007d06 <_fflush_r+0x1a>
 8007cfe:	6a03      	ldr	r3, [r0, #32]
 8007d00:	b90b      	cbnz	r3, 8007d06 <_fflush_r+0x1a>
 8007d02:	f7fe ff17 	bl	8006b34 <__sinit>
 8007d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d0f3      	beq.n	8007cf6 <_fflush_r+0xa>
 8007d0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d10:	07d0      	lsls	r0, r2, #31
 8007d12:	d404      	bmi.n	8007d1e <_fflush_r+0x32>
 8007d14:	0599      	lsls	r1, r3, #22
 8007d16:	d402      	bmi.n	8007d1e <_fflush_r+0x32>
 8007d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d1a:	f7ff fa24 	bl	8007166 <__retarget_lock_acquire_recursive>
 8007d1e:	4628      	mov	r0, r5
 8007d20:	4621      	mov	r1, r4
 8007d22:	f7ff ff5d 	bl	8007be0 <__sflush_r>
 8007d26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d28:	07da      	lsls	r2, r3, #31
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	d4e4      	bmi.n	8007cf8 <_fflush_r+0xc>
 8007d2e:	89a3      	ldrh	r3, [r4, #12]
 8007d30:	059b      	lsls	r3, r3, #22
 8007d32:	d4e1      	bmi.n	8007cf8 <_fflush_r+0xc>
 8007d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d36:	f7ff fa17 	bl	8007168 <__retarget_lock_release_recursive>
 8007d3a:	e7dd      	b.n	8007cf8 <_fflush_r+0xc>

08007d3c <__swhatbuf_r>:
 8007d3c:	b570      	push	{r4, r5, r6, lr}
 8007d3e:	460c      	mov	r4, r1
 8007d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d44:	2900      	cmp	r1, #0
 8007d46:	b096      	sub	sp, #88	; 0x58
 8007d48:	4615      	mov	r5, r2
 8007d4a:	461e      	mov	r6, r3
 8007d4c:	da0d      	bge.n	8007d6a <__swhatbuf_r+0x2e>
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007d54:	f04f 0100 	mov.w	r1, #0
 8007d58:	bf0c      	ite	eq
 8007d5a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007d5e:	2340      	movne	r3, #64	; 0x40
 8007d60:	2000      	movs	r0, #0
 8007d62:	6031      	str	r1, [r6, #0]
 8007d64:	602b      	str	r3, [r5, #0]
 8007d66:	b016      	add	sp, #88	; 0x58
 8007d68:	bd70      	pop	{r4, r5, r6, pc}
 8007d6a:	466a      	mov	r2, sp
 8007d6c:	f000 f862 	bl	8007e34 <_fstat_r>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	dbec      	blt.n	8007d4e <__swhatbuf_r+0x12>
 8007d74:	9901      	ldr	r1, [sp, #4]
 8007d76:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007d7a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007d7e:	4259      	negs	r1, r3
 8007d80:	4159      	adcs	r1, r3
 8007d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d86:	e7eb      	b.n	8007d60 <__swhatbuf_r+0x24>

08007d88 <__smakebuf_r>:
 8007d88:	898b      	ldrh	r3, [r1, #12]
 8007d8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d8c:	079d      	lsls	r5, r3, #30
 8007d8e:	4606      	mov	r6, r0
 8007d90:	460c      	mov	r4, r1
 8007d92:	d507      	bpl.n	8007da4 <__smakebuf_r+0x1c>
 8007d94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	6123      	str	r3, [r4, #16]
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	6163      	str	r3, [r4, #20]
 8007da0:	b002      	add	sp, #8
 8007da2:	bd70      	pop	{r4, r5, r6, pc}
 8007da4:	ab01      	add	r3, sp, #4
 8007da6:	466a      	mov	r2, sp
 8007da8:	f7ff ffc8 	bl	8007d3c <__swhatbuf_r>
 8007dac:	9900      	ldr	r1, [sp, #0]
 8007dae:	4605      	mov	r5, r0
 8007db0:	4630      	mov	r0, r6
 8007db2:	f7ff fa5d 	bl	8007270 <_malloc_r>
 8007db6:	b948      	cbnz	r0, 8007dcc <__smakebuf_r+0x44>
 8007db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dbc:	059a      	lsls	r2, r3, #22
 8007dbe:	d4ef      	bmi.n	8007da0 <__smakebuf_r+0x18>
 8007dc0:	f023 0303 	bic.w	r3, r3, #3
 8007dc4:	f043 0302 	orr.w	r3, r3, #2
 8007dc8:	81a3      	strh	r3, [r4, #12]
 8007dca:	e7e3      	b.n	8007d94 <__smakebuf_r+0xc>
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	6020      	str	r0, [r4, #0]
 8007dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd4:	81a3      	strh	r3, [r4, #12]
 8007dd6:	9b00      	ldr	r3, [sp, #0]
 8007dd8:	6163      	str	r3, [r4, #20]
 8007dda:	9b01      	ldr	r3, [sp, #4]
 8007ddc:	6120      	str	r0, [r4, #16]
 8007dde:	b15b      	cbz	r3, 8007df8 <__smakebuf_r+0x70>
 8007de0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007de4:	4630      	mov	r0, r6
 8007de6:	f000 f837 	bl	8007e58 <_isatty_r>
 8007dea:	b128      	cbz	r0, 8007df8 <__smakebuf_r+0x70>
 8007dec:	89a3      	ldrh	r3, [r4, #12]
 8007dee:	f023 0303 	bic.w	r3, r3, #3
 8007df2:	f043 0301 	orr.w	r3, r3, #1
 8007df6:	81a3      	strh	r3, [r4, #12]
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	431d      	orrs	r5, r3
 8007dfc:	81a5      	strh	r5, [r4, #12]
 8007dfe:	e7cf      	b.n	8007da0 <__smakebuf_r+0x18>

08007e00 <memmove>:
 8007e00:	4288      	cmp	r0, r1
 8007e02:	b510      	push	{r4, lr}
 8007e04:	eb01 0402 	add.w	r4, r1, r2
 8007e08:	d902      	bls.n	8007e10 <memmove+0x10>
 8007e0a:	4284      	cmp	r4, r0
 8007e0c:	4623      	mov	r3, r4
 8007e0e:	d807      	bhi.n	8007e20 <memmove+0x20>
 8007e10:	1e43      	subs	r3, r0, #1
 8007e12:	42a1      	cmp	r1, r4
 8007e14:	d008      	beq.n	8007e28 <memmove+0x28>
 8007e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e1e:	e7f8      	b.n	8007e12 <memmove+0x12>
 8007e20:	4402      	add	r2, r0
 8007e22:	4601      	mov	r1, r0
 8007e24:	428a      	cmp	r2, r1
 8007e26:	d100      	bne.n	8007e2a <memmove+0x2a>
 8007e28:	bd10      	pop	{r4, pc}
 8007e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e32:	e7f7      	b.n	8007e24 <memmove+0x24>

08007e34 <_fstat_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	4d07      	ldr	r5, [pc, #28]	; (8007e54 <_fstat_r+0x20>)
 8007e38:	2300      	movs	r3, #0
 8007e3a:	4604      	mov	r4, r0
 8007e3c:	4608      	mov	r0, r1
 8007e3e:	4611      	mov	r1, r2
 8007e40:	602b      	str	r3, [r5, #0]
 8007e42:	f7f9 fcfe 	bl	8001842 <_fstat>
 8007e46:	1c43      	adds	r3, r0, #1
 8007e48:	d102      	bne.n	8007e50 <_fstat_r+0x1c>
 8007e4a:	682b      	ldr	r3, [r5, #0]
 8007e4c:	b103      	cbz	r3, 8007e50 <_fstat_r+0x1c>
 8007e4e:	6023      	str	r3, [r4, #0]
 8007e50:	bd38      	pop	{r3, r4, r5, pc}
 8007e52:	bf00      	nop
 8007e54:	20004310 	.word	0x20004310

08007e58 <_isatty_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4d06      	ldr	r5, [pc, #24]	; (8007e74 <_isatty_r+0x1c>)
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	4604      	mov	r4, r0
 8007e60:	4608      	mov	r0, r1
 8007e62:	602b      	str	r3, [r5, #0]
 8007e64:	f7f9 fcfd 	bl	8001862 <_isatty>
 8007e68:	1c43      	adds	r3, r0, #1
 8007e6a:	d102      	bne.n	8007e72 <_isatty_r+0x1a>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	b103      	cbz	r3, 8007e72 <_isatty_r+0x1a>
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	20004310 	.word	0x20004310

08007e78 <_sbrk_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4d06      	ldr	r5, [pc, #24]	; (8007e94 <_sbrk_r+0x1c>)
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	4604      	mov	r4, r0
 8007e80:	4608      	mov	r0, r1
 8007e82:	602b      	str	r3, [r5, #0]
 8007e84:	f7f9 fd06 	bl	8001894 <_sbrk>
 8007e88:	1c43      	adds	r3, r0, #1
 8007e8a:	d102      	bne.n	8007e92 <_sbrk_r+0x1a>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	b103      	cbz	r3, 8007e92 <_sbrk_r+0x1a>
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	bd38      	pop	{r3, r4, r5, pc}
 8007e94:	20004310 	.word	0x20004310

08007e98 <_realloc_r>:
 8007e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e9c:	4680      	mov	r8, r0
 8007e9e:	4614      	mov	r4, r2
 8007ea0:	460e      	mov	r6, r1
 8007ea2:	b921      	cbnz	r1, 8007eae <_realloc_r+0x16>
 8007ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	f7ff b9e1 	b.w	8007270 <_malloc_r>
 8007eae:	b92a      	cbnz	r2, 8007ebc <_realloc_r+0x24>
 8007eb0:	f7ff f96a 	bl	8007188 <_free_r>
 8007eb4:	4625      	mov	r5, r4
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ebc:	f000 f81b 	bl	8007ef6 <_malloc_usable_size_r>
 8007ec0:	4284      	cmp	r4, r0
 8007ec2:	4607      	mov	r7, r0
 8007ec4:	d802      	bhi.n	8007ecc <_realloc_r+0x34>
 8007ec6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007eca:	d812      	bhi.n	8007ef2 <_realloc_r+0x5a>
 8007ecc:	4621      	mov	r1, r4
 8007ece:	4640      	mov	r0, r8
 8007ed0:	f7ff f9ce 	bl	8007270 <_malloc_r>
 8007ed4:	4605      	mov	r5, r0
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	d0ed      	beq.n	8007eb6 <_realloc_r+0x1e>
 8007eda:	42bc      	cmp	r4, r7
 8007edc:	4622      	mov	r2, r4
 8007ede:	4631      	mov	r1, r6
 8007ee0:	bf28      	it	cs
 8007ee2:	463a      	movcs	r2, r7
 8007ee4:	f7ff f941 	bl	800716a <memcpy>
 8007ee8:	4631      	mov	r1, r6
 8007eea:	4640      	mov	r0, r8
 8007eec:	f7ff f94c 	bl	8007188 <_free_r>
 8007ef0:	e7e1      	b.n	8007eb6 <_realloc_r+0x1e>
 8007ef2:	4635      	mov	r5, r6
 8007ef4:	e7df      	b.n	8007eb6 <_realloc_r+0x1e>

08007ef6 <_malloc_usable_size_r>:
 8007ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007efa:	1f18      	subs	r0, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	bfbc      	itt	lt
 8007f00:	580b      	ldrlt	r3, [r1, r0]
 8007f02:	18c0      	addlt	r0, r0, r3
 8007f04:	4770      	bx	lr
	...

08007f08 <_init>:
 8007f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0a:	bf00      	nop
 8007f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f0e:	bc08      	pop	{r3}
 8007f10:	469e      	mov	lr, r3
 8007f12:	4770      	bx	lr

08007f14 <_fini>:
 8007f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f16:	bf00      	nop
 8007f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f1a:	bc08      	pop	{r3}
 8007f1c:	469e      	mov	lr, r3
 8007f1e:	4770      	bx	lr
