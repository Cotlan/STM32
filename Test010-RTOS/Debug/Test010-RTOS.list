
Test010-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005680  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08005820  08005820  00015820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005984  08005984  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005984  08005984  00015984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800598c  0800598c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800598c  0800598c  0001598c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005990  08005990  00015990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004208  2000006c  08005a00  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004274  08005a00  00024274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000145d7  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030a1  00000000  00000000  000346b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00037758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da4  00000000  00000000  000388f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000190f5  00000000  00000000  0003969c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d36  00000000  00000000  00052791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098aa2  00000000  00000000  000664c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005290  00000000  00000000  000fef6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001041fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005808 	.word	0x08005808

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08005808 	.word	0x08005808

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <__io_getchar>:
//#include "C:\Users\user\STM32Cube\Repository\STM32Cube_FW_F4_V1.28.1\Drivers\STM32F4xx_HAL_Driver\inc\stm32f4xx_hal_i2c.h"
extern UART_HandleTypeDef huart2;


int __io_getchar(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
   char ch;
   //데이터를 받을 때까지 기다려야 하므로 while을 사용해야 함
   while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 8000582:	bf00      	nop
 8000584:	1df9      	adds	r1, r7, #7
 8000586:	230a      	movs	r3, #10
 8000588:	2201      	movs	r2, #1
 800058a:	480d      	ldr	r0, [pc, #52]	; (80005c0 <__io_getchar+0x44>)
 800058c:	f002 f885 	bl	800269a <HAL_UART_Receive>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d1f6      	bne.n	8000584 <__io_getchar+0x8>
   HAL_UART_Transmit(&huart2, &ch, 1, 10); // echo: Serial 통신에서 받은 데이터를 그대로 돌려주는 것
 8000596:	1df9      	adds	r1, r7, #7
 8000598:	230a      	movs	r3, #10
 800059a:	2201      	movs	r2, #1
 800059c:	4808      	ldr	r0, [pc, #32]	; (80005c0 <__io_getchar+0x44>)
 800059e:	f001 fff1 	bl	8002584 <HAL_UART_Transmit>
   if(ch == '\r') HAL_UART_Transmit(&huart2, "\n", 1, 10);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b0d      	cmp	r3, #13
 80005a6:	d105      	bne.n	80005b4 <__io_getchar+0x38>
 80005a8:	230a      	movs	r3, #10
 80005aa:	2201      	movs	r2, #1
 80005ac:	4905      	ldr	r1, [pc, #20]	; (80005c4 <__io_getchar+0x48>)
 80005ae:	4804      	ldr	r0, [pc, #16]	; (80005c0 <__io_getchar+0x44>)
 80005b0:	f001 ffe8 	bl	8002584 <HAL_UART_Transmit>
   return ch;
 80005b4:	79fb      	ldrb	r3, [r7, #7]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000328 	.word	0x20000328
 80005c4:	08005820 	.word	0x08005820

080005c8 <__io_putchar>:
int __io_putchar(int ch) // Lowest output Function
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10); // timeout: 10ms
 80005d0:	1d39      	adds	r1, r7, #4
 80005d2:	230a      	movs	r3, #10
 80005d4:	2201      	movs	r2, #1
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <__io_putchar+0x20>)
 80005d8:	f001 ffd4 	bl	8002584 <HAL_UART_Transmit>
   return ch;
 80005dc:	687b      	ldr	r3, [r7, #4]
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	20000328 	.word	0x20000328

080005ec <ProgramStart>:
void ProgramStart(char *str)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
   //printf("\033[2J\033[0;0H"); // printf("\033[2J"); : 화면 Clear
   cls();
 80005f4:	f000 f830 	bl	8000658 <cls>
   Cursor(0,0);
 80005f8:	2100      	movs	r1, #0
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 f836 	bl	800066c <Cursor>
   printf("Program Name - %s\r\n", str);
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	480a      	ldr	r0, [pc, #40]	; (800062c <ProgramStart+0x40>)
 8000604:	f003 ff4c 	bl	80044a0 <iprintf>
   printf("Press Blue-button(B1) to Start ...\r\n");
 8000608:	4809      	ldr	r0, [pc, #36]	; (8000630 <ProgramStart+0x44>)
 800060a:	f003 ffaf 	bl	800456c <puts>
   StandBy();
 800060e:	f000 f813 	bl	8000638 <StandBy>
   setvbuf(stdin, NULL, _IONBF, 0);
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <ProgramStart+0x48>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	6858      	ldr	r0, [r3, #4]
 8000618:	2300      	movs	r3, #0
 800061a:	2202      	movs	r2, #2
 800061c:	2100      	movs	r1, #0
 800061e:	f003 ffad 	bl	800457c <setvbuf>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	08005824 	.word	0x08005824
 8000630:	08005838 	.word	0x08005838
 8000634:	20000068 	.word	0x20000068

08000638 <StandBy>:

void StandBy()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 800063c:	bf00      	nop
 800063e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <StandBy+0x1c>)
 8000644:	f000 ffac 	bl	80015a0 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1f7      	bne.n	800063e <StandBy+0x6>
}
 800064e:	bf00      	nop
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40020800 	.word	0x40020800

08000658 <cls>:

void cls() // 화면 clear
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
   printf("\033[2J");
 800065c:	4802      	ldr	r0, [pc, #8]	; (8000668 <cls+0x10>)
 800065e:	f003 ff1f 	bl	80044a0 <iprintf>
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	0800585c 	.word	0x0800585c

0800066c <Cursor>:

void Cursor(int x, int y)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
   char buf[20];
   sprintf(buf, "\033[%d;%dH", y,x);
 8000676:	f107 000c 	add.w	r0, r7, #12
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	4906      	ldr	r1, [pc, #24]	; (8000698 <Cursor+0x2c>)
 8000680:	f004 f82a 	bl	80046d8 <siprintf>
   puts(buf);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	4618      	mov	r0, r3
 800068a:	f003 ff6f 	bl	800456c <puts>
}
 800068e:	bf00      	nop
 8000690:	3720      	adds	r7, #32
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	08005864 	.word	0x08005864

0800069c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80006ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	4a06      	ldr	r2, [pc, #24]	; (80006cc <vApplicationGetIdleTaskMemory+0x30>)
 80006b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2280      	movs	r2, #128	; 0x80
 80006b8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	20000088 	.word	0x20000088
 80006cc:	20000128 	.word	0x20000128

080006d0 <LD2Test>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int bn =0 ; mode =0; t1 =0;//mode : 1 button pressed 0 release
void LD2Test()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006d4:	2120      	movs	r1, #32
 80006d6:	4802      	ldr	r0, [pc, #8]	; (80006e0 <LD2Test+0x10>)
 80006d8:	f000 ff93 	bl	8001602 <HAL_GPIO_TogglePin>
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40020000 	.word	0x40020000

080006e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	80fb      	strh	r3, [r7, #6]
	mode = 1; t1 =0;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_GPIO_EXTI_Callback+0x2c>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <HAL_GPIO_EXTI_Callback+0x30>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	bn++;
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <HAL_GPIO_EXTI_Callback+0x34>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	3301      	adds	r3, #1
 8000700:	4a05      	ldr	r2, [pc, #20]	; (8000718 <HAL_GPIO_EXTI_Callback+0x34>)
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	2000037c 	.word	0x2000037c
 8000714:	20000380 	.word	0x20000380
 8000718:	20000378 	.word	0x20000378

0800071c <step_half>:

void step_half(int step)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
		switch(step)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3b01      	subs	r3, #1
 8000728:	2b07      	cmp	r3, #7
 800072a:	f200 80c3 	bhi.w	80008b4 <step_half+0x198>
 800072e:	a201      	add	r2, pc, #4	; (adr r2, 8000734 <step_half+0x18>)
 8000730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000734:	08000755 	.word	0x08000755
 8000738:	08000781 	.word	0x08000781
 800073c:	080007ad 	.word	0x080007ad
 8000740:	080007d9 	.word	0x080007d9
 8000744:	08000805 	.word	0x08000805
 8000748:	08000831 	.word	0x08000831
 800074c:	0800085d 	.word	0x0800085d
 8000750:	08000889 	.word	0x08000889
		{
		case 1:

			//step 1
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000754:	2201      	movs	r2, #1
 8000756:	2108      	movs	r1, #8
 8000758:	4858      	ldr	r0, [pc, #352]	; (80008bc <step_half+0x1a0>)
 800075a:	f000 ff39 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2120      	movs	r1, #32
 8000762:	4856      	ldr	r0, [pc, #344]	; (80008bc <step_half+0x1a0>)
 8000764:	f000 ff34 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2110      	movs	r1, #16
 800076c:	4853      	ldr	r0, [pc, #332]	; (80008bc <step_half+0x1a0>)
 800076e:	f000 ff2f 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000778:	4850      	ldr	r0, [pc, #320]	; (80008bc <step_half+0x1a0>)
 800077a:	f000 ff29 	bl	80015d0 <HAL_GPIO_WritePin>
			break;//instead delay
 800077e:	e099      	b.n	80008b4 <step_half+0x198>

		case 2:
			//step 2
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000780:	2201      	movs	r2, #1
 8000782:	2108      	movs	r1, #8
 8000784:	484d      	ldr	r0, [pc, #308]	; (80008bc <step_half+0x1a0>)
 8000786:	f000 ff23 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 800078a:	2201      	movs	r2, #1
 800078c:	2120      	movs	r1, #32
 800078e:	484b      	ldr	r0, [pc, #300]	; (80008bc <step_half+0x1a0>)
 8000790:	f000 ff1e 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2110      	movs	r1, #16
 8000798:	4848      	ldr	r0, [pc, #288]	; (80008bc <step_half+0x1a0>)
 800079a:	f000 ff19 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a4:	4845      	ldr	r0, [pc, #276]	; (80008bc <step_half+0x1a0>)
 80007a6:	f000 ff13 	bl	80015d0 <HAL_GPIO_WritePin>
			break;//instead delay
 80007aa:	e083      	b.n	80008b4 <step_half+0x198>

		case 3:
			//step 3
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2108      	movs	r1, #8
 80007b0:	4842      	ldr	r0, [pc, #264]	; (80008bc <step_half+0x1a0>)
 80007b2:	f000 ff0d 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2120      	movs	r1, #32
 80007ba:	4840      	ldr	r0, [pc, #256]	; (80008bc <step_half+0x1a0>)
 80007bc:	f000 ff08 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2110      	movs	r1, #16
 80007c4:	483d      	ldr	r0, [pc, #244]	; (80008bc <step_half+0x1a0>)
 80007c6:	f000 ff03 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d0:	483a      	ldr	r0, [pc, #232]	; (80008bc <step_half+0x1a0>)
 80007d2:	f000 fefd 	bl	80015d0 <HAL_GPIO_WritePin>
			break;//instead delay
 80007d6:	e06d      	b.n	80008b4 <step_half+0x198>

		case 4:
			//step 4
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80007d8:	2200      	movs	r2, #0
 80007da:	2108      	movs	r1, #8
 80007dc:	4837      	ldr	r0, [pc, #220]	; (80008bc <step_half+0x1a0>)
 80007de:	f000 fef7 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2120      	movs	r1, #32
 80007e6:	4835      	ldr	r0, [pc, #212]	; (80008bc <step_half+0x1a0>)
 80007e8:	f000 fef2 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2110      	movs	r1, #16
 80007f0:	4832      	ldr	r0, [pc, #200]	; (80008bc <step_half+0x1a0>)
 80007f2:	f000 feed 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fc:	482f      	ldr	r0, [pc, #188]	; (80008bc <step_half+0x1a0>)
 80007fe:	f000 fee7 	bl	80015d0 <HAL_GPIO_WritePin>
			break;//instead delay
 8000802:	e057      	b.n	80008b4 <step_half+0x198>

		case 5:
			//step 5
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2108      	movs	r1, #8
 8000808:	482c      	ldr	r0, [pc, #176]	; (80008bc <step_half+0x1a0>)
 800080a:	f000 fee1 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2120      	movs	r1, #32
 8000812:	482a      	ldr	r0, [pc, #168]	; (80008bc <step_half+0x1a0>)
 8000814:	f000 fedc 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000818:	2201      	movs	r2, #1
 800081a:	2110      	movs	r1, #16
 800081c:	4827      	ldr	r0, [pc, #156]	; (80008bc <step_half+0x1a0>)
 800081e:	f000 fed7 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000828:	4824      	ldr	r0, [pc, #144]	; (80008bc <step_half+0x1a0>)
 800082a:	f000 fed1 	bl	80015d0 <HAL_GPIO_WritePin>
			break;//instead delay
 800082e:	e041      	b.n	80008b4 <step_half+0x198>

		case 6:
			//step 6
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2108      	movs	r1, #8
 8000834:	4821      	ldr	r0, [pc, #132]	; (80008bc <step_half+0x1a0>)
 8000836:	f000 fecb 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2120      	movs	r1, #32
 800083e:	481f      	ldr	r0, [pc, #124]	; (80008bc <step_half+0x1a0>)
 8000840:	f000 fec6 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8000844:	2201      	movs	r2, #1
 8000846:	2110      	movs	r1, #16
 8000848:	481c      	ldr	r0, [pc, #112]	; (80008bc <step_half+0x1a0>)
 800084a:	f000 fec1 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000854:	4819      	ldr	r0, [pc, #100]	; (80008bc <step_half+0x1a0>)
 8000856:	f000 febb 	bl	80015d0 <HAL_GPIO_WritePin>
			break;//instead delay
 800085a:	e02b      	b.n	80008b4 <step_half+0x198>
		case 7:
			//step 7
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2108      	movs	r1, #8
 8000860:	4816      	ldr	r0, [pc, #88]	; (80008bc <step_half+0x1a0>)
 8000862:	f000 feb5 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2120      	movs	r1, #32
 800086a:	4814      	ldr	r0, [pc, #80]	; (80008bc <step_half+0x1a0>)
 800086c:	f000 feb0 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 8000870:	2200      	movs	r2, #0
 8000872:	2110      	movs	r1, #16
 8000874:	4811      	ldr	r0, [pc, #68]	; (80008bc <step_half+0x1a0>)
 8000876:	f000 feab 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 800087a:	2201      	movs	r2, #1
 800087c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000880:	480e      	ldr	r0, [pc, #56]	; (80008bc <step_half+0x1a0>)
 8000882:	f000 fea5 	bl	80015d0 <HAL_GPIO_WritePin>
			break;//instead delay
 8000886:	e015      	b.n	80008b4 <step_half+0x198>
		case 8:
			//step 8
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 8000888:	2201      	movs	r2, #1
 800088a:	2108      	movs	r1, #8
 800088c:	480b      	ldr	r0, [pc, #44]	; (80008bc <step_half+0x1a0>)
 800088e:	f000 fe9f 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2120      	movs	r1, #32
 8000896:	4809      	ldr	r0, [pc, #36]	; (80008bc <step_half+0x1a0>)
 8000898:	f000 fe9a 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	2110      	movs	r1, #16
 80008a0:	4806      	ldr	r0, [pc, #24]	; (80008bc <step_half+0x1a0>)
 80008a2:	f000 fe95 	bl	80015d0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 80008a6:	2201      	movs	r2, #1
 80008a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ac:	4803      	ldr	r0, [pc, #12]	; (80008bc <step_half+0x1a0>)
 80008ae:	f000 fe8f 	bl	80015d0 <HAL_GPIO_WritePin>
			break;//instead delay
 80008b2:	bf00      	nop

		}
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40020400 	.word	0x40020400

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b5b0      	push	{r4, r5, r7, lr}
 80008c2:	b08e      	sub	sp, #56	; 0x38
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c6:	f000 fbc3 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ca:	f000 f83b 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ce:	f000 f8cd 	bl	8000a6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008d2:	f000 f8a1 	bl	8000a18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ProgramStart("RTOS-Start");
 80008d6:	4816      	ldr	r0, [pc, #88]	; (8000930 <main+0x70>)
 80008d8:	f7ff fe88 	bl	80005ec <ProgramStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, myStartTask01, osPriorityNormal, 0, 128);
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <main+0x74>)
 80008de:	f107 041c 	add.w	r4, r7, #28
 80008e2:	461d      	mov	r5, r3
 80008e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 fab5 	bl	8002e66 <osThreadCreate>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <main+0x78>)
 8000900:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, myStartTask02, osPriorityIdle, 0, 128);
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <main+0x7c>)
 8000904:	463c      	mov	r4, r7
 8000906:	461d      	mov	r5, r3
 8000908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800090a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800090c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000910:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8000914:	463b      	mov	r3, r7
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f002 faa4 	bl	8002e66 <osThreadCreate>
 800091e:	4603      	mov	r3, r0
 8000920:	4a07      	ldr	r2, [pc, #28]	; (8000940 <main+0x80>)
 8000922:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000924:	f002 fa98 	bl	8002e58 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LD2Test();
 8000928:	f7ff fed2 	bl	80006d0 <LD2Test>
 800092c:	e7fc      	b.n	8000928 <main+0x68>
 800092e:	bf00      	nop
 8000930:	08005870 	.word	0x08005870
 8000934:	08005888 	.word	0x08005888
 8000938:	20000370 	.word	0x20000370
 800093c:	080058b0 	.word	0x080058b0
 8000940:	20000374 	.word	0x20000374

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	; 0x50
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	2230      	movs	r2, #48	; 0x30
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f003 ffb8 	bl	80048c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <SystemClock_Config+0xcc>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	4a27      	ldr	r2, [pc, #156]	; (8000a10 <SystemClock_Config+0xcc>)
 8000972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000976:	6413      	str	r3, [r2, #64]	; 0x40
 8000978:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <SystemClock_Config+0xcc>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <SystemClock_Config+0xd0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a21      	ldr	r2, [pc, #132]	; (8000a14 <SystemClock_Config+0xd0>)
 800098e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <SystemClock_Config+0xd0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a4:	2301      	movs	r3, #1
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a8:	2310      	movs	r3, #16
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ac:	2302      	movs	r3, #2
 80009ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009b4:	2310      	movs	r3, #16
 80009b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009be:	2304      	movs	r3, #4
 80009c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009c2:	2304      	movs	r3, #4
 80009c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 fe4c 	bl	8001668 <HAL_RCC_OscConfig>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009d6:	f000 f947 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009da:	230f      	movs	r3, #15
 80009dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009de:	2302      	movs	r3, #2
 80009e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2102      	movs	r1, #2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 f8ae 	bl	8001b58 <HAL_RCC_ClockConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a02:	f000 f931 	bl	8000c68 <Error_Handler>
  }
}
 8000a06:	bf00      	nop
 8000a08:	3750      	adds	r7, #80	; 0x50
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40007000 	.word	0x40007000

08000a18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <MX_USART2_UART_Init+0x50>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_USART2_UART_Init+0x4c>)
 8000a50:	f001 fd48 	bl	80024e4 <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a5a:	f000 f905 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000328 	.word	0x20000328
 8000a68:	40004400 	.word	0x40004400

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b3c      	ldr	r3, [pc, #240]	; (8000b78 <MX_GPIO_Init+0x10c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a3b      	ldr	r2, [pc, #236]	; (8000b78 <MX_GPIO_Init+0x10c>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <MX_GPIO_Init+0x10c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b35      	ldr	r3, [pc, #212]	; (8000b78 <MX_GPIO_Init+0x10c>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a34      	ldr	r2, [pc, #208]	; (8000b78 <MX_GPIO_Init+0x10c>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b32      	ldr	r3, [pc, #200]	; (8000b78 <MX_GPIO_Init+0x10c>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <MX_GPIO_Init+0x10c>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a2d      	ldr	r2, [pc, #180]	; (8000b78 <MX_GPIO_Init+0x10c>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b2b      	ldr	r3, [pc, #172]	; (8000b78 <MX_GPIO_Init+0x10c>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <MX_GPIO_Init+0x10c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a26      	ldr	r2, [pc, #152]	; (8000b78 <MX_GPIO_Init+0x10c>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <MX_GPIO_Init+0x10c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2120      	movs	r1, #32
 8000af6:	4821      	ldr	r0, [pc, #132]	; (8000b7c <MX_GPIO_Init+0x110>)
 8000af8:	f000 fd6a 	bl	80015d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000afc:	2200      	movs	r2, #0
 8000afe:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000b02:	481f      	ldr	r0, [pc, #124]	; (8000b80 <MX_GPIO_Init+0x114>)
 8000b04:	f000 fd64 	bl	80015d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b0e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4819      	ldr	r0, [pc, #100]	; (8000b84 <MX_GPIO_Init+0x118>)
 8000b20:	f000 fbba 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b24:	2320      	movs	r3, #32
 8000b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4810      	ldr	r0, [pc, #64]	; (8000b7c <MX_GPIO_Init+0x110>)
 8000b3c:	f000 fbac 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000b40:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	4809      	ldr	r0, [pc, #36]	; (8000b80 <MX_GPIO_Init+0x114>)
 8000b5a:	f000 fb9d 	bl	8001298 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2105      	movs	r1, #5
 8000b62:	2028      	movs	r0, #40	; 0x28
 8000b64:	f000 fb6e 	bl	8001244 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b68:	2028      	movs	r0, #40	; 0x28
 8000b6a:	f000 fb87 	bl	800127c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	; 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40020400 	.word	0x40020400
 8000b84:	40020800 	.word	0x40020800

08000b88 <myStartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_myStartTask01 */
void myStartTask01(void const * argument)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  int n1=0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	LD2Test();
 8000b94:	f7ff fd9c 	bl	80006d0 <LD2Test>
	Cursor(0,0);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f7ff fd66 	bl	800066c <Cursor>
	printf("LD2 flashed %d times(Task1)", n1++);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	60fa      	str	r2, [r7, #12]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <myStartTask01+0x30>)
 8000baa:	f003 fc79 	bl	80044a0 <iprintf>
	//HAL_Delay(500); //Hardware Delay
    osDelay(500); //Task transformation
 8000bae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bb2:	f002 f9a4 	bl	8002efe <osDelay>
  {
 8000bb6:	e7ed      	b.n	8000b94 <myStartTask01+0xc>
 8000bb8:	080058cc 	.word	0x080058cc

08000bbc <myStartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_myStartTask02 */
void myStartTask02(void const * argument)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN myStartTask02 */
  /* Infinite loop */
  int n=0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
  for(;;)
  {

	  int d;
	  Cursor(0,10);
 8000bc8:	210a      	movs	r1, #10
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f7ff fd4e 	bl	800066c <Cursor>

	  if(mode)
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <myStartTask02+0x74>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d023      	beq.n	8000c20 <myStartTask02+0x64>
	  {
		  printf("B1 button pressed..... %d times", bn);
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <myStartTask02+0x78>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4816      	ldr	r0, [pc, #88]	; (8000c38 <myStartTask02+0x7c>)
 8000be0:	f003 fc5e 	bl	80044a0 <iprintf>


		  step_half((t1%8)+1);
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <myStartTask02+0x80>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	425a      	negs	r2, r3
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	f002 0207 	and.w	r2, r2, #7
 8000bf2:	bf58      	it	pl
 8000bf4:	4253      	negpl	r3, r2
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff fd8f 	bl	800071c <step_half>
		  if(++t1>512)
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <myStartTask02+0x80>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3301      	adds	r3, #1
 8000c04:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <myStartTask02+0x80>)
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <myStartTask02+0x80>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c10:	dd09      	ble.n	8000c26 <myStartTask02+0x6a>
		  {
			  t1=0;
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <myStartTask02+0x80>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
			  mode =0;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <myStartTask02+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	e002      	b.n	8000c26 <myStartTask02+0x6a>
		  }

	  }
	  else
	  {
		  printf("                                    ");
 8000c20:	4807      	ldr	r0, [pc, #28]	; (8000c40 <myStartTask02+0x84>)
 8000c22:	f003 fc3d 	bl	80044a0 <iprintf>
//	  printf("Input Degree : ");
//	  scanf("%d", &d);//infinite loop
//	  int w = 2048 *d / 360;
//	  int step = 4096 * d / 360;
//	  printf("Wave(Full) : %d steps, Half : %d steps", step/2,step);
	  osDelay(5);
 8000c26:	2005      	movs	r0, #5
 8000c28:	f002 f969 	bl	8002efe <osDelay>
  {
 8000c2c:	e7cc      	b.n	8000bc8 <myStartTask02+0xc>
 8000c2e:	bf00      	nop
 8000c30:	2000037c 	.word	0x2000037c
 8000c34:	20000378 	.word	0x20000378
 8000c38:	080058e8 	.word	0x080058e8
 8000c3c:	20000380 	.word	0x20000380
 8000c40:	08005908 	.word	0x08005908

08000c44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d101      	bne.n	8000c5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c56:	f000 fa1d 	bl	8001094 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40014400 	.word	0x40014400

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>
	...

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_MspInit+0x54>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a11      	ldr	r2, [pc, #68]	; (8000cc8 <HAL_MspInit+0x54>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_MspInit+0x54>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_MspInit+0x54>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_MspInit+0x54>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <HAL_MspInit+0x54>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	210f      	movs	r1, #15
 8000cb6:	f06f 0001 	mvn.w	r0, #1
 8000cba:	f000 fac3 	bl	8001244 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800

08000ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <HAL_UART_MspInit+0x84>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d12b      	bne.n	8000d46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <HAL_UART_MspInit+0x88>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a17      	ldr	r2, [pc, #92]	; (8000d54 <HAL_UART_MspInit+0x88>)
 8000cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <HAL_UART_MspInit+0x88>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_UART_MspInit+0x88>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <HAL_UART_MspInit+0x88>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_UART_MspInit+0x88>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d26:	230c      	movs	r3, #12
 8000d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d36:	2307      	movs	r3, #7
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <HAL_UART_MspInit+0x8c>)
 8000d42:	f000 faa9 	bl	8001298 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d46:	bf00      	nop
 8000d48:	3728      	adds	r7, #40	; 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40004400 	.word	0x40004400
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020000 	.word	0x40020000

08000d5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08c      	sub	sp, #48	; 0x30
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	4b2e      	ldr	r3, [pc, #184]	; (8000e2c <HAL_InitTick+0xd0>)
 8000d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d74:	4a2d      	ldr	r2, [pc, #180]	; (8000e2c <HAL_InitTick+0xd0>)
 8000d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7c:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <HAL_InitTick+0xd0>)
 8000d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d88:	f107 020c 	add.w	r2, r7, #12
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f001 f900 	bl	8001f98 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d98:	f001 f8ea 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 8000d9c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da0:	4a23      	ldr	r2, [pc, #140]	; (8000e30 <HAL_InitTick+0xd4>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	0c9b      	lsrs	r3, r3, #18
 8000da8:	3b01      	subs	r3, #1
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <HAL_InitTick+0xd8>)
 8000dae:	4a22      	ldr	r2, [pc, #136]	; (8000e38 <HAL_InitTick+0xdc>)
 8000db0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000db2:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <HAL_InitTick+0xd8>)
 8000db4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000db8:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000dba:	4a1e      	ldr	r2, [pc, #120]	; (8000e34 <HAL_InitTick+0xd8>)
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <HAL_InitTick+0xd8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <HAL_InitTick+0xd8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <HAL_InitTick+0xd8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8000dd2:	4818      	ldr	r0, [pc, #96]	; (8000e34 <HAL_InitTick+0xd8>)
 8000dd4:	f001 f912 	bl	8001ffc <HAL_TIM_Base_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000dde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d11b      	bne.n	8000e1e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8000de6:	4813      	ldr	r0, [pc, #76]	; (8000e34 <HAL_InitTick+0xd8>)
 8000de8:	f001 f962 	bl	80020b0 <HAL_TIM_Base_Start_IT>
 8000dec:	4603      	mov	r3, r0
 8000dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000df2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d111      	bne.n	8000e1e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000dfa:	2019      	movs	r0, #25
 8000dfc:	f000 fa3e 	bl	800127c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b0f      	cmp	r3, #15
 8000e04:	d808      	bhi.n	8000e18 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000e06:	2200      	movs	r2, #0
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	2019      	movs	r0, #25
 8000e0c:	f000 fa1a 	bl	8001244 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e10:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_InitTick+0xe0>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	e002      	b.n	8000e1e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000e1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3730      	adds	r7, #48	; 0x30
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	431bde83 	.word	0x431bde83
 8000e34:	20000384 	.word	0x20000384
 8000e38:	40014400 	.word	0x40014400
 8000e3c:	20000004 	.word	0x20000004

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e72:	f001 f97f 	bl	8002174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000384 	.word	0x20000384

08000e80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e88:	f000 fbd6 	bl	8001638 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	e00a      	b.n	8000eb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ea2:	f7ff fb6b 	bl	800057c <__io_getchar>
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	60ba      	str	r2, [r7, #8]
 8000eae:	b2ca      	uxtb	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbf0      	blt.n	8000ea2 <_read+0x12>
  }

  return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	e009      	b.n	8000ef0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	60ba      	str	r2, [r7, #8]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fb6f 	bl	80005c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbf1      	blt.n	8000edc <_write+0x12>
  }
  return len;
 8000ef8:	687b      	ldr	r3, [r7, #4]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_close>:

int _close(int file)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <_isatty>:

int _isatty(int file)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <_sbrk+0x5c>)
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <_sbrk+0x60>)
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <_sbrk+0x64>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <_sbrk+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d207      	bcs.n	8000fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f9c:	f003 fd38 	bl	8004a10 <__errno>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	e009      	b.n	8000fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <_sbrk+0x64>)
 8000fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20020000 	.word	0x20020000
 8000fcc:	00000400 	.word	0x00000400
 8000fd0:	200003cc 	.word	0x200003cc
 8000fd4:	20004278 	.word	0x20004278

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001000:	f7ff ffea 	bl	8000fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001006:	490d      	ldr	r1, [pc, #52]	; (800103c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800101c:	4c0a      	ldr	r4, [pc, #40]	; (8001048 <LoopFillZerobss+0x22>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102a:	f003 fcf7 	bl	8004a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff fc47 	bl	80008c0 <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001040:	08005994 	.word	0x08005994
  ldr r2, =_sbss
 8001044:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001048:	20004274 	.word	0x20004274

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 f8d8 	bl	800122e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	200f      	movs	r0, #15
 8001080:	f7ff fe6c 	bl	8000d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fdf6 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x20>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x24>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <HAL_IncTick+0x24>)
 80010a6:	6013      	str	r3, [r2, #0]
}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	20000008 	.word	0x20000008
 80010b8:	200003d0 	.word	0x200003d0

080010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_GetTick+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	200003d0 	.word	0x200003d0

080010d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	db0b      	blt.n	8001162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f003 021f 	and.w	r2, r3, #31
 8001150:	4907      	ldr	r1, [pc, #28]	; (8001170 <__NVIC_EnableIRQ+0x38>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	2001      	movs	r0, #1
 800115a:	fa00 f202 	lsl.w	r2, r0, r2
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000e100 	.word	0xe000e100

08001174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0a      	blt.n	800119e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	490c      	ldr	r1, [pc, #48]	; (80011c0 <__NVIC_SetPriority+0x4c>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	440b      	add	r3, r1
 8001198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800119c:	e00a      	b.n	80011b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4908      	ldr	r1, [pc, #32]	; (80011c4 <__NVIC_SetPriority+0x50>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	3b04      	subs	r3, #4
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	761a      	strb	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f1c3 0307 	rsb	r3, r3, #7
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf28      	it	cs
 80011e6:	2304      	movcs	r3, #4
 80011e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3304      	adds	r3, #4
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d902      	bls.n	80011f8 <NVIC_EncodePriority+0x30>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3b03      	subs	r3, #3
 80011f6:	e000      	b.n	80011fa <NVIC_EncodePriority+0x32>
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	401a      	ands	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43d9      	mvns	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	4313      	orrs	r3, r2
         );
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	; 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ff4c 	bl	80010d4 <__NVIC_SetPriorityGrouping>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
 8001250:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001256:	f7ff ff61 	bl	800111c <__NVIC_GetPriorityGrouping>
 800125a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	68b9      	ldr	r1, [r7, #8]
 8001260:	6978      	ldr	r0, [r7, #20]
 8001262:	f7ff ffb1 	bl	80011c8 <NVIC_EncodePriority>
 8001266:	4602      	mov	r2, r0
 8001268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126c:	4611      	mov	r1, r2
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff80 	bl	8001174 <__NVIC_SetPriority>
}
 8001274:	bf00      	nop
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff54 	bl	8001138 <__NVIC_EnableIRQ>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	e159      	b.n	8001568 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012b4:	2201      	movs	r2, #1
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	f040 8148 	bne.w	8001562 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d005      	beq.n	80012ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d130      	bne.n	800134c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001320:	2201      	movs	r2, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	f003 0201 	and.w	r2, r3, #1
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b03      	cmp	r3, #3
 8001356:	d017      	beq.n	8001388 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d123      	bne.n	80013dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	08da      	lsrs	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3208      	adds	r2, #8
 800139c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	220f      	movs	r2, #15
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3208      	adds	r2, #8
 80013d6:	69b9      	ldr	r1, [r7, #24]
 80013d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0203 	and.w	r2, r3, #3
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80a2 	beq.w	8001562 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b57      	ldr	r3, [pc, #348]	; (8001580 <HAL_GPIO_Init+0x2e8>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a56      	ldr	r2, [pc, #344]	; (8001580 <HAL_GPIO_Init+0x2e8>)
 8001428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142c:	6453      	str	r3, [r2, #68]	; 0x44
 800142e:	4b54      	ldr	r3, [pc, #336]	; (8001580 <HAL_GPIO_Init+0x2e8>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800143a:	4a52      	ldr	r2, [pc, #328]	; (8001584 <HAL_GPIO_Init+0x2ec>)
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	3302      	adds	r3, #2
 8001442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	220f      	movs	r2, #15
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a49      	ldr	r2, [pc, #292]	; (8001588 <HAL_GPIO_Init+0x2f0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d019      	beq.n	800149a <HAL_GPIO_Init+0x202>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a48      	ldr	r2, [pc, #288]	; (800158c <HAL_GPIO_Init+0x2f4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d013      	beq.n	8001496 <HAL_GPIO_Init+0x1fe>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a47      	ldr	r2, [pc, #284]	; (8001590 <HAL_GPIO_Init+0x2f8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d00d      	beq.n	8001492 <HAL_GPIO_Init+0x1fa>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a46      	ldr	r2, [pc, #280]	; (8001594 <HAL_GPIO_Init+0x2fc>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d007      	beq.n	800148e <HAL_GPIO_Init+0x1f6>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a45      	ldr	r2, [pc, #276]	; (8001598 <HAL_GPIO_Init+0x300>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d101      	bne.n	800148a <HAL_GPIO_Init+0x1f2>
 8001486:	2304      	movs	r3, #4
 8001488:	e008      	b.n	800149c <HAL_GPIO_Init+0x204>
 800148a:	2307      	movs	r3, #7
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x204>
 800148e:	2303      	movs	r3, #3
 8001490:	e004      	b.n	800149c <HAL_GPIO_Init+0x204>
 8001492:	2302      	movs	r3, #2
 8001494:	e002      	b.n	800149c <HAL_GPIO_Init+0x204>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <HAL_GPIO_Init+0x204>
 800149a:	2300      	movs	r3, #0
 800149c:	69fa      	ldr	r2, [r7, #28]
 800149e:	f002 0203 	and.w	r2, r2, #3
 80014a2:	0092      	lsls	r2, r2, #2
 80014a4:	4093      	lsls	r3, r2
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ac:	4935      	ldr	r1, [pc, #212]	; (8001584 <HAL_GPIO_Init+0x2ec>)
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	3302      	adds	r3, #2
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ba:	4b38      	ldr	r3, [pc, #224]	; (800159c <HAL_GPIO_Init+0x304>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014de:	4a2f      	ldr	r2, [pc, #188]	; (800159c <HAL_GPIO_Init+0x304>)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014e4:	4b2d      	ldr	r3, [pc, #180]	; (800159c <HAL_GPIO_Init+0x304>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001508:	4a24      	ldr	r2, [pc, #144]	; (800159c <HAL_GPIO_Init+0x304>)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800150e:	4b23      	ldr	r3, [pc, #140]	; (800159c <HAL_GPIO_Init+0x304>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001532:	4a1a      	ldr	r2, [pc, #104]	; (800159c <HAL_GPIO_Init+0x304>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <HAL_GPIO_Init+0x304>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800155c:	4a0f      	ldr	r2, [pc, #60]	; (800159c <HAL_GPIO_Init+0x304>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3301      	adds	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	2b0f      	cmp	r3, #15
 800156c:	f67f aea2 	bls.w	80012b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	3724      	adds	r7, #36	; 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	40013800 	.word	0x40013800
 8001588:	40020000 	.word	0x40020000
 800158c:	40020400 	.word	0x40020400
 8001590:	40020800 	.word	0x40020800
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40021000 	.word	0x40021000
 800159c:	40013c00 	.word	0x40013c00

080015a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	4013      	ands	r3, r2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d002      	beq.n	80015be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	e001      	b.n	80015c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	807b      	strh	r3, [r7, #2]
 80015dc:	4613      	mov	r3, r2
 80015de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e0:	787b      	ldrb	r3, [r7, #1]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015ec:	e003      	b.n	80015f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ee:	887b      	ldrh	r3, [r7, #2]
 80015f0:	041a      	lsls	r2, r3, #16
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	619a      	str	r2, [r3, #24]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001602:	b480      	push	{r7}
 8001604:	b085      	sub	sp, #20
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	460b      	mov	r3, r1
 800160c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001614:	887a      	ldrh	r2, [r7, #2]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4013      	ands	r3, r2
 800161a:	041a      	lsls	r2, r3, #16
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	43d9      	mvns	r1, r3
 8001620:	887b      	ldrh	r3, [r7, #2]
 8001622:	400b      	ands	r3, r1
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	619a      	str	r2, [r3, #24]
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001644:	695a      	ldr	r2, [r3, #20]
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	4013      	ands	r3, r2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d006      	beq.n	800165c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff f844 	bl	80006e4 <HAL_GPIO_EXTI_Callback>
  }
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40013c00 	.word	0x40013c00

08001668 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e267      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d075      	beq.n	8001772 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001686:	4b88      	ldr	r3, [pc, #544]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b04      	cmp	r3, #4
 8001690:	d00c      	beq.n	80016ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001692:	4b85      	ldr	r3, [pc, #532]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800169a:	2b08      	cmp	r3, #8
 800169c:	d112      	bne.n	80016c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800169e:	4b82      	ldr	r3, [pc, #520]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016aa:	d10b      	bne.n	80016c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ac:	4b7e      	ldr	r3, [pc, #504]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d05b      	beq.n	8001770 <HAL_RCC_OscConfig+0x108>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d157      	bne.n	8001770 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e242      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016cc:	d106      	bne.n	80016dc <HAL_RCC_OscConfig+0x74>
 80016ce:	4b76      	ldr	r3, [pc, #472]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a75      	ldr	r2, [pc, #468]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 80016d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e01d      	b.n	8001718 <HAL_RCC_OscConfig+0xb0>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x98>
 80016e6:	4b70      	ldr	r3, [pc, #448]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a6f      	ldr	r2, [pc, #444]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 80016ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4b6d      	ldr	r3, [pc, #436]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a6c      	ldr	r2, [pc, #432]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0xb0>
 8001700:	4b69      	ldr	r3, [pc, #420]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a68      	ldr	r2, [pc, #416]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b66      	ldr	r3, [pc, #408]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a65      	ldr	r2, [pc, #404]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d013      	beq.n	8001748 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff fccc 	bl	80010bc <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff fcc8 	bl	80010bc <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	; 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e207      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	4b5b      	ldr	r3, [pc, #364]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0xc0>
 8001746:	e014      	b.n	8001772 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff fcb8 	bl	80010bc <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fcb4 	bl	80010bc <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e1f3      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001762:	4b51      	ldr	r3, [pc, #324]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0xe8>
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d063      	beq.n	8001846 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800177e:	4b4a      	ldr	r3, [pc, #296]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00b      	beq.n	80017a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800178a:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001792:	2b08      	cmp	r3, #8
 8001794:	d11c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001796:	4b44      	ldr	r3, [pc, #272]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d116      	bne.n	80017d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a2:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <HAL_RCC_OscConfig+0x152>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d001      	beq.n	80017ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e1c7      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4937      	ldr	r1, [pc, #220]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ce:	e03a      	b.n	8001846 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d020      	beq.n	800181a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d8:	4b34      	ldr	r3, [pc, #208]	; (80018ac <HAL_RCC_OscConfig+0x244>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017de:	f7ff fc6d 	bl	80010bc <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e6:	f7ff fc69 	bl	80010bc <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e1a8      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f8:	4b2b      	ldr	r3, [pc, #172]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001804:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	4925      	ldr	r1, [pc, #148]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 8001814:	4313      	orrs	r3, r2
 8001816:	600b      	str	r3, [r1, #0]
 8001818:	e015      	b.n	8001846 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181a:	4b24      	ldr	r3, [pc, #144]	; (80018ac <HAL_RCC_OscConfig+0x244>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001820:	f7ff fc4c 	bl	80010bc <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001828:	f7ff fc48 	bl	80010bc <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e187      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183a:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d036      	beq.n	80018c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d016      	beq.n	8001888 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <HAL_RCC_OscConfig+0x248>)
 800185c:	2201      	movs	r2, #1
 800185e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001860:	f7ff fc2c 	bl	80010bc <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001868:	f7ff fc28 	bl	80010bc <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e167      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_RCC_OscConfig+0x240>)
 800187c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x200>
 8001886:	e01b      	b.n	80018c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_RCC_OscConfig+0x248>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188e:	f7ff fc15 	bl	80010bc <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001894:	e00e      	b.n	80018b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001896:	f7ff fc11 	bl	80010bc <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d907      	bls.n	80018b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e150      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
 80018a8:	40023800 	.word	0x40023800
 80018ac:	42470000 	.word	0x42470000
 80018b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b4:	4b88      	ldr	r3, [pc, #544]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 80018b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1ea      	bne.n	8001896 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 8097 	beq.w	80019fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018d2:	4b81      	ldr	r3, [pc, #516]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10f      	bne.n	80018fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	4b7d      	ldr	r3, [pc, #500]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	4a7c      	ldr	r2, [pc, #496]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 80018e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ec:	6413      	str	r3, [r2, #64]	; 0x40
 80018ee:	4b7a      	ldr	r3, [pc, #488]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018fa:	2301      	movs	r3, #1
 80018fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fe:	4b77      	ldr	r3, [pc, #476]	; (8001adc <HAL_RCC_OscConfig+0x474>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001906:	2b00      	cmp	r3, #0
 8001908:	d118      	bne.n	800193c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190a:	4b74      	ldr	r3, [pc, #464]	; (8001adc <HAL_RCC_OscConfig+0x474>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a73      	ldr	r2, [pc, #460]	; (8001adc <HAL_RCC_OscConfig+0x474>)
 8001910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001916:	f7ff fbd1 	bl	80010bc <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800191e:	f7ff fbcd 	bl	80010bc <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e10c      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001930:	4b6a      	ldr	r3, [pc, #424]	; (8001adc <HAL_RCC_OscConfig+0x474>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x2ea>
 8001944:	4b64      	ldr	r3, [pc, #400]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001948:	4a63      	ldr	r2, [pc, #396]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6713      	str	r3, [r2, #112]	; 0x70
 8001950:	e01c      	b.n	800198c <HAL_RCC_OscConfig+0x324>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b05      	cmp	r3, #5
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x30c>
 800195a:	4b5f      	ldr	r3, [pc, #380]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 800195c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195e:	4a5e      	ldr	r2, [pc, #376]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6713      	str	r3, [r2, #112]	; 0x70
 8001966:	4b5c      	ldr	r3, [pc, #368]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196a:	4a5b      	ldr	r2, [pc, #364]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6713      	str	r3, [r2, #112]	; 0x70
 8001972:	e00b      	b.n	800198c <HAL_RCC_OscConfig+0x324>
 8001974:	4b58      	ldr	r3, [pc, #352]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001978:	4a57      	ldr	r2, [pc, #348]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 800197a:	f023 0301 	bic.w	r3, r3, #1
 800197e:	6713      	str	r3, [r2, #112]	; 0x70
 8001980:	4b55      	ldr	r3, [pc, #340]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001984:	4a54      	ldr	r2, [pc, #336]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001986:	f023 0304 	bic.w	r3, r3, #4
 800198a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d015      	beq.n	80019c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001994:	f7ff fb92 	bl	80010bc <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199c:	f7ff fb8e 	bl	80010bc <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e0cb      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b2:	4b49      	ldr	r3, [pc, #292]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 80019b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0ee      	beq.n	800199c <HAL_RCC_OscConfig+0x334>
 80019be:	e014      	b.n	80019ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c0:	f7ff fb7c 	bl	80010bc <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c6:	e00a      	b.n	80019de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c8:	f7ff fb78 	bl	80010bc <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e0b5      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019de:	4b3e      	ldr	r3, [pc, #248]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ee      	bne.n	80019c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019ea:	7dfb      	ldrb	r3, [r7, #23]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f0:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	4a38      	ldr	r2, [pc, #224]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 80019f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 80a1 	beq.w	8001b48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a06:	4b34      	ldr	r3, [pc, #208]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d05c      	beq.n	8001acc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d141      	bne.n	8001a9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1a:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_RCC_OscConfig+0x478>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff fb4c 	bl	80010bc <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff fb48 	bl	80010bc <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e087      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3a:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69da      	ldr	r2, [r3, #28]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	019b      	lsls	r3, r3, #6
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5c:	085b      	lsrs	r3, r3, #1
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	041b      	lsls	r3, r3, #16
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a68:	061b      	lsls	r3, r3, #24
 8001a6a:	491b      	ldr	r1, [pc, #108]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_RCC_OscConfig+0x478>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff fb21 	bl	80010bc <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff fb1d 	bl	80010bc <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e05c      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x416>
 8001a9c:	e054      	b.n	8001b48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <HAL_RCC_OscConfig+0x478>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fb0a 	bl	80010bc <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff fb06 	bl	80010bc <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e045      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x444>
 8001aca:	e03d      	b.n	8001b48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d107      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e038      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40007000 	.word	0x40007000
 8001ae0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <HAL_RCC_OscConfig+0x4ec>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	699b      	ldr	r3, [r3, #24]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d028      	beq.n	8001b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d121      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d11a      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b14:	4013      	ands	r3, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d111      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	085b      	lsrs	r3, r3, #1
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d107      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800

08001b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0cc      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b6c:	4b68      	ldr	r3, [pc, #416]	; (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d90c      	bls.n	8001b94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7a:	4b65      	ldr	r3, [pc, #404]	; (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b63      	ldr	r3, [pc, #396]	; (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0b8      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d020      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bac:	4b59      	ldr	r3, [pc, #356]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	4a58      	ldr	r2, [pc, #352]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bc4:	4b53      	ldr	r3, [pc, #332]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	4a52      	ldr	r2, [pc, #328]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd0:	4b50      	ldr	r3, [pc, #320]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	494d      	ldr	r1, [pc, #308]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d044      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	4b47      	ldr	r3, [pc, #284]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d119      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e07f      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d003      	beq.n	8001c16 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d107      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c16:	4b3f      	ldr	r3, [pc, #252]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e06f      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c26:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e067      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c36:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f023 0203 	bic.w	r2, r3, #3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	4934      	ldr	r1, [pc, #208]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c48:	f7ff fa38 	bl	80010bc <HAL_GetTick>
 8001c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4e:	e00a      	b.n	8001c66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c50:	f7ff fa34 	bl	80010bc <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e04f      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c66:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 020c 	and.w	r2, r3, #12
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d1eb      	bne.n	8001c50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c78:	4b25      	ldr	r3, [pc, #148]	; (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d20c      	bcs.n	8001ca0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c86:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <HAL_RCC_ClockConfig+0x1b8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e032      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cac:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	4916      	ldr	r1, [pc, #88]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d009      	beq.n	8001cde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	490e      	ldr	r1, [pc, #56]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cde:	f000 f821 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	490a      	ldr	r1, [pc, #40]	; (8001d18 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	5ccb      	ldrb	r3, [r1, r3]
 8001cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf6:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001cfa:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <HAL_RCC_ClockConfig+0x1c8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff f82c 	bl	8000d5c <HAL_InitTick>

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023c00 	.word	0x40023c00
 8001d14:	40023800 	.word	0x40023800
 8001d18:	08005938 	.word	0x08005938
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	20000004 	.word	0x20000004

08001d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d28:	b094      	sub	sp, #80	; 0x50
 8001d2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d3c:	4b79      	ldr	r3, [pc, #484]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d00d      	beq.n	8001d64 <HAL_RCC_GetSysClockFreq+0x40>
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	f200 80e1 	bhi.w	8001f10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x34>
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d003      	beq.n	8001d5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d56:	e0db      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d58:	4b73      	ldr	r3, [pc, #460]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d5c:	e0db      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d5e:	4b73      	ldr	r3, [pc, #460]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x208>)
 8001d60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d62:	e0d8      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d64:	4b6f      	ldr	r3, [pc, #444]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d6c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d6e:	4b6d      	ldr	r3, [pc, #436]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d063      	beq.n	8001e42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7a:	4b6a      	ldr	r3, [pc, #424]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	099b      	lsrs	r3, r3, #6
 8001d80:	2200      	movs	r2, #0
 8001d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001d8e:	2300      	movs	r3, #0
 8001d90:	637b      	str	r3, [r7, #52]	; 0x34
 8001d92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001d96:	4622      	mov	r2, r4
 8001d98:	462b      	mov	r3, r5
 8001d9a:	f04f 0000 	mov.w	r0, #0
 8001d9e:	f04f 0100 	mov.w	r1, #0
 8001da2:	0159      	lsls	r1, r3, #5
 8001da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001da8:	0150      	lsls	r0, r2, #5
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4621      	mov	r1, r4
 8001db0:	1a51      	subs	r1, r2, r1
 8001db2:	6139      	str	r1, [r7, #16]
 8001db4:	4629      	mov	r1, r5
 8001db6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	f04f 0300 	mov.w	r3, #0
 8001dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dc8:	4659      	mov	r1, fp
 8001dca:	018b      	lsls	r3, r1, #6
 8001dcc:	4651      	mov	r1, sl
 8001dce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dd2:	4651      	mov	r1, sl
 8001dd4:	018a      	lsls	r2, r1, #6
 8001dd6:	4651      	mov	r1, sl
 8001dd8:	ebb2 0801 	subs.w	r8, r2, r1
 8001ddc:	4659      	mov	r1, fp
 8001dde:	eb63 0901 	sbc.w	r9, r3, r1
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001df6:	4690      	mov	r8, r2
 8001df8:	4699      	mov	r9, r3
 8001dfa:	4623      	mov	r3, r4
 8001dfc:	eb18 0303 	adds.w	r3, r8, r3
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	462b      	mov	r3, r5
 8001e04:	eb49 0303 	adc.w	r3, r9, r3
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e16:	4629      	mov	r1, r5
 8001e18:	024b      	lsls	r3, r1, #9
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e20:	4621      	mov	r1, r4
 8001e22:	024a      	lsls	r2, r1, #9
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e34:	f7fe fa24 	bl	8000280 <__aeabi_uldivmod>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e40:	e058      	b.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e42:	4b38      	ldr	r3, [pc, #224]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	099b      	lsrs	r3, r3, #6
 8001e48:	2200      	movs	r2, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e52:	623b      	str	r3, [r7, #32]
 8001e54:	2300      	movs	r3, #0
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
 8001e58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e5c:	4642      	mov	r2, r8
 8001e5e:	464b      	mov	r3, r9
 8001e60:	f04f 0000 	mov.w	r0, #0
 8001e64:	f04f 0100 	mov.w	r1, #0
 8001e68:	0159      	lsls	r1, r3, #5
 8001e6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e6e:	0150      	lsls	r0, r2, #5
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4641      	mov	r1, r8
 8001e76:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e7a:	4649      	mov	r1, r9
 8001e7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e94:	ebb2 040a 	subs.w	r4, r2, sl
 8001e98:	eb63 050b 	sbc.w	r5, r3, fp
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	00eb      	lsls	r3, r5, #3
 8001ea6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001eaa:	00e2      	lsls	r2, r4, #3
 8001eac:	4614      	mov	r4, r2
 8001eae:	461d      	mov	r5, r3
 8001eb0:	4643      	mov	r3, r8
 8001eb2:	18e3      	adds	r3, r4, r3
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	464b      	mov	r3, r9
 8001eb8:	eb45 0303 	adc.w	r3, r5, r3
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eca:	4629      	mov	r1, r5
 8001ecc:	028b      	lsls	r3, r1, #10
 8001ece:	4621      	mov	r1, r4
 8001ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	028a      	lsls	r2, r1, #10
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ede:	2200      	movs	r2, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	61fa      	str	r2, [r7, #28]
 8001ee4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ee8:	f7fe f9ca 	bl	8000280 <__aeabi_uldivmod>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	0c1b      	lsrs	r3, r3, #16
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	3301      	adds	r3, #1
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001f04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f0e:	e002      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3750      	adds	r7, #80	; 0x50
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800
 8001f28:	00f42400 	.word	0x00f42400
 8001f2c:	007a1200 	.word	0x007a1200

08001f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000000 	.word	0x20000000

08001f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f4c:	f7ff fff0 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	0a9b      	lsrs	r3, r3, #10
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	4903      	ldr	r1, [pc, #12]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	08005948 	.word	0x08005948

08001f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f74:	f7ff ffdc 	bl	8001f30 <HAL_RCC_GetHCLKFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0b5b      	lsrs	r3, r3, #13
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4903      	ldr	r1, [pc, #12]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	08005948 	.word	0x08005948

08001f98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	220f      	movs	r2, #15
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0203 	and.w	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_RCC_GetClockConfig+0x5c>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	08db      	lsrs	r3, r3, #3
 8001fd2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001fda:	4b07      	ldr	r3, [pc, #28]	; (8001ff8 <HAL_RCC_GetClockConfig+0x60>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0207 	and.w	r2, r3, #7
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	601a      	str	r2, [r3, #0]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40023c00 	.word	0x40023c00

08001ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e041      	b.n	8002092 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f839 	bl	800209a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3304      	adds	r3, #4
 8002038:	4619      	mov	r1, r3
 800203a:	4610      	mov	r0, r2
 800203c:	f000 f9b2 	bl	80023a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d001      	beq.n	80020c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e044      	b.n	8002152 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a1e      	ldr	r2, [pc, #120]	; (8002160 <HAL_TIM_Base_Start_IT+0xb0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d018      	beq.n	800211c <HAL_TIM_Base_Start_IT+0x6c>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f2:	d013      	beq.n	800211c <HAL_TIM_Base_Start_IT+0x6c>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a1a      	ldr	r2, [pc, #104]	; (8002164 <HAL_TIM_Base_Start_IT+0xb4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d00e      	beq.n	800211c <HAL_TIM_Base_Start_IT+0x6c>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a19      	ldr	r2, [pc, #100]	; (8002168 <HAL_TIM_Base_Start_IT+0xb8>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d009      	beq.n	800211c <HAL_TIM_Base_Start_IT+0x6c>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_TIM_Base_Start_IT+0xbc>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d004      	beq.n	800211c <HAL_TIM_Base_Start_IT+0x6c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a16      	ldr	r2, [pc, #88]	; (8002170 <HAL_TIM_Base_Start_IT+0xc0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d111      	bne.n	8002140 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b06      	cmp	r3, #6
 800212c:	d010      	beq.n	8002150 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213e:	e007      	b.n	8002150 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0201 	orr.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40010000 	.word	0x40010000
 8002164:	40000400 	.word	0x40000400
 8002168:	40000800 	.word	0x40000800
 800216c:	40000c00 	.word	0x40000c00
 8002170:	40014000 	.word	0x40014000

08002174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d020      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01b      	beq.n	80021d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f06f 0202 	mvn.w	r2, #2
 80021a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f8d2 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
 80021c4:	e005      	b.n	80021d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f8c4 	bl	8002354 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f8d5 	bl	800237c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d020      	beq.n	8002224 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d01b      	beq.n	8002224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0204 	mvn.w	r2, #4
 80021f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2202      	movs	r2, #2
 80021fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f8ac 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
 8002210:	e005      	b.n	800221e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f89e 	bl	8002354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f8af 	bl	800237c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d020      	beq.n	8002270 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d01b      	beq.n	8002270 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0208 	mvn.w	r2, #8
 8002240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2204      	movs	r2, #4
 8002246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f886 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
 800225c:	e005      	b.n	800226a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f878 	bl	8002354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f889 	bl	800237c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	d020      	beq.n	80022bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	2b00      	cmp	r3, #0
 8002282:	d01b      	beq.n	80022bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0210 	mvn.w	r2, #16
 800228c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2208      	movs	r2, #8
 8002292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f860 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
 80022a8:	e005      	b.n	80022b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f852 	bl	8002354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f863 	bl	800237c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00c      	beq.n	80022e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0201 	mvn.w	r2, #1
 80022d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fcb2 	bl	8000c44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00c      	beq.n	8002304 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f8e6 	bl	80024d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00c      	beq.n	8002328 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002314:	2b00      	cmp	r3, #0
 8002316:	d007      	beq.n	8002328 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f834 	bl	8002390 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00c      	beq.n	800234c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f003 0320 	and.w	r3, r3, #32
 8002338:	2b00      	cmp	r3, #0
 800233a:	d007      	beq.n	800234c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0220 	mvn.w	r2, #32
 8002344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 f8b8 	bl	80024bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800234c:	bf00      	nop
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3a      	ldr	r2, [pc, #232]	; (80024a0 <TIM_Base_SetConfig+0xfc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d00f      	beq.n	80023dc <TIM_Base_SetConfig+0x38>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c2:	d00b      	beq.n	80023dc <TIM_Base_SetConfig+0x38>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a37      	ldr	r2, [pc, #220]	; (80024a4 <TIM_Base_SetConfig+0x100>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d007      	beq.n	80023dc <TIM_Base_SetConfig+0x38>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a36      	ldr	r2, [pc, #216]	; (80024a8 <TIM_Base_SetConfig+0x104>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d003      	beq.n	80023dc <TIM_Base_SetConfig+0x38>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a35      	ldr	r2, [pc, #212]	; (80024ac <TIM_Base_SetConfig+0x108>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d108      	bne.n	80023ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a2b      	ldr	r2, [pc, #172]	; (80024a0 <TIM_Base_SetConfig+0xfc>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01b      	beq.n	800242e <TIM_Base_SetConfig+0x8a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fc:	d017      	beq.n	800242e <TIM_Base_SetConfig+0x8a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a28      	ldr	r2, [pc, #160]	; (80024a4 <TIM_Base_SetConfig+0x100>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <TIM_Base_SetConfig+0x8a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <TIM_Base_SetConfig+0x104>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00f      	beq.n	800242e <TIM_Base_SetConfig+0x8a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a26      	ldr	r2, [pc, #152]	; (80024ac <TIM_Base_SetConfig+0x108>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00b      	beq.n	800242e <TIM_Base_SetConfig+0x8a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a25      	ldr	r2, [pc, #148]	; (80024b0 <TIM_Base_SetConfig+0x10c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <TIM_Base_SetConfig+0x8a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a24      	ldr	r2, [pc, #144]	; (80024b4 <TIM_Base_SetConfig+0x110>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d003      	beq.n	800242e <TIM_Base_SetConfig+0x8a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a23      	ldr	r2, [pc, #140]	; (80024b8 <TIM_Base_SetConfig+0x114>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d108      	bne.n	8002440 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a0e      	ldr	r2, [pc, #56]	; (80024a0 <TIM_Base_SetConfig+0xfc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d103      	bne.n	8002474 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b01      	cmp	r3, #1
 8002484:	d105      	bne.n	8002492 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f023 0201 	bic.w	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	611a      	str	r2, [r3, #16]
  }
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40010000 	.word	0x40010000
 80024a4:	40000400 	.word	0x40000400
 80024a8:	40000800 	.word	0x40000800
 80024ac:	40000c00 	.word	0x40000c00
 80024b0:	40014000 	.word	0x40014000
 80024b4:	40014400 	.word	0x40014400
 80024b8:	40014800 	.word	0x40014800

080024bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e042      	b.n	800257c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe fbde 	bl	8000ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2224      	movs	r2, #36	; 0x24
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002526:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fa09 	bl	8002940 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800253c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800254c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68da      	ldr	r2, [r3, #12]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800255c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af02      	add	r7, sp, #8
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	4613      	mov	r3, r2
 8002592:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d175      	bne.n	8002690 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_UART_Transmit+0x2c>
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e06e      	b.n	8002692 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2221      	movs	r2, #33	; 0x21
 80025be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025c2:	f7fe fd7b 	bl	80010bc <HAL_GetTick>
 80025c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	88fa      	ldrh	r2, [r7, #6]
 80025cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	88fa      	ldrh	r2, [r7, #6]
 80025d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025dc:	d108      	bne.n	80025f0 <HAL_UART_Transmit+0x6c>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d104      	bne.n	80025f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	e003      	b.n	80025f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025f8:	e02e      	b.n	8002658 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2200      	movs	r2, #0
 8002602:	2180      	movs	r1, #128	; 0x80
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 f8df 	bl	80027c8 <UART_WaitOnFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e03a      	b.n	8002692 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10b      	bne.n	800263a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	881b      	ldrh	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002630:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	3302      	adds	r3, #2
 8002636:	61bb      	str	r3, [r7, #24]
 8002638:	e007      	b.n	800264a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	781a      	ldrb	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	3301      	adds	r3, #1
 8002648:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800264e:	b29b      	uxth	r3, r3
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800265c:	b29b      	uxth	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1cb      	bne.n	80025fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2200      	movs	r2, #0
 800266a:	2140      	movs	r1, #64	; 0x40
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 f8ab 	bl	80027c8 <UART_WaitOnFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2220      	movs	r2, #32
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e006      	b.n	8002692 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	e000      	b.n	8002692 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002690:	2302      	movs	r3, #2
  }
}
 8002692:	4618      	mov	r0, r3
 8002694:	3720      	adds	r7, #32
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b08a      	sub	sp, #40	; 0x28
 800269e:	af02      	add	r7, sp, #8
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	4613      	mov	r3, r2
 80026a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	f040 8081 	bne.w	80027be <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <HAL_UART_Receive+0x2e>
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e079      	b.n	80027c0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2222      	movs	r2, #34	; 0x22
 80026d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026e0:	f7fe fcec 	bl	80010bc <HAL_GetTick>
 80026e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	88fa      	ldrh	r2, [r7, #6]
 80026ea:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	88fa      	ldrh	r2, [r7, #6]
 80026f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fa:	d108      	bne.n	800270e <HAL_UART_Receive+0x74>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d104      	bne.n	800270e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002704:	2300      	movs	r3, #0
 8002706:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	61bb      	str	r3, [r7, #24]
 800270c:	e003      	b.n	8002716 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002716:	e047      	b.n	80027a8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2200      	movs	r2, #0
 8002720:	2120      	movs	r1, #32
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f850 	bl	80027c8 <UART_WaitOnFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e042      	b.n	80027c0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10c      	bne.n	800275a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	b29b      	uxth	r3, r3
 8002748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800274c:	b29a      	uxth	r2, r3
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	3302      	adds	r3, #2
 8002756:	61bb      	str	r3, [r7, #24]
 8002758:	e01f      	b.n	800279a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002762:	d007      	beq.n	8002774 <HAL_UART_Receive+0xda>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10a      	bne.n	8002782 <HAL_UART_Receive+0xe8>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d106      	bne.n	8002782 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	b2da      	uxtb	r2, r3
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	701a      	strb	r2, [r3, #0]
 8002780:	e008      	b.n	8002794 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800278e:	b2da      	uxtb	r2, r3
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	3301      	adds	r3, #1
 8002798:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1b2      	bne.n	8002718 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e000      	b.n	80027c0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80027be:	2302      	movs	r3, #2
  }
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	603b      	str	r3, [r7, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027d8:	e03b      	b.n	8002852 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e0:	d037      	beq.n	8002852 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e2:	f7fe fc6b 	bl	80010bc <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	6a3a      	ldr	r2, [r7, #32]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d302      	bcc.n	80027f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e03a      	b.n	8002872 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d023      	beq.n	8002852 <UART_WaitOnFlagUntilTimeout+0x8a>
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b80      	cmp	r3, #128	; 0x80
 800280e:	d020      	beq.n	8002852 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b40      	cmp	r3, #64	; 0x40
 8002814:	d01d      	beq.n	8002852 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b08      	cmp	r3, #8
 8002822:	d116      	bne.n	8002852 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f81d 	bl	800287a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2208      	movs	r2, #8
 8002844:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e00f      	b.n	8002872 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4013      	ands	r3, r2
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	429a      	cmp	r2, r3
 8002860:	bf0c      	ite	eq
 8002862:	2301      	moveq	r3, #1
 8002864:	2300      	movne	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	429a      	cmp	r2, r3
 800286e:	d0b4      	beq.n	80027da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800287a:	b480      	push	{r7}
 800287c:	b095      	sub	sp, #84	; 0x54
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	330c      	adds	r3, #12
 8002888:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288c:	e853 3f00 	ldrex	r3, [r3]
 8002890:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002894:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002898:	64fb      	str	r3, [r7, #76]	; 0x4c
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	330c      	adds	r3, #12
 80028a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028a2:	643a      	str	r2, [r7, #64]	; 0x40
 80028a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80028a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028aa:	e841 2300 	strex	r3, r2, [r1]
 80028ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80028b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1e5      	bne.n	8002882 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3314      	adds	r3, #20
 80028bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	e853 3f00 	ldrex	r3, [r3]
 80028c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f023 0301 	bic.w	r3, r3, #1
 80028cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	3314      	adds	r3, #20
 80028d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028de:	e841 2300 	strex	r3, r2, [r1]
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1e5      	bne.n	80028b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d119      	bne.n	8002926 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	330c      	adds	r3, #12
 80028f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	e853 3f00 	ldrex	r3, [r3]
 8002900:	60bb      	str	r3, [r7, #8]
   return(result);
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f023 0310 	bic.w	r3, r3, #16
 8002908:	647b      	str	r3, [r7, #68]	; 0x44
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	330c      	adds	r3, #12
 8002910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002912:	61ba      	str	r2, [r7, #24]
 8002914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002916:	6979      	ldr	r1, [r7, #20]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	e841 2300 	strex	r3, r2, [r1]
 800291e:	613b      	str	r3, [r7, #16]
   return(result);
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1e5      	bne.n	80028f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002934:	bf00      	nop
 8002936:	3754      	adds	r7, #84	; 0x54
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002944:	b0c0      	sub	sp, #256	; 0x100
 8002946:	af00      	add	r7, sp, #0
 8002948:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800294c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295c:	68d9      	ldr	r1, [r3, #12]
 800295e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	ea40 0301 	orr.w	r3, r0, r1
 8002968:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800296a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	431a      	orrs	r2, r3
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	431a      	orrs	r2, r3
 8002980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800298c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002998:	f021 010c 	bic.w	r1, r1, #12
 800299c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029a6:	430b      	orrs	r3, r1
 80029a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ba:	6999      	ldr	r1, [r3, #24]
 80029bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	ea40 0301 	orr.w	r3, r0, r1
 80029c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4b8f      	ldr	r3, [pc, #572]	; (8002c0c <UART_SetConfig+0x2cc>)
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d005      	beq.n	80029e0 <UART_SetConfig+0xa0>
 80029d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4b8d      	ldr	r3, [pc, #564]	; (8002c10 <UART_SetConfig+0x2d0>)
 80029dc:	429a      	cmp	r2, r3
 80029de:	d104      	bne.n	80029ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029e0:	f7ff fac6 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 80029e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80029e8:	e003      	b.n	80029f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029ea:	f7ff faad 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 80029ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029fc:	f040 810c 	bne.w	8002c18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a04:	2200      	movs	r2, #0
 8002a06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a12:	4622      	mov	r2, r4
 8002a14:	462b      	mov	r3, r5
 8002a16:	1891      	adds	r1, r2, r2
 8002a18:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a1a:	415b      	adcs	r3, r3
 8002a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a22:	4621      	mov	r1, r4
 8002a24:	eb12 0801 	adds.w	r8, r2, r1
 8002a28:	4629      	mov	r1, r5
 8002a2a:	eb43 0901 	adc.w	r9, r3, r1
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a42:	4690      	mov	r8, r2
 8002a44:	4699      	mov	r9, r3
 8002a46:	4623      	mov	r3, r4
 8002a48:	eb18 0303 	adds.w	r3, r8, r3
 8002a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a50:	462b      	mov	r3, r5
 8002a52:	eb49 0303 	adc.w	r3, r9, r3
 8002a56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a6e:	460b      	mov	r3, r1
 8002a70:	18db      	adds	r3, r3, r3
 8002a72:	653b      	str	r3, [r7, #80]	; 0x50
 8002a74:	4613      	mov	r3, r2
 8002a76:	eb42 0303 	adc.w	r3, r2, r3
 8002a7a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a84:	f7fd fbfc 	bl	8000280 <__aeabi_uldivmod>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4b61      	ldr	r3, [pc, #388]	; (8002c14 <UART_SetConfig+0x2d4>)
 8002a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	011c      	lsls	r4, r3, #4
 8002a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002aa0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002aa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	464b      	mov	r3, r9
 8002aac:	1891      	adds	r1, r2, r2
 8002aae:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ab0:	415b      	adcs	r3, r3
 8002ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ab4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ab8:	4641      	mov	r1, r8
 8002aba:	eb12 0a01 	adds.w	sl, r2, r1
 8002abe:	4649      	mov	r1, r9
 8002ac0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ad0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ad4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ad8:	4692      	mov	sl, r2
 8002ada:	469b      	mov	fp, r3
 8002adc:	4643      	mov	r3, r8
 8002ade:	eb1a 0303 	adds.w	r3, sl, r3
 8002ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ae6:	464b      	mov	r3, r9
 8002ae8:	eb4b 0303 	adc.w	r3, fp, r3
 8002aec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002afc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b04:	460b      	mov	r3, r1
 8002b06:	18db      	adds	r3, r3, r3
 8002b08:	643b      	str	r3, [r7, #64]	; 0x40
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	eb42 0303 	adc.w	r3, r2, r3
 8002b10:	647b      	str	r3, [r7, #68]	; 0x44
 8002b12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b1a:	f7fd fbb1 	bl	8000280 <__aeabi_uldivmod>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4611      	mov	r1, r2
 8002b24:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <UART_SetConfig+0x2d4>)
 8002b26:	fba3 2301 	umull	r2, r3, r3, r1
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	2264      	movs	r2, #100	; 0x64
 8002b2e:	fb02 f303 	mul.w	r3, r2, r3
 8002b32:	1acb      	subs	r3, r1, r3
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b3a:	4b36      	ldr	r3, [pc, #216]	; (8002c14 <UART_SetConfig+0x2d4>)
 8002b3c:	fba3 2302 	umull	r2, r3, r3, r2
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b48:	441c      	add	r4, r3
 8002b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b5c:	4642      	mov	r2, r8
 8002b5e:	464b      	mov	r3, r9
 8002b60:	1891      	adds	r1, r2, r2
 8002b62:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b64:	415b      	adcs	r3, r3
 8002b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	1851      	adds	r1, r2, r1
 8002b70:	6339      	str	r1, [r7, #48]	; 0x30
 8002b72:	4649      	mov	r1, r9
 8002b74:	414b      	adcs	r3, r1
 8002b76:	637b      	str	r3, [r7, #52]	; 0x34
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b84:	4659      	mov	r1, fp
 8002b86:	00cb      	lsls	r3, r1, #3
 8002b88:	4651      	mov	r1, sl
 8002b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b8e:	4651      	mov	r1, sl
 8002b90:	00ca      	lsls	r2, r1, #3
 8002b92:	4610      	mov	r0, r2
 8002b94:	4619      	mov	r1, r3
 8002b96:	4603      	mov	r3, r0
 8002b98:	4642      	mov	r2, r8
 8002b9a:	189b      	adds	r3, r3, r2
 8002b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ba0:	464b      	mov	r3, r9
 8002ba2:	460a      	mov	r2, r1
 8002ba4:	eb42 0303 	adc.w	r3, r2, r3
 8002ba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002bb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002bbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	18db      	adds	r3, r3, r3
 8002bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	eb42 0303 	adc.w	r3, r2, r3
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bd6:	f7fd fb53 	bl	8000280 <__aeabi_uldivmod>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <UART_SetConfig+0x2d4>)
 8002be0:	fba3 1302 	umull	r1, r3, r3, r2
 8002be4:	095b      	lsrs	r3, r3, #5
 8002be6:	2164      	movs	r1, #100	; 0x64
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	3332      	adds	r3, #50	; 0x32
 8002bf2:	4a08      	ldr	r2, [pc, #32]	; (8002c14 <UART_SetConfig+0x2d4>)
 8002bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	f003 0207 	and.w	r2, r3, #7
 8002bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4422      	add	r2, r4
 8002c06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c08:	e106      	b.n	8002e18 <UART_SetConfig+0x4d8>
 8002c0a:	bf00      	nop
 8002c0c:	40011000 	.word	0x40011000
 8002c10:	40011400 	.word	0x40011400
 8002c14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c2a:	4642      	mov	r2, r8
 8002c2c:	464b      	mov	r3, r9
 8002c2e:	1891      	adds	r1, r2, r2
 8002c30:	6239      	str	r1, [r7, #32]
 8002c32:	415b      	adcs	r3, r3
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
 8002c36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c3a:	4641      	mov	r1, r8
 8002c3c:	1854      	adds	r4, r2, r1
 8002c3e:	4649      	mov	r1, r9
 8002c40:	eb43 0501 	adc.w	r5, r3, r1
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	00eb      	lsls	r3, r5, #3
 8002c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c52:	00e2      	lsls	r2, r4, #3
 8002c54:	4614      	mov	r4, r2
 8002c56:	461d      	mov	r5, r3
 8002c58:	4643      	mov	r3, r8
 8002c5a:	18e3      	adds	r3, r4, r3
 8002c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c60:	464b      	mov	r3, r9
 8002c62:	eb45 0303 	adc.w	r3, r5, r3
 8002c66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c86:	4629      	mov	r1, r5
 8002c88:	008b      	lsls	r3, r1, #2
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c90:	4621      	mov	r1, r4
 8002c92:	008a      	lsls	r2, r1, #2
 8002c94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c98:	f7fd faf2 	bl	8000280 <__aeabi_uldivmod>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4b60      	ldr	r3, [pc, #384]	; (8002e24 <UART_SetConfig+0x4e4>)
 8002ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	011c      	lsls	r4, r3, #4
 8002caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002cbc:	4642      	mov	r2, r8
 8002cbe:	464b      	mov	r3, r9
 8002cc0:	1891      	adds	r1, r2, r2
 8002cc2:	61b9      	str	r1, [r7, #24]
 8002cc4:	415b      	adcs	r3, r3
 8002cc6:	61fb      	str	r3, [r7, #28]
 8002cc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ccc:	4641      	mov	r1, r8
 8002cce:	1851      	adds	r1, r2, r1
 8002cd0:	6139      	str	r1, [r7, #16]
 8002cd2:	4649      	mov	r1, r9
 8002cd4:	414b      	adcs	r3, r1
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	f04f 0300 	mov.w	r3, #0
 8002ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ce4:	4659      	mov	r1, fp
 8002ce6:	00cb      	lsls	r3, r1, #3
 8002ce8:	4651      	mov	r1, sl
 8002cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cee:	4651      	mov	r1, sl
 8002cf0:	00ca      	lsls	r2, r1, #3
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	4642      	mov	r2, r8
 8002cfa:	189b      	adds	r3, r3, r2
 8002cfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d00:	464b      	mov	r3, r9
 8002d02:	460a      	mov	r2, r1
 8002d04:	eb42 0303 	adc.w	r3, r2, r3
 8002d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d24:	4649      	mov	r1, r9
 8002d26:	008b      	lsls	r3, r1, #2
 8002d28:	4641      	mov	r1, r8
 8002d2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d2e:	4641      	mov	r1, r8
 8002d30:	008a      	lsls	r2, r1, #2
 8002d32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d36:	f7fd faa3 	bl	8000280 <__aeabi_uldivmod>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4b38      	ldr	r3, [pc, #224]	; (8002e24 <UART_SetConfig+0x4e4>)
 8002d42:	fba3 2301 	umull	r2, r3, r3, r1
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2264      	movs	r2, #100	; 0x64
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
 8002d4e:	1acb      	subs	r3, r1, r3
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	3332      	adds	r3, #50	; 0x32
 8002d54:	4a33      	ldr	r2, [pc, #204]	; (8002e24 <UART_SetConfig+0x4e4>)
 8002d56:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d60:	441c      	add	r4, r3
 8002d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d66:	2200      	movs	r2, #0
 8002d68:	673b      	str	r3, [r7, #112]	; 0x70
 8002d6a:	677a      	str	r2, [r7, #116]	; 0x74
 8002d6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d70:	4642      	mov	r2, r8
 8002d72:	464b      	mov	r3, r9
 8002d74:	1891      	adds	r1, r2, r2
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	415b      	adcs	r3, r3
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d80:	4641      	mov	r1, r8
 8002d82:	1851      	adds	r1, r2, r1
 8002d84:	6039      	str	r1, [r7, #0]
 8002d86:	4649      	mov	r1, r9
 8002d88:	414b      	adcs	r3, r1
 8002d8a:	607b      	str	r3, [r7, #4]
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d98:	4659      	mov	r1, fp
 8002d9a:	00cb      	lsls	r3, r1, #3
 8002d9c:	4651      	mov	r1, sl
 8002d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002da2:	4651      	mov	r1, sl
 8002da4:	00ca      	lsls	r2, r1, #3
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	4603      	mov	r3, r0
 8002dac:	4642      	mov	r2, r8
 8002dae:	189b      	adds	r3, r3, r2
 8002db0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002db2:	464b      	mov	r3, r9
 8002db4:	460a      	mov	r2, r1
 8002db6:	eb42 0303 	adc.w	r3, r2, r3
 8002dba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	663b      	str	r3, [r7, #96]	; 0x60
 8002dc6:	667a      	str	r2, [r7, #100]	; 0x64
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002dd4:	4649      	mov	r1, r9
 8002dd6:	008b      	lsls	r3, r1, #2
 8002dd8:	4641      	mov	r1, r8
 8002dda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dde:	4641      	mov	r1, r8
 8002de0:	008a      	lsls	r2, r1, #2
 8002de2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002de6:	f7fd fa4b 	bl	8000280 <__aeabi_uldivmod>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4b0d      	ldr	r3, [pc, #52]	; (8002e24 <UART_SetConfig+0x4e4>)
 8002df0:	fba3 1302 	umull	r1, r3, r3, r2
 8002df4:	095b      	lsrs	r3, r3, #5
 8002df6:	2164      	movs	r1, #100	; 0x64
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	3332      	adds	r3, #50	; 0x32
 8002e02:	4a08      	ldr	r2, [pc, #32]	; (8002e24 <UART_SetConfig+0x4e4>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	f003 020f 	and.w	r2, r3, #15
 8002e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4422      	add	r2, r4
 8002e16:	609a      	str	r2, [r3, #8]
}
 8002e18:	bf00      	nop
 8002e1a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e24:	51eb851f 	.word	0x51eb851f

08002e28 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e3a:	2b84      	cmp	r3, #132	; 0x84
 8002e3c:	d005      	beq.n	8002e4a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002e3e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4413      	add	r3, r2
 8002e46:	3303      	adds	r3, #3
 8002e48:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002e5c:	f000 faf6 	bl	800344c <vTaskStartScheduler>
  
  return osOK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002e66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e68:	b089      	sub	sp, #36	; 0x24
 8002e6a:	af04      	add	r7, sp, #16
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <osThreadCreate+0x54>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01c      	beq.n	8002eba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685c      	ldr	r4, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691e      	ldr	r6, [r3, #16]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ffc8 	bl	8002e28 <makeFreeRtosPriority>
 8002e98:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ea2:	9202      	str	r2, [sp, #8]
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	9100      	str	r1, [sp, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	4632      	mov	r2, r6
 8002eac:	4629      	mov	r1, r5
 8002eae:	4620      	mov	r0, r4
 8002eb0:	f000 f8ed 	bl	800308e <xTaskCreateStatic>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	e01c      	b.n	8002ef4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685c      	ldr	r4, [r3, #4]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ec6:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff ffaa 	bl	8002e28 <makeFreeRtosPriority>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	f107 030c 	add.w	r3, r7, #12
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	9200      	str	r2, [sp, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	4632      	mov	r2, r6
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	f000 f92f 	bl	8003148 <xTaskCreate>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d001      	beq.n	8002ef4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e000      	b.n	8002ef6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002efe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <osDelay+0x16>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	e000      	b.n	8002f16 <osDelay+0x18>
 8002f14:	2301      	movs	r3, #1
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fa64 	bl	80033e4 <vTaskDelay>
  
  return osOK;
 8002f1c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f103 0208 	add.w	r2, r3, #8
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f103 0208 	add.w	r2, r3, #8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f103 0208 	add.w	r2, r3, #8
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	601a      	str	r2, [r3, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fde:	d103      	bne.n	8002fe8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	e00c      	b.n	8003002 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3308      	adds	r3, #8
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	e002      	b.n	8002ff6 <vListInsert+0x2e>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d2f6      	bcs.n	8002ff0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	601a      	str	r2, [r3, #0]
}
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800303a:	b480      	push	{r7}
 800303c:	b085      	sub	sp, #20
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6892      	ldr	r2, [r2, #8]
 8003050:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6852      	ldr	r2, [r2, #4]
 800305a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	429a      	cmp	r2, r3
 8003064:	d103      	bne.n	800306e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	1e5a      	subs	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800308e:	b580      	push	{r7, lr}
 8003090:	b08e      	sub	sp, #56	; 0x38
 8003092:	af04      	add	r7, sp, #16
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800309c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80030a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80030b4:	bf00      	nop
 80030b6:	e7fe      	b.n	80030b6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80030b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <xTaskCreateStatic+0x46>
	__asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	61fb      	str	r3, [r7, #28]
}
 80030d0:	bf00      	nop
 80030d2:	e7fe      	b.n	80030d2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80030d4:	23a0      	movs	r3, #160	; 0xa0
 80030d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	2ba0      	cmp	r3, #160	; 0xa0
 80030dc:	d00a      	beq.n	80030f4 <xTaskCreateStatic+0x66>
	__asm volatile
 80030de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	61bb      	str	r3, [r7, #24]
}
 80030f0:	bf00      	nop
 80030f2:	e7fe      	b.n	80030f2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80030f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d01e      	beq.n	800313a <xTaskCreateStatic+0xac>
 80030fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d01b      	beq.n	800313a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800310a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	2202      	movs	r2, #2
 8003110:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003114:	2300      	movs	r3, #0
 8003116:	9303      	str	r3, [sp, #12]
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	9302      	str	r3, [sp, #8]
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	9301      	str	r3, [sp, #4]
 8003122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	68b9      	ldr	r1, [r7, #8]
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f851 	bl	80031d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003132:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003134:	f000 f8ec 	bl	8003310 <prvAddNewTaskToReadyList>
 8003138:	e001      	b.n	800313e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800313e:	697b      	ldr	r3, [r7, #20]
	}
 8003140:	4618      	mov	r0, r3
 8003142:	3728      	adds	r7, #40	; 0x28
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08c      	sub	sp, #48	; 0x30
 800314c:	af04      	add	r7, sp, #16
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	4613      	mov	r3, r2
 8003156:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fef3 	bl	8003f48 <pvPortMalloc>
 8003162:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00e      	beq.n	8003188 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800316a:	20a0      	movs	r0, #160	; 0xa0
 800316c:	f000 feec 	bl	8003f48 <pvPortMalloc>
 8003170:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	631a      	str	r2, [r3, #48]	; 0x30
 800317e:	e005      	b.n	800318c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003180:	6978      	ldr	r0, [r7, #20]
 8003182:	f000 ffad 	bl	80040e0 <vPortFree>
 8003186:	e001      	b.n	800318c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003188:	2300      	movs	r3, #0
 800318a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d017      	beq.n	80031c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800319a:	88fa      	ldrh	r2, [r7, #6]
 800319c:	2300      	movs	r3, #0
 800319e:	9303      	str	r3, [sp, #12]
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	9302      	str	r3, [sp, #8]
 80031a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a6:	9301      	str	r3, [sp, #4]
 80031a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f80f 	bl	80031d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031b6:	69f8      	ldr	r0, [r7, #28]
 80031b8:	f000 f8aa 	bl	8003310 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031bc:	2301      	movs	r3, #1
 80031be:	61bb      	str	r3, [r7, #24]
 80031c0:	e002      	b.n	80031c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031c8:	69bb      	ldr	r3, [r7, #24]
	}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b088      	sub	sp, #32
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
 80031e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80031e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031ec:	3b01      	subs	r3, #1
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	f023 0307 	bic.w	r3, r3, #7
 80031fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	617b      	str	r3, [r7, #20]
}
 8003218:	bf00      	nop
 800321a:	e7fe      	b.n	800321a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d01f      	beq.n	8003262 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	e012      	b.n	800324e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	4413      	add	r3, r2
 800322e:	7819      	ldrb	r1, [r3, #0]
 8003230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	4413      	add	r3, r2
 8003236:	3334      	adds	r3, #52	; 0x34
 8003238:	460a      	mov	r2, r1
 800323a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	4413      	add	r3, r2
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d006      	beq.n	8003256 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	3301      	adds	r3, #1
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	2b0f      	cmp	r3, #15
 8003252:	d9e9      	bls.n	8003228 <prvInitialiseNewTask+0x54>
 8003254:	e000      	b.n	8003258 <prvInitialiseNewTask+0x84>
			{
				break;
 8003256:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003260:	e003      	b.n	800326a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326c:	2b06      	cmp	r3, #6
 800326e:	d901      	bls.n	8003274 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003270:	2306      	movs	r3, #6
 8003272:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003278:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800327e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	2200      	movs	r2, #0
 8003284:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	3304      	adds	r3, #4
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fe6b 	bl	8002f66 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003292:	3318      	adds	r3, #24
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff fe66 	bl	8002f66 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800329e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	f1c3 0207 	rsb	r2, r3, #7
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b2:	2200      	movs	r2, #0
 80032b4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c2:	334c      	adds	r3, #76	; 0x4c
 80032c4:	224c      	movs	r2, #76	; 0x4c
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f001 fafd 	bl	80048c8 <memset>
 80032ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d0:	4a0c      	ldr	r2, [pc, #48]	; (8003304 <prvInitialiseNewTask+0x130>)
 80032d2:	651a      	str	r2, [r3, #80]	; 0x50
 80032d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d6:	4a0c      	ldr	r2, [pc, #48]	; (8003308 <prvInitialiseNewTask+0x134>)
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54
 80032da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032dc:	4a0b      	ldr	r2, [pc, #44]	; (800330c <prvInitialiseNewTask+0x138>)
 80032de:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	68f9      	ldr	r1, [r7, #12]
 80032e4:	69b8      	ldr	r0, [r7, #24]
 80032e6:	f000 fc1f 	bl	8003b28 <pxPortInitialiseStack>
 80032ea:	4602      	mov	r2, r0
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80032f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032fc:	bf00      	nop
 80032fe:	3720      	adds	r7, #32
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20004128 	.word	0x20004128
 8003308:	20004190 	.word	0x20004190
 800330c:	200041f8 	.word	0x200041f8

08003310 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003318:	f000 fd34 	bl	8003d84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800331c:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <prvAddNewTaskToReadyList+0xb8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3301      	adds	r3, #1
 8003322:	4a29      	ldr	r2, [pc, #164]	; (80033c8 <prvAddNewTaskToReadyList+0xb8>)
 8003324:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003326:	4b29      	ldr	r3, [pc, #164]	; (80033cc <prvAddNewTaskToReadyList+0xbc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800332e:	4a27      	ldr	r2, [pc, #156]	; (80033cc <prvAddNewTaskToReadyList+0xbc>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003334:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <prvAddNewTaskToReadyList+0xb8>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d110      	bne.n	800335e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800333c:	f000 facc 	bl	80038d8 <prvInitialiseTaskLists>
 8003340:	e00d      	b.n	800335e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003342:	4b23      	ldr	r3, [pc, #140]	; (80033d0 <prvAddNewTaskToReadyList+0xc0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <prvAddNewTaskToReadyList+0xbc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	429a      	cmp	r2, r3
 8003356:	d802      	bhi.n	800335e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003358:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <prvAddNewTaskToReadyList+0xbc>)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800335e:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <prvAddNewTaskToReadyList+0xc4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	3301      	adds	r3, #1
 8003364:	4a1b      	ldr	r2, [pc, #108]	; (80033d4 <prvAddNewTaskToReadyList+0xc4>)
 8003366:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	2201      	movs	r2, #1
 800336e:	409a      	lsls	r2, r3
 8003370:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <prvAddNewTaskToReadyList+0xc8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4313      	orrs	r3, r2
 8003376:	4a18      	ldr	r2, [pc, #96]	; (80033d8 <prvAddNewTaskToReadyList+0xc8>)
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4a15      	ldr	r2, [pc, #84]	; (80033dc <prvAddNewTaskToReadyList+0xcc>)
 8003388:	441a      	add	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3304      	adds	r3, #4
 800338e:	4619      	mov	r1, r3
 8003390:	4610      	mov	r0, r2
 8003392:	f7ff fdf5 	bl	8002f80 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003396:	f000 fd25 	bl	8003de4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800339a:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <prvAddNewTaskToReadyList+0xc0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00e      	beq.n	80033c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80033a2:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <prvAddNewTaskToReadyList+0xbc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d207      	bcs.n	80033c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <prvAddNewTaskToReadyList+0xd0>)
 80033b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	200004d4 	.word	0x200004d4
 80033cc:	200003d4 	.word	0x200003d4
 80033d0:	200004e0 	.word	0x200004e0
 80033d4:	200004f0 	.word	0x200004f0
 80033d8:	200004dc 	.word	0x200004dc
 80033dc:	200003d8 	.word	0x200003d8
 80033e0:	e000ed04 	.word	0xe000ed04

080033e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d017      	beq.n	8003426 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033f6:	4b13      	ldr	r3, [pc, #76]	; (8003444 <vTaskDelay+0x60>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <vTaskDelay+0x30>
	__asm volatile
 80033fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003402:	f383 8811 	msr	BASEPRI, r3
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	60bb      	str	r3, [r7, #8]
}
 8003410:	bf00      	nop
 8003412:	e7fe      	b.n	8003412 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003414:	f000 f884 	bl	8003520 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003418:	2100      	movs	r1, #0
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fb1e 	bl	8003a5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003420:	f000 f88c 	bl	800353c <xTaskResumeAll>
 8003424:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d107      	bne.n	800343c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <vTaskDelay+0x64>)
 800342e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800343c:	bf00      	nop
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	200004fc 	.word	0x200004fc
 8003448:	e000ed04 	.word	0xe000ed04

0800344c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	; 0x28
 8003450:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003452:	2300      	movs	r3, #0
 8003454:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003456:	2300      	movs	r3, #0
 8003458:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800345a:	463a      	mov	r2, r7
 800345c:	1d39      	adds	r1, r7, #4
 800345e:	f107 0308 	add.w	r3, r7, #8
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd f91a 	bl	800069c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003468:	6839      	ldr	r1, [r7, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	9202      	str	r2, [sp, #8]
 8003470:	9301      	str	r3, [sp, #4]
 8003472:	2300      	movs	r3, #0
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	2300      	movs	r3, #0
 8003478:	460a      	mov	r2, r1
 800347a:	4921      	ldr	r1, [pc, #132]	; (8003500 <vTaskStartScheduler+0xb4>)
 800347c:	4821      	ldr	r0, [pc, #132]	; (8003504 <vTaskStartScheduler+0xb8>)
 800347e:	f7ff fe06 	bl	800308e <xTaskCreateStatic>
 8003482:	4603      	mov	r3, r0
 8003484:	4a20      	ldr	r2, [pc, #128]	; (8003508 <vTaskStartScheduler+0xbc>)
 8003486:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003488:	4b1f      	ldr	r3, [pc, #124]	; (8003508 <vTaskStartScheduler+0xbc>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d002      	beq.n	8003496 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003490:	2301      	movs	r3, #1
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	e001      	b.n	800349a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d11b      	bne.n	80034d8 <vTaskStartScheduler+0x8c>
	__asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	613b      	str	r3, [r7, #16]
}
 80034b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80034b4:	4b15      	ldr	r3, [pc, #84]	; (800350c <vTaskStartScheduler+0xc0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	334c      	adds	r3, #76	; 0x4c
 80034ba:	4a15      	ldr	r2, [pc, #84]	; (8003510 <vTaskStartScheduler+0xc4>)
 80034bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034be:	4b15      	ldr	r3, [pc, #84]	; (8003514 <vTaskStartScheduler+0xc8>)
 80034c0:	f04f 32ff 	mov.w	r2, #4294967295
 80034c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034c6:	4b14      	ldr	r3, [pc, #80]	; (8003518 <vTaskStartScheduler+0xcc>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034cc:	4b13      	ldr	r3, [pc, #76]	; (800351c <vTaskStartScheduler+0xd0>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034d2:	f000 fbb5 	bl	8003c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034d6:	e00e      	b.n	80034f6 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034de:	d10a      	bne.n	80034f6 <vTaskStartScheduler+0xaa>
	__asm volatile
 80034e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e4:	f383 8811 	msr	BASEPRI, r3
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	60fb      	str	r3, [r7, #12]
}
 80034f2:	bf00      	nop
 80034f4:	e7fe      	b.n	80034f4 <vTaskStartScheduler+0xa8>
}
 80034f6:	bf00      	nop
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	08005930 	.word	0x08005930
 8003504:	080038a9 	.word	0x080038a9
 8003508:	200004f8 	.word	0x200004f8
 800350c:	200003d4 	.word	0x200003d4
 8003510:	20000068 	.word	0x20000068
 8003514:	200004f4 	.word	0x200004f4
 8003518:	200004e0 	.word	0x200004e0
 800351c:	200004d8 	.word	0x200004d8

08003520 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003524:	4b04      	ldr	r3, [pc, #16]	; (8003538 <vTaskSuspendAll+0x18>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3301      	adds	r3, #1
 800352a:	4a03      	ldr	r2, [pc, #12]	; (8003538 <vTaskSuspendAll+0x18>)
 800352c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800352e:	bf00      	nop
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	200004fc 	.word	0x200004fc

0800353c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003546:	2300      	movs	r3, #0
 8003548:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800354a:	4b41      	ldr	r3, [pc, #260]	; (8003650 <xTaskResumeAll+0x114>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10a      	bne.n	8003568 <xTaskResumeAll+0x2c>
	__asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	603b      	str	r3, [r7, #0]
}
 8003564:	bf00      	nop
 8003566:	e7fe      	b.n	8003566 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003568:	f000 fc0c 	bl	8003d84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800356c:	4b38      	ldr	r3, [pc, #224]	; (8003650 <xTaskResumeAll+0x114>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	3b01      	subs	r3, #1
 8003572:	4a37      	ldr	r2, [pc, #220]	; (8003650 <xTaskResumeAll+0x114>)
 8003574:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003576:	4b36      	ldr	r3, [pc, #216]	; (8003650 <xTaskResumeAll+0x114>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d161      	bne.n	8003642 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800357e:	4b35      	ldr	r3, [pc, #212]	; (8003654 <xTaskResumeAll+0x118>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d05d      	beq.n	8003642 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003586:	e02e      	b.n	80035e6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003588:	4b33      	ldr	r3, [pc, #204]	; (8003658 <xTaskResumeAll+0x11c>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3318      	adds	r3, #24
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fd50 	bl	800303a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3304      	adds	r3, #4
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff fd4b 	bl	800303a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	2201      	movs	r2, #1
 80035aa:	409a      	lsls	r2, r3
 80035ac:	4b2b      	ldr	r3, [pc, #172]	; (800365c <xTaskResumeAll+0x120>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	4a2a      	ldr	r2, [pc, #168]	; (800365c <xTaskResumeAll+0x120>)
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4a27      	ldr	r2, [pc, #156]	; (8003660 <xTaskResumeAll+0x124>)
 80035c4:	441a      	add	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	3304      	adds	r3, #4
 80035ca:	4619      	mov	r1, r3
 80035cc:	4610      	mov	r0, r2
 80035ce:	f7ff fcd7 	bl	8002f80 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d6:	4b23      	ldr	r3, [pc, #140]	; (8003664 <xTaskResumeAll+0x128>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035dc:	429a      	cmp	r2, r3
 80035de:	d302      	bcc.n	80035e6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80035e0:	4b21      	ldr	r3, [pc, #132]	; (8003668 <xTaskResumeAll+0x12c>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035e6:	4b1c      	ldr	r3, [pc, #112]	; (8003658 <xTaskResumeAll+0x11c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1cc      	bne.n	8003588 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035f4:	f000 fa12 	bl	8003a1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80035f8:	4b1c      	ldr	r3, [pc, #112]	; (800366c <xTaskResumeAll+0x130>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d010      	beq.n	8003626 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003604:	f000 f836 	bl	8003674 <xTaskIncrementTick>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800360e:	4b16      	ldr	r3, [pc, #88]	; (8003668 <xTaskResumeAll+0x12c>)
 8003610:	2201      	movs	r2, #1
 8003612:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3b01      	subs	r3, #1
 8003618:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f1      	bne.n	8003604 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003620:	4b12      	ldr	r3, [pc, #72]	; (800366c <xTaskResumeAll+0x130>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <xTaskResumeAll+0x12c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d009      	beq.n	8003642 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800362e:	2301      	movs	r3, #1
 8003630:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003632:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <xTaskResumeAll+0x134>)
 8003634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003642:	f000 fbcf 	bl	8003de4 <vPortExitCritical>

	return xAlreadyYielded;
 8003646:	68bb      	ldr	r3, [r7, #8]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	200004fc 	.word	0x200004fc
 8003654:	200004d4 	.word	0x200004d4
 8003658:	20000494 	.word	0x20000494
 800365c:	200004dc 	.word	0x200004dc
 8003660:	200003d8 	.word	0x200003d8
 8003664:	200003d4 	.word	0x200003d4
 8003668:	200004e8 	.word	0x200004e8
 800366c:	200004e4 	.word	0x200004e4
 8003670:	e000ed04 	.word	0xe000ed04

08003674 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800367e:	4b4e      	ldr	r3, [pc, #312]	; (80037b8 <xTaskIncrementTick+0x144>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f040 808e 	bne.w	80037a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003688:	4b4c      	ldr	r3, [pc, #304]	; (80037bc <xTaskIncrementTick+0x148>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3301      	adds	r3, #1
 800368e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003690:	4a4a      	ldr	r2, [pc, #296]	; (80037bc <xTaskIncrementTick+0x148>)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d120      	bne.n	80036de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800369c:	4b48      	ldr	r3, [pc, #288]	; (80037c0 <xTaskIncrementTick+0x14c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <xTaskIncrementTick+0x48>
	__asm volatile
 80036a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	603b      	str	r3, [r7, #0]
}
 80036b8:	bf00      	nop
 80036ba:	e7fe      	b.n	80036ba <xTaskIncrementTick+0x46>
 80036bc:	4b40      	ldr	r3, [pc, #256]	; (80037c0 <xTaskIncrementTick+0x14c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	4b40      	ldr	r3, [pc, #256]	; (80037c4 <xTaskIncrementTick+0x150>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a3e      	ldr	r2, [pc, #248]	; (80037c0 <xTaskIncrementTick+0x14c>)
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	4a3e      	ldr	r2, [pc, #248]	; (80037c4 <xTaskIncrementTick+0x150>)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b3d      	ldr	r3, [pc, #244]	; (80037c8 <xTaskIncrementTick+0x154>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3301      	adds	r3, #1
 80036d6:	4a3c      	ldr	r2, [pc, #240]	; (80037c8 <xTaskIncrementTick+0x154>)
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	f000 f99f 	bl	8003a1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036de:	4b3b      	ldr	r3, [pc, #236]	; (80037cc <xTaskIncrementTick+0x158>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d348      	bcc.n	800377a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036e8:	4b35      	ldr	r3, [pc, #212]	; (80037c0 <xTaskIncrementTick+0x14c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d104      	bne.n	80036fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036f2:	4b36      	ldr	r3, [pc, #216]	; (80037cc <xTaskIncrementTick+0x158>)
 80036f4:	f04f 32ff 	mov.w	r2, #4294967295
 80036f8:	601a      	str	r2, [r3, #0]
					break;
 80036fa:	e03e      	b.n	800377a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036fc:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <xTaskIncrementTick+0x14c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	429a      	cmp	r2, r3
 8003712:	d203      	bcs.n	800371c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003714:	4a2d      	ldr	r2, [pc, #180]	; (80037cc <xTaskIncrementTick+0x158>)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800371a:	e02e      	b.n	800377a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	3304      	adds	r3, #4
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fc8a 	bl	800303a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372a:	2b00      	cmp	r3, #0
 800372c:	d004      	beq.n	8003738 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	3318      	adds	r3, #24
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fc81 	bl	800303a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	2201      	movs	r2, #1
 800373e:	409a      	lsls	r2, r3
 8003740:	4b23      	ldr	r3, [pc, #140]	; (80037d0 <xTaskIncrementTick+0x15c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4313      	orrs	r3, r2
 8003746:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <xTaskIncrementTick+0x15c>)
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4a1f      	ldr	r2, [pc, #124]	; (80037d4 <xTaskIncrementTick+0x160>)
 8003758:	441a      	add	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	3304      	adds	r3, #4
 800375e:	4619      	mov	r1, r3
 8003760:	4610      	mov	r0, r2
 8003762:	f7ff fc0d 	bl	8002f80 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376a:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <xTaskIncrementTick+0x164>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	429a      	cmp	r2, r3
 8003772:	d3b9      	bcc.n	80036e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003774:	2301      	movs	r3, #1
 8003776:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003778:	e7b6      	b.n	80036e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800377a:	4b17      	ldr	r3, [pc, #92]	; (80037d8 <xTaskIncrementTick+0x164>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003780:	4914      	ldr	r1, [pc, #80]	; (80037d4 <xTaskIncrementTick+0x160>)
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d901      	bls.n	8003796 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003792:	2301      	movs	r3, #1
 8003794:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003796:	4b11      	ldr	r3, [pc, #68]	; (80037dc <xTaskIncrementTick+0x168>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800379e:	2301      	movs	r3, #1
 80037a0:	617b      	str	r3, [r7, #20]
 80037a2:	e004      	b.n	80037ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80037a4:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <xTaskIncrementTick+0x16c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3301      	adds	r3, #1
 80037aa:	4a0d      	ldr	r2, [pc, #52]	; (80037e0 <xTaskIncrementTick+0x16c>)
 80037ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80037ae:	697b      	ldr	r3, [r7, #20]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	200004fc 	.word	0x200004fc
 80037bc:	200004d8 	.word	0x200004d8
 80037c0:	2000048c 	.word	0x2000048c
 80037c4:	20000490 	.word	0x20000490
 80037c8:	200004ec 	.word	0x200004ec
 80037cc:	200004f4 	.word	0x200004f4
 80037d0:	200004dc 	.word	0x200004dc
 80037d4:	200003d8 	.word	0x200003d8
 80037d8:	200003d4 	.word	0x200003d4
 80037dc:	200004e8 	.word	0x200004e8
 80037e0:	200004e4 	.word	0x200004e4

080037e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80037ea:	4b29      	ldr	r3, [pc, #164]	; (8003890 <vTaskSwitchContext+0xac>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80037f2:	4b28      	ldr	r3, [pc, #160]	; (8003894 <vTaskSwitchContext+0xb0>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80037f8:	e044      	b.n	8003884 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80037fa:	4b26      	ldr	r3, [pc, #152]	; (8003894 <vTaskSwitchContext+0xb0>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003800:	4b25      	ldr	r3, [pc, #148]	; (8003898 <vTaskSwitchContext+0xb4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	fab3 f383 	clz	r3, r3
 800380c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800380e:	7afb      	ldrb	r3, [r7, #11]
 8003810:	f1c3 031f 	rsb	r3, r3, #31
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	4921      	ldr	r1, [pc, #132]	; (800389c <vTaskSwitchContext+0xb8>)
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4613      	mov	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <vTaskSwitchContext+0x5c>
	__asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	607b      	str	r3, [r7, #4]
}
 800383c:	bf00      	nop
 800383e:	e7fe      	b.n	800383e <vTaskSwitchContext+0x5a>
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4a14      	ldr	r2, [pc, #80]	; (800389c <vTaskSwitchContext+0xb8>)
 800384c:	4413      	add	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	3308      	adds	r3, #8
 8003862:	429a      	cmp	r2, r3
 8003864:	d104      	bne.n	8003870 <vTaskSwitchContext+0x8c>
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	685a      	ldr	r2, [r3, #4]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	4a0a      	ldr	r2, [pc, #40]	; (80038a0 <vTaskSwitchContext+0xbc>)
 8003878:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800387a:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <vTaskSwitchContext+0xbc>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	334c      	adds	r3, #76	; 0x4c
 8003880:	4a08      	ldr	r2, [pc, #32]	; (80038a4 <vTaskSwitchContext+0xc0>)
 8003882:	6013      	str	r3, [r2, #0]
}
 8003884:	bf00      	nop
 8003886:	371c      	adds	r7, #28
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	200004fc 	.word	0x200004fc
 8003894:	200004e8 	.word	0x200004e8
 8003898:	200004dc 	.word	0x200004dc
 800389c:	200003d8 	.word	0x200003d8
 80038a0:	200003d4 	.word	0x200003d4
 80038a4:	20000068 	.word	0x20000068

080038a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80038b0:	f000 f852 	bl	8003958 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <prvIdleTask+0x28>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d9f9      	bls.n	80038b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <prvIdleTask+0x2c>)
 80038be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80038cc:	e7f0      	b.n	80038b0 <prvIdleTask+0x8>
 80038ce:	bf00      	nop
 80038d0:	200003d8 	.word	0x200003d8
 80038d4:	e000ed04 	.word	0xe000ed04

080038d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038de:	2300      	movs	r3, #0
 80038e0:	607b      	str	r3, [r7, #4]
 80038e2:	e00c      	b.n	80038fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4a12      	ldr	r2, [pc, #72]	; (8003938 <prvInitialiseTaskLists+0x60>)
 80038f0:	4413      	add	r3, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fb17 	bl	8002f26 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3301      	adds	r3, #1
 80038fc:	607b      	str	r3, [r7, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b06      	cmp	r3, #6
 8003902:	d9ef      	bls.n	80038e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003904:	480d      	ldr	r0, [pc, #52]	; (800393c <prvInitialiseTaskLists+0x64>)
 8003906:	f7ff fb0e 	bl	8002f26 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800390a:	480d      	ldr	r0, [pc, #52]	; (8003940 <prvInitialiseTaskLists+0x68>)
 800390c:	f7ff fb0b 	bl	8002f26 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003910:	480c      	ldr	r0, [pc, #48]	; (8003944 <prvInitialiseTaskLists+0x6c>)
 8003912:	f7ff fb08 	bl	8002f26 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003916:	480c      	ldr	r0, [pc, #48]	; (8003948 <prvInitialiseTaskLists+0x70>)
 8003918:	f7ff fb05 	bl	8002f26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800391c:	480b      	ldr	r0, [pc, #44]	; (800394c <prvInitialiseTaskLists+0x74>)
 800391e:	f7ff fb02 	bl	8002f26 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003922:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <prvInitialiseTaskLists+0x78>)
 8003924:	4a05      	ldr	r2, [pc, #20]	; (800393c <prvInitialiseTaskLists+0x64>)
 8003926:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <prvInitialiseTaskLists+0x7c>)
 800392a:	4a05      	ldr	r2, [pc, #20]	; (8003940 <prvInitialiseTaskLists+0x68>)
 800392c:	601a      	str	r2, [r3, #0]
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	200003d8 	.word	0x200003d8
 800393c:	20000464 	.word	0x20000464
 8003940:	20000478 	.word	0x20000478
 8003944:	20000494 	.word	0x20000494
 8003948:	200004a8 	.word	0x200004a8
 800394c:	200004c0 	.word	0x200004c0
 8003950:	2000048c 	.word	0x2000048c
 8003954:	20000490 	.word	0x20000490

08003958 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800395e:	e019      	b.n	8003994 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003960:	f000 fa10 	bl	8003d84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003964:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <prvCheckTasksWaitingTermination+0x50>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fb62 	bl	800303a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <prvCheckTasksWaitingTermination+0x54>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3b01      	subs	r3, #1
 800397c:	4a0b      	ldr	r2, [pc, #44]	; (80039ac <prvCheckTasksWaitingTermination+0x54>)
 800397e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <prvCheckTasksWaitingTermination+0x58>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3b01      	subs	r3, #1
 8003986:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <prvCheckTasksWaitingTermination+0x58>)
 8003988:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800398a:	f000 fa2b 	bl	8003de4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f810 	bl	80039b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003994:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <prvCheckTasksWaitingTermination+0x58>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e1      	bne.n	8003960 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	200004a8 	.word	0x200004a8
 80039ac:	200004d4 	.word	0x200004d4
 80039b0:	200004bc 	.word	0x200004bc

080039b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	334c      	adds	r3, #76	; 0x4c
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 ff99 	bl	80048f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d108      	bne.n	80039e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fb83 	bl	80040e0 <vPortFree>
				vPortFree( pxTCB );
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fb80 	bl	80040e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039e0:	e018      	b.n	8003a14 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d103      	bne.n	80039f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fb77 	bl	80040e0 <vPortFree>
	}
 80039f2:	e00f      	b.n	8003a14 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d00a      	beq.n	8003a14 <prvDeleteTCB+0x60>
	__asm volatile
 80039fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	60fb      	str	r3, [r7, #12]
}
 8003a10:	bf00      	nop
 8003a12:	e7fe      	b.n	8003a12 <prvDeleteTCB+0x5e>
	}
 8003a14:	bf00      	nop
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a22:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <prvResetNextTaskUnblockTime+0x38>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d104      	bne.n	8003a36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <prvResetNextTaskUnblockTime+0x3c>)
 8003a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a34:	e008      	b.n	8003a48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a36:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <prvResetNextTaskUnblockTime+0x38>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <prvResetNextTaskUnblockTime+0x3c>)
 8003a46:	6013      	str	r3, [r2, #0]
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr
 8003a54:	2000048c 	.word	0x2000048c
 8003a58:	200004f4 	.word	0x200004f4

08003a5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a66:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a6c:	4b28      	ldr	r3, [pc, #160]	; (8003b10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	3304      	adds	r3, #4
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fae1 	bl	800303a <uxListRemove>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10b      	bne.n	8003a96 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003a7e:	4b24      	ldr	r3, [pc, #144]	; (8003b10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	2201      	movs	r2, #1
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	4b21      	ldr	r3, [pc, #132]	; (8003b14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4013      	ands	r3, r2
 8003a92:	4a20      	ldr	r2, [pc, #128]	; (8003b14 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003a94:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a9c:	d10a      	bne.n	8003ab4 <prvAddCurrentTaskToDelayedList+0x58>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d007      	beq.n	8003ab4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aa4:	4b1a      	ldr	r3, [pc, #104]	; (8003b10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	4619      	mov	r1, r3
 8003aac:	481a      	ldr	r0, [pc, #104]	; (8003b18 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003aae:	f7ff fa67 	bl	8002f80 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ab2:	e026      	b.n	8003b02 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4413      	add	r3, r2
 8003aba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003abc:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d209      	bcs.n	8003ae0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003acc:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4b0f      	ldr	r3, [pc, #60]	; (8003b10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4610      	mov	r0, r2
 8003ada:	f7ff fa75 	bl	8002fc8 <vListInsert>
}
 8003ade:	e010      	b.n	8003b02 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f7ff fa6b 	bl	8002fc8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003af2:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d202      	bcs.n	8003b02 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003afc:	4a09      	ldr	r2, [pc, #36]	; (8003b24 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	6013      	str	r3, [r2, #0]
}
 8003b02:	bf00      	nop
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	200004d8 	.word	0x200004d8
 8003b10:	200003d4 	.word	0x200003d4
 8003b14:	200004dc 	.word	0x200004dc
 8003b18:	200004c0 	.word	0x200004c0
 8003b1c:	20000490 	.word	0x20000490
 8003b20:	2000048c 	.word	0x2000048c
 8003b24:	200004f4 	.word	0x200004f4

08003b28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	3b04      	subs	r3, #4
 8003b38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3b04      	subs	r3, #4
 8003b46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f023 0201 	bic.w	r2, r3, #1
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3b04      	subs	r3, #4
 8003b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003b58:	4a0c      	ldr	r2, [pc, #48]	; (8003b8c <pxPortInitialiseStack+0x64>)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3b14      	subs	r3, #20
 8003b62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3b04      	subs	r3, #4
 8003b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f06f 0202 	mvn.w	r2, #2
 8003b76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	3b20      	subs	r3, #32
 8003b7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	08003b91 	.word	0x08003b91

08003b90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003b9a:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <prvTaskExitError+0x54>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba2:	d00a      	beq.n	8003bba <prvTaskExitError+0x2a>
	__asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	60fb      	str	r3, [r7, #12]
}
 8003bb6:	bf00      	nop
 8003bb8:	e7fe      	b.n	8003bb8 <prvTaskExitError+0x28>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	60bb      	str	r3, [r7, #8]
}
 8003bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003bce:	bf00      	nop
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0fc      	beq.n	8003bd0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003bd6:	bf00      	nop
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	2000000c 	.word	0x2000000c
	...

08003bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003bf0:	4b07      	ldr	r3, [pc, #28]	; (8003c10 <pxCurrentTCBConst2>)
 8003bf2:	6819      	ldr	r1, [r3, #0]
 8003bf4:	6808      	ldr	r0, [r1, #0]
 8003bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bfa:	f380 8809 	msr	PSP, r0
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f04f 0000 	mov.w	r0, #0
 8003c06:	f380 8811 	msr	BASEPRI, r0
 8003c0a:	4770      	bx	lr
 8003c0c:	f3af 8000 	nop.w

08003c10 <pxCurrentTCBConst2>:
 8003c10:	200003d4 	.word	0x200003d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop

08003c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003c18:	4808      	ldr	r0, [pc, #32]	; (8003c3c <prvPortStartFirstTask+0x24>)
 8003c1a:	6800      	ldr	r0, [r0, #0]
 8003c1c:	6800      	ldr	r0, [r0, #0]
 8003c1e:	f380 8808 	msr	MSP, r0
 8003c22:	f04f 0000 	mov.w	r0, #0
 8003c26:	f380 8814 	msr	CONTROL, r0
 8003c2a:	b662      	cpsie	i
 8003c2c:	b661      	cpsie	f
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	df00      	svc	0
 8003c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003c3a:	bf00      	nop
 8003c3c:	e000ed08 	.word	0xe000ed08

08003c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c46:	4b46      	ldr	r3, [pc, #280]	; (8003d60 <xPortStartScheduler+0x120>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a46      	ldr	r2, [pc, #280]	; (8003d64 <xPortStartScheduler+0x124>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d10a      	bne.n	8003c66 <xPortStartScheduler+0x26>
	__asm volatile
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	613b      	str	r3, [r7, #16]
}
 8003c62:	bf00      	nop
 8003c64:	e7fe      	b.n	8003c64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c66:	4b3e      	ldr	r3, [pc, #248]	; (8003d60 <xPortStartScheduler+0x120>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a3f      	ldr	r2, [pc, #252]	; (8003d68 <xPortStartScheduler+0x128>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d10a      	bne.n	8003c86 <xPortStartScheduler+0x46>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	60fb      	str	r3, [r7, #12]
}
 8003c82:	bf00      	nop
 8003c84:	e7fe      	b.n	8003c84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c86:	4b39      	ldr	r3, [pc, #228]	; (8003d6c <xPortStartScheduler+0x12c>)
 8003c88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	22ff      	movs	r2, #255	; 0xff
 8003c96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	4b31      	ldr	r3, [pc, #196]	; (8003d70 <xPortStartScheduler+0x130>)
 8003cac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cae:	4b31      	ldr	r3, [pc, #196]	; (8003d74 <xPortStartScheduler+0x134>)
 8003cb0:	2207      	movs	r2, #7
 8003cb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cb4:	e009      	b.n	8003cca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003cb6:	4b2f      	ldr	r3, [pc, #188]	; (8003d74 <xPortStartScheduler+0x134>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	4a2d      	ldr	r2, [pc, #180]	; (8003d74 <xPortStartScheduler+0x134>)
 8003cbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cca:	78fb      	ldrb	r3, [r7, #3]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd2:	2b80      	cmp	r3, #128	; 0x80
 8003cd4:	d0ef      	beq.n	8003cb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003cd6:	4b27      	ldr	r3, [pc, #156]	; (8003d74 <xPortStartScheduler+0x134>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f1c3 0307 	rsb	r3, r3, #7
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d00a      	beq.n	8003cf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce6:	f383 8811 	msr	BASEPRI, r3
 8003cea:	f3bf 8f6f 	isb	sy
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	60bb      	str	r3, [r7, #8]
}
 8003cf4:	bf00      	nop
 8003cf6:	e7fe      	b.n	8003cf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003cf8:	4b1e      	ldr	r3, [pc, #120]	; (8003d74 <xPortStartScheduler+0x134>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <xPortStartScheduler+0x134>)
 8003d00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d02:	4b1c      	ldr	r3, [pc, #112]	; (8003d74 <xPortStartScheduler+0x134>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d0a:	4a1a      	ldr	r2, [pc, #104]	; (8003d74 <xPortStartScheduler+0x134>)
 8003d0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003d16:	4b18      	ldr	r3, [pc, #96]	; (8003d78 <xPortStartScheduler+0x138>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a17      	ldr	r2, [pc, #92]	; (8003d78 <xPortStartScheduler+0x138>)
 8003d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003d22:	4b15      	ldr	r3, [pc, #84]	; (8003d78 <xPortStartScheduler+0x138>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a14      	ldr	r2, [pc, #80]	; (8003d78 <xPortStartScheduler+0x138>)
 8003d28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003d2e:	f000 f8dd 	bl	8003eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003d32:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <xPortStartScheduler+0x13c>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003d38:	f000 f8fc 	bl	8003f34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d3c:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <xPortStartScheduler+0x140>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a0f      	ldr	r2, [pc, #60]	; (8003d80 <xPortStartScheduler+0x140>)
 8003d42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003d46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003d48:	f7ff ff66 	bl	8003c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003d4c:	f7ff fd4a 	bl	80037e4 <vTaskSwitchContext>
	prvTaskExitError();
 8003d50:	f7ff ff1e 	bl	8003b90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3718      	adds	r7, #24
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	e000ed00 	.word	0xe000ed00
 8003d64:	410fc271 	.word	0x410fc271
 8003d68:	410fc270 	.word	0x410fc270
 8003d6c:	e000e400 	.word	0xe000e400
 8003d70:	20000500 	.word	0x20000500
 8003d74:	20000504 	.word	0x20000504
 8003d78:	e000ed20 	.word	0xe000ed20
 8003d7c:	2000000c 	.word	0x2000000c
 8003d80:	e000ef34 	.word	0xe000ef34

08003d84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	607b      	str	r3, [r7, #4]
}
 8003d9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003d9e:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <vPortEnterCritical+0x58>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3301      	adds	r3, #1
 8003da4:	4a0d      	ldr	r2, [pc, #52]	; (8003ddc <vPortEnterCritical+0x58>)
 8003da6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <vPortEnterCritical+0x58>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d10f      	bne.n	8003dd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <vPortEnterCritical+0x5c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	603b      	str	r3, [r7, #0]
}
 8003dcc:	bf00      	nop
 8003dce:	e7fe      	b.n	8003dce <vPortEnterCritical+0x4a>
	}
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	2000000c 	.word	0x2000000c
 8003de0:	e000ed04 	.word	0xe000ed04

08003de4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003dea:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <vPortExitCritical+0x50>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10a      	bne.n	8003e08 <vPortExitCritical+0x24>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	607b      	str	r3, [r7, #4]
}
 8003e04:	bf00      	nop
 8003e06:	e7fe      	b.n	8003e06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <vPortExitCritical+0x50>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <vPortExitCritical+0x50>)
 8003e10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e12:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <vPortExitCritical+0x50>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d105      	bne.n	8003e26 <vPortExitCritical+0x42>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	2000000c 	.word	0x2000000c
	...

08003e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003e40:	f3ef 8009 	mrs	r0, PSP
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <pxCurrentTCBConst>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	f01e 0f10 	tst.w	lr, #16
 8003e50:	bf08      	it	eq
 8003e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e5a:	6010      	str	r0, [r2, #0]
 8003e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003e64:	f380 8811 	msr	BASEPRI, r0
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f7ff fcb8 	bl	80037e4 <vTaskSwitchContext>
 8003e74:	f04f 0000 	mov.w	r0, #0
 8003e78:	f380 8811 	msr	BASEPRI, r0
 8003e7c:	bc09      	pop	{r0, r3}
 8003e7e:	6819      	ldr	r1, [r3, #0]
 8003e80:	6808      	ldr	r0, [r1, #0]
 8003e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e86:	f01e 0f10 	tst.w	lr, #16
 8003e8a:	bf08      	it	eq
 8003e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e90:	f380 8809 	msr	PSP, r0
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	f3af 8000 	nop.w

08003ea0 <pxCurrentTCBConst>:
 8003ea0:	200003d4 	.word	0x200003d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop

08003ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
	__asm volatile
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	607b      	str	r3, [r7, #4]
}
 8003ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003ec2:	f7ff fbd7 	bl	8003674 <xTaskIncrementTick>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <SysTick_Handler+0x40>)
 8003ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	f383 8811 	msr	BASEPRI, r3
}
 8003ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ee0:	bf00      	nop
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	e000ed04 	.word	0xe000ed04

08003eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <vPortSetupTimerInterrupt+0x34>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <vPortSetupTimerInterrupt+0x38>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003efc:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <vPortSetupTimerInterrupt+0x3c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <vPortSetupTimerInterrupt+0x40>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	099b      	lsrs	r3, r3, #6
 8003f08:	4a09      	ldr	r2, [pc, #36]	; (8003f30 <vPortSetupTimerInterrupt+0x44>)
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f0e:	4b04      	ldr	r3, [pc, #16]	; (8003f20 <vPortSetupTimerInterrupt+0x34>)
 8003f10:	2207      	movs	r2, #7
 8003f12:	601a      	str	r2, [r3, #0]
}
 8003f14:	bf00      	nop
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	e000e010 	.word	0xe000e010
 8003f24:	e000e018 	.word	0xe000e018
 8003f28:	20000000 	.word	0x20000000
 8003f2c:	10624dd3 	.word	0x10624dd3
 8003f30:	e000e014 	.word	0xe000e014

08003f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003f34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003f44 <vPortEnableVFP+0x10>
 8003f38:	6801      	ldr	r1, [r0, #0]
 8003f3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003f3e:	6001      	str	r1, [r0, #0]
 8003f40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003f42:	bf00      	nop
 8003f44:	e000ed88 	.word	0xe000ed88

08003f48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	; 0x28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f50:	2300      	movs	r3, #0
 8003f52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f54:	f7ff fae4 	bl	8003520 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f58:	4b5b      	ldr	r3, [pc, #364]	; (80040c8 <pvPortMalloc+0x180>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f60:	f000 f920 	bl	80041a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f64:	4b59      	ldr	r3, [pc, #356]	; (80040cc <pvPortMalloc+0x184>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f040 8093 	bne.w	8004098 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01d      	beq.n	8003fb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003f78:	2208      	movs	r2, #8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d014      	beq.n	8003fb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f023 0307 	bic.w	r3, r3, #7
 8003f90:	3308      	adds	r3, #8
 8003f92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <pvPortMalloc+0x6c>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	617b      	str	r3, [r7, #20]
}
 8003fb0:	bf00      	nop
 8003fb2:	e7fe      	b.n	8003fb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d06e      	beq.n	8004098 <pvPortMalloc+0x150>
 8003fba:	4b45      	ldr	r3, [pc, #276]	; (80040d0 <pvPortMalloc+0x188>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d869      	bhi.n	8004098 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003fc4:	4b43      	ldr	r3, [pc, #268]	; (80040d4 <pvPortMalloc+0x18c>)
 8003fc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003fc8:	4b42      	ldr	r3, [pc, #264]	; (80040d4 <pvPortMalloc+0x18c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fce:	e004      	b.n	8003fda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d903      	bls.n	8003fec <pvPortMalloc+0xa4>
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1f1      	bne.n	8003fd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003fec:	4b36      	ldr	r3, [pc, #216]	; (80040c8 <pvPortMalloc+0x180>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d050      	beq.n	8004098 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	4413      	add	r3, r2
 8003ffe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	1ad2      	subs	r2, r2, r3
 8004010:	2308      	movs	r3, #8
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	429a      	cmp	r2, r3
 8004016:	d91f      	bls.n	8004058 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4413      	add	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <pvPortMalloc+0xf8>
	__asm volatile
 800402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	613b      	str	r3, [r7, #16]
}
 800403c:	bf00      	nop
 800403e:	e7fe      	b.n	800403e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	1ad2      	subs	r2, r2, r3
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004052:	69b8      	ldr	r0, [r7, #24]
 8004054:	f000 f908 	bl	8004268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004058:	4b1d      	ldr	r3, [pc, #116]	; (80040d0 <pvPortMalloc+0x188>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	4a1b      	ldr	r2, [pc, #108]	; (80040d0 <pvPortMalloc+0x188>)
 8004064:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004066:	4b1a      	ldr	r3, [pc, #104]	; (80040d0 <pvPortMalloc+0x188>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	4b1b      	ldr	r3, [pc, #108]	; (80040d8 <pvPortMalloc+0x190>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d203      	bcs.n	800407a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004072:	4b17      	ldr	r3, [pc, #92]	; (80040d0 <pvPortMalloc+0x188>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <pvPortMalloc+0x190>)
 8004078:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	4b13      	ldr	r3, [pc, #76]	; (80040cc <pvPortMalloc+0x184>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	431a      	orrs	r2, r3
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800408e:	4b13      	ldr	r3, [pc, #76]	; (80040dc <pvPortMalloc+0x194>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3301      	adds	r3, #1
 8004094:	4a11      	ldr	r2, [pc, #68]	; (80040dc <pvPortMalloc+0x194>)
 8004096:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004098:	f7ff fa50 	bl	800353c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <pvPortMalloc+0x174>
	__asm volatile
 80040a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	60fb      	str	r3, [r7, #12]
}
 80040b8:	bf00      	nop
 80040ba:	e7fe      	b.n	80040ba <pvPortMalloc+0x172>
	return pvReturn;
 80040bc:	69fb      	ldr	r3, [r7, #28]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3728      	adds	r7, #40	; 0x28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20004110 	.word	0x20004110
 80040cc:	20004124 	.word	0x20004124
 80040d0:	20004114 	.word	0x20004114
 80040d4:	20004108 	.word	0x20004108
 80040d8:	20004118 	.word	0x20004118
 80040dc:	2000411c 	.word	0x2000411c

080040e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d04d      	beq.n	800418e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80040f2:	2308      	movs	r3, #8
 80040f4:	425b      	negs	r3, r3
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4413      	add	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	4b24      	ldr	r3, [pc, #144]	; (8004198 <vPortFree+0xb8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4013      	ands	r3, r2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10a      	bne.n	8004124 <vPortFree+0x44>
	__asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	60fb      	str	r3, [r7, #12]
}
 8004120:	bf00      	nop
 8004122:	e7fe      	b.n	8004122 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <vPortFree+0x62>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	60bb      	str	r3, [r7, #8]
}
 800413e:	bf00      	nop
 8004140:	e7fe      	b.n	8004140 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	4b14      	ldr	r3, [pc, #80]	; (8004198 <vPortFree+0xb8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4013      	ands	r3, r2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d01e      	beq.n	800418e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d11a      	bne.n	800418e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <vPortFree+0xb8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	43db      	mvns	r3, r3
 8004162:	401a      	ands	r2, r3
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004168:	f7ff f9da 	bl	8003520 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	4b0a      	ldr	r3, [pc, #40]	; (800419c <vPortFree+0xbc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4413      	add	r3, r2
 8004176:	4a09      	ldr	r2, [pc, #36]	; (800419c <vPortFree+0xbc>)
 8004178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800417a:	6938      	ldr	r0, [r7, #16]
 800417c:	f000 f874 	bl	8004268 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004180:	4b07      	ldr	r3, [pc, #28]	; (80041a0 <vPortFree+0xc0>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3301      	adds	r3, #1
 8004186:	4a06      	ldr	r2, [pc, #24]	; (80041a0 <vPortFree+0xc0>)
 8004188:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800418a:	f7ff f9d7 	bl	800353c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800418e:	bf00      	nop
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20004124 	.word	0x20004124
 800419c:	20004114 	.word	0x20004114
 80041a0:	20004120 	.word	0x20004120

080041a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80041aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80041ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80041b0:	4b27      	ldr	r3, [pc, #156]	; (8004250 <prvHeapInit+0xac>)
 80041b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00c      	beq.n	80041d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3307      	adds	r3, #7
 80041c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0307 	bic.w	r3, r3, #7
 80041ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	4a1f      	ldr	r2, [pc, #124]	; (8004250 <prvHeapInit+0xac>)
 80041d4:	4413      	add	r3, r2
 80041d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041dc:	4a1d      	ldr	r2, [pc, #116]	; (8004254 <prvHeapInit+0xb0>)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80041e2:	4b1c      	ldr	r3, [pc, #112]	; (8004254 <prvHeapInit+0xb0>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	4413      	add	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80041f0:	2208      	movs	r2, #8
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0307 	bic.w	r3, r3, #7
 80041fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4a15      	ldr	r2, [pc, #84]	; (8004258 <prvHeapInit+0xb4>)
 8004204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004206:	4b14      	ldr	r3, [pc, #80]	; (8004258 <prvHeapInit+0xb4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2200      	movs	r2, #0
 800420c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800420e:	4b12      	ldr	r3, [pc, #72]	; (8004258 <prvHeapInit+0xb4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	1ad2      	subs	r2, r2, r3
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004224:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <prvHeapInit+0xb4>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4a0a      	ldr	r2, [pc, #40]	; (800425c <prvHeapInit+0xb8>)
 8004232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	4a09      	ldr	r2, [pc, #36]	; (8004260 <prvHeapInit+0xbc>)
 800423a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800423c:	4b09      	ldr	r3, [pc, #36]	; (8004264 <prvHeapInit+0xc0>)
 800423e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004242:	601a      	str	r2, [r3, #0]
}
 8004244:	bf00      	nop
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	20000508 	.word	0x20000508
 8004254:	20004108 	.word	0x20004108
 8004258:	20004110 	.word	0x20004110
 800425c:	20004118 	.word	0x20004118
 8004260:	20004114 	.word	0x20004114
 8004264:	20004124 	.word	0x20004124

08004268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004270:	4b28      	ldr	r3, [pc, #160]	; (8004314 <prvInsertBlockIntoFreeList+0xac>)
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	e002      	b.n	800427c <prvInsertBlockIntoFreeList+0x14>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	429a      	cmp	r2, r3
 8004284:	d8f7      	bhi.n	8004276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	4413      	add	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	d108      	bne.n	80042aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	441a      	add	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	441a      	add	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d118      	bne.n	80042f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4b15      	ldr	r3, [pc, #84]	; (8004318 <prvInsertBlockIntoFreeList+0xb0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d00d      	beq.n	80042e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	441a      	add	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	e008      	b.n	80042f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042e6:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <prvInsertBlockIntoFreeList+0xb0>)
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	e003      	b.n	80042f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d002      	beq.n	8004306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004306:	bf00      	nop
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	20004108 	.word	0x20004108
 8004318:	20004110 	.word	0x20004110

0800431c <std>:
 800431c:	2300      	movs	r3, #0
 800431e:	b510      	push	{r4, lr}
 8004320:	4604      	mov	r4, r0
 8004322:	e9c0 3300 	strd	r3, r3, [r0]
 8004326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800432a:	6083      	str	r3, [r0, #8]
 800432c:	8181      	strh	r1, [r0, #12]
 800432e:	6643      	str	r3, [r0, #100]	; 0x64
 8004330:	81c2      	strh	r2, [r0, #14]
 8004332:	6183      	str	r3, [r0, #24]
 8004334:	4619      	mov	r1, r3
 8004336:	2208      	movs	r2, #8
 8004338:	305c      	adds	r0, #92	; 0x5c
 800433a:	f000 fac5 	bl	80048c8 <memset>
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <std+0x58>)
 8004340:	6263      	str	r3, [r4, #36]	; 0x24
 8004342:	4b0d      	ldr	r3, [pc, #52]	; (8004378 <std+0x5c>)
 8004344:	62a3      	str	r3, [r4, #40]	; 0x28
 8004346:	4b0d      	ldr	r3, [pc, #52]	; (800437c <std+0x60>)
 8004348:	62e3      	str	r3, [r4, #44]	; 0x2c
 800434a:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <std+0x64>)
 800434c:	6323      	str	r3, [r4, #48]	; 0x30
 800434e:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <std+0x68>)
 8004350:	6224      	str	r4, [r4, #32]
 8004352:	429c      	cmp	r4, r3
 8004354:	d006      	beq.n	8004364 <std+0x48>
 8004356:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800435a:	4294      	cmp	r4, r2
 800435c:	d002      	beq.n	8004364 <std+0x48>
 800435e:	33d0      	adds	r3, #208	; 0xd0
 8004360:	429c      	cmp	r4, r3
 8004362:	d105      	bne.n	8004370 <std+0x54>
 8004364:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800436c:	f000 bb7a 	b.w	8004a64 <__retarget_lock_init_recursive>
 8004370:	bd10      	pop	{r4, pc}
 8004372:	bf00      	nop
 8004374:	08004719 	.word	0x08004719
 8004378:	0800473b 	.word	0x0800473b
 800437c:	08004773 	.word	0x08004773
 8004380:	08004797 	.word	0x08004797
 8004384:	20004128 	.word	0x20004128

08004388 <stdio_exit_handler>:
 8004388:	4a02      	ldr	r2, [pc, #8]	; (8004394 <stdio_exit_handler+0xc>)
 800438a:	4903      	ldr	r1, [pc, #12]	; (8004398 <stdio_exit_handler+0x10>)
 800438c:	4803      	ldr	r0, [pc, #12]	; (800439c <stdio_exit_handler+0x14>)
 800438e:	f000 b869 	b.w	8004464 <_fwalk_sglue>
 8004392:	bf00      	nop
 8004394:	20000010 	.word	0x20000010
 8004398:	080055ed 	.word	0x080055ed
 800439c:	2000001c 	.word	0x2000001c

080043a0 <cleanup_stdio>:
 80043a0:	6841      	ldr	r1, [r0, #4]
 80043a2:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <cleanup_stdio+0x34>)
 80043a4:	4299      	cmp	r1, r3
 80043a6:	b510      	push	{r4, lr}
 80043a8:	4604      	mov	r4, r0
 80043aa:	d001      	beq.n	80043b0 <cleanup_stdio+0x10>
 80043ac:	f001 f91e 	bl	80055ec <_fflush_r>
 80043b0:	68a1      	ldr	r1, [r4, #8]
 80043b2:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <cleanup_stdio+0x38>)
 80043b4:	4299      	cmp	r1, r3
 80043b6:	d002      	beq.n	80043be <cleanup_stdio+0x1e>
 80043b8:	4620      	mov	r0, r4
 80043ba:	f001 f917 	bl	80055ec <_fflush_r>
 80043be:	68e1      	ldr	r1, [r4, #12]
 80043c0:	4b06      	ldr	r3, [pc, #24]	; (80043dc <cleanup_stdio+0x3c>)
 80043c2:	4299      	cmp	r1, r3
 80043c4:	d004      	beq.n	80043d0 <cleanup_stdio+0x30>
 80043c6:	4620      	mov	r0, r4
 80043c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043cc:	f001 b90e 	b.w	80055ec <_fflush_r>
 80043d0:	bd10      	pop	{r4, pc}
 80043d2:	bf00      	nop
 80043d4:	20004128 	.word	0x20004128
 80043d8:	20004190 	.word	0x20004190
 80043dc:	200041f8 	.word	0x200041f8

080043e0 <global_stdio_init.part.0>:
 80043e0:	b510      	push	{r4, lr}
 80043e2:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <global_stdio_init.part.0+0x30>)
 80043e4:	4c0b      	ldr	r4, [pc, #44]	; (8004414 <global_stdio_init.part.0+0x34>)
 80043e6:	4a0c      	ldr	r2, [pc, #48]	; (8004418 <global_stdio_init.part.0+0x38>)
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	4620      	mov	r0, r4
 80043ec:	2200      	movs	r2, #0
 80043ee:	2104      	movs	r1, #4
 80043f0:	f7ff ff94 	bl	800431c <std>
 80043f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80043f8:	2201      	movs	r2, #1
 80043fa:	2109      	movs	r1, #9
 80043fc:	f7ff ff8e 	bl	800431c <std>
 8004400:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004404:	2202      	movs	r2, #2
 8004406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800440a:	2112      	movs	r1, #18
 800440c:	f7ff bf86 	b.w	800431c <std>
 8004410:	20004260 	.word	0x20004260
 8004414:	20004128 	.word	0x20004128
 8004418:	08004389 	.word	0x08004389

0800441c <__sfp_lock_acquire>:
 800441c:	4801      	ldr	r0, [pc, #4]	; (8004424 <__sfp_lock_acquire+0x8>)
 800441e:	f000 bb22 	b.w	8004a66 <__retarget_lock_acquire_recursive>
 8004422:	bf00      	nop
 8004424:	20004269 	.word	0x20004269

08004428 <__sfp_lock_release>:
 8004428:	4801      	ldr	r0, [pc, #4]	; (8004430 <__sfp_lock_release+0x8>)
 800442a:	f000 bb1d 	b.w	8004a68 <__retarget_lock_release_recursive>
 800442e:	bf00      	nop
 8004430:	20004269 	.word	0x20004269

08004434 <__sinit>:
 8004434:	b510      	push	{r4, lr}
 8004436:	4604      	mov	r4, r0
 8004438:	f7ff fff0 	bl	800441c <__sfp_lock_acquire>
 800443c:	6a23      	ldr	r3, [r4, #32]
 800443e:	b11b      	cbz	r3, 8004448 <__sinit+0x14>
 8004440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004444:	f7ff bff0 	b.w	8004428 <__sfp_lock_release>
 8004448:	4b04      	ldr	r3, [pc, #16]	; (800445c <__sinit+0x28>)
 800444a:	6223      	str	r3, [r4, #32]
 800444c:	4b04      	ldr	r3, [pc, #16]	; (8004460 <__sinit+0x2c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1f5      	bne.n	8004440 <__sinit+0xc>
 8004454:	f7ff ffc4 	bl	80043e0 <global_stdio_init.part.0>
 8004458:	e7f2      	b.n	8004440 <__sinit+0xc>
 800445a:	bf00      	nop
 800445c:	080043a1 	.word	0x080043a1
 8004460:	20004260 	.word	0x20004260

08004464 <_fwalk_sglue>:
 8004464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004468:	4607      	mov	r7, r0
 800446a:	4688      	mov	r8, r1
 800446c:	4614      	mov	r4, r2
 800446e:	2600      	movs	r6, #0
 8004470:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004474:	f1b9 0901 	subs.w	r9, r9, #1
 8004478:	d505      	bpl.n	8004486 <_fwalk_sglue+0x22>
 800447a:	6824      	ldr	r4, [r4, #0]
 800447c:	2c00      	cmp	r4, #0
 800447e:	d1f7      	bne.n	8004470 <_fwalk_sglue+0xc>
 8004480:	4630      	mov	r0, r6
 8004482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004486:	89ab      	ldrh	r3, [r5, #12]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d907      	bls.n	800449c <_fwalk_sglue+0x38>
 800448c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004490:	3301      	adds	r3, #1
 8004492:	d003      	beq.n	800449c <_fwalk_sglue+0x38>
 8004494:	4629      	mov	r1, r5
 8004496:	4638      	mov	r0, r7
 8004498:	47c0      	blx	r8
 800449a:	4306      	orrs	r6, r0
 800449c:	3568      	adds	r5, #104	; 0x68
 800449e:	e7e9      	b.n	8004474 <_fwalk_sglue+0x10>

080044a0 <iprintf>:
 80044a0:	b40f      	push	{r0, r1, r2, r3}
 80044a2:	b507      	push	{r0, r1, r2, lr}
 80044a4:	4906      	ldr	r1, [pc, #24]	; (80044c0 <iprintf+0x20>)
 80044a6:	ab04      	add	r3, sp, #16
 80044a8:	6808      	ldr	r0, [r1, #0]
 80044aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80044ae:	6881      	ldr	r1, [r0, #8]
 80044b0:	9301      	str	r3, [sp, #4]
 80044b2:	f000 fd6b 	bl	8004f8c <_vfiprintf_r>
 80044b6:	b003      	add	sp, #12
 80044b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80044bc:	b004      	add	sp, #16
 80044be:	4770      	bx	lr
 80044c0:	20000068 	.word	0x20000068

080044c4 <_puts_r>:
 80044c4:	6a03      	ldr	r3, [r0, #32]
 80044c6:	b570      	push	{r4, r5, r6, lr}
 80044c8:	6884      	ldr	r4, [r0, #8]
 80044ca:	4605      	mov	r5, r0
 80044cc:	460e      	mov	r6, r1
 80044ce:	b90b      	cbnz	r3, 80044d4 <_puts_r+0x10>
 80044d0:	f7ff ffb0 	bl	8004434 <__sinit>
 80044d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044d6:	07db      	lsls	r3, r3, #31
 80044d8:	d405      	bmi.n	80044e6 <_puts_r+0x22>
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	0598      	lsls	r0, r3, #22
 80044de:	d402      	bmi.n	80044e6 <_puts_r+0x22>
 80044e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044e2:	f000 fac0 	bl	8004a66 <__retarget_lock_acquire_recursive>
 80044e6:	89a3      	ldrh	r3, [r4, #12]
 80044e8:	0719      	lsls	r1, r3, #28
 80044ea:	d513      	bpl.n	8004514 <_puts_r+0x50>
 80044ec:	6923      	ldr	r3, [r4, #16]
 80044ee:	b18b      	cbz	r3, 8004514 <_puts_r+0x50>
 80044f0:	3e01      	subs	r6, #1
 80044f2:	68a3      	ldr	r3, [r4, #8]
 80044f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044f8:	3b01      	subs	r3, #1
 80044fa:	60a3      	str	r3, [r4, #8]
 80044fc:	b9e9      	cbnz	r1, 800453a <_puts_r+0x76>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	da2e      	bge.n	8004560 <_puts_r+0x9c>
 8004502:	4622      	mov	r2, r4
 8004504:	210a      	movs	r1, #10
 8004506:	4628      	mov	r0, r5
 8004508:	f000 f949 	bl	800479e <__swbuf_r>
 800450c:	3001      	adds	r0, #1
 800450e:	d007      	beq.n	8004520 <_puts_r+0x5c>
 8004510:	250a      	movs	r5, #10
 8004512:	e007      	b.n	8004524 <_puts_r+0x60>
 8004514:	4621      	mov	r1, r4
 8004516:	4628      	mov	r0, r5
 8004518:	f000 f97e 	bl	8004818 <__swsetup_r>
 800451c:	2800      	cmp	r0, #0
 800451e:	d0e7      	beq.n	80044f0 <_puts_r+0x2c>
 8004520:	f04f 35ff 	mov.w	r5, #4294967295
 8004524:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004526:	07da      	lsls	r2, r3, #31
 8004528:	d405      	bmi.n	8004536 <_puts_r+0x72>
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	059b      	lsls	r3, r3, #22
 800452e:	d402      	bmi.n	8004536 <_puts_r+0x72>
 8004530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004532:	f000 fa99 	bl	8004a68 <__retarget_lock_release_recursive>
 8004536:	4628      	mov	r0, r5
 8004538:	bd70      	pop	{r4, r5, r6, pc}
 800453a:	2b00      	cmp	r3, #0
 800453c:	da04      	bge.n	8004548 <_puts_r+0x84>
 800453e:	69a2      	ldr	r2, [r4, #24]
 8004540:	429a      	cmp	r2, r3
 8004542:	dc06      	bgt.n	8004552 <_puts_r+0x8e>
 8004544:	290a      	cmp	r1, #10
 8004546:	d004      	beq.n	8004552 <_puts_r+0x8e>
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	6022      	str	r2, [r4, #0]
 800454e:	7019      	strb	r1, [r3, #0]
 8004550:	e7cf      	b.n	80044f2 <_puts_r+0x2e>
 8004552:	4622      	mov	r2, r4
 8004554:	4628      	mov	r0, r5
 8004556:	f000 f922 	bl	800479e <__swbuf_r>
 800455a:	3001      	adds	r0, #1
 800455c:	d1c9      	bne.n	80044f2 <_puts_r+0x2e>
 800455e:	e7df      	b.n	8004520 <_puts_r+0x5c>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	250a      	movs	r5, #10
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	6022      	str	r2, [r4, #0]
 8004568:	701d      	strb	r5, [r3, #0]
 800456a:	e7db      	b.n	8004524 <_puts_r+0x60>

0800456c <puts>:
 800456c:	4b02      	ldr	r3, [pc, #8]	; (8004578 <puts+0xc>)
 800456e:	4601      	mov	r1, r0
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	f7ff bfa7 	b.w	80044c4 <_puts_r>
 8004576:	bf00      	nop
 8004578:	20000068 	.word	0x20000068

0800457c <setvbuf>:
 800457c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004580:	461d      	mov	r5, r3
 8004582:	4b54      	ldr	r3, [pc, #336]	; (80046d4 <setvbuf+0x158>)
 8004584:	681f      	ldr	r7, [r3, #0]
 8004586:	4604      	mov	r4, r0
 8004588:	460e      	mov	r6, r1
 800458a:	4690      	mov	r8, r2
 800458c:	b127      	cbz	r7, 8004598 <setvbuf+0x1c>
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	b913      	cbnz	r3, 8004598 <setvbuf+0x1c>
 8004592:	4638      	mov	r0, r7
 8004594:	f7ff ff4e 	bl	8004434 <__sinit>
 8004598:	f1b8 0f02 	cmp.w	r8, #2
 800459c:	d006      	beq.n	80045ac <setvbuf+0x30>
 800459e:	f1b8 0f01 	cmp.w	r8, #1
 80045a2:	f200 8094 	bhi.w	80046ce <setvbuf+0x152>
 80045a6:	2d00      	cmp	r5, #0
 80045a8:	f2c0 8091 	blt.w	80046ce <setvbuf+0x152>
 80045ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045ae:	07da      	lsls	r2, r3, #31
 80045b0:	d405      	bmi.n	80045be <setvbuf+0x42>
 80045b2:	89a3      	ldrh	r3, [r4, #12]
 80045b4:	059b      	lsls	r3, r3, #22
 80045b6:	d402      	bmi.n	80045be <setvbuf+0x42>
 80045b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045ba:	f000 fa54 	bl	8004a66 <__retarget_lock_acquire_recursive>
 80045be:	4621      	mov	r1, r4
 80045c0:	4638      	mov	r0, r7
 80045c2:	f001 f813 	bl	80055ec <_fflush_r>
 80045c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045c8:	b141      	cbz	r1, 80045dc <setvbuf+0x60>
 80045ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045ce:	4299      	cmp	r1, r3
 80045d0:	d002      	beq.n	80045d8 <setvbuf+0x5c>
 80045d2:	4638      	mov	r0, r7
 80045d4:	f000 fa58 	bl	8004a88 <_free_r>
 80045d8:	2300      	movs	r3, #0
 80045da:	6363      	str	r3, [r4, #52]	; 0x34
 80045dc:	2300      	movs	r3, #0
 80045de:	61a3      	str	r3, [r4, #24]
 80045e0:	6063      	str	r3, [r4, #4]
 80045e2:	89a3      	ldrh	r3, [r4, #12]
 80045e4:	0618      	lsls	r0, r3, #24
 80045e6:	d503      	bpl.n	80045f0 <setvbuf+0x74>
 80045e8:	6921      	ldr	r1, [r4, #16]
 80045ea:	4638      	mov	r0, r7
 80045ec:	f000 fa4c 	bl	8004a88 <_free_r>
 80045f0:	89a3      	ldrh	r3, [r4, #12]
 80045f2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80045f6:	f023 0303 	bic.w	r3, r3, #3
 80045fa:	f1b8 0f02 	cmp.w	r8, #2
 80045fe:	81a3      	strh	r3, [r4, #12]
 8004600:	d05f      	beq.n	80046c2 <setvbuf+0x146>
 8004602:	ab01      	add	r3, sp, #4
 8004604:	466a      	mov	r2, sp
 8004606:	4621      	mov	r1, r4
 8004608:	4638      	mov	r0, r7
 800460a:	f001 f817 	bl	800563c <__swhatbuf_r>
 800460e:	89a3      	ldrh	r3, [r4, #12]
 8004610:	4318      	orrs	r0, r3
 8004612:	81a0      	strh	r0, [r4, #12]
 8004614:	bb2d      	cbnz	r5, 8004662 <setvbuf+0xe6>
 8004616:	9d00      	ldr	r5, [sp, #0]
 8004618:	4628      	mov	r0, r5
 800461a:	f000 fa81 	bl	8004b20 <malloc>
 800461e:	4606      	mov	r6, r0
 8004620:	2800      	cmp	r0, #0
 8004622:	d150      	bne.n	80046c6 <setvbuf+0x14a>
 8004624:	f8dd 9000 	ldr.w	r9, [sp]
 8004628:	45a9      	cmp	r9, r5
 800462a:	d13e      	bne.n	80046aa <setvbuf+0x12e>
 800462c:	f04f 35ff 	mov.w	r5, #4294967295
 8004630:	2200      	movs	r2, #0
 8004632:	60a2      	str	r2, [r4, #8]
 8004634:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8004638:	6022      	str	r2, [r4, #0]
 800463a:	6122      	str	r2, [r4, #16]
 800463c:	2201      	movs	r2, #1
 800463e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004642:	6162      	str	r2, [r4, #20]
 8004644:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004646:	f043 0302 	orr.w	r3, r3, #2
 800464a:	07d1      	lsls	r1, r2, #31
 800464c:	81a3      	strh	r3, [r4, #12]
 800464e:	d404      	bmi.n	800465a <setvbuf+0xde>
 8004650:	059b      	lsls	r3, r3, #22
 8004652:	d402      	bmi.n	800465a <setvbuf+0xde>
 8004654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004656:	f000 fa07 	bl	8004a68 <__retarget_lock_release_recursive>
 800465a:	4628      	mov	r0, r5
 800465c:	b003      	add	sp, #12
 800465e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004662:	2e00      	cmp	r6, #0
 8004664:	d0d8      	beq.n	8004618 <setvbuf+0x9c>
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	b913      	cbnz	r3, 8004670 <setvbuf+0xf4>
 800466a:	4638      	mov	r0, r7
 800466c:	f7ff fee2 	bl	8004434 <__sinit>
 8004670:	f1b8 0f01 	cmp.w	r8, #1
 8004674:	bf08      	it	eq
 8004676:	89a3      	ldrheq	r3, [r4, #12]
 8004678:	6026      	str	r6, [r4, #0]
 800467a:	bf04      	itt	eq
 800467c:	f043 0301 	orreq.w	r3, r3, #1
 8004680:	81a3      	strheq	r3, [r4, #12]
 8004682:	89a3      	ldrh	r3, [r4, #12]
 8004684:	f013 0208 	ands.w	r2, r3, #8
 8004688:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800468c:	d01d      	beq.n	80046ca <setvbuf+0x14e>
 800468e:	07da      	lsls	r2, r3, #31
 8004690:	bf41      	itttt	mi
 8004692:	2200      	movmi	r2, #0
 8004694:	426d      	negmi	r5, r5
 8004696:	60a2      	strmi	r2, [r4, #8]
 8004698:	61a5      	strmi	r5, [r4, #24]
 800469a:	bf58      	it	pl
 800469c:	60a5      	strpl	r5, [r4, #8]
 800469e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80046a0:	f015 0501 	ands.w	r5, r5, #1
 80046a4:	d0d4      	beq.n	8004650 <setvbuf+0xd4>
 80046a6:	2500      	movs	r5, #0
 80046a8:	e7d7      	b.n	800465a <setvbuf+0xde>
 80046aa:	4648      	mov	r0, r9
 80046ac:	f000 fa38 	bl	8004b20 <malloc>
 80046b0:	4606      	mov	r6, r0
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d0ba      	beq.n	800462c <setvbuf+0xb0>
 80046b6:	89a3      	ldrh	r3, [r4, #12]
 80046b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046bc:	81a3      	strh	r3, [r4, #12]
 80046be:	464d      	mov	r5, r9
 80046c0:	e7d1      	b.n	8004666 <setvbuf+0xea>
 80046c2:	2500      	movs	r5, #0
 80046c4:	e7b4      	b.n	8004630 <setvbuf+0xb4>
 80046c6:	46a9      	mov	r9, r5
 80046c8:	e7f5      	b.n	80046b6 <setvbuf+0x13a>
 80046ca:	60a2      	str	r2, [r4, #8]
 80046cc:	e7e7      	b.n	800469e <setvbuf+0x122>
 80046ce:	f04f 35ff 	mov.w	r5, #4294967295
 80046d2:	e7c2      	b.n	800465a <setvbuf+0xde>
 80046d4:	20000068 	.word	0x20000068

080046d8 <siprintf>:
 80046d8:	b40e      	push	{r1, r2, r3}
 80046da:	b500      	push	{lr}
 80046dc:	b09c      	sub	sp, #112	; 0x70
 80046de:	ab1d      	add	r3, sp, #116	; 0x74
 80046e0:	9002      	str	r0, [sp, #8]
 80046e2:	9006      	str	r0, [sp, #24]
 80046e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046e8:	4809      	ldr	r0, [pc, #36]	; (8004710 <siprintf+0x38>)
 80046ea:	9107      	str	r1, [sp, #28]
 80046ec:	9104      	str	r1, [sp, #16]
 80046ee:	4909      	ldr	r1, [pc, #36]	; (8004714 <siprintf+0x3c>)
 80046f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80046f4:	9105      	str	r1, [sp, #20]
 80046f6:	6800      	ldr	r0, [r0, #0]
 80046f8:	9301      	str	r3, [sp, #4]
 80046fa:	a902      	add	r1, sp, #8
 80046fc:	f000 fb1e 	bl	8004d3c <_svfiprintf_r>
 8004700:	9b02      	ldr	r3, [sp, #8]
 8004702:	2200      	movs	r2, #0
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	b01c      	add	sp, #112	; 0x70
 8004708:	f85d eb04 	ldr.w	lr, [sp], #4
 800470c:	b003      	add	sp, #12
 800470e:	4770      	bx	lr
 8004710:	20000068 	.word	0x20000068
 8004714:	ffff0208 	.word	0xffff0208

08004718 <__sread>:
 8004718:	b510      	push	{r4, lr}
 800471a:	460c      	mov	r4, r1
 800471c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004720:	f000 f952 	bl	80049c8 <_read_r>
 8004724:	2800      	cmp	r0, #0
 8004726:	bfab      	itete	ge
 8004728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800472a:	89a3      	ldrhlt	r3, [r4, #12]
 800472c:	181b      	addge	r3, r3, r0
 800472e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004732:	bfac      	ite	ge
 8004734:	6563      	strge	r3, [r4, #84]	; 0x54
 8004736:	81a3      	strhlt	r3, [r4, #12]
 8004738:	bd10      	pop	{r4, pc}

0800473a <__swrite>:
 800473a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800473e:	461f      	mov	r7, r3
 8004740:	898b      	ldrh	r3, [r1, #12]
 8004742:	05db      	lsls	r3, r3, #23
 8004744:	4605      	mov	r5, r0
 8004746:	460c      	mov	r4, r1
 8004748:	4616      	mov	r6, r2
 800474a:	d505      	bpl.n	8004758 <__swrite+0x1e>
 800474c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004750:	2302      	movs	r3, #2
 8004752:	2200      	movs	r2, #0
 8004754:	f000 f926 	bl	80049a4 <_lseek_r>
 8004758:	89a3      	ldrh	r3, [r4, #12]
 800475a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800475e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004762:	81a3      	strh	r3, [r4, #12]
 8004764:	4632      	mov	r2, r6
 8004766:	463b      	mov	r3, r7
 8004768:	4628      	mov	r0, r5
 800476a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800476e:	f000 b93d 	b.w	80049ec <_write_r>

08004772 <__sseek>:
 8004772:	b510      	push	{r4, lr}
 8004774:	460c      	mov	r4, r1
 8004776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800477a:	f000 f913 	bl	80049a4 <_lseek_r>
 800477e:	1c43      	adds	r3, r0, #1
 8004780:	89a3      	ldrh	r3, [r4, #12]
 8004782:	bf15      	itete	ne
 8004784:	6560      	strne	r0, [r4, #84]	; 0x54
 8004786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800478a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800478e:	81a3      	strheq	r3, [r4, #12]
 8004790:	bf18      	it	ne
 8004792:	81a3      	strhne	r3, [r4, #12]
 8004794:	bd10      	pop	{r4, pc}

08004796 <__sclose>:
 8004796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800479a:	f000 b89d 	b.w	80048d8 <_close_r>

0800479e <__swbuf_r>:
 800479e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a0:	460e      	mov	r6, r1
 80047a2:	4614      	mov	r4, r2
 80047a4:	4605      	mov	r5, r0
 80047a6:	b118      	cbz	r0, 80047b0 <__swbuf_r+0x12>
 80047a8:	6a03      	ldr	r3, [r0, #32]
 80047aa:	b90b      	cbnz	r3, 80047b0 <__swbuf_r+0x12>
 80047ac:	f7ff fe42 	bl	8004434 <__sinit>
 80047b0:	69a3      	ldr	r3, [r4, #24]
 80047b2:	60a3      	str	r3, [r4, #8]
 80047b4:	89a3      	ldrh	r3, [r4, #12]
 80047b6:	071a      	lsls	r2, r3, #28
 80047b8:	d525      	bpl.n	8004806 <__swbuf_r+0x68>
 80047ba:	6923      	ldr	r3, [r4, #16]
 80047bc:	b31b      	cbz	r3, 8004806 <__swbuf_r+0x68>
 80047be:	6823      	ldr	r3, [r4, #0]
 80047c0:	6922      	ldr	r2, [r4, #16]
 80047c2:	1a98      	subs	r0, r3, r2
 80047c4:	6963      	ldr	r3, [r4, #20]
 80047c6:	b2f6      	uxtb	r6, r6
 80047c8:	4283      	cmp	r3, r0
 80047ca:	4637      	mov	r7, r6
 80047cc:	dc04      	bgt.n	80047d8 <__swbuf_r+0x3a>
 80047ce:	4621      	mov	r1, r4
 80047d0:	4628      	mov	r0, r5
 80047d2:	f000 ff0b 	bl	80055ec <_fflush_r>
 80047d6:	b9e0      	cbnz	r0, 8004812 <__swbuf_r+0x74>
 80047d8:	68a3      	ldr	r3, [r4, #8]
 80047da:	3b01      	subs	r3, #1
 80047dc:	60a3      	str	r3, [r4, #8]
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	6022      	str	r2, [r4, #0]
 80047e4:	701e      	strb	r6, [r3, #0]
 80047e6:	6962      	ldr	r2, [r4, #20]
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d004      	beq.n	80047f8 <__swbuf_r+0x5a>
 80047ee:	89a3      	ldrh	r3, [r4, #12]
 80047f0:	07db      	lsls	r3, r3, #31
 80047f2:	d506      	bpl.n	8004802 <__swbuf_r+0x64>
 80047f4:	2e0a      	cmp	r6, #10
 80047f6:	d104      	bne.n	8004802 <__swbuf_r+0x64>
 80047f8:	4621      	mov	r1, r4
 80047fa:	4628      	mov	r0, r5
 80047fc:	f000 fef6 	bl	80055ec <_fflush_r>
 8004800:	b938      	cbnz	r0, 8004812 <__swbuf_r+0x74>
 8004802:	4638      	mov	r0, r7
 8004804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004806:	4621      	mov	r1, r4
 8004808:	4628      	mov	r0, r5
 800480a:	f000 f805 	bl	8004818 <__swsetup_r>
 800480e:	2800      	cmp	r0, #0
 8004810:	d0d5      	beq.n	80047be <__swbuf_r+0x20>
 8004812:	f04f 37ff 	mov.w	r7, #4294967295
 8004816:	e7f4      	b.n	8004802 <__swbuf_r+0x64>

08004818 <__swsetup_r>:
 8004818:	b538      	push	{r3, r4, r5, lr}
 800481a:	4b2a      	ldr	r3, [pc, #168]	; (80048c4 <__swsetup_r+0xac>)
 800481c:	4605      	mov	r5, r0
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	460c      	mov	r4, r1
 8004822:	b118      	cbz	r0, 800482c <__swsetup_r+0x14>
 8004824:	6a03      	ldr	r3, [r0, #32]
 8004826:	b90b      	cbnz	r3, 800482c <__swsetup_r+0x14>
 8004828:	f7ff fe04 	bl	8004434 <__sinit>
 800482c:	89a3      	ldrh	r3, [r4, #12]
 800482e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004832:	0718      	lsls	r0, r3, #28
 8004834:	d422      	bmi.n	800487c <__swsetup_r+0x64>
 8004836:	06d9      	lsls	r1, r3, #27
 8004838:	d407      	bmi.n	800484a <__swsetup_r+0x32>
 800483a:	2309      	movs	r3, #9
 800483c:	602b      	str	r3, [r5, #0]
 800483e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004842:	81a3      	strh	r3, [r4, #12]
 8004844:	f04f 30ff 	mov.w	r0, #4294967295
 8004848:	e034      	b.n	80048b4 <__swsetup_r+0x9c>
 800484a:	0758      	lsls	r0, r3, #29
 800484c:	d512      	bpl.n	8004874 <__swsetup_r+0x5c>
 800484e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004850:	b141      	cbz	r1, 8004864 <__swsetup_r+0x4c>
 8004852:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004856:	4299      	cmp	r1, r3
 8004858:	d002      	beq.n	8004860 <__swsetup_r+0x48>
 800485a:	4628      	mov	r0, r5
 800485c:	f000 f914 	bl	8004a88 <_free_r>
 8004860:	2300      	movs	r3, #0
 8004862:	6363      	str	r3, [r4, #52]	; 0x34
 8004864:	89a3      	ldrh	r3, [r4, #12]
 8004866:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800486a:	81a3      	strh	r3, [r4, #12]
 800486c:	2300      	movs	r3, #0
 800486e:	6063      	str	r3, [r4, #4]
 8004870:	6923      	ldr	r3, [r4, #16]
 8004872:	6023      	str	r3, [r4, #0]
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	f043 0308 	orr.w	r3, r3, #8
 800487a:	81a3      	strh	r3, [r4, #12]
 800487c:	6923      	ldr	r3, [r4, #16]
 800487e:	b94b      	cbnz	r3, 8004894 <__swsetup_r+0x7c>
 8004880:	89a3      	ldrh	r3, [r4, #12]
 8004882:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800488a:	d003      	beq.n	8004894 <__swsetup_r+0x7c>
 800488c:	4621      	mov	r1, r4
 800488e:	4628      	mov	r0, r5
 8004890:	f000 fefa 	bl	8005688 <__smakebuf_r>
 8004894:	89a0      	ldrh	r0, [r4, #12]
 8004896:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800489a:	f010 0301 	ands.w	r3, r0, #1
 800489e:	d00a      	beq.n	80048b6 <__swsetup_r+0x9e>
 80048a0:	2300      	movs	r3, #0
 80048a2:	60a3      	str	r3, [r4, #8]
 80048a4:	6963      	ldr	r3, [r4, #20]
 80048a6:	425b      	negs	r3, r3
 80048a8:	61a3      	str	r3, [r4, #24]
 80048aa:	6923      	ldr	r3, [r4, #16]
 80048ac:	b943      	cbnz	r3, 80048c0 <__swsetup_r+0xa8>
 80048ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048b2:	d1c4      	bne.n	800483e <__swsetup_r+0x26>
 80048b4:	bd38      	pop	{r3, r4, r5, pc}
 80048b6:	0781      	lsls	r1, r0, #30
 80048b8:	bf58      	it	pl
 80048ba:	6963      	ldrpl	r3, [r4, #20]
 80048bc:	60a3      	str	r3, [r4, #8]
 80048be:	e7f4      	b.n	80048aa <__swsetup_r+0x92>
 80048c0:	2000      	movs	r0, #0
 80048c2:	e7f7      	b.n	80048b4 <__swsetup_r+0x9c>
 80048c4:	20000068 	.word	0x20000068

080048c8 <memset>:
 80048c8:	4402      	add	r2, r0
 80048ca:	4603      	mov	r3, r0
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d100      	bne.n	80048d2 <memset+0xa>
 80048d0:	4770      	bx	lr
 80048d2:	f803 1b01 	strb.w	r1, [r3], #1
 80048d6:	e7f9      	b.n	80048cc <memset+0x4>

080048d8 <_close_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4d06      	ldr	r5, [pc, #24]	; (80048f4 <_close_r+0x1c>)
 80048dc:	2300      	movs	r3, #0
 80048de:	4604      	mov	r4, r0
 80048e0:	4608      	mov	r0, r1
 80048e2:	602b      	str	r3, [r5, #0]
 80048e4:	f7fc fb0d 	bl	8000f02 <_close>
 80048e8:	1c43      	adds	r3, r0, #1
 80048ea:	d102      	bne.n	80048f2 <_close_r+0x1a>
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	b103      	cbz	r3, 80048f2 <_close_r+0x1a>
 80048f0:	6023      	str	r3, [r4, #0]
 80048f2:	bd38      	pop	{r3, r4, r5, pc}
 80048f4:	20004264 	.word	0x20004264

080048f8 <_reclaim_reent>:
 80048f8:	4b29      	ldr	r3, [pc, #164]	; (80049a0 <_reclaim_reent+0xa8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4283      	cmp	r3, r0
 80048fe:	b570      	push	{r4, r5, r6, lr}
 8004900:	4604      	mov	r4, r0
 8004902:	d04b      	beq.n	800499c <_reclaim_reent+0xa4>
 8004904:	69c3      	ldr	r3, [r0, #28]
 8004906:	b143      	cbz	r3, 800491a <_reclaim_reent+0x22>
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d144      	bne.n	8004998 <_reclaim_reent+0xa0>
 800490e:	69e3      	ldr	r3, [r4, #28]
 8004910:	6819      	ldr	r1, [r3, #0]
 8004912:	b111      	cbz	r1, 800491a <_reclaim_reent+0x22>
 8004914:	4620      	mov	r0, r4
 8004916:	f000 f8b7 	bl	8004a88 <_free_r>
 800491a:	6961      	ldr	r1, [r4, #20]
 800491c:	b111      	cbz	r1, 8004924 <_reclaim_reent+0x2c>
 800491e:	4620      	mov	r0, r4
 8004920:	f000 f8b2 	bl	8004a88 <_free_r>
 8004924:	69e1      	ldr	r1, [r4, #28]
 8004926:	b111      	cbz	r1, 800492e <_reclaim_reent+0x36>
 8004928:	4620      	mov	r0, r4
 800492a:	f000 f8ad 	bl	8004a88 <_free_r>
 800492e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004930:	b111      	cbz	r1, 8004938 <_reclaim_reent+0x40>
 8004932:	4620      	mov	r0, r4
 8004934:	f000 f8a8 	bl	8004a88 <_free_r>
 8004938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800493a:	b111      	cbz	r1, 8004942 <_reclaim_reent+0x4a>
 800493c:	4620      	mov	r0, r4
 800493e:	f000 f8a3 	bl	8004a88 <_free_r>
 8004942:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004944:	b111      	cbz	r1, 800494c <_reclaim_reent+0x54>
 8004946:	4620      	mov	r0, r4
 8004948:	f000 f89e 	bl	8004a88 <_free_r>
 800494c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800494e:	b111      	cbz	r1, 8004956 <_reclaim_reent+0x5e>
 8004950:	4620      	mov	r0, r4
 8004952:	f000 f899 	bl	8004a88 <_free_r>
 8004956:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004958:	b111      	cbz	r1, 8004960 <_reclaim_reent+0x68>
 800495a:	4620      	mov	r0, r4
 800495c:	f000 f894 	bl	8004a88 <_free_r>
 8004960:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004962:	b111      	cbz	r1, 800496a <_reclaim_reent+0x72>
 8004964:	4620      	mov	r0, r4
 8004966:	f000 f88f 	bl	8004a88 <_free_r>
 800496a:	6a23      	ldr	r3, [r4, #32]
 800496c:	b1b3      	cbz	r3, 800499c <_reclaim_reent+0xa4>
 800496e:	4620      	mov	r0, r4
 8004970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004974:	4718      	bx	r3
 8004976:	5949      	ldr	r1, [r1, r5]
 8004978:	b941      	cbnz	r1, 800498c <_reclaim_reent+0x94>
 800497a:	3504      	adds	r5, #4
 800497c:	69e3      	ldr	r3, [r4, #28]
 800497e:	2d80      	cmp	r5, #128	; 0x80
 8004980:	68d9      	ldr	r1, [r3, #12]
 8004982:	d1f8      	bne.n	8004976 <_reclaim_reent+0x7e>
 8004984:	4620      	mov	r0, r4
 8004986:	f000 f87f 	bl	8004a88 <_free_r>
 800498a:	e7c0      	b.n	800490e <_reclaim_reent+0x16>
 800498c:	680e      	ldr	r6, [r1, #0]
 800498e:	4620      	mov	r0, r4
 8004990:	f000 f87a 	bl	8004a88 <_free_r>
 8004994:	4631      	mov	r1, r6
 8004996:	e7ef      	b.n	8004978 <_reclaim_reent+0x80>
 8004998:	2500      	movs	r5, #0
 800499a:	e7ef      	b.n	800497c <_reclaim_reent+0x84>
 800499c:	bd70      	pop	{r4, r5, r6, pc}
 800499e:	bf00      	nop
 80049a0:	20000068 	.word	0x20000068

080049a4 <_lseek_r>:
 80049a4:	b538      	push	{r3, r4, r5, lr}
 80049a6:	4d07      	ldr	r5, [pc, #28]	; (80049c4 <_lseek_r+0x20>)
 80049a8:	4604      	mov	r4, r0
 80049aa:	4608      	mov	r0, r1
 80049ac:	4611      	mov	r1, r2
 80049ae:	2200      	movs	r2, #0
 80049b0:	602a      	str	r2, [r5, #0]
 80049b2:	461a      	mov	r2, r3
 80049b4:	f7fc facc 	bl	8000f50 <_lseek>
 80049b8:	1c43      	adds	r3, r0, #1
 80049ba:	d102      	bne.n	80049c2 <_lseek_r+0x1e>
 80049bc:	682b      	ldr	r3, [r5, #0]
 80049be:	b103      	cbz	r3, 80049c2 <_lseek_r+0x1e>
 80049c0:	6023      	str	r3, [r4, #0]
 80049c2:	bd38      	pop	{r3, r4, r5, pc}
 80049c4:	20004264 	.word	0x20004264

080049c8 <_read_r>:
 80049c8:	b538      	push	{r3, r4, r5, lr}
 80049ca:	4d07      	ldr	r5, [pc, #28]	; (80049e8 <_read_r+0x20>)
 80049cc:	4604      	mov	r4, r0
 80049ce:	4608      	mov	r0, r1
 80049d0:	4611      	mov	r1, r2
 80049d2:	2200      	movs	r2, #0
 80049d4:	602a      	str	r2, [r5, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	f7fc fa5a 	bl	8000e90 <_read>
 80049dc:	1c43      	adds	r3, r0, #1
 80049de:	d102      	bne.n	80049e6 <_read_r+0x1e>
 80049e0:	682b      	ldr	r3, [r5, #0]
 80049e2:	b103      	cbz	r3, 80049e6 <_read_r+0x1e>
 80049e4:	6023      	str	r3, [r4, #0]
 80049e6:	bd38      	pop	{r3, r4, r5, pc}
 80049e8:	20004264 	.word	0x20004264

080049ec <_write_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	4d07      	ldr	r5, [pc, #28]	; (8004a0c <_write_r+0x20>)
 80049f0:	4604      	mov	r4, r0
 80049f2:	4608      	mov	r0, r1
 80049f4:	4611      	mov	r1, r2
 80049f6:	2200      	movs	r2, #0
 80049f8:	602a      	str	r2, [r5, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	f7fc fa65 	bl	8000eca <_write>
 8004a00:	1c43      	adds	r3, r0, #1
 8004a02:	d102      	bne.n	8004a0a <_write_r+0x1e>
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	b103      	cbz	r3, 8004a0a <_write_r+0x1e>
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	bd38      	pop	{r3, r4, r5, pc}
 8004a0c:	20004264 	.word	0x20004264

08004a10 <__errno>:
 8004a10:	4b01      	ldr	r3, [pc, #4]	; (8004a18 <__errno+0x8>)
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20000068 	.word	0x20000068

08004a1c <__libc_init_array>:
 8004a1c:	b570      	push	{r4, r5, r6, lr}
 8004a1e:	4d0d      	ldr	r5, [pc, #52]	; (8004a54 <__libc_init_array+0x38>)
 8004a20:	4c0d      	ldr	r4, [pc, #52]	; (8004a58 <__libc_init_array+0x3c>)
 8004a22:	1b64      	subs	r4, r4, r5
 8004a24:	10a4      	asrs	r4, r4, #2
 8004a26:	2600      	movs	r6, #0
 8004a28:	42a6      	cmp	r6, r4
 8004a2a:	d109      	bne.n	8004a40 <__libc_init_array+0x24>
 8004a2c:	4d0b      	ldr	r5, [pc, #44]	; (8004a5c <__libc_init_array+0x40>)
 8004a2e:	4c0c      	ldr	r4, [pc, #48]	; (8004a60 <__libc_init_array+0x44>)
 8004a30:	f000 feea 	bl	8005808 <_init>
 8004a34:	1b64      	subs	r4, r4, r5
 8004a36:	10a4      	asrs	r4, r4, #2
 8004a38:	2600      	movs	r6, #0
 8004a3a:	42a6      	cmp	r6, r4
 8004a3c:	d105      	bne.n	8004a4a <__libc_init_array+0x2e>
 8004a3e:	bd70      	pop	{r4, r5, r6, pc}
 8004a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a44:	4798      	blx	r3
 8004a46:	3601      	adds	r6, #1
 8004a48:	e7ee      	b.n	8004a28 <__libc_init_array+0xc>
 8004a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4e:	4798      	blx	r3
 8004a50:	3601      	adds	r6, #1
 8004a52:	e7f2      	b.n	8004a3a <__libc_init_array+0x1e>
 8004a54:	0800598c 	.word	0x0800598c
 8004a58:	0800598c 	.word	0x0800598c
 8004a5c:	0800598c 	.word	0x0800598c
 8004a60:	08005990 	.word	0x08005990

08004a64 <__retarget_lock_init_recursive>:
 8004a64:	4770      	bx	lr

08004a66 <__retarget_lock_acquire_recursive>:
 8004a66:	4770      	bx	lr

08004a68 <__retarget_lock_release_recursive>:
 8004a68:	4770      	bx	lr

08004a6a <memcpy>:
 8004a6a:	440a      	add	r2, r1
 8004a6c:	4291      	cmp	r1, r2
 8004a6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a72:	d100      	bne.n	8004a76 <memcpy+0xc>
 8004a74:	4770      	bx	lr
 8004a76:	b510      	push	{r4, lr}
 8004a78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a80:	4291      	cmp	r1, r2
 8004a82:	d1f9      	bne.n	8004a78 <memcpy+0xe>
 8004a84:	bd10      	pop	{r4, pc}
	...

08004a88 <_free_r>:
 8004a88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a8a:	2900      	cmp	r1, #0
 8004a8c:	d044      	beq.n	8004b18 <_free_r+0x90>
 8004a8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a92:	9001      	str	r0, [sp, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f1a1 0404 	sub.w	r4, r1, #4
 8004a9a:	bfb8      	it	lt
 8004a9c:	18e4      	addlt	r4, r4, r3
 8004a9e:	f000 f8e7 	bl	8004c70 <__malloc_lock>
 8004aa2:	4a1e      	ldr	r2, [pc, #120]	; (8004b1c <_free_r+0x94>)
 8004aa4:	9801      	ldr	r0, [sp, #4]
 8004aa6:	6813      	ldr	r3, [r2, #0]
 8004aa8:	b933      	cbnz	r3, 8004ab8 <_free_r+0x30>
 8004aaa:	6063      	str	r3, [r4, #4]
 8004aac:	6014      	str	r4, [r2, #0]
 8004aae:	b003      	add	sp, #12
 8004ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ab4:	f000 b8e2 	b.w	8004c7c <__malloc_unlock>
 8004ab8:	42a3      	cmp	r3, r4
 8004aba:	d908      	bls.n	8004ace <_free_r+0x46>
 8004abc:	6825      	ldr	r5, [r4, #0]
 8004abe:	1961      	adds	r1, r4, r5
 8004ac0:	428b      	cmp	r3, r1
 8004ac2:	bf01      	itttt	eq
 8004ac4:	6819      	ldreq	r1, [r3, #0]
 8004ac6:	685b      	ldreq	r3, [r3, #4]
 8004ac8:	1949      	addeq	r1, r1, r5
 8004aca:	6021      	streq	r1, [r4, #0]
 8004acc:	e7ed      	b.n	8004aaa <_free_r+0x22>
 8004ace:	461a      	mov	r2, r3
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	b10b      	cbz	r3, 8004ad8 <_free_r+0x50>
 8004ad4:	42a3      	cmp	r3, r4
 8004ad6:	d9fa      	bls.n	8004ace <_free_r+0x46>
 8004ad8:	6811      	ldr	r1, [r2, #0]
 8004ada:	1855      	adds	r5, r2, r1
 8004adc:	42a5      	cmp	r5, r4
 8004ade:	d10b      	bne.n	8004af8 <_free_r+0x70>
 8004ae0:	6824      	ldr	r4, [r4, #0]
 8004ae2:	4421      	add	r1, r4
 8004ae4:	1854      	adds	r4, r2, r1
 8004ae6:	42a3      	cmp	r3, r4
 8004ae8:	6011      	str	r1, [r2, #0]
 8004aea:	d1e0      	bne.n	8004aae <_free_r+0x26>
 8004aec:	681c      	ldr	r4, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	6053      	str	r3, [r2, #4]
 8004af2:	440c      	add	r4, r1
 8004af4:	6014      	str	r4, [r2, #0]
 8004af6:	e7da      	b.n	8004aae <_free_r+0x26>
 8004af8:	d902      	bls.n	8004b00 <_free_r+0x78>
 8004afa:	230c      	movs	r3, #12
 8004afc:	6003      	str	r3, [r0, #0]
 8004afe:	e7d6      	b.n	8004aae <_free_r+0x26>
 8004b00:	6825      	ldr	r5, [r4, #0]
 8004b02:	1961      	adds	r1, r4, r5
 8004b04:	428b      	cmp	r3, r1
 8004b06:	bf04      	itt	eq
 8004b08:	6819      	ldreq	r1, [r3, #0]
 8004b0a:	685b      	ldreq	r3, [r3, #4]
 8004b0c:	6063      	str	r3, [r4, #4]
 8004b0e:	bf04      	itt	eq
 8004b10:	1949      	addeq	r1, r1, r5
 8004b12:	6021      	streq	r1, [r4, #0]
 8004b14:	6054      	str	r4, [r2, #4]
 8004b16:	e7ca      	b.n	8004aae <_free_r+0x26>
 8004b18:	b003      	add	sp, #12
 8004b1a:	bd30      	pop	{r4, r5, pc}
 8004b1c:	2000426c 	.word	0x2000426c

08004b20 <malloc>:
 8004b20:	4b02      	ldr	r3, [pc, #8]	; (8004b2c <malloc+0xc>)
 8004b22:	4601      	mov	r1, r0
 8004b24:	6818      	ldr	r0, [r3, #0]
 8004b26:	f000 b823 	b.w	8004b70 <_malloc_r>
 8004b2a:	bf00      	nop
 8004b2c:	20000068 	.word	0x20000068

08004b30 <sbrk_aligned>:
 8004b30:	b570      	push	{r4, r5, r6, lr}
 8004b32:	4e0e      	ldr	r6, [pc, #56]	; (8004b6c <sbrk_aligned+0x3c>)
 8004b34:	460c      	mov	r4, r1
 8004b36:	6831      	ldr	r1, [r6, #0]
 8004b38:	4605      	mov	r5, r0
 8004b3a:	b911      	cbnz	r1, 8004b42 <sbrk_aligned+0x12>
 8004b3c:	f000 fe1c 	bl	8005778 <_sbrk_r>
 8004b40:	6030      	str	r0, [r6, #0]
 8004b42:	4621      	mov	r1, r4
 8004b44:	4628      	mov	r0, r5
 8004b46:	f000 fe17 	bl	8005778 <_sbrk_r>
 8004b4a:	1c43      	adds	r3, r0, #1
 8004b4c:	d00a      	beq.n	8004b64 <sbrk_aligned+0x34>
 8004b4e:	1cc4      	adds	r4, r0, #3
 8004b50:	f024 0403 	bic.w	r4, r4, #3
 8004b54:	42a0      	cmp	r0, r4
 8004b56:	d007      	beq.n	8004b68 <sbrk_aligned+0x38>
 8004b58:	1a21      	subs	r1, r4, r0
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	f000 fe0c 	bl	8005778 <_sbrk_r>
 8004b60:	3001      	adds	r0, #1
 8004b62:	d101      	bne.n	8004b68 <sbrk_aligned+0x38>
 8004b64:	f04f 34ff 	mov.w	r4, #4294967295
 8004b68:	4620      	mov	r0, r4
 8004b6a:	bd70      	pop	{r4, r5, r6, pc}
 8004b6c:	20004270 	.word	0x20004270

08004b70 <_malloc_r>:
 8004b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b74:	1ccd      	adds	r5, r1, #3
 8004b76:	f025 0503 	bic.w	r5, r5, #3
 8004b7a:	3508      	adds	r5, #8
 8004b7c:	2d0c      	cmp	r5, #12
 8004b7e:	bf38      	it	cc
 8004b80:	250c      	movcc	r5, #12
 8004b82:	2d00      	cmp	r5, #0
 8004b84:	4607      	mov	r7, r0
 8004b86:	db01      	blt.n	8004b8c <_malloc_r+0x1c>
 8004b88:	42a9      	cmp	r1, r5
 8004b8a:	d905      	bls.n	8004b98 <_malloc_r+0x28>
 8004b8c:	230c      	movs	r3, #12
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	2600      	movs	r6, #0
 8004b92:	4630      	mov	r0, r6
 8004b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004c6c <_malloc_r+0xfc>
 8004b9c:	f000 f868 	bl	8004c70 <__malloc_lock>
 8004ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ba4:	461c      	mov	r4, r3
 8004ba6:	bb5c      	cbnz	r4, 8004c00 <_malloc_r+0x90>
 8004ba8:	4629      	mov	r1, r5
 8004baa:	4638      	mov	r0, r7
 8004bac:	f7ff ffc0 	bl	8004b30 <sbrk_aligned>
 8004bb0:	1c43      	adds	r3, r0, #1
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	d155      	bne.n	8004c62 <_malloc_r+0xf2>
 8004bb6:	f8d8 4000 	ldr.w	r4, [r8]
 8004bba:	4626      	mov	r6, r4
 8004bbc:	2e00      	cmp	r6, #0
 8004bbe:	d145      	bne.n	8004c4c <_malloc_r+0xdc>
 8004bc0:	2c00      	cmp	r4, #0
 8004bc2:	d048      	beq.n	8004c56 <_malloc_r+0xe6>
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	4638      	mov	r0, r7
 8004bca:	eb04 0903 	add.w	r9, r4, r3
 8004bce:	f000 fdd3 	bl	8005778 <_sbrk_r>
 8004bd2:	4581      	cmp	r9, r0
 8004bd4:	d13f      	bne.n	8004c56 <_malloc_r+0xe6>
 8004bd6:	6821      	ldr	r1, [r4, #0]
 8004bd8:	1a6d      	subs	r5, r5, r1
 8004bda:	4629      	mov	r1, r5
 8004bdc:	4638      	mov	r0, r7
 8004bde:	f7ff ffa7 	bl	8004b30 <sbrk_aligned>
 8004be2:	3001      	adds	r0, #1
 8004be4:	d037      	beq.n	8004c56 <_malloc_r+0xe6>
 8004be6:	6823      	ldr	r3, [r4, #0]
 8004be8:	442b      	add	r3, r5
 8004bea:	6023      	str	r3, [r4, #0]
 8004bec:	f8d8 3000 	ldr.w	r3, [r8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d038      	beq.n	8004c66 <_malloc_r+0xf6>
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	42a2      	cmp	r2, r4
 8004bf8:	d12b      	bne.n	8004c52 <_malloc_r+0xe2>
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	605a      	str	r2, [r3, #4]
 8004bfe:	e00f      	b.n	8004c20 <_malloc_r+0xb0>
 8004c00:	6822      	ldr	r2, [r4, #0]
 8004c02:	1b52      	subs	r2, r2, r5
 8004c04:	d41f      	bmi.n	8004c46 <_malloc_r+0xd6>
 8004c06:	2a0b      	cmp	r2, #11
 8004c08:	d917      	bls.n	8004c3a <_malloc_r+0xca>
 8004c0a:	1961      	adds	r1, r4, r5
 8004c0c:	42a3      	cmp	r3, r4
 8004c0e:	6025      	str	r5, [r4, #0]
 8004c10:	bf18      	it	ne
 8004c12:	6059      	strne	r1, [r3, #4]
 8004c14:	6863      	ldr	r3, [r4, #4]
 8004c16:	bf08      	it	eq
 8004c18:	f8c8 1000 	streq.w	r1, [r8]
 8004c1c:	5162      	str	r2, [r4, r5]
 8004c1e:	604b      	str	r3, [r1, #4]
 8004c20:	4638      	mov	r0, r7
 8004c22:	f104 060b 	add.w	r6, r4, #11
 8004c26:	f000 f829 	bl	8004c7c <__malloc_unlock>
 8004c2a:	f026 0607 	bic.w	r6, r6, #7
 8004c2e:	1d23      	adds	r3, r4, #4
 8004c30:	1af2      	subs	r2, r6, r3
 8004c32:	d0ae      	beq.n	8004b92 <_malloc_r+0x22>
 8004c34:	1b9b      	subs	r3, r3, r6
 8004c36:	50a3      	str	r3, [r4, r2]
 8004c38:	e7ab      	b.n	8004b92 <_malloc_r+0x22>
 8004c3a:	42a3      	cmp	r3, r4
 8004c3c:	6862      	ldr	r2, [r4, #4]
 8004c3e:	d1dd      	bne.n	8004bfc <_malloc_r+0x8c>
 8004c40:	f8c8 2000 	str.w	r2, [r8]
 8004c44:	e7ec      	b.n	8004c20 <_malloc_r+0xb0>
 8004c46:	4623      	mov	r3, r4
 8004c48:	6864      	ldr	r4, [r4, #4]
 8004c4a:	e7ac      	b.n	8004ba6 <_malloc_r+0x36>
 8004c4c:	4634      	mov	r4, r6
 8004c4e:	6876      	ldr	r6, [r6, #4]
 8004c50:	e7b4      	b.n	8004bbc <_malloc_r+0x4c>
 8004c52:	4613      	mov	r3, r2
 8004c54:	e7cc      	b.n	8004bf0 <_malloc_r+0x80>
 8004c56:	230c      	movs	r3, #12
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	4638      	mov	r0, r7
 8004c5c:	f000 f80e 	bl	8004c7c <__malloc_unlock>
 8004c60:	e797      	b.n	8004b92 <_malloc_r+0x22>
 8004c62:	6025      	str	r5, [r4, #0]
 8004c64:	e7dc      	b.n	8004c20 <_malloc_r+0xb0>
 8004c66:	605b      	str	r3, [r3, #4]
 8004c68:	deff      	udf	#255	; 0xff
 8004c6a:	bf00      	nop
 8004c6c:	2000426c 	.word	0x2000426c

08004c70 <__malloc_lock>:
 8004c70:	4801      	ldr	r0, [pc, #4]	; (8004c78 <__malloc_lock+0x8>)
 8004c72:	f7ff bef8 	b.w	8004a66 <__retarget_lock_acquire_recursive>
 8004c76:	bf00      	nop
 8004c78:	20004268 	.word	0x20004268

08004c7c <__malloc_unlock>:
 8004c7c:	4801      	ldr	r0, [pc, #4]	; (8004c84 <__malloc_unlock+0x8>)
 8004c7e:	f7ff bef3 	b.w	8004a68 <__retarget_lock_release_recursive>
 8004c82:	bf00      	nop
 8004c84:	20004268 	.word	0x20004268

08004c88 <__ssputs_r>:
 8004c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c8c:	688e      	ldr	r6, [r1, #8]
 8004c8e:	461f      	mov	r7, r3
 8004c90:	42be      	cmp	r6, r7
 8004c92:	680b      	ldr	r3, [r1, #0]
 8004c94:	4682      	mov	sl, r0
 8004c96:	460c      	mov	r4, r1
 8004c98:	4690      	mov	r8, r2
 8004c9a:	d82c      	bhi.n	8004cf6 <__ssputs_r+0x6e>
 8004c9c:	898a      	ldrh	r2, [r1, #12]
 8004c9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ca2:	d026      	beq.n	8004cf2 <__ssputs_r+0x6a>
 8004ca4:	6965      	ldr	r5, [r4, #20]
 8004ca6:	6909      	ldr	r1, [r1, #16]
 8004ca8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cac:	eba3 0901 	sub.w	r9, r3, r1
 8004cb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cb4:	1c7b      	adds	r3, r7, #1
 8004cb6:	444b      	add	r3, r9
 8004cb8:	106d      	asrs	r5, r5, #1
 8004cba:	429d      	cmp	r5, r3
 8004cbc:	bf38      	it	cc
 8004cbe:	461d      	movcc	r5, r3
 8004cc0:	0553      	lsls	r3, r2, #21
 8004cc2:	d527      	bpl.n	8004d14 <__ssputs_r+0x8c>
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	f7ff ff53 	bl	8004b70 <_malloc_r>
 8004cca:	4606      	mov	r6, r0
 8004ccc:	b360      	cbz	r0, 8004d28 <__ssputs_r+0xa0>
 8004cce:	6921      	ldr	r1, [r4, #16]
 8004cd0:	464a      	mov	r2, r9
 8004cd2:	f7ff feca 	bl	8004a6a <memcpy>
 8004cd6:	89a3      	ldrh	r3, [r4, #12]
 8004cd8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce0:	81a3      	strh	r3, [r4, #12]
 8004ce2:	6126      	str	r6, [r4, #16]
 8004ce4:	6165      	str	r5, [r4, #20]
 8004ce6:	444e      	add	r6, r9
 8004ce8:	eba5 0509 	sub.w	r5, r5, r9
 8004cec:	6026      	str	r6, [r4, #0]
 8004cee:	60a5      	str	r5, [r4, #8]
 8004cf0:	463e      	mov	r6, r7
 8004cf2:	42be      	cmp	r6, r7
 8004cf4:	d900      	bls.n	8004cf8 <__ssputs_r+0x70>
 8004cf6:	463e      	mov	r6, r7
 8004cf8:	6820      	ldr	r0, [r4, #0]
 8004cfa:	4632      	mov	r2, r6
 8004cfc:	4641      	mov	r1, r8
 8004cfe:	f000 fcff 	bl	8005700 <memmove>
 8004d02:	68a3      	ldr	r3, [r4, #8]
 8004d04:	1b9b      	subs	r3, r3, r6
 8004d06:	60a3      	str	r3, [r4, #8]
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	4433      	add	r3, r6
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	2000      	movs	r0, #0
 8004d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d14:	462a      	mov	r2, r5
 8004d16:	f000 fd3f 	bl	8005798 <_realloc_r>
 8004d1a:	4606      	mov	r6, r0
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	d1e0      	bne.n	8004ce2 <__ssputs_r+0x5a>
 8004d20:	6921      	ldr	r1, [r4, #16]
 8004d22:	4650      	mov	r0, sl
 8004d24:	f7ff feb0 	bl	8004a88 <_free_r>
 8004d28:	230c      	movs	r3, #12
 8004d2a:	f8ca 3000 	str.w	r3, [sl]
 8004d2e:	89a3      	ldrh	r3, [r4, #12]
 8004d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d34:	81a3      	strh	r3, [r4, #12]
 8004d36:	f04f 30ff 	mov.w	r0, #4294967295
 8004d3a:	e7e9      	b.n	8004d10 <__ssputs_r+0x88>

08004d3c <_svfiprintf_r>:
 8004d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d40:	4698      	mov	r8, r3
 8004d42:	898b      	ldrh	r3, [r1, #12]
 8004d44:	061b      	lsls	r3, r3, #24
 8004d46:	b09d      	sub	sp, #116	; 0x74
 8004d48:	4607      	mov	r7, r0
 8004d4a:	460d      	mov	r5, r1
 8004d4c:	4614      	mov	r4, r2
 8004d4e:	d50e      	bpl.n	8004d6e <_svfiprintf_r+0x32>
 8004d50:	690b      	ldr	r3, [r1, #16]
 8004d52:	b963      	cbnz	r3, 8004d6e <_svfiprintf_r+0x32>
 8004d54:	2140      	movs	r1, #64	; 0x40
 8004d56:	f7ff ff0b 	bl	8004b70 <_malloc_r>
 8004d5a:	6028      	str	r0, [r5, #0]
 8004d5c:	6128      	str	r0, [r5, #16]
 8004d5e:	b920      	cbnz	r0, 8004d6a <_svfiprintf_r+0x2e>
 8004d60:	230c      	movs	r3, #12
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295
 8004d68:	e0d0      	b.n	8004f0c <_svfiprintf_r+0x1d0>
 8004d6a:	2340      	movs	r3, #64	; 0x40
 8004d6c:	616b      	str	r3, [r5, #20]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	9309      	str	r3, [sp, #36]	; 0x24
 8004d72:	2320      	movs	r3, #32
 8004d74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d78:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d7c:	2330      	movs	r3, #48	; 0x30
 8004d7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004f24 <_svfiprintf_r+0x1e8>
 8004d82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d86:	f04f 0901 	mov.w	r9, #1
 8004d8a:	4623      	mov	r3, r4
 8004d8c:	469a      	mov	sl, r3
 8004d8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d92:	b10a      	cbz	r2, 8004d98 <_svfiprintf_r+0x5c>
 8004d94:	2a25      	cmp	r2, #37	; 0x25
 8004d96:	d1f9      	bne.n	8004d8c <_svfiprintf_r+0x50>
 8004d98:	ebba 0b04 	subs.w	fp, sl, r4
 8004d9c:	d00b      	beq.n	8004db6 <_svfiprintf_r+0x7a>
 8004d9e:	465b      	mov	r3, fp
 8004da0:	4622      	mov	r2, r4
 8004da2:	4629      	mov	r1, r5
 8004da4:	4638      	mov	r0, r7
 8004da6:	f7ff ff6f 	bl	8004c88 <__ssputs_r>
 8004daa:	3001      	adds	r0, #1
 8004dac:	f000 80a9 	beq.w	8004f02 <_svfiprintf_r+0x1c6>
 8004db0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004db2:	445a      	add	r2, fp
 8004db4:	9209      	str	r2, [sp, #36]	; 0x24
 8004db6:	f89a 3000 	ldrb.w	r3, [sl]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 80a1 	beq.w	8004f02 <_svfiprintf_r+0x1c6>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004dca:	f10a 0a01 	add.w	sl, sl, #1
 8004dce:	9304      	str	r3, [sp, #16]
 8004dd0:	9307      	str	r3, [sp, #28]
 8004dd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dd6:	931a      	str	r3, [sp, #104]	; 0x68
 8004dd8:	4654      	mov	r4, sl
 8004dda:	2205      	movs	r2, #5
 8004ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de0:	4850      	ldr	r0, [pc, #320]	; (8004f24 <_svfiprintf_r+0x1e8>)
 8004de2:	f7fb f9fd 	bl	80001e0 <memchr>
 8004de6:	9a04      	ldr	r2, [sp, #16]
 8004de8:	b9d8      	cbnz	r0, 8004e22 <_svfiprintf_r+0xe6>
 8004dea:	06d0      	lsls	r0, r2, #27
 8004dec:	bf44      	itt	mi
 8004dee:	2320      	movmi	r3, #32
 8004df0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004df4:	0711      	lsls	r1, r2, #28
 8004df6:	bf44      	itt	mi
 8004df8:	232b      	movmi	r3, #43	; 0x2b
 8004dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8004e02:	2b2a      	cmp	r3, #42	; 0x2a
 8004e04:	d015      	beq.n	8004e32 <_svfiprintf_r+0xf6>
 8004e06:	9a07      	ldr	r2, [sp, #28]
 8004e08:	4654      	mov	r4, sl
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	f04f 0c0a 	mov.w	ip, #10
 8004e10:	4621      	mov	r1, r4
 8004e12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e16:	3b30      	subs	r3, #48	; 0x30
 8004e18:	2b09      	cmp	r3, #9
 8004e1a:	d94d      	bls.n	8004eb8 <_svfiprintf_r+0x17c>
 8004e1c:	b1b0      	cbz	r0, 8004e4c <_svfiprintf_r+0x110>
 8004e1e:	9207      	str	r2, [sp, #28]
 8004e20:	e014      	b.n	8004e4c <_svfiprintf_r+0x110>
 8004e22:	eba0 0308 	sub.w	r3, r0, r8
 8004e26:	fa09 f303 	lsl.w	r3, r9, r3
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	9304      	str	r3, [sp, #16]
 8004e2e:	46a2      	mov	sl, r4
 8004e30:	e7d2      	b.n	8004dd8 <_svfiprintf_r+0x9c>
 8004e32:	9b03      	ldr	r3, [sp, #12]
 8004e34:	1d19      	adds	r1, r3, #4
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	9103      	str	r1, [sp, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	bfbb      	ittet	lt
 8004e3e:	425b      	neglt	r3, r3
 8004e40:	f042 0202 	orrlt.w	r2, r2, #2
 8004e44:	9307      	strge	r3, [sp, #28]
 8004e46:	9307      	strlt	r3, [sp, #28]
 8004e48:	bfb8      	it	lt
 8004e4a:	9204      	strlt	r2, [sp, #16]
 8004e4c:	7823      	ldrb	r3, [r4, #0]
 8004e4e:	2b2e      	cmp	r3, #46	; 0x2e
 8004e50:	d10c      	bne.n	8004e6c <_svfiprintf_r+0x130>
 8004e52:	7863      	ldrb	r3, [r4, #1]
 8004e54:	2b2a      	cmp	r3, #42	; 0x2a
 8004e56:	d134      	bne.n	8004ec2 <_svfiprintf_r+0x186>
 8004e58:	9b03      	ldr	r3, [sp, #12]
 8004e5a:	1d1a      	adds	r2, r3, #4
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	9203      	str	r2, [sp, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	bfb8      	it	lt
 8004e64:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e68:	3402      	adds	r4, #2
 8004e6a:	9305      	str	r3, [sp, #20]
 8004e6c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004f34 <_svfiprintf_r+0x1f8>
 8004e70:	7821      	ldrb	r1, [r4, #0]
 8004e72:	2203      	movs	r2, #3
 8004e74:	4650      	mov	r0, sl
 8004e76:	f7fb f9b3 	bl	80001e0 <memchr>
 8004e7a:	b138      	cbz	r0, 8004e8c <_svfiprintf_r+0x150>
 8004e7c:	9b04      	ldr	r3, [sp, #16]
 8004e7e:	eba0 000a 	sub.w	r0, r0, sl
 8004e82:	2240      	movs	r2, #64	; 0x40
 8004e84:	4082      	lsls	r2, r0
 8004e86:	4313      	orrs	r3, r2
 8004e88:	3401      	adds	r4, #1
 8004e8a:	9304      	str	r3, [sp, #16]
 8004e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e90:	4825      	ldr	r0, [pc, #148]	; (8004f28 <_svfiprintf_r+0x1ec>)
 8004e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e96:	2206      	movs	r2, #6
 8004e98:	f7fb f9a2 	bl	80001e0 <memchr>
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	d038      	beq.n	8004f12 <_svfiprintf_r+0x1d6>
 8004ea0:	4b22      	ldr	r3, [pc, #136]	; (8004f2c <_svfiprintf_r+0x1f0>)
 8004ea2:	bb1b      	cbnz	r3, 8004eec <_svfiprintf_r+0x1b0>
 8004ea4:	9b03      	ldr	r3, [sp, #12]
 8004ea6:	3307      	adds	r3, #7
 8004ea8:	f023 0307 	bic.w	r3, r3, #7
 8004eac:	3308      	adds	r3, #8
 8004eae:	9303      	str	r3, [sp, #12]
 8004eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb2:	4433      	add	r3, r6
 8004eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004eb6:	e768      	b.n	8004d8a <_svfiprintf_r+0x4e>
 8004eb8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	2001      	movs	r0, #1
 8004ec0:	e7a6      	b.n	8004e10 <_svfiprintf_r+0xd4>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	3401      	adds	r4, #1
 8004ec6:	9305      	str	r3, [sp, #20]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	f04f 0c0a 	mov.w	ip, #10
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ed4:	3a30      	subs	r2, #48	; 0x30
 8004ed6:	2a09      	cmp	r2, #9
 8004ed8:	d903      	bls.n	8004ee2 <_svfiprintf_r+0x1a6>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0c6      	beq.n	8004e6c <_svfiprintf_r+0x130>
 8004ede:	9105      	str	r1, [sp, #20]
 8004ee0:	e7c4      	b.n	8004e6c <_svfiprintf_r+0x130>
 8004ee2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e7f0      	b.n	8004ece <_svfiprintf_r+0x192>
 8004eec:	ab03      	add	r3, sp, #12
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	462a      	mov	r2, r5
 8004ef2:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <_svfiprintf_r+0x1f4>)
 8004ef4:	a904      	add	r1, sp, #16
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	f3af 8000 	nop.w
 8004efc:	1c42      	adds	r2, r0, #1
 8004efe:	4606      	mov	r6, r0
 8004f00:	d1d6      	bne.n	8004eb0 <_svfiprintf_r+0x174>
 8004f02:	89ab      	ldrh	r3, [r5, #12]
 8004f04:	065b      	lsls	r3, r3, #25
 8004f06:	f53f af2d 	bmi.w	8004d64 <_svfiprintf_r+0x28>
 8004f0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f0c:	b01d      	add	sp, #116	; 0x74
 8004f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f12:	ab03      	add	r3, sp, #12
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	462a      	mov	r2, r5
 8004f18:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <_svfiprintf_r+0x1f4>)
 8004f1a:	a904      	add	r1, sp, #16
 8004f1c:	4638      	mov	r0, r7
 8004f1e:	f000 f9bd 	bl	800529c <_printf_i>
 8004f22:	e7eb      	b.n	8004efc <_svfiprintf_r+0x1c0>
 8004f24:	08005950 	.word	0x08005950
 8004f28:	0800595a 	.word	0x0800595a
 8004f2c:	00000000 	.word	0x00000000
 8004f30:	08004c89 	.word	0x08004c89
 8004f34:	08005956 	.word	0x08005956

08004f38 <__sfputc_r>:
 8004f38:	6893      	ldr	r3, [r2, #8]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	b410      	push	{r4}
 8004f40:	6093      	str	r3, [r2, #8]
 8004f42:	da08      	bge.n	8004f56 <__sfputc_r+0x1e>
 8004f44:	6994      	ldr	r4, [r2, #24]
 8004f46:	42a3      	cmp	r3, r4
 8004f48:	db01      	blt.n	8004f4e <__sfputc_r+0x16>
 8004f4a:	290a      	cmp	r1, #10
 8004f4c:	d103      	bne.n	8004f56 <__sfputc_r+0x1e>
 8004f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f52:	f7ff bc24 	b.w	800479e <__swbuf_r>
 8004f56:	6813      	ldr	r3, [r2, #0]
 8004f58:	1c58      	adds	r0, r3, #1
 8004f5a:	6010      	str	r0, [r2, #0]
 8004f5c:	7019      	strb	r1, [r3, #0]
 8004f5e:	4608      	mov	r0, r1
 8004f60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <__sfputs_r>:
 8004f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f68:	4606      	mov	r6, r0
 8004f6a:	460f      	mov	r7, r1
 8004f6c:	4614      	mov	r4, r2
 8004f6e:	18d5      	adds	r5, r2, r3
 8004f70:	42ac      	cmp	r4, r5
 8004f72:	d101      	bne.n	8004f78 <__sfputs_r+0x12>
 8004f74:	2000      	movs	r0, #0
 8004f76:	e007      	b.n	8004f88 <__sfputs_r+0x22>
 8004f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f7c:	463a      	mov	r2, r7
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f7ff ffda 	bl	8004f38 <__sfputc_r>
 8004f84:	1c43      	adds	r3, r0, #1
 8004f86:	d1f3      	bne.n	8004f70 <__sfputs_r+0xa>
 8004f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f8c <_vfiprintf_r>:
 8004f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f90:	460d      	mov	r5, r1
 8004f92:	b09d      	sub	sp, #116	; 0x74
 8004f94:	4614      	mov	r4, r2
 8004f96:	4698      	mov	r8, r3
 8004f98:	4606      	mov	r6, r0
 8004f9a:	b118      	cbz	r0, 8004fa4 <_vfiprintf_r+0x18>
 8004f9c:	6a03      	ldr	r3, [r0, #32]
 8004f9e:	b90b      	cbnz	r3, 8004fa4 <_vfiprintf_r+0x18>
 8004fa0:	f7ff fa48 	bl	8004434 <__sinit>
 8004fa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fa6:	07d9      	lsls	r1, r3, #31
 8004fa8:	d405      	bmi.n	8004fb6 <_vfiprintf_r+0x2a>
 8004faa:	89ab      	ldrh	r3, [r5, #12]
 8004fac:	059a      	lsls	r2, r3, #22
 8004fae:	d402      	bmi.n	8004fb6 <_vfiprintf_r+0x2a>
 8004fb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fb2:	f7ff fd58 	bl	8004a66 <__retarget_lock_acquire_recursive>
 8004fb6:	89ab      	ldrh	r3, [r5, #12]
 8004fb8:	071b      	lsls	r3, r3, #28
 8004fba:	d501      	bpl.n	8004fc0 <_vfiprintf_r+0x34>
 8004fbc:	692b      	ldr	r3, [r5, #16]
 8004fbe:	b99b      	cbnz	r3, 8004fe8 <_vfiprintf_r+0x5c>
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	4630      	mov	r0, r6
 8004fc4:	f7ff fc28 	bl	8004818 <__swsetup_r>
 8004fc8:	b170      	cbz	r0, 8004fe8 <_vfiprintf_r+0x5c>
 8004fca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fcc:	07dc      	lsls	r4, r3, #31
 8004fce:	d504      	bpl.n	8004fda <_vfiprintf_r+0x4e>
 8004fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd4:	b01d      	add	sp, #116	; 0x74
 8004fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fda:	89ab      	ldrh	r3, [r5, #12]
 8004fdc:	0598      	lsls	r0, r3, #22
 8004fde:	d4f7      	bmi.n	8004fd0 <_vfiprintf_r+0x44>
 8004fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fe2:	f7ff fd41 	bl	8004a68 <__retarget_lock_release_recursive>
 8004fe6:	e7f3      	b.n	8004fd0 <_vfiprintf_r+0x44>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	9309      	str	r3, [sp, #36]	; 0x24
 8004fec:	2320      	movs	r3, #32
 8004fee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ff2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ff6:	2330      	movs	r3, #48	; 0x30
 8004ff8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80051ac <_vfiprintf_r+0x220>
 8004ffc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005000:	f04f 0901 	mov.w	r9, #1
 8005004:	4623      	mov	r3, r4
 8005006:	469a      	mov	sl, r3
 8005008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800500c:	b10a      	cbz	r2, 8005012 <_vfiprintf_r+0x86>
 800500e:	2a25      	cmp	r2, #37	; 0x25
 8005010:	d1f9      	bne.n	8005006 <_vfiprintf_r+0x7a>
 8005012:	ebba 0b04 	subs.w	fp, sl, r4
 8005016:	d00b      	beq.n	8005030 <_vfiprintf_r+0xa4>
 8005018:	465b      	mov	r3, fp
 800501a:	4622      	mov	r2, r4
 800501c:	4629      	mov	r1, r5
 800501e:	4630      	mov	r0, r6
 8005020:	f7ff ffa1 	bl	8004f66 <__sfputs_r>
 8005024:	3001      	adds	r0, #1
 8005026:	f000 80a9 	beq.w	800517c <_vfiprintf_r+0x1f0>
 800502a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800502c:	445a      	add	r2, fp
 800502e:	9209      	str	r2, [sp, #36]	; 0x24
 8005030:	f89a 3000 	ldrb.w	r3, [sl]
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 80a1 	beq.w	800517c <_vfiprintf_r+0x1f0>
 800503a:	2300      	movs	r3, #0
 800503c:	f04f 32ff 	mov.w	r2, #4294967295
 8005040:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005044:	f10a 0a01 	add.w	sl, sl, #1
 8005048:	9304      	str	r3, [sp, #16]
 800504a:	9307      	str	r3, [sp, #28]
 800504c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005050:	931a      	str	r3, [sp, #104]	; 0x68
 8005052:	4654      	mov	r4, sl
 8005054:	2205      	movs	r2, #5
 8005056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800505a:	4854      	ldr	r0, [pc, #336]	; (80051ac <_vfiprintf_r+0x220>)
 800505c:	f7fb f8c0 	bl	80001e0 <memchr>
 8005060:	9a04      	ldr	r2, [sp, #16]
 8005062:	b9d8      	cbnz	r0, 800509c <_vfiprintf_r+0x110>
 8005064:	06d1      	lsls	r1, r2, #27
 8005066:	bf44      	itt	mi
 8005068:	2320      	movmi	r3, #32
 800506a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800506e:	0713      	lsls	r3, r2, #28
 8005070:	bf44      	itt	mi
 8005072:	232b      	movmi	r3, #43	; 0x2b
 8005074:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005078:	f89a 3000 	ldrb.w	r3, [sl]
 800507c:	2b2a      	cmp	r3, #42	; 0x2a
 800507e:	d015      	beq.n	80050ac <_vfiprintf_r+0x120>
 8005080:	9a07      	ldr	r2, [sp, #28]
 8005082:	4654      	mov	r4, sl
 8005084:	2000      	movs	r0, #0
 8005086:	f04f 0c0a 	mov.w	ip, #10
 800508a:	4621      	mov	r1, r4
 800508c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005090:	3b30      	subs	r3, #48	; 0x30
 8005092:	2b09      	cmp	r3, #9
 8005094:	d94d      	bls.n	8005132 <_vfiprintf_r+0x1a6>
 8005096:	b1b0      	cbz	r0, 80050c6 <_vfiprintf_r+0x13a>
 8005098:	9207      	str	r2, [sp, #28]
 800509a:	e014      	b.n	80050c6 <_vfiprintf_r+0x13a>
 800509c:	eba0 0308 	sub.w	r3, r0, r8
 80050a0:	fa09 f303 	lsl.w	r3, r9, r3
 80050a4:	4313      	orrs	r3, r2
 80050a6:	9304      	str	r3, [sp, #16]
 80050a8:	46a2      	mov	sl, r4
 80050aa:	e7d2      	b.n	8005052 <_vfiprintf_r+0xc6>
 80050ac:	9b03      	ldr	r3, [sp, #12]
 80050ae:	1d19      	adds	r1, r3, #4
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	9103      	str	r1, [sp, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	bfbb      	ittet	lt
 80050b8:	425b      	neglt	r3, r3
 80050ba:	f042 0202 	orrlt.w	r2, r2, #2
 80050be:	9307      	strge	r3, [sp, #28]
 80050c0:	9307      	strlt	r3, [sp, #28]
 80050c2:	bfb8      	it	lt
 80050c4:	9204      	strlt	r2, [sp, #16]
 80050c6:	7823      	ldrb	r3, [r4, #0]
 80050c8:	2b2e      	cmp	r3, #46	; 0x2e
 80050ca:	d10c      	bne.n	80050e6 <_vfiprintf_r+0x15a>
 80050cc:	7863      	ldrb	r3, [r4, #1]
 80050ce:	2b2a      	cmp	r3, #42	; 0x2a
 80050d0:	d134      	bne.n	800513c <_vfiprintf_r+0x1b0>
 80050d2:	9b03      	ldr	r3, [sp, #12]
 80050d4:	1d1a      	adds	r2, r3, #4
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	9203      	str	r2, [sp, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	bfb8      	it	lt
 80050de:	f04f 33ff 	movlt.w	r3, #4294967295
 80050e2:	3402      	adds	r4, #2
 80050e4:	9305      	str	r3, [sp, #20]
 80050e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80051bc <_vfiprintf_r+0x230>
 80050ea:	7821      	ldrb	r1, [r4, #0]
 80050ec:	2203      	movs	r2, #3
 80050ee:	4650      	mov	r0, sl
 80050f0:	f7fb f876 	bl	80001e0 <memchr>
 80050f4:	b138      	cbz	r0, 8005106 <_vfiprintf_r+0x17a>
 80050f6:	9b04      	ldr	r3, [sp, #16]
 80050f8:	eba0 000a 	sub.w	r0, r0, sl
 80050fc:	2240      	movs	r2, #64	; 0x40
 80050fe:	4082      	lsls	r2, r0
 8005100:	4313      	orrs	r3, r2
 8005102:	3401      	adds	r4, #1
 8005104:	9304      	str	r3, [sp, #16]
 8005106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800510a:	4829      	ldr	r0, [pc, #164]	; (80051b0 <_vfiprintf_r+0x224>)
 800510c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005110:	2206      	movs	r2, #6
 8005112:	f7fb f865 	bl	80001e0 <memchr>
 8005116:	2800      	cmp	r0, #0
 8005118:	d03f      	beq.n	800519a <_vfiprintf_r+0x20e>
 800511a:	4b26      	ldr	r3, [pc, #152]	; (80051b4 <_vfiprintf_r+0x228>)
 800511c:	bb1b      	cbnz	r3, 8005166 <_vfiprintf_r+0x1da>
 800511e:	9b03      	ldr	r3, [sp, #12]
 8005120:	3307      	adds	r3, #7
 8005122:	f023 0307 	bic.w	r3, r3, #7
 8005126:	3308      	adds	r3, #8
 8005128:	9303      	str	r3, [sp, #12]
 800512a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800512c:	443b      	add	r3, r7
 800512e:	9309      	str	r3, [sp, #36]	; 0x24
 8005130:	e768      	b.n	8005004 <_vfiprintf_r+0x78>
 8005132:	fb0c 3202 	mla	r2, ip, r2, r3
 8005136:	460c      	mov	r4, r1
 8005138:	2001      	movs	r0, #1
 800513a:	e7a6      	b.n	800508a <_vfiprintf_r+0xfe>
 800513c:	2300      	movs	r3, #0
 800513e:	3401      	adds	r4, #1
 8005140:	9305      	str	r3, [sp, #20]
 8005142:	4619      	mov	r1, r3
 8005144:	f04f 0c0a 	mov.w	ip, #10
 8005148:	4620      	mov	r0, r4
 800514a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800514e:	3a30      	subs	r2, #48	; 0x30
 8005150:	2a09      	cmp	r2, #9
 8005152:	d903      	bls.n	800515c <_vfiprintf_r+0x1d0>
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0c6      	beq.n	80050e6 <_vfiprintf_r+0x15a>
 8005158:	9105      	str	r1, [sp, #20]
 800515a:	e7c4      	b.n	80050e6 <_vfiprintf_r+0x15a>
 800515c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005160:	4604      	mov	r4, r0
 8005162:	2301      	movs	r3, #1
 8005164:	e7f0      	b.n	8005148 <_vfiprintf_r+0x1bc>
 8005166:	ab03      	add	r3, sp, #12
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	462a      	mov	r2, r5
 800516c:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <_vfiprintf_r+0x22c>)
 800516e:	a904      	add	r1, sp, #16
 8005170:	4630      	mov	r0, r6
 8005172:	f3af 8000 	nop.w
 8005176:	4607      	mov	r7, r0
 8005178:	1c78      	adds	r0, r7, #1
 800517a:	d1d6      	bne.n	800512a <_vfiprintf_r+0x19e>
 800517c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800517e:	07d9      	lsls	r1, r3, #31
 8005180:	d405      	bmi.n	800518e <_vfiprintf_r+0x202>
 8005182:	89ab      	ldrh	r3, [r5, #12]
 8005184:	059a      	lsls	r2, r3, #22
 8005186:	d402      	bmi.n	800518e <_vfiprintf_r+0x202>
 8005188:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800518a:	f7ff fc6d 	bl	8004a68 <__retarget_lock_release_recursive>
 800518e:	89ab      	ldrh	r3, [r5, #12]
 8005190:	065b      	lsls	r3, r3, #25
 8005192:	f53f af1d 	bmi.w	8004fd0 <_vfiprintf_r+0x44>
 8005196:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005198:	e71c      	b.n	8004fd4 <_vfiprintf_r+0x48>
 800519a:	ab03      	add	r3, sp, #12
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	462a      	mov	r2, r5
 80051a0:	4b05      	ldr	r3, [pc, #20]	; (80051b8 <_vfiprintf_r+0x22c>)
 80051a2:	a904      	add	r1, sp, #16
 80051a4:	4630      	mov	r0, r6
 80051a6:	f000 f879 	bl	800529c <_printf_i>
 80051aa:	e7e4      	b.n	8005176 <_vfiprintf_r+0x1ea>
 80051ac:	08005950 	.word	0x08005950
 80051b0:	0800595a 	.word	0x0800595a
 80051b4:	00000000 	.word	0x00000000
 80051b8:	08004f67 	.word	0x08004f67
 80051bc:	08005956 	.word	0x08005956

080051c0 <_printf_common>:
 80051c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c4:	4616      	mov	r6, r2
 80051c6:	4699      	mov	r9, r3
 80051c8:	688a      	ldr	r2, [r1, #8]
 80051ca:	690b      	ldr	r3, [r1, #16]
 80051cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051d0:	4293      	cmp	r3, r2
 80051d2:	bfb8      	it	lt
 80051d4:	4613      	movlt	r3, r2
 80051d6:	6033      	str	r3, [r6, #0]
 80051d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051dc:	4607      	mov	r7, r0
 80051de:	460c      	mov	r4, r1
 80051e0:	b10a      	cbz	r2, 80051e6 <_printf_common+0x26>
 80051e2:	3301      	adds	r3, #1
 80051e4:	6033      	str	r3, [r6, #0]
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	0699      	lsls	r1, r3, #26
 80051ea:	bf42      	ittt	mi
 80051ec:	6833      	ldrmi	r3, [r6, #0]
 80051ee:	3302      	addmi	r3, #2
 80051f0:	6033      	strmi	r3, [r6, #0]
 80051f2:	6825      	ldr	r5, [r4, #0]
 80051f4:	f015 0506 	ands.w	r5, r5, #6
 80051f8:	d106      	bne.n	8005208 <_printf_common+0x48>
 80051fa:	f104 0a19 	add.w	sl, r4, #25
 80051fe:	68e3      	ldr	r3, [r4, #12]
 8005200:	6832      	ldr	r2, [r6, #0]
 8005202:	1a9b      	subs	r3, r3, r2
 8005204:	42ab      	cmp	r3, r5
 8005206:	dc26      	bgt.n	8005256 <_printf_common+0x96>
 8005208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800520c:	1e13      	subs	r3, r2, #0
 800520e:	6822      	ldr	r2, [r4, #0]
 8005210:	bf18      	it	ne
 8005212:	2301      	movne	r3, #1
 8005214:	0692      	lsls	r2, r2, #26
 8005216:	d42b      	bmi.n	8005270 <_printf_common+0xb0>
 8005218:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800521c:	4649      	mov	r1, r9
 800521e:	4638      	mov	r0, r7
 8005220:	47c0      	blx	r8
 8005222:	3001      	adds	r0, #1
 8005224:	d01e      	beq.n	8005264 <_printf_common+0xa4>
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	6922      	ldr	r2, [r4, #16]
 800522a:	f003 0306 	and.w	r3, r3, #6
 800522e:	2b04      	cmp	r3, #4
 8005230:	bf02      	ittt	eq
 8005232:	68e5      	ldreq	r5, [r4, #12]
 8005234:	6833      	ldreq	r3, [r6, #0]
 8005236:	1aed      	subeq	r5, r5, r3
 8005238:	68a3      	ldr	r3, [r4, #8]
 800523a:	bf0c      	ite	eq
 800523c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005240:	2500      	movne	r5, #0
 8005242:	4293      	cmp	r3, r2
 8005244:	bfc4      	itt	gt
 8005246:	1a9b      	subgt	r3, r3, r2
 8005248:	18ed      	addgt	r5, r5, r3
 800524a:	2600      	movs	r6, #0
 800524c:	341a      	adds	r4, #26
 800524e:	42b5      	cmp	r5, r6
 8005250:	d11a      	bne.n	8005288 <_printf_common+0xc8>
 8005252:	2000      	movs	r0, #0
 8005254:	e008      	b.n	8005268 <_printf_common+0xa8>
 8005256:	2301      	movs	r3, #1
 8005258:	4652      	mov	r2, sl
 800525a:	4649      	mov	r1, r9
 800525c:	4638      	mov	r0, r7
 800525e:	47c0      	blx	r8
 8005260:	3001      	adds	r0, #1
 8005262:	d103      	bne.n	800526c <_printf_common+0xac>
 8005264:	f04f 30ff 	mov.w	r0, #4294967295
 8005268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800526c:	3501      	adds	r5, #1
 800526e:	e7c6      	b.n	80051fe <_printf_common+0x3e>
 8005270:	18e1      	adds	r1, r4, r3
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	2030      	movs	r0, #48	; 0x30
 8005276:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800527a:	4422      	add	r2, r4
 800527c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005280:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005284:	3302      	adds	r3, #2
 8005286:	e7c7      	b.n	8005218 <_printf_common+0x58>
 8005288:	2301      	movs	r3, #1
 800528a:	4622      	mov	r2, r4
 800528c:	4649      	mov	r1, r9
 800528e:	4638      	mov	r0, r7
 8005290:	47c0      	blx	r8
 8005292:	3001      	adds	r0, #1
 8005294:	d0e6      	beq.n	8005264 <_printf_common+0xa4>
 8005296:	3601      	adds	r6, #1
 8005298:	e7d9      	b.n	800524e <_printf_common+0x8e>
	...

0800529c <_printf_i>:
 800529c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052a0:	7e0f      	ldrb	r7, [r1, #24]
 80052a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052a4:	2f78      	cmp	r7, #120	; 0x78
 80052a6:	4691      	mov	r9, r2
 80052a8:	4680      	mov	r8, r0
 80052aa:	460c      	mov	r4, r1
 80052ac:	469a      	mov	sl, r3
 80052ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052b2:	d807      	bhi.n	80052c4 <_printf_i+0x28>
 80052b4:	2f62      	cmp	r7, #98	; 0x62
 80052b6:	d80a      	bhi.n	80052ce <_printf_i+0x32>
 80052b8:	2f00      	cmp	r7, #0
 80052ba:	f000 80d4 	beq.w	8005466 <_printf_i+0x1ca>
 80052be:	2f58      	cmp	r7, #88	; 0x58
 80052c0:	f000 80c0 	beq.w	8005444 <_printf_i+0x1a8>
 80052c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052cc:	e03a      	b.n	8005344 <_printf_i+0xa8>
 80052ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052d2:	2b15      	cmp	r3, #21
 80052d4:	d8f6      	bhi.n	80052c4 <_printf_i+0x28>
 80052d6:	a101      	add	r1, pc, #4	; (adr r1, 80052dc <_printf_i+0x40>)
 80052d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052dc:	08005335 	.word	0x08005335
 80052e0:	08005349 	.word	0x08005349
 80052e4:	080052c5 	.word	0x080052c5
 80052e8:	080052c5 	.word	0x080052c5
 80052ec:	080052c5 	.word	0x080052c5
 80052f0:	080052c5 	.word	0x080052c5
 80052f4:	08005349 	.word	0x08005349
 80052f8:	080052c5 	.word	0x080052c5
 80052fc:	080052c5 	.word	0x080052c5
 8005300:	080052c5 	.word	0x080052c5
 8005304:	080052c5 	.word	0x080052c5
 8005308:	0800544d 	.word	0x0800544d
 800530c:	08005375 	.word	0x08005375
 8005310:	08005407 	.word	0x08005407
 8005314:	080052c5 	.word	0x080052c5
 8005318:	080052c5 	.word	0x080052c5
 800531c:	0800546f 	.word	0x0800546f
 8005320:	080052c5 	.word	0x080052c5
 8005324:	08005375 	.word	0x08005375
 8005328:	080052c5 	.word	0x080052c5
 800532c:	080052c5 	.word	0x080052c5
 8005330:	0800540f 	.word	0x0800540f
 8005334:	682b      	ldr	r3, [r5, #0]
 8005336:	1d1a      	adds	r2, r3, #4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	602a      	str	r2, [r5, #0]
 800533c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005344:	2301      	movs	r3, #1
 8005346:	e09f      	b.n	8005488 <_printf_i+0x1ec>
 8005348:	6820      	ldr	r0, [r4, #0]
 800534a:	682b      	ldr	r3, [r5, #0]
 800534c:	0607      	lsls	r7, r0, #24
 800534e:	f103 0104 	add.w	r1, r3, #4
 8005352:	6029      	str	r1, [r5, #0]
 8005354:	d501      	bpl.n	800535a <_printf_i+0xbe>
 8005356:	681e      	ldr	r6, [r3, #0]
 8005358:	e003      	b.n	8005362 <_printf_i+0xc6>
 800535a:	0646      	lsls	r6, r0, #25
 800535c:	d5fb      	bpl.n	8005356 <_printf_i+0xba>
 800535e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005362:	2e00      	cmp	r6, #0
 8005364:	da03      	bge.n	800536e <_printf_i+0xd2>
 8005366:	232d      	movs	r3, #45	; 0x2d
 8005368:	4276      	negs	r6, r6
 800536a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800536e:	485a      	ldr	r0, [pc, #360]	; (80054d8 <_printf_i+0x23c>)
 8005370:	230a      	movs	r3, #10
 8005372:	e012      	b.n	800539a <_printf_i+0xfe>
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	6820      	ldr	r0, [r4, #0]
 8005378:	1d19      	adds	r1, r3, #4
 800537a:	6029      	str	r1, [r5, #0]
 800537c:	0605      	lsls	r5, r0, #24
 800537e:	d501      	bpl.n	8005384 <_printf_i+0xe8>
 8005380:	681e      	ldr	r6, [r3, #0]
 8005382:	e002      	b.n	800538a <_printf_i+0xee>
 8005384:	0641      	lsls	r1, r0, #25
 8005386:	d5fb      	bpl.n	8005380 <_printf_i+0xe4>
 8005388:	881e      	ldrh	r6, [r3, #0]
 800538a:	4853      	ldr	r0, [pc, #332]	; (80054d8 <_printf_i+0x23c>)
 800538c:	2f6f      	cmp	r7, #111	; 0x6f
 800538e:	bf0c      	ite	eq
 8005390:	2308      	moveq	r3, #8
 8005392:	230a      	movne	r3, #10
 8005394:	2100      	movs	r1, #0
 8005396:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800539a:	6865      	ldr	r5, [r4, #4]
 800539c:	60a5      	str	r5, [r4, #8]
 800539e:	2d00      	cmp	r5, #0
 80053a0:	bfa2      	ittt	ge
 80053a2:	6821      	ldrge	r1, [r4, #0]
 80053a4:	f021 0104 	bicge.w	r1, r1, #4
 80053a8:	6021      	strge	r1, [r4, #0]
 80053aa:	b90e      	cbnz	r6, 80053b0 <_printf_i+0x114>
 80053ac:	2d00      	cmp	r5, #0
 80053ae:	d04b      	beq.n	8005448 <_printf_i+0x1ac>
 80053b0:	4615      	mov	r5, r2
 80053b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80053b6:	fb03 6711 	mls	r7, r3, r1, r6
 80053ba:	5dc7      	ldrb	r7, [r0, r7]
 80053bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053c0:	4637      	mov	r7, r6
 80053c2:	42bb      	cmp	r3, r7
 80053c4:	460e      	mov	r6, r1
 80053c6:	d9f4      	bls.n	80053b2 <_printf_i+0x116>
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d10b      	bne.n	80053e4 <_printf_i+0x148>
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	07de      	lsls	r6, r3, #31
 80053d0:	d508      	bpl.n	80053e4 <_printf_i+0x148>
 80053d2:	6923      	ldr	r3, [r4, #16]
 80053d4:	6861      	ldr	r1, [r4, #4]
 80053d6:	4299      	cmp	r1, r3
 80053d8:	bfde      	ittt	le
 80053da:	2330      	movle	r3, #48	; 0x30
 80053dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053e4:	1b52      	subs	r2, r2, r5
 80053e6:	6122      	str	r2, [r4, #16]
 80053e8:	f8cd a000 	str.w	sl, [sp]
 80053ec:	464b      	mov	r3, r9
 80053ee:	aa03      	add	r2, sp, #12
 80053f0:	4621      	mov	r1, r4
 80053f2:	4640      	mov	r0, r8
 80053f4:	f7ff fee4 	bl	80051c0 <_printf_common>
 80053f8:	3001      	adds	r0, #1
 80053fa:	d14a      	bne.n	8005492 <_printf_i+0x1f6>
 80053fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005400:	b004      	add	sp, #16
 8005402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	f043 0320 	orr.w	r3, r3, #32
 800540c:	6023      	str	r3, [r4, #0]
 800540e:	4833      	ldr	r0, [pc, #204]	; (80054dc <_printf_i+0x240>)
 8005410:	2778      	movs	r7, #120	; 0x78
 8005412:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005416:	6823      	ldr	r3, [r4, #0]
 8005418:	6829      	ldr	r1, [r5, #0]
 800541a:	061f      	lsls	r7, r3, #24
 800541c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005420:	d402      	bmi.n	8005428 <_printf_i+0x18c>
 8005422:	065f      	lsls	r7, r3, #25
 8005424:	bf48      	it	mi
 8005426:	b2b6      	uxthmi	r6, r6
 8005428:	07df      	lsls	r7, r3, #31
 800542a:	bf48      	it	mi
 800542c:	f043 0320 	orrmi.w	r3, r3, #32
 8005430:	6029      	str	r1, [r5, #0]
 8005432:	bf48      	it	mi
 8005434:	6023      	strmi	r3, [r4, #0]
 8005436:	b91e      	cbnz	r6, 8005440 <_printf_i+0x1a4>
 8005438:	6823      	ldr	r3, [r4, #0]
 800543a:	f023 0320 	bic.w	r3, r3, #32
 800543e:	6023      	str	r3, [r4, #0]
 8005440:	2310      	movs	r3, #16
 8005442:	e7a7      	b.n	8005394 <_printf_i+0xf8>
 8005444:	4824      	ldr	r0, [pc, #144]	; (80054d8 <_printf_i+0x23c>)
 8005446:	e7e4      	b.n	8005412 <_printf_i+0x176>
 8005448:	4615      	mov	r5, r2
 800544a:	e7bd      	b.n	80053c8 <_printf_i+0x12c>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	6826      	ldr	r6, [r4, #0]
 8005450:	6961      	ldr	r1, [r4, #20]
 8005452:	1d18      	adds	r0, r3, #4
 8005454:	6028      	str	r0, [r5, #0]
 8005456:	0635      	lsls	r5, r6, #24
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	d501      	bpl.n	8005460 <_printf_i+0x1c4>
 800545c:	6019      	str	r1, [r3, #0]
 800545e:	e002      	b.n	8005466 <_printf_i+0x1ca>
 8005460:	0670      	lsls	r0, r6, #25
 8005462:	d5fb      	bpl.n	800545c <_printf_i+0x1c0>
 8005464:	8019      	strh	r1, [r3, #0]
 8005466:	2300      	movs	r3, #0
 8005468:	6123      	str	r3, [r4, #16]
 800546a:	4615      	mov	r5, r2
 800546c:	e7bc      	b.n	80053e8 <_printf_i+0x14c>
 800546e:	682b      	ldr	r3, [r5, #0]
 8005470:	1d1a      	adds	r2, r3, #4
 8005472:	602a      	str	r2, [r5, #0]
 8005474:	681d      	ldr	r5, [r3, #0]
 8005476:	6862      	ldr	r2, [r4, #4]
 8005478:	2100      	movs	r1, #0
 800547a:	4628      	mov	r0, r5
 800547c:	f7fa feb0 	bl	80001e0 <memchr>
 8005480:	b108      	cbz	r0, 8005486 <_printf_i+0x1ea>
 8005482:	1b40      	subs	r0, r0, r5
 8005484:	6060      	str	r0, [r4, #4]
 8005486:	6863      	ldr	r3, [r4, #4]
 8005488:	6123      	str	r3, [r4, #16]
 800548a:	2300      	movs	r3, #0
 800548c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005490:	e7aa      	b.n	80053e8 <_printf_i+0x14c>
 8005492:	6923      	ldr	r3, [r4, #16]
 8005494:	462a      	mov	r2, r5
 8005496:	4649      	mov	r1, r9
 8005498:	4640      	mov	r0, r8
 800549a:	47d0      	blx	sl
 800549c:	3001      	adds	r0, #1
 800549e:	d0ad      	beq.n	80053fc <_printf_i+0x160>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	079b      	lsls	r3, r3, #30
 80054a4:	d413      	bmi.n	80054ce <_printf_i+0x232>
 80054a6:	68e0      	ldr	r0, [r4, #12]
 80054a8:	9b03      	ldr	r3, [sp, #12]
 80054aa:	4298      	cmp	r0, r3
 80054ac:	bfb8      	it	lt
 80054ae:	4618      	movlt	r0, r3
 80054b0:	e7a6      	b.n	8005400 <_printf_i+0x164>
 80054b2:	2301      	movs	r3, #1
 80054b4:	4632      	mov	r2, r6
 80054b6:	4649      	mov	r1, r9
 80054b8:	4640      	mov	r0, r8
 80054ba:	47d0      	blx	sl
 80054bc:	3001      	adds	r0, #1
 80054be:	d09d      	beq.n	80053fc <_printf_i+0x160>
 80054c0:	3501      	adds	r5, #1
 80054c2:	68e3      	ldr	r3, [r4, #12]
 80054c4:	9903      	ldr	r1, [sp, #12]
 80054c6:	1a5b      	subs	r3, r3, r1
 80054c8:	42ab      	cmp	r3, r5
 80054ca:	dcf2      	bgt.n	80054b2 <_printf_i+0x216>
 80054cc:	e7eb      	b.n	80054a6 <_printf_i+0x20a>
 80054ce:	2500      	movs	r5, #0
 80054d0:	f104 0619 	add.w	r6, r4, #25
 80054d4:	e7f5      	b.n	80054c2 <_printf_i+0x226>
 80054d6:	bf00      	nop
 80054d8:	08005961 	.word	0x08005961
 80054dc:	08005972 	.word	0x08005972

080054e0 <__sflush_r>:
 80054e0:	898a      	ldrh	r2, [r1, #12]
 80054e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e6:	4605      	mov	r5, r0
 80054e8:	0710      	lsls	r0, r2, #28
 80054ea:	460c      	mov	r4, r1
 80054ec:	d458      	bmi.n	80055a0 <__sflush_r+0xc0>
 80054ee:	684b      	ldr	r3, [r1, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	dc05      	bgt.n	8005500 <__sflush_r+0x20>
 80054f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	dc02      	bgt.n	8005500 <__sflush_r+0x20>
 80054fa:	2000      	movs	r0, #0
 80054fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005500:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005502:	2e00      	cmp	r6, #0
 8005504:	d0f9      	beq.n	80054fa <__sflush_r+0x1a>
 8005506:	2300      	movs	r3, #0
 8005508:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800550c:	682f      	ldr	r7, [r5, #0]
 800550e:	6a21      	ldr	r1, [r4, #32]
 8005510:	602b      	str	r3, [r5, #0]
 8005512:	d032      	beq.n	800557a <__sflush_r+0x9a>
 8005514:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005516:	89a3      	ldrh	r3, [r4, #12]
 8005518:	075a      	lsls	r2, r3, #29
 800551a:	d505      	bpl.n	8005528 <__sflush_r+0x48>
 800551c:	6863      	ldr	r3, [r4, #4]
 800551e:	1ac0      	subs	r0, r0, r3
 8005520:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005522:	b10b      	cbz	r3, 8005528 <__sflush_r+0x48>
 8005524:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005526:	1ac0      	subs	r0, r0, r3
 8005528:	2300      	movs	r3, #0
 800552a:	4602      	mov	r2, r0
 800552c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800552e:	6a21      	ldr	r1, [r4, #32]
 8005530:	4628      	mov	r0, r5
 8005532:	47b0      	blx	r6
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	89a3      	ldrh	r3, [r4, #12]
 8005538:	d106      	bne.n	8005548 <__sflush_r+0x68>
 800553a:	6829      	ldr	r1, [r5, #0]
 800553c:	291d      	cmp	r1, #29
 800553e:	d82b      	bhi.n	8005598 <__sflush_r+0xb8>
 8005540:	4a29      	ldr	r2, [pc, #164]	; (80055e8 <__sflush_r+0x108>)
 8005542:	410a      	asrs	r2, r1
 8005544:	07d6      	lsls	r6, r2, #31
 8005546:	d427      	bmi.n	8005598 <__sflush_r+0xb8>
 8005548:	2200      	movs	r2, #0
 800554a:	6062      	str	r2, [r4, #4]
 800554c:	04d9      	lsls	r1, r3, #19
 800554e:	6922      	ldr	r2, [r4, #16]
 8005550:	6022      	str	r2, [r4, #0]
 8005552:	d504      	bpl.n	800555e <__sflush_r+0x7e>
 8005554:	1c42      	adds	r2, r0, #1
 8005556:	d101      	bne.n	800555c <__sflush_r+0x7c>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	b903      	cbnz	r3, 800555e <__sflush_r+0x7e>
 800555c:	6560      	str	r0, [r4, #84]	; 0x54
 800555e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005560:	602f      	str	r7, [r5, #0]
 8005562:	2900      	cmp	r1, #0
 8005564:	d0c9      	beq.n	80054fa <__sflush_r+0x1a>
 8005566:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800556a:	4299      	cmp	r1, r3
 800556c:	d002      	beq.n	8005574 <__sflush_r+0x94>
 800556e:	4628      	mov	r0, r5
 8005570:	f7ff fa8a 	bl	8004a88 <_free_r>
 8005574:	2000      	movs	r0, #0
 8005576:	6360      	str	r0, [r4, #52]	; 0x34
 8005578:	e7c0      	b.n	80054fc <__sflush_r+0x1c>
 800557a:	2301      	movs	r3, #1
 800557c:	4628      	mov	r0, r5
 800557e:	47b0      	blx	r6
 8005580:	1c41      	adds	r1, r0, #1
 8005582:	d1c8      	bne.n	8005516 <__sflush_r+0x36>
 8005584:	682b      	ldr	r3, [r5, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0c5      	beq.n	8005516 <__sflush_r+0x36>
 800558a:	2b1d      	cmp	r3, #29
 800558c:	d001      	beq.n	8005592 <__sflush_r+0xb2>
 800558e:	2b16      	cmp	r3, #22
 8005590:	d101      	bne.n	8005596 <__sflush_r+0xb6>
 8005592:	602f      	str	r7, [r5, #0]
 8005594:	e7b1      	b.n	80054fa <__sflush_r+0x1a>
 8005596:	89a3      	ldrh	r3, [r4, #12]
 8005598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800559c:	81a3      	strh	r3, [r4, #12]
 800559e:	e7ad      	b.n	80054fc <__sflush_r+0x1c>
 80055a0:	690f      	ldr	r7, [r1, #16]
 80055a2:	2f00      	cmp	r7, #0
 80055a4:	d0a9      	beq.n	80054fa <__sflush_r+0x1a>
 80055a6:	0793      	lsls	r3, r2, #30
 80055a8:	680e      	ldr	r6, [r1, #0]
 80055aa:	bf08      	it	eq
 80055ac:	694b      	ldreq	r3, [r1, #20]
 80055ae:	600f      	str	r7, [r1, #0]
 80055b0:	bf18      	it	ne
 80055b2:	2300      	movne	r3, #0
 80055b4:	eba6 0807 	sub.w	r8, r6, r7
 80055b8:	608b      	str	r3, [r1, #8]
 80055ba:	f1b8 0f00 	cmp.w	r8, #0
 80055be:	dd9c      	ble.n	80054fa <__sflush_r+0x1a>
 80055c0:	6a21      	ldr	r1, [r4, #32]
 80055c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055c4:	4643      	mov	r3, r8
 80055c6:	463a      	mov	r2, r7
 80055c8:	4628      	mov	r0, r5
 80055ca:	47b0      	blx	r6
 80055cc:	2800      	cmp	r0, #0
 80055ce:	dc06      	bgt.n	80055de <__sflush_r+0xfe>
 80055d0:	89a3      	ldrh	r3, [r4, #12]
 80055d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055d6:	81a3      	strh	r3, [r4, #12]
 80055d8:	f04f 30ff 	mov.w	r0, #4294967295
 80055dc:	e78e      	b.n	80054fc <__sflush_r+0x1c>
 80055de:	4407      	add	r7, r0
 80055e0:	eba8 0800 	sub.w	r8, r8, r0
 80055e4:	e7e9      	b.n	80055ba <__sflush_r+0xda>
 80055e6:	bf00      	nop
 80055e8:	dfbffffe 	.word	0xdfbffffe

080055ec <_fflush_r>:
 80055ec:	b538      	push	{r3, r4, r5, lr}
 80055ee:	690b      	ldr	r3, [r1, #16]
 80055f0:	4605      	mov	r5, r0
 80055f2:	460c      	mov	r4, r1
 80055f4:	b913      	cbnz	r3, 80055fc <_fflush_r+0x10>
 80055f6:	2500      	movs	r5, #0
 80055f8:	4628      	mov	r0, r5
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
 80055fc:	b118      	cbz	r0, 8005606 <_fflush_r+0x1a>
 80055fe:	6a03      	ldr	r3, [r0, #32]
 8005600:	b90b      	cbnz	r3, 8005606 <_fflush_r+0x1a>
 8005602:	f7fe ff17 	bl	8004434 <__sinit>
 8005606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f3      	beq.n	80055f6 <_fflush_r+0xa>
 800560e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005610:	07d0      	lsls	r0, r2, #31
 8005612:	d404      	bmi.n	800561e <_fflush_r+0x32>
 8005614:	0599      	lsls	r1, r3, #22
 8005616:	d402      	bmi.n	800561e <_fflush_r+0x32>
 8005618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800561a:	f7ff fa24 	bl	8004a66 <__retarget_lock_acquire_recursive>
 800561e:	4628      	mov	r0, r5
 8005620:	4621      	mov	r1, r4
 8005622:	f7ff ff5d 	bl	80054e0 <__sflush_r>
 8005626:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005628:	07da      	lsls	r2, r3, #31
 800562a:	4605      	mov	r5, r0
 800562c:	d4e4      	bmi.n	80055f8 <_fflush_r+0xc>
 800562e:	89a3      	ldrh	r3, [r4, #12]
 8005630:	059b      	lsls	r3, r3, #22
 8005632:	d4e1      	bmi.n	80055f8 <_fflush_r+0xc>
 8005634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005636:	f7ff fa17 	bl	8004a68 <__retarget_lock_release_recursive>
 800563a:	e7dd      	b.n	80055f8 <_fflush_r+0xc>

0800563c <__swhatbuf_r>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	460c      	mov	r4, r1
 8005640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005644:	2900      	cmp	r1, #0
 8005646:	b096      	sub	sp, #88	; 0x58
 8005648:	4615      	mov	r5, r2
 800564a:	461e      	mov	r6, r3
 800564c:	da0d      	bge.n	800566a <__swhatbuf_r+0x2e>
 800564e:	89a3      	ldrh	r3, [r4, #12]
 8005650:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005654:	f04f 0100 	mov.w	r1, #0
 8005658:	bf0c      	ite	eq
 800565a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800565e:	2340      	movne	r3, #64	; 0x40
 8005660:	2000      	movs	r0, #0
 8005662:	6031      	str	r1, [r6, #0]
 8005664:	602b      	str	r3, [r5, #0]
 8005666:	b016      	add	sp, #88	; 0x58
 8005668:	bd70      	pop	{r4, r5, r6, pc}
 800566a:	466a      	mov	r2, sp
 800566c:	f000 f862 	bl	8005734 <_fstat_r>
 8005670:	2800      	cmp	r0, #0
 8005672:	dbec      	blt.n	800564e <__swhatbuf_r+0x12>
 8005674:	9901      	ldr	r1, [sp, #4]
 8005676:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800567a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800567e:	4259      	negs	r1, r3
 8005680:	4159      	adcs	r1, r3
 8005682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005686:	e7eb      	b.n	8005660 <__swhatbuf_r+0x24>

08005688 <__smakebuf_r>:
 8005688:	898b      	ldrh	r3, [r1, #12]
 800568a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800568c:	079d      	lsls	r5, r3, #30
 800568e:	4606      	mov	r6, r0
 8005690:	460c      	mov	r4, r1
 8005692:	d507      	bpl.n	80056a4 <__smakebuf_r+0x1c>
 8005694:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005698:	6023      	str	r3, [r4, #0]
 800569a:	6123      	str	r3, [r4, #16]
 800569c:	2301      	movs	r3, #1
 800569e:	6163      	str	r3, [r4, #20]
 80056a0:	b002      	add	sp, #8
 80056a2:	bd70      	pop	{r4, r5, r6, pc}
 80056a4:	ab01      	add	r3, sp, #4
 80056a6:	466a      	mov	r2, sp
 80056a8:	f7ff ffc8 	bl	800563c <__swhatbuf_r>
 80056ac:	9900      	ldr	r1, [sp, #0]
 80056ae:	4605      	mov	r5, r0
 80056b0:	4630      	mov	r0, r6
 80056b2:	f7ff fa5d 	bl	8004b70 <_malloc_r>
 80056b6:	b948      	cbnz	r0, 80056cc <__smakebuf_r+0x44>
 80056b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056bc:	059a      	lsls	r2, r3, #22
 80056be:	d4ef      	bmi.n	80056a0 <__smakebuf_r+0x18>
 80056c0:	f023 0303 	bic.w	r3, r3, #3
 80056c4:	f043 0302 	orr.w	r3, r3, #2
 80056c8:	81a3      	strh	r3, [r4, #12]
 80056ca:	e7e3      	b.n	8005694 <__smakebuf_r+0xc>
 80056cc:	89a3      	ldrh	r3, [r4, #12]
 80056ce:	6020      	str	r0, [r4, #0]
 80056d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d4:	81a3      	strh	r3, [r4, #12]
 80056d6:	9b00      	ldr	r3, [sp, #0]
 80056d8:	6163      	str	r3, [r4, #20]
 80056da:	9b01      	ldr	r3, [sp, #4]
 80056dc:	6120      	str	r0, [r4, #16]
 80056de:	b15b      	cbz	r3, 80056f8 <__smakebuf_r+0x70>
 80056e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056e4:	4630      	mov	r0, r6
 80056e6:	f000 f837 	bl	8005758 <_isatty_r>
 80056ea:	b128      	cbz	r0, 80056f8 <__smakebuf_r+0x70>
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	f023 0303 	bic.w	r3, r3, #3
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	81a3      	strh	r3, [r4, #12]
 80056f8:	89a3      	ldrh	r3, [r4, #12]
 80056fa:	431d      	orrs	r5, r3
 80056fc:	81a5      	strh	r5, [r4, #12]
 80056fe:	e7cf      	b.n	80056a0 <__smakebuf_r+0x18>

08005700 <memmove>:
 8005700:	4288      	cmp	r0, r1
 8005702:	b510      	push	{r4, lr}
 8005704:	eb01 0402 	add.w	r4, r1, r2
 8005708:	d902      	bls.n	8005710 <memmove+0x10>
 800570a:	4284      	cmp	r4, r0
 800570c:	4623      	mov	r3, r4
 800570e:	d807      	bhi.n	8005720 <memmove+0x20>
 8005710:	1e43      	subs	r3, r0, #1
 8005712:	42a1      	cmp	r1, r4
 8005714:	d008      	beq.n	8005728 <memmove+0x28>
 8005716:	f811 2b01 	ldrb.w	r2, [r1], #1
 800571a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800571e:	e7f8      	b.n	8005712 <memmove+0x12>
 8005720:	4402      	add	r2, r0
 8005722:	4601      	mov	r1, r0
 8005724:	428a      	cmp	r2, r1
 8005726:	d100      	bne.n	800572a <memmove+0x2a>
 8005728:	bd10      	pop	{r4, pc}
 800572a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800572e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005732:	e7f7      	b.n	8005724 <memmove+0x24>

08005734 <_fstat_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4d07      	ldr	r5, [pc, #28]	; (8005754 <_fstat_r+0x20>)
 8005738:	2300      	movs	r3, #0
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	4611      	mov	r1, r2
 8005740:	602b      	str	r3, [r5, #0]
 8005742:	f7fb fbea 	bl	8000f1a <_fstat>
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	d102      	bne.n	8005750 <_fstat_r+0x1c>
 800574a:	682b      	ldr	r3, [r5, #0]
 800574c:	b103      	cbz	r3, 8005750 <_fstat_r+0x1c>
 800574e:	6023      	str	r3, [r4, #0]
 8005750:	bd38      	pop	{r3, r4, r5, pc}
 8005752:	bf00      	nop
 8005754:	20004264 	.word	0x20004264

08005758 <_isatty_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	4d06      	ldr	r5, [pc, #24]	; (8005774 <_isatty_r+0x1c>)
 800575c:	2300      	movs	r3, #0
 800575e:	4604      	mov	r4, r0
 8005760:	4608      	mov	r0, r1
 8005762:	602b      	str	r3, [r5, #0]
 8005764:	f7fb fbe9 	bl	8000f3a <_isatty>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d102      	bne.n	8005772 <_isatty_r+0x1a>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	b103      	cbz	r3, 8005772 <_isatty_r+0x1a>
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	20004264 	.word	0x20004264

08005778 <_sbrk_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	4d06      	ldr	r5, [pc, #24]	; (8005794 <_sbrk_r+0x1c>)
 800577c:	2300      	movs	r3, #0
 800577e:	4604      	mov	r4, r0
 8005780:	4608      	mov	r0, r1
 8005782:	602b      	str	r3, [r5, #0]
 8005784:	f7fb fbf2 	bl	8000f6c <_sbrk>
 8005788:	1c43      	adds	r3, r0, #1
 800578a:	d102      	bne.n	8005792 <_sbrk_r+0x1a>
 800578c:	682b      	ldr	r3, [r5, #0]
 800578e:	b103      	cbz	r3, 8005792 <_sbrk_r+0x1a>
 8005790:	6023      	str	r3, [r4, #0]
 8005792:	bd38      	pop	{r3, r4, r5, pc}
 8005794:	20004264 	.word	0x20004264

08005798 <_realloc_r>:
 8005798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800579c:	4680      	mov	r8, r0
 800579e:	4614      	mov	r4, r2
 80057a0:	460e      	mov	r6, r1
 80057a2:	b921      	cbnz	r1, 80057ae <_realloc_r+0x16>
 80057a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057a8:	4611      	mov	r1, r2
 80057aa:	f7ff b9e1 	b.w	8004b70 <_malloc_r>
 80057ae:	b92a      	cbnz	r2, 80057bc <_realloc_r+0x24>
 80057b0:	f7ff f96a 	bl	8004a88 <_free_r>
 80057b4:	4625      	mov	r5, r4
 80057b6:	4628      	mov	r0, r5
 80057b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057bc:	f000 f81b 	bl	80057f6 <_malloc_usable_size_r>
 80057c0:	4284      	cmp	r4, r0
 80057c2:	4607      	mov	r7, r0
 80057c4:	d802      	bhi.n	80057cc <_realloc_r+0x34>
 80057c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80057ca:	d812      	bhi.n	80057f2 <_realloc_r+0x5a>
 80057cc:	4621      	mov	r1, r4
 80057ce:	4640      	mov	r0, r8
 80057d0:	f7ff f9ce 	bl	8004b70 <_malloc_r>
 80057d4:	4605      	mov	r5, r0
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d0ed      	beq.n	80057b6 <_realloc_r+0x1e>
 80057da:	42bc      	cmp	r4, r7
 80057dc:	4622      	mov	r2, r4
 80057de:	4631      	mov	r1, r6
 80057e0:	bf28      	it	cs
 80057e2:	463a      	movcs	r2, r7
 80057e4:	f7ff f941 	bl	8004a6a <memcpy>
 80057e8:	4631      	mov	r1, r6
 80057ea:	4640      	mov	r0, r8
 80057ec:	f7ff f94c 	bl	8004a88 <_free_r>
 80057f0:	e7e1      	b.n	80057b6 <_realloc_r+0x1e>
 80057f2:	4635      	mov	r5, r6
 80057f4:	e7df      	b.n	80057b6 <_realloc_r+0x1e>

080057f6 <_malloc_usable_size_r>:
 80057f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057fa:	1f18      	subs	r0, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	bfbc      	itt	lt
 8005800:	580b      	ldrlt	r3, [r1, r0]
 8005802:	18c0      	addlt	r0, r0, r3
 8005804:	4770      	bx	lr
	...

08005808 <_init>:
 8005808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580a:	bf00      	nop
 800580c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800580e:	bc08      	pop	{r3}
 8005810:	469e      	mov	lr, r3
 8005812:	4770      	bx	lr

08005814 <_fini>:
 8005814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005816:	bf00      	nop
 8005818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800581a:	bc08      	pop	{r3}
 800581c:	469e      	mov	lr, r3
 800581e:	4770      	bx	lr
