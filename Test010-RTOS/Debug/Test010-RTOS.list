
Test010-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b10  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08007cb0  08007cb0  00017cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e80  08007e80  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e80  08007e80  00017e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e88  08007e88  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e88  08007e88  00017e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e8c  08007e8c  00017e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08007e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042a8  20000070  08007efc  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004318  08007efc  00024318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016e0b  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003664  00000000  00000000  00036eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001308  00000000  00000000  0003a550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eb7  00000000  00000000  0003b858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000195c7  00000000  00000000  0003c70f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015bcd  00000000  00000000  00055cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009926e  00000000  00000000  0006b8a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a1c  00000000  00000000  00104b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0010a530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c98 	.word	0x08007c98

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08007c98 	.word	0x08007c98

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b970 	b.w	8000e74 <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9e08      	ldr	r6, [sp, #32]
 8000bb2:	460d      	mov	r5, r1
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	460f      	mov	r7, r1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d14a      	bne.n	8000c52 <__udivmoddi4+0xa6>
 8000bbc:	428a      	cmp	r2, r1
 8000bbe:	4694      	mov	ip, r2
 8000bc0:	d965      	bls.n	8000c8e <__udivmoddi4+0xe2>
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	b143      	cbz	r3, 8000bda <__udivmoddi4+0x2e>
 8000bc8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bcc:	f1c3 0220 	rsb	r2, r3, #32
 8000bd0:	409f      	lsls	r7, r3
 8000bd2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bd6:	4317      	orrs	r7, r2
 8000bd8:	409c      	lsls	r4, r3
 8000bda:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bde:	fa1f f58c 	uxth.w	r5, ip
 8000be2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000be6:	0c22      	lsrs	r2, r4, #16
 8000be8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bf0:	fb01 f005 	mul.w	r0, r1, r5
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x62>
 8000bf8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bfc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c00:	f080 811c 	bcs.w	8000e3c <__udivmoddi4+0x290>
 8000c04:	4290      	cmp	r0, r2
 8000c06:	f240 8119 	bls.w	8000e3c <__udivmoddi4+0x290>
 8000c0a:	3902      	subs	r1, #2
 8000c0c:	4462      	add	r2, ip
 8000c0e:	1a12      	subs	r2, r2, r0
 8000c10:	b2a4      	uxth	r4, r4
 8000c12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c1e:	fb00 f505 	mul.w	r5, r0, r5
 8000c22:	42a5      	cmp	r5, r4
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x90>
 8000c26:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2e:	f080 8107 	bcs.w	8000e40 <__udivmoddi4+0x294>
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	f240 8104 	bls.w	8000e40 <__udivmoddi4+0x294>
 8000c38:	4464      	add	r4, ip
 8000c3a:	3802      	subs	r0, #2
 8000c3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c40:	1b64      	subs	r4, r4, r5
 8000c42:	2100      	movs	r1, #0
 8000c44:	b11e      	cbz	r6, 8000c4e <__udivmoddi4+0xa2>
 8000c46:	40dc      	lsrs	r4, r3
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0xbc>
 8000c56:	2e00      	cmp	r6, #0
 8000c58:	f000 80ed 	beq.w	8000e36 <__udivmoddi4+0x28a>
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c62:	4608      	mov	r0, r1
 8000c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c68:	fab3 f183 	clz	r1, r3
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	d149      	bne.n	8000d04 <__udivmoddi4+0x158>
 8000c70:	42ab      	cmp	r3, r5
 8000c72:	d302      	bcc.n	8000c7a <__udivmoddi4+0xce>
 8000c74:	4282      	cmp	r2, r0
 8000c76:	f200 80f8 	bhi.w	8000e6a <__udivmoddi4+0x2be>
 8000c7a:	1a84      	subs	r4, r0, r2
 8000c7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c80:	2001      	movs	r0, #1
 8000c82:	4617      	mov	r7, r2
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d0e2      	beq.n	8000c4e <__udivmoddi4+0xa2>
 8000c88:	e9c6 4700 	strd	r4, r7, [r6]
 8000c8c:	e7df      	b.n	8000c4e <__udivmoddi4+0xa2>
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xe6>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f382 	clz	r3, r2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 8090 	bne.w	8000dbc <__udivmoddi4+0x210>
 8000c9c:	1a8a      	subs	r2, r1, r2
 8000c9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cac:	fb07 2015 	mls	r0, r7, r5, r2
 8000cb0:	0c22      	lsrs	r2, r4, #16
 8000cb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cb6:	fb0e f005 	mul.w	r0, lr, r5
 8000cba:	4290      	cmp	r0, r2
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x124>
 8000cbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x122>
 8000cc8:	4290      	cmp	r0, r2
 8000cca:	f200 80cb 	bhi.w	8000e64 <__udivmoddi4+0x2b8>
 8000cce:	4645      	mov	r5, r8
 8000cd0:	1a12      	subs	r2, r2, r0
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ce0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x14e>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x14c>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80bb 	bhi.w	8000e6e <__udivmoddi4+0x2c2>
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d02:	e79f      	b.n	8000c44 <__udivmoddi4+0x98>
 8000d04:	f1c1 0720 	rsb	r7, r1, #32
 8000d08:	408b      	lsls	r3, r1
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa05 f401 	lsl.w	r4, r5, r1
 8000d16:	fa20 f307 	lsr.w	r3, r0, r7
 8000d1a:	40fd      	lsrs	r5, r7
 8000d1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d20:	4323      	orrs	r3, r4
 8000d22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d2e:	0c1c      	lsrs	r4, r3, #16
 8000d30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d34:	fb08 f50e 	mul.w	r5, r8, lr
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b0>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2b4>
 8000d50:	42a5      	cmp	r5, r4
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2b4>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4464      	add	r4, ip
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	b29d      	uxth	r5, r3
 8000d60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d64:	fb09 4413 	mls	r4, r9, r3, r4
 8000d68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d70:	45a6      	cmp	lr, r4
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1da>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2ac>
 8000d7e:	45a6      	cmp	lr, r4
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2ac>
 8000d82:	3b02      	subs	r3, #2
 8000d84:	4464      	add	r4, ip
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	42ac      	cmp	r4, r5
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46ae      	mov	lr, r5
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x29c>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x298>
 8000d9c:	b156      	cbz	r6, 8000db4 <__udivmoddi4+0x208>
 8000d9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000da2:	eb64 040e 	sbc.w	r4, r4, lr
 8000da6:	fa04 f707 	lsl.w	r7, r4, r7
 8000daa:	40ca      	lsrs	r2, r1
 8000dac:	40cc      	lsrs	r4, r1
 8000dae:	4317      	orrs	r7, r2
 8000db0:	e9c6 7400 	strd	r7, r4, [r6]
 8000db4:	4618      	mov	r0, r3
 8000db6:	2100      	movs	r1, #0
 8000db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbc:	f1c3 0120 	rsb	r1, r3, #32
 8000dc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dcc:	409d      	lsls	r5, r3
 8000dce:	432a      	orrs	r2, r5
 8000dd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1510 	mls	r5, r7, r0, r1
 8000de0:	0c11      	lsrs	r1, r2, #16
 8000de2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000de6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dea:	428d      	cmp	r5, r1
 8000dec:	fa04 f403 	lsl.w	r4, r4, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x258>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000dfc:	428d      	cmp	r5, r1
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4461      	add	r1, ip
 8000e04:	1b49      	subs	r1, r1, r5
 8000e06:	b292      	uxth	r2, r2
 8000e08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e14:	fb05 f10e 	mul.w	r1, r5, lr
 8000e18:	4291      	cmp	r1, r2
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x282>
 8000e1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2a8>
 8000e26:	4291      	cmp	r1, r2
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2a8>
 8000e2a:	3d02      	subs	r5, #2
 8000e2c:	4462      	add	r2, ip
 8000e2e:	1a52      	subs	r2, r2, r1
 8000e30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0xfc>
 8000e36:	4631      	mov	r1, r6
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e708      	b.n	8000c4e <__udivmoddi4+0xa2>
 8000e3c:	4639      	mov	r1, r7
 8000e3e:	e6e6      	b.n	8000c0e <__udivmoddi4+0x62>
 8000e40:	4610      	mov	r0, r2
 8000e42:	e6fb      	b.n	8000c3c <__udivmoddi4+0x90>
 8000e44:	4548      	cmp	r0, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f0>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e50:	3b01      	subs	r3, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f0>
 8000e54:	4645      	mov	r5, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x282>
 8000e58:	462b      	mov	r3, r5
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1da>
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x258>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b0>
 8000e64:	3d02      	subs	r5, #2
 8000e66:	4462      	add	r2, ip
 8000e68:	e732      	b.n	8000cd0 <__udivmoddi4+0x124>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e70a      	b.n	8000c84 <__udivmoddi4+0xd8>
 8000e6e:	4464      	add	r4, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e742      	b.n	8000cfa <__udivmoddi4+0x14e>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <__io_getchar>:
//#include "C:\Users\user\STM32Cube\Repository\STM32Cube_FW_F4_V1.28.1\Drivers\STM32F4xx_HAL_Driver\inc\stm32f4xx_hal_i2c.h"
extern UART_HandleTypeDef huart2;


int __io_getchar(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
   char ch;
   //데이터를 받을 때까지 기다려야 하므로 while을 사용해야 함
   while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
 8000e7e:	bf00      	nop
 8000e80:	1df9      	adds	r1, r7, #7
 8000e82:	230a      	movs	r3, #10
 8000e84:	2201      	movs	r2, #1
 8000e86:	480d      	ldr	r0, [pc, #52]	; (8000ebc <__io_getchar+0x44>)
 8000e88:	f002 fd07 	bl	800389a <HAL_UART_Receive>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1f6      	bne.n	8000e80 <__io_getchar+0x8>
   HAL_UART_Transmit(&huart2, &ch, 1, 10); // echo: Serial 통신에서 받은 데이터를 그대로 돌려주는 것
 8000e92:	1df9      	adds	r1, r7, #7
 8000e94:	230a      	movs	r3, #10
 8000e96:	2201      	movs	r2, #1
 8000e98:	4808      	ldr	r0, [pc, #32]	; (8000ebc <__io_getchar+0x44>)
 8000e9a:	f002 fc73 	bl	8003784 <HAL_UART_Transmit>
   if(ch == '\r') HAL_UART_Transmit(&huart2, "\n", 1, 10);
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b0d      	cmp	r3, #13
 8000ea2:	d105      	bne.n	8000eb0 <__io_getchar+0x38>
 8000ea4:	230a      	movs	r3, #10
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4905      	ldr	r1, [pc, #20]	; (8000ec0 <__io_getchar+0x48>)
 8000eaa:	4804      	ldr	r0, [pc, #16]	; (8000ebc <__io_getchar+0x44>)
 8000eac:	f002 fc6a 	bl	8003784 <HAL_UART_Transmit>
   return ch;
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200003bc 	.word	0x200003bc
 8000ec0:	08007cb0 	.word	0x08007cb0

08000ec4 <__io_putchar>:
int __io_putchar(int ch) // Lowest output Function
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
   HAL_UART_Transmit(&huart2, &ch, 1, 10); // timeout: 10ms
 8000ecc:	1d39      	adds	r1, r7, #4
 8000ece:	230a      	movs	r3, #10
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <__io_putchar+0x20>)
 8000ed4:	f002 fc56 	bl	8003784 <HAL_UART_Transmit>
   return ch;
 8000ed8:	687b      	ldr	r3, [r7, #4]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200003bc 	.word	0x200003bc

08000ee8 <ProgramStart>:
void ProgramStart(char *str)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
   //printf("\033[2J\033[0;0H"); // printf("\033[2J"); : 화면 Clear
   cls();
 8000ef0:	f000 f830 	bl	8000f54 <cls>
   Cursor(0,0);
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f836 	bl	8000f68 <Cursor>
   printf("Program Name - %s\r\n", str);
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	480a      	ldr	r0, [pc, #40]	; (8000f28 <ProgramStart+0x40>)
 8000f00:	f005 fd16 	bl	8006930 <iprintf>
   printf("Press Blue-button(B1) to Start ...\r\n");
 8000f04:	4809      	ldr	r0, [pc, #36]	; (8000f2c <ProgramStart+0x44>)
 8000f06:	f005 fd79 	bl	80069fc <puts>
   StandBy();
 8000f0a:	f000 f813 	bl	8000f34 <StandBy>
   setvbuf(stdin, NULL, _IONBF, 0);
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <ProgramStart+0x48>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	6858      	ldr	r0, [r3, #4]
 8000f14:	2300      	movs	r3, #0
 8000f16:	2202      	movs	r2, #2
 8000f18:	2100      	movs	r1, #0
 8000f1a:	f005 fd77 	bl	8006a0c <setvbuf>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	08007cb4 	.word	0x08007cb4
 8000f2c:	08007cc8 	.word	0x08007cc8
 8000f30:	20000068 	.word	0x20000068

08000f34 <StandBy>:

void StandBy()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
   while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin));
 8000f38:	bf00      	nop
 8000f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3e:	4804      	ldr	r0, [pc, #16]	; (8000f50 <StandBy+0x1c>)
 8000f40:	f001 fa0e 	bl	8002360 <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1f7      	bne.n	8000f3a <StandBy+0x6>
}
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40020800 	.word	0x40020800

08000f54 <cls>:

void cls() // 화면 clear
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
   printf("\033[2J");
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <cls+0x10>)
 8000f5a:	f005 fce9 	bl	8006930 <iprintf>
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	08007cec 	.word	0x08007cec

08000f68 <Cursor>:

void Cursor(int x, int y)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
   char buf[20];
   sprintf(buf, "\033[%d;%dH", y,x);
 8000f72:	f107 000c 	add.w	r0, r7, #12
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	4906      	ldr	r1, [pc, #24]	; (8000f94 <Cursor+0x2c>)
 8000f7c:	f005 fdf4 	bl	8006b68 <siprintf>
   puts(buf);
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	4618      	mov	r0, r3
 8000f86:	f005 fd39 	bl	80069fc <puts>
}
 8000f8a:	bf00      	nop
 8000f8c:	3720      	adds	r7, #32
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	08007cf4 	.word	0x08007cf4

08000f98 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <vApplicationGetIdleTaskMemory+0x30>)
 8000fae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2280      	movs	r2, #128	; 0x80
 8000fb4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	2000008c 	.word	0x2000008c
 8000fc8:	2000012c 	.word	0x2000012c

08000fcc <LD2Test>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int bn =0 ; mode =0;//mode : 1 button pressed 0 release
void LD2Test()
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4802      	ldr	r0, [pc, #8]	; (8000fdc <LD2Test+0x10>)
 8000fd4:	f001 f9f5 	bl	80023c2 <HAL_GPIO_TogglePin>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40020000 	.word	0x40020000

08000fe0 <HAL_GPIO_EXTI_Callback>:


int t1 = 0, t2 = 0;
volatile double dist = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
   if(GPIO_Pin == Echo_Pin)
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ff0:	d126      	bne.n	8001040 <HAL_GPIO_EXTI_Callback+0x60>
   {
      if(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin) == 1) // rising
 8000ff2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ff6:	481a      	ldr	r0, [pc, #104]	; (8001060 <HAL_GPIO_EXTI_Callback+0x80>)
 8000ff8:	f001 f9b2 	bl	8002360 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d106      	bne.n	8001010 <HAL_GPIO_EXTI_Callback+0x30>
      {
         t1 = htim2.Instance->CNT;
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_GPIO_EXTI_Callback+0x84>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	461a      	mov	r2, r3
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_GPIO_EXTI_Callback+0x88>)
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	e017      	b.n	8001040 <HAL_GPIO_EXTI_Callback+0x60>
      }
      else // falling
      {
         t2 = htim2.Instance->CNT;
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_GPIO_EXTI_Callback+0x84>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	461a      	mov	r2, r3
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <HAL_GPIO_EXTI_Callback+0x8c>)
 800101a:	601a      	str	r2, [r3, #0]
         dist = (t2 - t1) * 0.17;
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <HAL_GPIO_EXTI_Callback+0x8c>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_GPIO_EXTI_Callback+0x88>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fa7c 	bl	8000524 <__aeabi_i2d>
 800102c:	a30a      	add	r3, pc, #40	; (adr r3, 8001058 <HAL_GPIO_EXTI_Callback+0x78>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	f7ff fae1 	bl	80005f8 <__aeabi_dmul>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	490d      	ldr	r1, [pc, #52]	; (8001070 <HAL_GPIO_EXTI_Callback+0x90>)
 800103c:	e9c1 2300 	strd	r2, r3, [r1]
      }
   }
   osSemaphoreRelease(myBinarySem01Handle);
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_GPIO_EXTI_Callback+0x94>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f003 f901 	bl	800424c <osSemaphoreRelease>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	f3af 8000 	nop.w
 8001058:	5c28f5c3 	.word	0x5c28f5c3
 800105c:	3fc5c28f 	.word	0x3fc5c28f
 8001060:	40020000 	.word	0x40020000
 8001064:	20000374 	.word	0x20000374
 8001068:	20000418 	.word	0x20000418
 800106c:	2000041c 	.word	0x2000041c
 8001070:	20000420 	.word	0x20000420
 8001074:	20000414 	.word	0x20000414

08001078 <step_half>:


void step_half(int step)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
		switch(step)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	2b07      	cmp	r3, #7
 8001086:	f200 80c3 	bhi.w	8001210 <step_half+0x198>
 800108a:	a201      	add	r2, pc, #4	; (adr r2, 8001090 <step_half+0x18>)
 800108c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001090:	080010b1 	.word	0x080010b1
 8001094:	080010dd 	.word	0x080010dd
 8001098:	08001109 	.word	0x08001109
 800109c:	08001135 	.word	0x08001135
 80010a0:	08001161 	.word	0x08001161
 80010a4:	0800118d 	.word	0x0800118d
 80010a8:	080011b9 	.word	0x080011b9
 80010ac:	080011e5 	.word	0x080011e5
		{
		case 1:

			//step 1
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 80010b0:	2201      	movs	r2, #1
 80010b2:	2108      	movs	r1, #8
 80010b4:	4858      	ldr	r0, [pc, #352]	; (8001218 <step_half+0x1a0>)
 80010b6:	f001 f96b 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2120      	movs	r1, #32
 80010be:	4856      	ldr	r0, [pc, #344]	; (8001218 <step_half+0x1a0>)
 80010c0:	f001 f966 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2110      	movs	r1, #16
 80010c8:	4853      	ldr	r0, [pc, #332]	; (8001218 <step_half+0x1a0>)
 80010ca:	f001 f961 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d4:	4850      	ldr	r0, [pc, #320]	; (8001218 <step_half+0x1a0>)
 80010d6:	f001 f95b 	bl	8002390 <HAL_GPIO_WritePin>
			break;//instead delay
 80010da:	e099      	b.n	8001210 <step_half+0x198>

		case 2:
			//step 2
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 80010dc:	2201      	movs	r2, #1
 80010de:	2108      	movs	r1, #8
 80010e0:	484d      	ldr	r0, [pc, #308]	; (8001218 <step_half+0x1a0>)
 80010e2:	f001 f955 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2120      	movs	r1, #32
 80010ea:	484b      	ldr	r0, [pc, #300]	; (8001218 <step_half+0x1a0>)
 80010ec:	f001 f950 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2110      	movs	r1, #16
 80010f4:	4848      	ldr	r0, [pc, #288]	; (8001218 <step_half+0x1a0>)
 80010f6:	f001 f94b 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001100:	4845      	ldr	r0, [pc, #276]	; (8001218 <step_half+0x1a0>)
 8001102:	f001 f945 	bl	8002390 <HAL_GPIO_WritePin>
			break;//instead delay
 8001106:	e083      	b.n	8001210 <step_half+0x198>

		case 3:
			//step 3
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2108      	movs	r1, #8
 800110c:	4842      	ldr	r0, [pc, #264]	; (8001218 <step_half+0x1a0>)
 800110e:	f001 f93f 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 8001112:	2201      	movs	r2, #1
 8001114:	2120      	movs	r1, #32
 8001116:	4840      	ldr	r0, [pc, #256]	; (8001218 <step_half+0x1a0>)
 8001118:	f001 f93a 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2110      	movs	r1, #16
 8001120:	483d      	ldr	r0, [pc, #244]	; (8001218 <step_half+0x1a0>)
 8001122:	f001 f935 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800112c:	483a      	ldr	r0, [pc, #232]	; (8001218 <step_half+0x1a0>)
 800112e:	f001 f92f 	bl	8002390 <HAL_GPIO_WritePin>
			break;//instead delay
 8001132:	e06d      	b.n	8001210 <step_half+0x198>

		case 4:
			//step 4
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2108      	movs	r1, #8
 8001138:	4837      	ldr	r0, [pc, #220]	; (8001218 <step_half+0x1a0>)
 800113a:	f001 f929 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 1);
 800113e:	2201      	movs	r2, #1
 8001140:	2120      	movs	r1, #32
 8001142:	4835      	ldr	r0, [pc, #212]	; (8001218 <step_half+0x1a0>)
 8001144:	f001 f924 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8001148:	2201      	movs	r2, #1
 800114a:	2110      	movs	r1, #16
 800114c:	4832      	ldr	r0, [pc, #200]	; (8001218 <step_half+0x1a0>)
 800114e:	f001 f91f 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001158:	482f      	ldr	r0, [pc, #188]	; (8001218 <step_half+0x1a0>)
 800115a:	f001 f919 	bl	8002390 <HAL_GPIO_WritePin>
			break;//instead delay
 800115e:	e057      	b.n	8001210 <step_half+0x198>

		case 5:
			//step 5
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2108      	movs	r1, #8
 8001164:	482c      	ldr	r0, [pc, #176]	; (8001218 <step_half+0x1a0>)
 8001166:	f001 f913 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2120      	movs	r1, #32
 800116e:	482a      	ldr	r0, [pc, #168]	; (8001218 <step_half+0x1a0>)
 8001170:	f001 f90e 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 8001174:	2201      	movs	r2, #1
 8001176:	2110      	movs	r1, #16
 8001178:	4827      	ldr	r0, [pc, #156]	; (8001218 <step_half+0x1a0>)
 800117a:	f001 f909 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 0);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001184:	4824      	ldr	r0, [pc, #144]	; (8001218 <step_half+0x1a0>)
 8001186:	f001 f903 	bl	8002390 <HAL_GPIO_WritePin>
			break;//instead delay
 800118a:	e041      	b.n	8001210 <step_half+0x198>

		case 6:
			//step 6
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2108      	movs	r1, #8
 8001190:	4821      	ldr	r0, [pc, #132]	; (8001218 <step_half+0x1a0>)
 8001192:	f001 f8fd 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2120      	movs	r1, #32
 800119a:	481f      	ldr	r0, [pc, #124]	; (8001218 <step_half+0x1a0>)
 800119c:	f001 f8f8 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2110      	movs	r1, #16
 80011a4:	481c      	ldr	r0, [pc, #112]	; (8001218 <step_half+0x1a0>)
 80011a6:	f001 f8f3 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b0:	4819      	ldr	r0, [pc, #100]	; (8001218 <step_half+0x1a0>)
 80011b2:	f001 f8ed 	bl	8002390 <HAL_GPIO_WritePin>
			break;//instead delay
 80011b6:	e02b      	b.n	8001210 <step_half+0x198>
		case 7:
			//step 7
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2108      	movs	r1, #8
 80011bc:	4816      	ldr	r0, [pc, #88]	; (8001218 <step_half+0x1a0>)
 80011be:	f001 f8e7 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2120      	movs	r1, #32
 80011c6:	4814      	ldr	r0, [pc, #80]	; (8001218 <step_half+0x1a0>)
 80011c8:	f001 f8e2 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2110      	movs	r1, #16
 80011d0:	4811      	ldr	r0, [pc, #68]	; (8001218 <step_half+0x1a0>)
 80011d2:	f001 f8dd 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 80011d6:	2201      	movs	r2, #1
 80011d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011dc:	480e      	ldr	r0, [pc, #56]	; (8001218 <step_half+0x1a0>)
 80011de:	f001 f8d7 	bl	8002390 <HAL_GPIO_WritePin>
			break;//instead delay
 80011e2:	e015      	b.n	8001210 <step_half+0x198>
		case 8:
			//step 8
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, 1);
 80011e4:	2201      	movs	r2, #1
 80011e6:	2108      	movs	r1, #8
 80011e8:	480b      	ldr	r0, [pc, #44]	; (8001218 <step_half+0x1a0>)
 80011ea:	f001 f8d1 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, 0);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2120      	movs	r1, #32
 80011f2:	4809      	ldr	r0, [pc, #36]	; (8001218 <step_half+0x1a0>)
 80011f4:	f001 f8cc 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2110      	movs	r1, #16
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <step_half+0x1a0>)
 80011fe:	f001 f8c7 	bl	8002390 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, 1);
 8001202:	2201      	movs	r2, #1
 8001204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001208:	4803      	ldr	r0, [pc, #12]	; (8001218 <step_half+0x1a0>)
 800120a:	f001 f8c1 	bl	8002390 <HAL_GPIO_WritePin>
			break;//instead delay
 800120e:	bf00      	nop

		}
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40020400 	.word	0x40020400

0800121c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800121c:	b5b0      	push	{r4, r5, r7, lr}
 800121e:	b09e      	sub	sp, #120	; 0x78
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001222:	f000 fdd1 	bl	8001dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001226:	f000 f885 	bl	8001334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122a:	f000 f9b3 	bl	8001594 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800122e:	f000 f987 	bl	8001540 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001232:	f000 f8e9 	bl	8001408 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001236:	f000 f937 	bl	80014a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800123a:	4833      	ldr	r0, [pc, #204]	; (8001308 <main+0xec>)
 800123c:	f001 fe0e 	bl	8002e5c <HAL_TIM_Base_Start>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 8001240:	2300      	movs	r3, #0
 8001242:	673b      	str	r3, [r7, #112]	; 0x70
 8001244:	2300      	movs	r3, #0
 8001246:	677b      	str	r3, [r7, #116]	; 0x74
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8001248:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800124c:	2101      	movs	r1, #1
 800124e:	4618      	mov	r0, r3
 8001250:	f002 ff7b 	bl	800414a <osSemaphoreCreate>
 8001254:	4603      	mov	r3, r0
 8001256:	4a2d      	ldr	r2, [pc, #180]	; (800130c <main+0xf0>)
 8001258:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask01 */
  osThreadDef(myTask01, myStartTask01, osPriorityNormal, 0, 128);
 800125a:	4b2d      	ldr	r3, [pc, #180]	; (8001310 <main+0xf4>)
 800125c:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001260:	461d      	mov	r5, r3
 8001262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001266:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800126a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask01Handle = osThreadCreate(osThread(myTask01), NULL);
 800126e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f002 ff08 	bl	800408a <osThreadCreate>
 800127a:	4603      	mov	r3, r0
 800127c:	4a25      	ldr	r2, [pc, #148]	; (8001314 <main+0xf8>)
 800127e:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, myStartTask02, osPriorityBelowNormal, 0, 128);
 8001280:	4b25      	ldr	r3, [pc, #148]	; (8001318 <main+0xfc>)
 8001282:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001286:	461d      	mov	r5, r3
 8001288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001290:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001294:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f002 fef5 	bl	800408a <osThreadCreate>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <main+0x100>)
 80012a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityLow, 0, 128);
 80012a6:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <main+0x104>)
 80012a8:	f107 041c 	add.w	r4, r7, #28
 80012ac:	461d      	mov	r5, r3
 80012ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 fee2 	bl	800408a <osThreadCreate>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a16      	ldr	r2, [pc, #88]	; (8001324 <main+0x108>)
 80012ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask04 */
  osThreadDef(myTask04, StartTask04, osPriorityIdle, 0, 128);
 80012cc:	4b16      	ldr	r3, [pc, #88]	; (8001328 <main+0x10c>)
 80012ce:	463c      	mov	r4, r7
 80012d0:	461d      	mov	r5, r3
 80012d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask04Handle = osThreadCreate(osThread(myTask04), NULL);
 80012de:	463b      	mov	r3, r7
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f002 fed1 	bl	800408a <osThreadCreate>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4a10      	ldr	r2, [pc, #64]	; (800132c <main+0x110>)
 80012ec:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  ProgramStart("RTOS-Start");
 80012ee:	4810      	ldr	r0, [pc, #64]	; (8001330 <main+0x114>)
 80012f0:	f7ff fdfa 	bl	8000ee8 <ProgramStart>
  osSemaphoreRelease(myBinarySem01Handle);
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <main+0xf0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 ffa7 	bl	800424c <osSemaphoreRelease>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80012fe:	f002 febd 	bl	800407c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LD2Test();
 8001302:	f7ff fe63 	bl	8000fcc <LD2Test>
 8001306:	e7fc      	b.n	8001302 <main+0xe6>
 8001308:	20000374 	.word	0x20000374
 800130c:	20000414 	.word	0x20000414
 8001310:	08007d18 	.word	0x08007d18
 8001314:	20000404 	.word	0x20000404
 8001318:	08007d40 	.word	0x08007d40
 800131c:	20000408 	.word	0x20000408
 8001320:	08007d68 	.word	0x08007d68
 8001324:	2000040c 	.word	0x2000040c
 8001328:	08007d90 	.word	0x08007d90
 800132c:	20000410 	.word	0x20000410
 8001330:	08007d00 	.word	0x08007d00

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b094      	sub	sp, #80	; 0x50
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	2230      	movs	r2, #48	; 0x30
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f005 fd08 	bl	8006d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	4b28      	ldr	r3, [pc, #160]	; (8001400 <SystemClock_Config+0xcc>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	4a27      	ldr	r2, [pc, #156]	; (8001400 <SystemClock_Config+0xcc>)
 8001362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001366:	6413      	str	r3, [r2, #64]	; 0x40
 8001368:	4b25      	ldr	r3, [pc, #148]	; (8001400 <SystemClock_Config+0xcc>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	4b22      	ldr	r3, [pc, #136]	; (8001404 <SystemClock_Config+0xd0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a21      	ldr	r2, [pc, #132]	; (8001404 <SystemClock_Config+0xd0>)
 800137e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <SystemClock_Config+0xd0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001390:	2302      	movs	r3, #2
 8001392:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001394:	2301      	movs	r3, #1
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001398:	2310      	movs	r3, #16
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139c:	2302      	movs	r3, #2
 800139e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013a0:	2300      	movs	r3, #0
 80013a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013a4:	2310      	movs	r3, #16
 80013a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013ae:	2304      	movs	r3, #4
 80013b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013b2:	2304      	movs	r3, #4
 80013b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	4618      	mov	r0, r3
 80013bc:	f001 f834 	bl	8002428 <HAL_RCC_OscConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013c6:	f000 fa87 	bl	80018d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ca:	230f      	movs	r3, #15
 80013cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ce:	2302      	movs	r3, #2
 80013d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2102      	movs	r1, #2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f001 fa96 	bl	8002918 <HAL_RCC_ClockConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013f2:	f000 fa71 	bl	80018d8 <Error_Handler>
  }
}
 80013f6:	bf00      	nop
 80013f8:	3750      	adds	r7, #80	; 0x50
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800
 8001404:	40007000 	.word	0x40007000

08001408 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0308 	add.w	r3, r7, #8
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	463b      	mov	r3, r7
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <MX_TIM1_Init+0x98>)
 8001426:	4a1f      	ldr	r2, [pc, #124]	; (80014a4 <MX_TIM1_Init+0x9c>)
 8001428:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800142a:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <MX_TIM1_Init+0x98>)
 800142c:	2253      	movs	r2, #83	; 0x53
 800142e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <MX_TIM1_Init+0x98>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <MX_TIM1_Init+0x98>)
 8001438:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800143c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <MX_TIM1_Init+0x98>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <MX_TIM1_Init+0x98>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <MX_TIM1_Init+0x98>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001450:	4813      	ldr	r0, [pc, #76]	; (80014a0 <MX_TIM1_Init+0x98>)
 8001452:	f001 fcb3 	bl	8002dbc <HAL_TIM_Base_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800145c:	f000 fa3c 	bl	80018d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001464:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	4619      	mov	r1, r3
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <MX_TIM1_Init+0x98>)
 800146e:	f001 fea1 	bl	80031b4 <HAL_TIM_ConfigClockSource>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001478:	f000 fa2e 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147c:	2300      	movs	r3, #0
 800147e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001480:	2300      	movs	r3, #0
 8001482:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001484:	463b      	mov	r3, r7
 8001486:	4619      	mov	r1, r3
 8001488:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_TIM1_Init+0x98>)
 800148a:	f002 f8a9 	bl	80035e0 <HAL_TIMEx_MasterConfigSynchronization>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001494:	f000 fa20 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	2000032c 	.word	0x2000032c
 80014a4:	40010000 	.word	0x40010000

080014a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c4:	4b1d      	ldr	r3, [pc, #116]	; (800153c <MX_TIM2_Init+0x94>)
 80014c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <MX_TIM2_Init+0x94>)
 80014ce:	2253      	movs	r2, #83	; 0x53
 80014d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b1a      	ldr	r3, [pc, #104]	; (800153c <MX_TIM2_Init+0x94>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <MX_TIM2_Init+0x94>)
 80014da:	f04f 32ff 	mov.w	r2, #4294967295
 80014de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <MX_TIM2_Init+0x94>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e6:	4b15      	ldr	r3, [pc, #84]	; (800153c <MX_TIM2_Init+0x94>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ec:	4813      	ldr	r0, [pc, #76]	; (800153c <MX_TIM2_Init+0x94>)
 80014ee:	f001 fc65 	bl	8002dbc <HAL_TIM_Base_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014f8:	f000 f9ee 	bl	80018d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001500:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	4619      	mov	r1, r3
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <MX_TIM2_Init+0x94>)
 800150a:	f001 fe53 	bl	80031b4 <HAL_TIM_ConfigClockSource>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001514:	f000 f9e0 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001520:	463b      	mov	r3, r7
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_TIM2_Init+0x94>)
 8001526:	f002 f85b 	bl	80035e0 <HAL_TIMEx_MasterConfigSynchronization>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001530:	f000 f9d2 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000374 	.word	0x20000374

08001540 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <MX_USART2_UART_Init+0x50>)
 8001548:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_USART2_UART_Init+0x4c>)
 800154c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001550:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_USART2_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_USART2_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001578:	f002 f8b4 	bl	80036e4 <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001582:	f000 f9a9 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200003bc 	.word	0x200003bc
 8001590:	40004400 	.word	0x40004400

08001594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b4e      	ldr	r3, [pc, #312]	; (80016e8 <MX_GPIO_Init+0x154>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a4d      	ldr	r2, [pc, #308]	; (80016e8 <MX_GPIO_Init+0x154>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b4b      	ldr	r3, [pc, #300]	; (80016e8 <MX_GPIO_Init+0x154>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b47      	ldr	r3, [pc, #284]	; (80016e8 <MX_GPIO_Init+0x154>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a46      	ldr	r2, [pc, #280]	; (80016e8 <MX_GPIO_Init+0x154>)
 80015d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b44      	ldr	r3, [pc, #272]	; (80016e8 <MX_GPIO_Init+0x154>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	4b40      	ldr	r3, [pc, #256]	; (80016e8 <MX_GPIO_Init+0x154>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a3f      	ldr	r2, [pc, #252]	; (80016e8 <MX_GPIO_Init+0x154>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <MX_GPIO_Init+0x154>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <MX_GPIO_Init+0x154>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a38      	ldr	r2, [pc, #224]	; (80016e8 <MX_GPIO_Init+0x154>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <MX_GPIO_Init+0x154>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Trig_Pin, GPIO_PIN_RESET);
 800161a:	2200      	movs	r2, #0
 800161c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001620:	4832      	ldr	r0, [pc, #200]	; (80016ec <MX_GPIO_Init+0x158>)
 8001622:	f000 feb5 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800162c:	4830      	ldr	r0, [pc, #192]	; (80016f0 <MX_GPIO_Init+0x15c>)
 800162e:	f000 feaf 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001632:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001638:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800163c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001642:	f107 0314 	add.w	r3, r7, #20
 8001646:	4619      	mov	r1, r3
 8001648:	482a      	ldr	r0, [pc, #168]	; (80016f4 <MX_GPIO_Init+0x160>)
 800164a:	f000 fd05 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Trig_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Trig_Pin;
 800164e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4821      	ldr	r0, [pc, #132]	; (80016ec <MX_GPIO_Init+0x158>)
 8001668:	f000 fcf6 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 800166c:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	4619      	mov	r1, r3
 8001684:	481a      	ldr	r0, [pc, #104]	; (80016f0 <MX_GPIO_Init+0x15c>)
 8001686:	f000 fce7 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_Pin */
  GPIO_InitStruct.Pin = Servo_Pin;
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800168e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4815      	ldr	r0, [pc, #84]	; (80016f4 <MX_GPIO_Init+0x160>)
 80016a0:	f000 fcda 	bl	8002058 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 80016a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016aa:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80016ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	480c      	ldr	r0, [pc, #48]	; (80016ec <MX_GPIO_Init+0x158>)
 80016bc:	f000 fccc 	bl	8002058 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2105      	movs	r1, #5
 80016c4:	2017      	movs	r0, #23
 80016c6:	f000 fc9d 	bl	8002004 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016ca:	2017      	movs	r0, #23
 80016cc:	f000 fcb6 	bl	800203c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2105      	movs	r1, #5
 80016d4:	2028      	movs	r0, #40	; 0x28
 80016d6:	f000 fc95 	bl	8002004 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016da:	2028      	movs	r0, #40	; 0x28
 80016dc:	f000 fcae 	bl	800203c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016e0:	bf00      	nop
 80016e2:	3728      	adds	r7, #40	; 0x28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40020800 	.word	0x40020800

080016f8 <myStartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_myStartTask01 */
void myStartTask01(void const * argument)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {

	if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <myStartTask01+0x3c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f002 fd52 	bl	80041b0 <osSemaphoreWait>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10c      	bne.n	800172c <myStartTask01+0x34>
	{
		Trigger();
 8001712:	f000 fb11 	bl	8001d38 <Trigger>
		printf("Task 01 (Normal) ------\r\n"); HAL_Delay(10);
 8001716:	4808      	ldr	r0, [pc, #32]	; (8001738 <myStartTask01+0x40>)
 8001718:	f005 f970 	bl	80069fc <puts>
 800171c:	200a      	movs	r0, #10
 800171e:	f000 fb95 	bl	8001e4c <HAL_Delay>
		osSemaphoreRelease(myBinarySem01Handle);
 8001722:	4b04      	ldr	r3, [pc, #16]	; (8001734 <myStartTask01+0x3c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f002 fd90 	bl	800424c <osSemaphoreRelease>
	}
    osDelay(1); //Task transformation
 800172c:	2001      	movs	r0, #1
 800172e:	f002 fcf8 	bl	8004122 <osDelay>
	if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8001732:	e7e5      	b.n	8001700 <myStartTask01+0x8>
 8001734:	20000414 	.word	0x20000414
 8001738:	08007dac 	.word	0x08007dac

0800173c <myStartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_myStartTask02 */
void myStartTask02(void const * argument)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN myStartTask02 */
  /* Infinite loop */
  int n=0;
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
  for(;;)
  {

	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <myStartTask02+0x8c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2100      	movs	r1, #0
 800174e:	4618      	mov	r0, r3
 8001750:	f002 fd2e 	bl	80041b0 <osSemaphoreWait>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d132      	bne.n	80017c0 <myStartTask02+0x84>
	  {
		if(dist>500)
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <myStartTask02+0x90>)
 800175c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <myStartTask02+0x94>)
 8001766:	f7ff f9d7 	bl	8000b18 <__aeabi_dcmpgt>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d019      	beq.n	80017a4 <myStartTask02+0x68>
		{
			for(int i=0; i<512; i++)
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	e011      	b.n	800179a <myStartTask02+0x5e>
			{
				step_half((i%8)+1); HAL_Delay(1);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	425a      	negs	r2, r3
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	f002 0207 	and.w	r2, r2, #7
 8001782:	bf58      	it	pl
 8001784:	4253      	negpl	r3, r2
 8001786:	3301      	adds	r3, #1
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fc75 	bl	8001078 <step_half>
 800178e:	2001      	movs	r0, #1
 8001790:	f000 fb5c 	bl	8001e4c <HAL_Delay>
			for(int i=0; i<512; i++)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3301      	adds	r3, #1
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017a0:	dbe9      	blt.n	8001776 <myStartTask02+0x3a>
 80017a2:	e002      	b.n	80017aa <myStartTask02+0x6e>
			}
		}
		else if(1000>dist>500)
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <myStartTask02+0x90>)
 80017a6:	e9d3 2300 	ldrd	r2, r3, [r3]
				step_half((i%8)+1); HAL_Delay(1);
			}
		}


	  	printf("Task 02 (BelowNormal) ------\r\n"); HAL_Delay(10);
 80017aa:	480a      	ldr	r0, [pc, #40]	; (80017d4 <myStartTask02+0x98>)
 80017ac:	f005 f926 	bl	80069fc <puts>
 80017b0:	200a      	movs	r0, #10
 80017b2:	f000 fb4b 	bl	8001e4c <HAL_Delay>
		osSemaphoreRelease(myBinarySem01Handle);
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <myStartTask02+0x8c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f002 fd46 	bl	800424c <osSemaphoreRelease>
//	  printf("Input Degree : ");
//	  scanf("%d", &d);//infinite loop
//	  int w = 2048 *d / 360;
//	  int step = 4096 * d / 360;
//	  printf("Wave(Full) : %d steps, Half : %d steps", step/2,step);
	  osDelay(1);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f002 fcae 	bl	8004122 <osDelay>
	  if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 80017c6:	e7bf      	b.n	8001748 <myStartTask02+0xc>
 80017c8:	20000414 	.word	0x20000414
 80017cc:	20000420 	.word	0x20000420
 80017d0:	407f4000 	.word	0x407f4000
 80017d4:	08007dc8 	.word	0x08007dc8

080017d8 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 80017e0:	4b16      	ldr	r3, [pc, #88]	; (800183c <StartTask03+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f002 fce2 	bl	80041b0 <osSemaphoreWait>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d11f      	bne.n	8001832 <StartTask03+0x5a>
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,1);
 80017f2:	2201      	movs	r2, #1
 80017f4:	2120      	movs	r1, #32
 80017f6:	4812      	ldr	r0, [pc, #72]	; (8001840 <StartTask03+0x68>)
 80017f8:	f000 fdca 	bl	8002390 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80017fc:	2064      	movs	r0, #100	; 0x64
 80017fe:	f000 fb25 	bl	8001e4c <HAL_Delay>
		HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,0);
 8001802:	2200      	movs	r2, #0
 8001804:	2120      	movs	r1, #32
 8001806:	480e      	ldr	r0, [pc, #56]	; (8001840 <StartTask03+0x68>)
 8001808:	f000 fdc2 	bl	8002390 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800180c:	2064      	movs	r0, #100	; 0x64
 800180e:	f000 fb1d 	bl	8001e4c <HAL_Delay>
		HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,1);
 8001812:	2201      	movs	r2, #1
 8001814:	2120      	movs	r1, #32
 8001816:	480a      	ldr	r0, [pc, #40]	; (8001840 <StartTask03+0x68>)
 8001818:	f000 fdba 	bl	8002390 <HAL_GPIO_WritePin>
	  	printf("Task 03 (Idle) ------\r\n"); HAL_Delay(10);
 800181c:	4809      	ldr	r0, [pc, #36]	; (8001844 <StartTask03+0x6c>)
 800181e:	f005 f8ed 	bl	80069fc <puts>
 8001822:	200a      	movs	r0, #10
 8001824:	f000 fb12 	bl	8001e4c <HAL_Delay>
		osSemaphoreRelease(myBinarySem01Handle);
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <StartTask03+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f002 fd0d 	bl	800424c <osSemaphoreRelease>

	}
	osDelay(1);
 8001832:	2001      	movs	r0, #1
 8001834:	f002 fc75 	bl	8004122 <osDelay>
	if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8001838:	e7d2      	b.n	80017e0 <StartTask03+0x8>
 800183a:	bf00      	nop
 800183c:	20000414 	.word	0x20000414
 8001840:	40020000 	.word	0x40020000
 8001844:	08007de8 	.word	0x08007de8

08001848 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 8001850:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <StartTask04+0x58>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f002 fcaa 	bl	80041b0 <osSemaphoreWait>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d119      	bne.n	8001896 <StartTask04+0x4e>
	{
		int iDist = (dist / 10); // mm => cm
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <StartTask04+0x5c>)
 8001864:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <StartTask04+0x60>)
 800186e:	f7fe ffed 	bl	800084c <__aeabi_ddiv>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f957 	bl	8000b2c <__aeabi_d2iz>
 800187e:	4603      	mov	r3, r0
 8001880:	60fb      	str	r3, [r7, #12]
		printf("Distance = %d cm\r\n", iDist);
 8001882:	68f9      	ldr	r1, [r7, #12]
 8001884:	4809      	ldr	r0, [pc, #36]	; (80018ac <StartTask04+0x64>)
 8001886:	f005 f853 	bl	8006930 <iprintf>
	  	printf("Task 04 (Idle) ------\r\n"); HAL_Delay(10);
 800188a:	4809      	ldr	r0, [pc, #36]	; (80018b0 <StartTask04+0x68>)
 800188c:	f005 f8b6 	bl	80069fc <puts>
 8001890:	200a      	movs	r0, #10
 8001892:	f000 fadb 	bl	8001e4c <HAL_Delay>
	  	//osSemaphoreRelease(myBinarySem01Handle);
	}
    osDelay(1);
 8001896:	2001      	movs	r0, #1
 8001898:	f002 fc43 	bl	8004122 <osDelay>
	if(osSemaphoreWait(myBinarySem01Handle, 0) == osOK)
 800189c:	e7d8      	b.n	8001850 <StartTask04+0x8>
 800189e:	bf00      	nop
 80018a0:	20000414 	.word	0x20000414
 80018a4:	20000420 	.word	0x20000420
 80018a8:	40240000 	.word	0x40240000
 80018ac:	08007e00 	.word	0x08007e00
 80018b0:	08007e14 	.word	0x08007e14

080018b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018c6:	f000 faa1 	bl	8001e0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40014400 	.word	0x40014400

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <Error_Handler+0x8>
	...

080018e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_MspInit+0x54>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4a11      	ldr	r2, [pc, #68]	; (8001938 <HAL_MspInit+0x54>)
 80018f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f8:	6453      	str	r3, [r2, #68]	; 0x44
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_MspInit+0x54>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_MspInit+0x54>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_MspInit+0x54>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001914:	6413      	str	r3, [r2, #64]	; 0x40
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_MspInit+0x54>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	210f      	movs	r1, #15
 8001926:	f06f 0001 	mvn.w	r0, #1
 800192a:	f000 fb6b 	bl	8002004 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a18      	ldr	r2, [pc, #96]	; (80019ac <HAL_TIM_Base_MspInit+0x70>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d116      	bne.n	800197c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_TIM_Base_MspInit+0x74>)
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	4a16      	ldr	r2, [pc, #88]	; (80019b0 <HAL_TIM_Base_MspInit+0x74>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6453      	str	r3, [r2, #68]	; 0x44
 800195e:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <HAL_TIM_Base_MspInit+0x74>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2105      	movs	r1, #5
 800196e:	2019      	movs	r0, #25
 8001970:	f000 fb48 	bl	8002004 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001974:	2019      	movs	r0, #25
 8001976:	f000 fb61 	bl	800203c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800197a:	e012      	b.n	80019a2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001984:	d10d      	bne.n	80019a2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_TIM_Base_MspInit+0x74>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	4a08      	ldr	r2, [pc, #32]	; (80019b0 <HAL_TIM_Base_MspInit+0x74>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	6413      	str	r3, [r2, #64]	; 0x40
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_TIM_Base_MspInit+0x74>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	60bb      	str	r3, [r7, #8]
 80019a0:	68bb      	ldr	r3, [r7, #8]
}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40010000 	.word	0x40010000
 80019b0:	40023800 	.word	0x40023800

080019b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a19      	ldr	r2, [pc, #100]	; (8001a38 <HAL_UART_MspInit+0x84>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d12b      	bne.n	8001a2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_UART_MspInit+0x88>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <HAL_UART_MspInit+0x88>)
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e4:	6413      	str	r3, [r2, #64]	; 0x40
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <HAL_UART_MspInit+0x88>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_UART_MspInit+0x88>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a10      	ldr	r2, [pc, #64]	; (8001a3c <HAL_UART_MspInit+0x88>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <HAL_UART_MspInit+0x88>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a0e:	230c      	movs	r3, #12
 8001a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a1e:	2307      	movs	r3, #7
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	4805      	ldr	r0, [pc, #20]	; (8001a40 <HAL_UART_MspInit+0x8c>)
 8001a2a:	f000 fb15 	bl	8002058 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a2e:	bf00      	nop
 8001a30:	3728      	adds	r7, #40	; 0x28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40004400 	.word	0x40004400
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40020000 	.word	0x40020000

08001a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	; 0x30
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	4b2e      	ldr	r3, [pc, #184]	; (8001b14 <HAL_InitTick+0xd0>)
 8001a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5c:	4a2d      	ldr	r2, [pc, #180]	; (8001b14 <HAL_InitTick+0xd0>)
 8001a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a62:	6453      	str	r3, [r2, #68]	; 0x44
 8001a64:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <HAL_InitTick+0xd0>)
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a70:	f107 020c 	add.w	r2, r7, #12
 8001a74:	f107 0310 	add.w	r3, r7, #16
 8001a78:	4611      	mov	r1, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f001 f96c 	bl	8002d58 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a80:	f001 f956 	bl	8002d30 <HAL_RCC_GetPCLK2Freq>
 8001a84:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a88:	4a23      	ldr	r2, [pc, #140]	; (8001b18 <HAL_InitTick+0xd4>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	0c9b      	lsrs	r3, r3, #18
 8001a90:	3b01      	subs	r3, #1
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001a94:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <HAL_InitTick+0xd8>)
 8001a96:	4a22      	ldr	r2, [pc, #136]	; (8001b20 <HAL_InitTick+0xdc>)
 8001a98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <HAL_InitTick+0xd8>)
 8001a9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aa0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001aa2:	4a1e      	ldr	r2, [pc, #120]	; (8001b1c <HAL_InitTick+0xd8>)
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <HAL_InitTick+0xd8>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <HAL_InitTick+0xd8>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab4:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_InitTick+0xd8>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001aba:	4818      	ldr	r0, [pc, #96]	; (8001b1c <HAL_InitTick+0xd8>)
 8001abc:	f001 f97e 	bl	8002dbc <HAL_TIM_Base_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d11b      	bne.n	8001b06 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001ace:	4813      	ldr	r0, [pc, #76]	; (8001b1c <HAL_InitTick+0xd8>)
 8001ad0:	f001 fa1e 	bl	8002f10 <HAL_TIM_Base_Start_IT>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001ada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d111      	bne.n	8001b06 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ae2:	2019      	movs	r0, #25
 8001ae4:	f000 faaa 	bl	800203c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b0f      	cmp	r3, #15
 8001aec:	d808      	bhi.n	8001b00 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001aee:	2200      	movs	r2, #0
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	2019      	movs	r0, #25
 8001af4:	f000 fa86 	bl	8002004 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001af8:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <HAL_InitTick+0xe0>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e002      	b.n	8001b06 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3730      	adds	r7, #48	; 0x30
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	431bde83 	.word	0x431bde83
 8001b1c:	20000428 	.word	0x20000428
 8001b20:	40014400 	.word	0x40014400
 8001b24:	20000004 	.word	0x20000004

08001b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b2c:	e7fe      	b.n	8001b2c <NMI_Handler+0x4>

08001b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <HardFault_Handler+0x4>

08001b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <MemManage_Handler+0x4>

08001b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <BusFault_Handler+0x4>

08001b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <UsageFault_Handler+0x4>

08001b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Servo_Pin);
 8001b58:	2080      	movs	r0, #128	; 0x80
 8001b5a:	f000 fc4d 	bl	80023f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Echo_Pin);
 8001b5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b62:	f000 fc49 	bl	80023f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b70:	4803      	ldr	r0, [pc, #12]	; (8001b80 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001b72:	f001 fa2f 	bl	8002fd4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001b76:	4803      	ldr	r0, [pc, #12]	; (8001b84 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001b78:	f001 fa2c 	bl	8002fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2000032c 	.word	0x2000032c
 8001b84:	20000428 	.word	0x20000428

08001b88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b90:	f000 fc32 	bl	80023f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e00a      	b.n	8001bc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001baa:	f7ff f965 	bl	8000e78 <__io_getchar>
 8001bae:	4601      	mov	r1, r0
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60ba      	str	r2, [r7, #8]
 8001bb6:	b2ca      	uxtb	r2, r1
 8001bb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dbf0      	blt.n	8001baa <_read+0x12>
  }

  return len;
 8001bc8:	687b      	ldr	r3, [r7, #4]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	e009      	b.n	8001bf8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff f969 	bl	8000ec4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dbf1      	blt.n	8001be4 <_write+0x12>
  }
  return len;
 8001c00:	687b      	ldr	r3, [r7, #4]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <_close>:

int _close(int file)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c32:	605a      	str	r2, [r3, #4]
  return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <_isatty>:

int _isatty(int file)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c4a:	2301      	movs	r3, #1
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <_sbrk+0x5c>)
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <_sbrk+0x60>)
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <_sbrk+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <_sbrk+0x64>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <_sbrk+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d207      	bcs.n	8001cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca4:	f005 f8fc 	bl	8006ea0 <__errno>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	220c      	movs	r2, #12
 8001cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	e009      	b.n	8001cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <_sbrk+0x64>)
 8001cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20020000 	.word	0x20020000
 8001cd4:	00000400 	.word	0x00000400
 8001cd8:	20000470 	.word	0x20000470
 8001cdc:	20004318 	.word	0x20004318

08001ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <SystemInit+0x20>)
 8001ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <SystemInit+0x20>)
 8001cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <microDelay>:
extern UART_HandleTypeDef huart2;
extern TIM_HandleTypeDef htim2;


void microDelay(int us) // us : micro second
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
   int t1 = htim2.Instance->CNT;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <microDelay+0x30>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	60fb      	str	r3, [r7, #12]
//   while(1)
//   {
//      if(htim2.Instance->CNT - t1 >= us) break;
//   }
   while(htim2.Instance->CNT - t1 < us);
 8001d14:	bf00      	nop
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <microDelay+0x30>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1ad2      	subs	r2, r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d3f7      	bcc.n	8001d16 <microDelay+0x12>
//   htim2.Instance->CNT = 0;
//   while(htim2.Instance->CNT < us);
}
 8001d26:	bf00      	nop
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	20000374 	.word	0x20000374

08001d38 <Trigger>:

void Trigger()
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d42:	480b      	ldr	r0, [pc, #44]	; (8001d70 <Trigger+0x38>)
 8001d44:	f000 fb24 	bl	8002390 <HAL_GPIO_WritePin>
   microDelay(10);
 8001d48:	200a      	movs	r0, #10
 8001d4a:	f7ff ffdb 	bl	8001d04 <microDelay>
   HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 1);
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d54:	4806      	ldr	r0, [pc, #24]	; (8001d70 <Trigger+0x38>)
 8001d56:	f000 fb1b 	bl	8002390 <HAL_GPIO_WritePin>
   microDelay(10);
 8001d5a:	200a      	movs	r0, #10
 8001d5c:	f7ff ffd2 	bl	8001d04 <microDelay>
   HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d66:	4802      	ldr	r0, [pc, #8]	; (8001d70 <Trigger+0x38>)
 8001d68:	f000 fb12 	bl	8002390 <HAL_GPIO_WritePin>
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40020000 	.word	0x40020000

08001d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d78:	f7ff ffb2 	bl	8001ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d7e:	490d      	ldr	r1, [pc, #52]	; (8001db4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d80:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d94:	4c0a      	ldr	r4, [pc, #40]	; (8001dc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001da2:	f005 f883 	bl	8006eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da6:	f7ff fa39 	bl	800121c <main>
  bx  lr    
 8001daa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001db8:	08007e90 	.word	0x08007e90
  ldr r2, =_sbss
 8001dbc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001dc0:	20004318 	.word	0x20004318

08001dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC_IRQHandler>
	...

08001dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <HAL_Init+0x40>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <HAL_Init+0x40>)
 8001dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_Init+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <HAL_Init+0x40>)
 8001dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <HAL_Init+0x40>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a07      	ldr	r2, [pc, #28]	; (8001e08 <HAL_Init+0x40>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df0:	2003      	movs	r0, #3
 8001df2:	f000 f8fc 	bl	8001fee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df6:	2005      	movs	r0, #5
 8001df8:	f7ff fe24 	bl	8001a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dfc:	f7ff fd72 	bl	80018e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40023c00 	.word	0x40023c00

08001e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_IncTick+0x20>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x24>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <HAL_IncTick+0x24>)
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000008 	.word	0x20000008
 8001e30:	20000474 	.word	0x20000474

08001e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return uwTick;
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_GetTick+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000474 	.word	0x20000474

08001e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e54:	f7ff ffee 	bl	8001e34 <HAL_GetTick>
 8001e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e64:	d005      	beq.n	8001e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e66:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_Delay+0x44>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4413      	add	r3, r2
 8001e70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e72:	bf00      	nop
 8001e74:	f7ff ffde 	bl	8001e34 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d8f7      	bhi.n	8001e74 <HAL_Delay+0x28>
  {
  }
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000008 	.word	0x20000008

08001e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db0b      	blt.n	8001f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4907      	ldr	r1, [pc, #28]	; (8001f30 <__NVIC_EnableIRQ+0x38>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000e100 	.word	0xe000e100

08001f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	6039      	str	r1, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	db0a      	blt.n	8001f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	490c      	ldr	r1, [pc, #48]	; (8001f80 <__NVIC_SetPriority+0x4c>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	440b      	add	r3, r1
 8001f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f5c:	e00a      	b.n	8001f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4908      	ldr	r1, [pc, #32]	; (8001f84 <__NVIC_SetPriority+0x50>)
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	3b04      	subs	r3, #4
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	761a      	strb	r2, [r3, #24]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000e100 	.word	0xe000e100
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	; 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f1c3 0307 	rsb	r3, r3, #7
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	bf28      	it	cs
 8001fa6:	2304      	movcs	r3, #4
 8001fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3304      	adds	r3, #4
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d902      	bls.n	8001fb8 <NVIC_EncodePriority+0x30>
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3b03      	subs	r3, #3
 8001fb6:	e000      	b.n	8001fba <NVIC_EncodePriority+0x32>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	401a      	ands	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	43d9      	mvns	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	4313      	orrs	r3, r2
         );
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	; 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ff4c 	bl	8001e94 <__NVIC_SetPriorityGrouping>
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
 8002010:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002016:	f7ff ff61 	bl	8001edc <__NVIC_GetPriorityGrouping>
 800201a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	6978      	ldr	r0, [r7, #20]
 8002022:	f7ff ffb1 	bl	8001f88 <NVIC_EncodePriority>
 8002026:	4602      	mov	r2, r0
 8002028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff80 	bl	8001f34 <__NVIC_SetPriority>
}
 8002034:	bf00      	nop
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff54 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002058:	b480      	push	{r7}
 800205a:	b089      	sub	sp, #36	; 0x24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	e159      	b.n	8002328 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002074:	2201      	movs	r2, #1
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	429a      	cmp	r2, r3
 800208e:	f040 8148 	bne.w	8002322 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d005      	beq.n	80020aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d130      	bne.n	800210c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	2203      	movs	r2, #3
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020e0:	2201      	movs	r2, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	f003 0201 	and.w	r2, r3, #1
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	2b03      	cmp	r3, #3
 8002116:	d017      	beq.n	8002148 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	2203      	movs	r2, #3
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d123      	bne.n	800219c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	08da      	lsrs	r2, r3, #3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3208      	adds	r2, #8
 800215c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	220f      	movs	r2, #15
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	08da      	lsrs	r2, r3, #3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3208      	adds	r2, #8
 8002196:	69b9      	ldr	r1, [r7, #24]
 8002198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	2203      	movs	r2, #3
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0203 	and.w	r2, r3, #3
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80a2 	beq.w	8002322 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	4b57      	ldr	r3, [pc, #348]	; (8002340 <HAL_GPIO_Init+0x2e8>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	4a56      	ldr	r2, [pc, #344]	; (8002340 <HAL_GPIO_Init+0x2e8>)
 80021e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ec:	6453      	str	r3, [r2, #68]	; 0x44
 80021ee:	4b54      	ldr	r3, [pc, #336]	; (8002340 <HAL_GPIO_Init+0x2e8>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021fa:	4a52      	ldr	r2, [pc, #328]	; (8002344 <HAL_GPIO_Init+0x2ec>)
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	089b      	lsrs	r3, r3, #2
 8002200:	3302      	adds	r3, #2
 8002202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	220f      	movs	r2, #15
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a49      	ldr	r2, [pc, #292]	; (8002348 <HAL_GPIO_Init+0x2f0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d019      	beq.n	800225a <HAL_GPIO_Init+0x202>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a48      	ldr	r2, [pc, #288]	; (800234c <HAL_GPIO_Init+0x2f4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_GPIO_Init+0x1fe>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a47      	ldr	r2, [pc, #284]	; (8002350 <HAL_GPIO_Init+0x2f8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00d      	beq.n	8002252 <HAL_GPIO_Init+0x1fa>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a46      	ldr	r2, [pc, #280]	; (8002354 <HAL_GPIO_Init+0x2fc>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d007      	beq.n	800224e <HAL_GPIO_Init+0x1f6>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a45      	ldr	r2, [pc, #276]	; (8002358 <HAL_GPIO_Init+0x300>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <HAL_GPIO_Init+0x1f2>
 8002246:	2304      	movs	r3, #4
 8002248:	e008      	b.n	800225c <HAL_GPIO_Init+0x204>
 800224a:	2307      	movs	r3, #7
 800224c:	e006      	b.n	800225c <HAL_GPIO_Init+0x204>
 800224e:	2303      	movs	r3, #3
 8002250:	e004      	b.n	800225c <HAL_GPIO_Init+0x204>
 8002252:	2302      	movs	r3, #2
 8002254:	e002      	b.n	800225c <HAL_GPIO_Init+0x204>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_GPIO_Init+0x204>
 800225a:	2300      	movs	r3, #0
 800225c:	69fa      	ldr	r2, [r7, #28]
 800225e:	f002 0203 	and.w	r2, r2, #3
 8002262:	0092      	lsls	r2, r2, #2
 8002264:	4093      	lsls	r3, r2
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800226c:	4935      	ldr	r1, [pc, #212]	; (8002344 <HAL_GPIO_Init+0x2ec>)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	3302      	adds	r3, #2
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227a:	4b38      	ldr	r3, [pc, #224]	; (800235c <HAL_GPIO_Init+0x304>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229e:	4a2f      	ldr	r2, [pc, #188]	; (800235c <HAL_GPIO_Init+0x304>)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a4:	4b2d      	ldr	r3, [pc, #180]	; (800235c <HAL_GPIO_Init+0x304>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c8:	4a24      	ldr	r2, [pc, #144]	; (800235c <HAL_GPIO_Init+0x304>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ce:	4b23      	ldr	r3, [pc, #140]	; (800235c <HAL_GPIO_Init+0x304>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022f2:	4a1a      	ldr	r2, [pc, #104]	; (800235c <HAL_GPIO_Init+0x304>)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f8:	4b18      	ldr	r3, [pc, #96]	; (800235c <HAL_GPIO_Init+0x304>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800231c:	4a0f      	ldr	r2, [pc, #60]	; (800235c <HAL_GPIO_Init+0x304>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3301      	adds	r3, #1
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b0f      	cmp	r3, #15
 800232c:	f67f aea2 	bls.w	8002074 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	3724      	adds	r7, #36	; 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	40013800 	.word	0x40013800
 8002348:	40020000 	.word	0x40020000
 800234c:	40020400 	.word	0x40020400
 8002350:	40020800 	.word	0x40020800
 8002354:	40020c00 	.word	0x40020c00
 8002358:	40021000 	.word	0x40021000
 800235c:	40013c00 	.word	0x40013c00

08002360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	887b      	ldrh	r3, [r7, #2]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
 800237c:	e001      	b.n	8002382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002382:	7bfb      	ldrb	r3, [r7, #15]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	807b      	strh	r3, [r7, #2]
 800239c:	4613      	mov	r3, r2
 800239e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a0:	787b      	ldrb	r3, [r7, #1]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a6:	887a      	ldrh	r2, [r7, #2]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023ac:	e003      	b.n	80023b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ae:	887b      	ldrh	r3, [r7, #2]
 80023b0:	041a      	lsls	r2, r3, #16
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	619a      	str	r2, [r3, #24]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	460b      	mov	r3, r1
 80023cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023d4:	887a      	ldrh	r2, [r7, #2]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4013      	ands	r3, r2
 80023da:	041a      	lsls	r2, r3, #16
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	43d9      	mvns	r1, r3
 80023e0:	887b      	ldrh	r3, [r7, #2]
 80023e2:	400b      	ands	r3, r1
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	619a      	str	r2, [r3, #24]
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002402:	4b08      	ldr	r3, [pc, #32]	; (8002424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	88fb      	ldrh	r3, [r7, #6]
 8002408:	4013      	ands	r3, r2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d006      	beq.n	800241c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800240e:	4a05      	ldr	r2, [pc, #20]	; (8002424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fde2 	bl	8000fe0 <HAL_GPIO_EXTI_Callback>
  }
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40013c00 	.word	0x40013c00

08002428 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e267      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d075      	beq.n	8002532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002446:	4b88      	ldr	r3, [pc, #544]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	2b04      	cmp	r3, #4
 8002450:	d00c      	beq.n	800246c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002452:	4b85      	ldr	r3, [pc, #532]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800245a:	2b08      	cmp	r3, #8
 800245c:	d112      	bne.n	8002484 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800245e:	4b82      	ldr	r3, [pc, #520]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800246a:	d10b      	bne.n	8002484 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800246c:	4b7e      	ldr	r3, [pc, #504]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d05b      	beq.n	8002530 <HAL_RCC_OscConfig+0x108>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d157      	bne.n	8002530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e242      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800248c:	d106      	bne.n	800249c <HAL_RCC_OscConfig+0x74>
 800248e:	4b76      	ldr	r3, [pc, #472]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a75      	ldr	r2, [pc, #468]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e01d      	b.n	80024d8 <HAL_RCC_OscConfig+0xb0>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x98>
 80024a6:	4b70      	ldr	r3, [pc, #448]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6f      	ldr	r2, [pc, #444]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b6d      	ldr	r3, [pc, #436]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a6c      	ldr	r2, [pc, #432]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0xb0>
 80024c0:	4b69      	ldr	r3, [pc, #420]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a68      	ldr	r2, [pc, #416]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b66      	ldr	r3, [pc, #408]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a65      	ldr	r2, [pc, #404]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d013      	beq.n	8002508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7ff fca8 	bl	8001e34 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e8:	f7ff fca4 	bl	8001e34 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b64      	cmp	r3, #100	; 0x64
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e207      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	4b5b      	ldr	r3, [pc, #364]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0xc0>
 8002506:	e014      	b.n	8002532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7ff fc94 	bl	8001e34 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7ff fc90 	bl	8001e34 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e1f3      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002522:	4b51      	ldr	r3, [pc, #324]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0xe8>
 800252e:	e000      	b.n	8002532 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d063      	beq.n	8002606 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800253e:	4b4a      	ldr	r3, [pc, #296]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00b      	beq.n	8002562 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254a:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002552:	2b08      	cmp	r3, #8
 8002554:	d11c      	bne.n	8002590 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002556:	4b44      	ldr	r3, [pc, #272]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d116      	bne.n	8002590 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002562:	4b41      	ldr	r3, [pc, #260]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d005      	beq.n	800257a <HAL_RCC_OscConfig+0x152>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d001      	beq.n	800257a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e1c7      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4937      	ldr	r1, [pc, #220]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258e:	e03a      	b.n	8002606 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d020      	beq.n	80025da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002598:	4b34      	ldr	r3, [pc, #208]	; (800266c <HAL_RCC_OscConfig+0x244>)
 800259a:	2201      	movs	r2, #1
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259e:	f7ff fc49 	bl	8001e34 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a6:	f7ff fc45 	bl	8001e34 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e1a8      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b8:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c4:	4b28      	ldr	r3, [pc, #160]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4925      	ldr	r1, [pc, #148]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]
 80025d8:	e015      	b.n	8002606 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025da:	4b24      	ldr	r3, [pc, #144]	; (800266c <HAL_RCC_OscConfig+0x244>)
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7ff fc28 	bl	8001e34 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e8:	f7ff fc24 	bl	8001e34 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e187      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d036      	beq.n	8002680 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d016      	beq.n	8002648 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_RCC_OscConfig+0x248>)
 800261c:	2201      	movs	r2, #1
 800261e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7ff fc08 	bl	8001e34 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002628:	f7ff fc04 	bl	8001e34 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e167      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263a:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCC_OscConfig+0x240>)
 800263c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x200>
 8002646:	e01b      	b.n	8002680 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_OscConfig+0x248>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264e:	f7ff fbf1 	bl	8001e34 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002654:	e00e      	b.n	8002674 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002656:	f7ff fbed 	bl	8001e34 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d907      	bls.n	8002674 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e150      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
 8002668:	40023800 	.word	0x40023800
 800266c:	42470000 	.word	0x42470000
 8002670:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	4b88      	ldr	r3, [pc, #544]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1ea      	bne.n	8002656 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 8097 	beq.w	80027bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002692:	4b81      	ldr	r3, [pc, #516]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	4b7d      	ldr	r3, [pc, #500]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a7c      	ldr	r2, [pc, #496]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80026a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b7a      	ldr	r3, [pc, #488]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ba:	2301      	movs	r3, #1
 80026bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026be:	4b77      	ldr	r3, [pc, #476]	; (800289c <HAL_RCC_OscConfig+0x474>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d118      	bne.n	80026fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ca:	4b74      	ldr	r3, [pc, #464]	; (800289c <HAL_RCC_OscConfig+0x474>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a73      	ldr	r2, [pc, #460]	; (800289c <HAL_RCC_OscConfig+0x474>)
 80026d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d6:	f7ff fbad 	bl	8001e34 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	e008      	b.n	80026f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026de:	f7ff fba9 	bl	8001e34 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e10c      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	4b6a      	ldr	r3, [pc, #424]	; (800289c <HAL_RCC_OscConfig+0x474>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0f0      	beq.n	80026de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d106      	bne.n	8002712 <HAL_RCC_OscConfig+0x2ea>
 8002704:	4b64      	ldr	r3, [pc, #400]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002708:	4a63      	ldr	r2, [pc, #396]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6713      	str	r3, [r2, #112]	; 0x70
 8002710:	e01c      	b.n	800274c <HAL_RCC_OscConfig+0x324>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b05      	cmp	r3, #5
 8002718:	d10c      	bne.n	8002734 <HAL_RCC_OscConfig+0x30c>
 800271a:	4b5f      	ldr	r3, [pc, #380]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	4a5e      	ldr	r2, [pc, #376]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002720:	f043 0304 	orr.w	r3, r3, #4
 8002724:	6713      	str	r3, [r2, #112]	; 0x70
 8002726:	4b5c      	ldr	r3, [pc, #368]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	4a5b      	ldr	r2, [pc, #364]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	6713      	str	r3, [r2, #112]	; 0x70
 8002732:	e00b      	b.n	800274c <HAL_RCC_OscConfig+0x324>
 8002734:	4b58      	ldr	r3, [pc, #352]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	4a57      	ldr	r2, [pc, #348]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800273a:	f023 0301 	bic.w	r3, r3, #1
 800273e:	6713      	str	r3, [r2, #112]	; 0x70
 8002740:	4b55      	ldr	r3, [pc, #340]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	4a54      	ldr	r2, [pc, #336]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002746:	f023 0304 	bic.w	r3, r3, #4
 800274a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d015      	beq.n	8002780 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002754:	f7ff fb6e 	bl	8001e34 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275c:	f7ff fb6a 	bl	8001e34 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	; 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e0cb      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002772:	4b49      	ldr	r3, [pc, #292]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0ee      	beq.n	800275c <HAL_RCC_OscConfig+0x334>
 800277e:	e014      	b.n	80027aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002780:	f7ff fb58 	bl	8001e34 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002786:	e00a      	b.n	800279e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002788:	f7ff fb54 	bl	8001e34 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	f241 3288 	movw	r2, #5000	; 0x1388
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e0b5      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279e:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1ee      	bne.n	8002788 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027aa:	7dfb      	ldrb	r3, [r7, #23]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d105      	bne.n	80027bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b0:	4b39      	ldr	r3, [pc, #228]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	4a38      	ldr	r2, [pc, #224]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80a1 	beq.w	8002908 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027c6:	4b34      	ldr	r3, [pc, #208]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d05c      	beq.n	800288c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d141      	bne.n	800285e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027da:	4b31      	ldr	r3, [pc, #196]	; (80028a0 <HAL_RCC_OscConfig+0x478>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7ff fb28 	bl	8001e34 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e8:	f7ff fb24 	bl	8001e34 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e087      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fa:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69da      	ldr	r2, [r3, #28]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	019b      	lsls	r3, r3, #6
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	3b01      	subs	r3, #1
 8002820:	041b      	lsls	r3, r3, #16
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	061b      	lsls	r3, r3, #24
 800282a:	491b      	ldr	r1, [pc, #108]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <HAL_RCC_OscConfig+0x478>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002836:	f7ff fafd 	bl	8001e34 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283e:	f7ff faf9 	bl	8001e34 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e05c      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x416>
 800285c:	e054      	b.n	8002908 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <HAL_RCC_OscConfig+0x478>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7ff fae6 	bl	8001e34 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7ff fae2 	bl	8001e34 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e045      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_RCC_OscConfig+0x470>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x444>
 800288a:	e03d      	b.n	8002908 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d107      	bne.n	80028a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e038      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
 8002898:	40023800 	.word	0x40023800
 800289c:	40007000 	.word	0x40007000
 80028a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <HAL_RCC_OscConfig+0x4ec>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d028      	beq.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d121      	bne.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d11a      	bne.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028d4:	4013      	ands	r3, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028dc:	4293      	cmp	r3, r2
 80028de:	d111      	bne.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	085b      	lsrs	r3, r3, #1
 80028ec:	3b01      	subs	r3, #1
 80028ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d107      	bne.n	8002904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800

08002918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e0cc      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800292c:	4b68      	ldr	r3, [pc, #416]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	429a      	cmp	r2, r3
 8002938:	d90c      	bls.n	8002954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293a:	4b65      	ldr	r3, [pc, #404]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002942:	4b63      	ldr	r3, [pc, #396]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0b8      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d020      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800296c:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4a58      	ldr	r2, [pc, #352]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002976:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002984:	4b53      	ldr	r3, [pc, #332]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	4a52      	ldr	r2, [pc, #328]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800298e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002990:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	494d      	ldr	r1, [pc, #308]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d044      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d107      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b6:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d119      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e07f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d003      	beq.n	80029d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d6:	4b3f      	ldr	r3, [pc, #252]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d109      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e06f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e6:	4b3b      	ldr	r3, [pc, #236]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e067      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f6:	4b37      	ldr	r3, [pc, #220]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f023 0203 	bic.w	r2, r3, #3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	4934      	ldr	r1, [pc, #208]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a08:	f7ff fa14 	bl	8001e34 <HAL_GetTick>
 8002a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a10:	f7ff fa10 	bl	8001e34 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e04f      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a26:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 020c 	and.w	r2, r3, #12
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d1eb      	bne.n	8002a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a38:	4b25      	ldr	r3, [pc, #148]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d20c      	bcs.n	8002a60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a46:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e032      	b.n	8002ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4916      	ldr	r1, [pc, #88]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d009      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	490e      	ldr	r1, [pc, #56]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a9e:	f000 f821 	bl	8002ae4 <HAL_RCC_GetSysClockFreq>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	490a      	ldr	r1, [pc, #40]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab0:	5ccb      	ldrb	r3, [r1, r3]
 8002ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab6:	4a09      	ldr	r2, [pc, #36]	; (8002adc <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe ffc0 	bl	8001a44 <HAL_InitTick>

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023c00 	.word	0x40023c00
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	08007e34 	.word	0x08007e34
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	20000004 	.word	0x20000004

08002ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae8:	b094      	sub	sp, #80	; 0x50
 8002aea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002afc:	4b79      	ldr	r3, [pc, #484]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d00d      	beq.n	8002b24 <HAL_RCC_GetSysClockFreq+0x40>
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	f200 80e1 	bhi.w	8002cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d002      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x34>
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d003      	beq.n	8002b1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b16:	e0db      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b18:	4b73      	ldr	r3, [pc, #460]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b1c:	e0db      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b1e:	4b73      	ldr	r3, [pc, #460]	; (8002cec <HAL_RCC_GetSysClockFreq+0x208>)
 8002b20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b22:	e0d8      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b24:	4b6f      	ldr	r3, [pc, #444]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b2c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b2e:	4b6d      	ldr	r3, [pc, #436]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d063      	beq.n	8002c02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3a:	4b6a      	ldr	r3, [pc, #424]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	099b      	lsrs	r3, r3, #6
 8002b40:	2200      	movs	r2, #0
 8002b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b4e:	2300      	movs	r3, #0
 8002b50:	637b      	str	r3, [r7, #52]	; 0x34
 8002b52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b56:	4622      	mov	r2, r4
 8002b58:	462b      	mov	r3, r5
 8002b5a:	f04f 0000 	mov.w	r0, #0
 8002b5e:	f04f 0100 	mov.w	r1, #0
 8002b62:	0159      	lsls	r1, r3, #5
 8002b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b68:	0150      	lsls	r0, r2, #5
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4621      	mov	r1, r4
 8002b70:	1a51      	subs	r1, r2, r1
 8002b72:	6139      	str	r1, [r7, #16]
 8002b74:	4629      	mov	r1, r5
 8002b76:	eb63 0301 	sbc.w	r3, r3, r1
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b88:	4659      	mov	r1, fp
 8002b8a:	018b      	lsls	r3, r1, #6
 8002b8c:	4651      	mov	r1, sl
 8002b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b92:	4651      	mov	r1, sl
 8002b94:	018a      	lsls	r2, r1, #6
 8002b96:	4651      	mov	r1, sl
 8002b98:	ebb2 0801 	subs.w	r8, r2, r1
 8002b9c:	4659      	mov	r1, fp
 8002b9e:	eb63 0901 	sbc.w	r9, r3, r1
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bb6:	4690      	mov	r8, r2
 8002bb8:	4699      	mov	r9, r3
 8002bba:	4623      	mov	r3, r4
 8002bbc:	eb18 0303 	adds.w	r3, r8, r3
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	462b      	mov	r3, r5
 8002bc4:	eb49 0303 	adc.w	r3, r9, r3
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	024b      	lsls	r3, r1, #9
 8002bda:	4621      	mov	r1, r4
 8002bdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002be0:	4621      	mov	r1, r4
 8002be2:	024a      	lsls	r2, r1, #9
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bea:	2200      	movs	r2, #0
 8002bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bf4:	f7fd ffc2 	bl	8000b7c <__aeabi_uldivmod>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c00:	e058      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c02:	4b38      	ldr	r3, [pc, #224]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	099b      	lsrs	r3, r3, #6
 8002c08:	2200      	movs	r2, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c12:	623b      	str	r3, [r7, #32]
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
 8002c18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c1c:	4642      	mov	r2, r8
 8002c1e:	464b      	mov	r3, r9
 8002c20:	f04f 0000 	mov.w	r0, #0
 8002c24:	f04f 0100 	mov.w	r1, #0
 8002c28:	0159      	lsls	r1, r3, #5
 8002c2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c2e:	0150      	lsls	r0, r2, #5
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4641      	mov	r1, r8
 8002c36:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c54:	ebb2 040a 	subs.w	r4, r2, sl
 8002c58:	eb63 050b 	sbc.w	r5, r3, fp
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	00eb      	lsls	r3, r5, #3
 8002c66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c6a:	00e2      	lsls	r2, r4, #3
 8002c6c:	4614      	mov	r4, r2
 8002c6e:	461d      	mov	r5, r3
 8002c70:	4643      	mov	r3, r8
 8002c72:	18e3      	adds	r3, r4, r3
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	464b      	mov	r3, r9
 8002c78:	eb45 0303 	adc.w	r3, r5, r3
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	028b      	lsls	r3, r1, #10
 8002c8e:	4621      	mov	r1, r4
 8002c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c94:	4621      	mov	r1, r4
 8002c96:	028a      	lsls	r2, r1, #10
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
 8002ca2:	61fa      	str	r2, [r7, #28]
 8002ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca8:	f7fd ff68 	bl	8000b7c <__aeabi_uldivmod>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	0c1b      	lsrs	r3, r3, #16
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002cc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ccc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cce:	e002      	b.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cd2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3750      	adds	r7, #80	; 0x50
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	00f42400 	.word	0x00f42400
 8002cec:	007a1200 	.word	0x007a1200

08002cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000000 	.word	0x20000000

08002d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d0c:	f7ff fff0 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d10:	4602      	mov	r2, r0
 8002d12:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	0a9b      	lsrs	r3, r3, #10
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	4903      	ldr	r1, [pc, #12]	; (8002d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d1e:	5ccb      	ldrb	r3, [r1, r3]
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	08007e44 	.word	0x08007e44

08002d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d34:	f7ff ffdc 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	0b5b      	lsrs	r3, r3, #13
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4903      	ldr	r1, [pc, #12]	; (8002d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40023800 	.word	0x40023800
 8002d54:	08007e44 	.word	0x08007e44

08002d58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	220f      	movs	r2, #15
 8002d66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d68:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 0203 	and.w	r2, r3, #3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d74:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d80:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	08db      	lsrs	r3, r3, #3
 8002d92:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <HAL_RCC_GetClockConfig+0x60>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0207 	and.w	r2, r3, #7
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	601a      	str	r2, [r3, #0]
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40023c00 	.word	0x40023c00

08002dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e041      	b.n	8002e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fe fdaa 	bl	800193c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3304      	adds	r3, #4
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	f000 faca 	bl	8003394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d001      	beq.n	8002e74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e03c      	b.n	8002eee <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1e      	ldr	r2, [pc, #120]	; (8002efc <HAL_TIM_Base_Start+0xa0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d018      	beq.n	8002eb8 <HAL_TIM_Base_Start+0x5c>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8e:	d013      	beq.n	8002eb8 <HAL_TIM_Base_Start+0x5c>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1a      	ldr	r2, [pc, #104]	; (8002f00 <HAL_TIM_Base_Start+0xa4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00e      	beq.n	8002eb8 <HAL_TIM_Base_Start+0x5c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a19      	ldr	r2, [pc, #100]	; (8002f04 <HAL_TIM_Base_Start+0xa8>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d009      	beq.n	8002eb8 <HAL_TIM_Base_Start+0x5c>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a17      	ldr	r2, [pc, #92]	; (8002f08 <HAL_TIM_Base_Start+0xac>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d004      	beq.n	8002eb8 <HAL_TIM_Base_Start+0x5c>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a16      	ldr	r2, [pc, #88]	; (8002f0c <HAL_TIM_Base_Start+0xb0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d111      	bne.n	8002edc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b06      	cmp	r3, #6
 8002ec8:	d010      	beq.n	8002eec <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0201 	orr.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eda:	e007      	b.n	8002eec <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40010000 	.word	0x40010000
 8002f00:	40000400 	.word	0x40000400
 8002f04:	40000800 	.word	0x40000800
 8002f08:	40000c00 	.word	0x40000c00
 8002f0c:	40014000 	.word	0x40014000

08002f10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d001      	beq.n	8002f28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e044      	b.n	8002fb2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1e      	ldr	r2, [pc, #120]	; (8002fc0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d018      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x6c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f52:	d013      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x6c>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1a      	ldr	r2, [pc, #104]	; (8002fc4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00e      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x6c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a19      	ldr	r2, [pc, #100]	; (8002fc8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d009      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x6c>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a17      	ldr	r2, [pc, #92]	; (8002fcc <HAL_TIM_Base_Start_IT+0xbc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d004      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x6c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a16      	ldr	r2, [pc, #88]	; (8002fd0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d111      	bne.n	8002fa0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b06      	cmp	r3, #6
 8002f8c:	d010      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0201 	orr.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9e:	e007      	b.n	8002fb0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40010000 	.word	0x40010000
 8002fc4:	40000400 	.word	0x40000400
 8002fc8:	40000800 	.word	0x40000800
 8002fcc:	40000c00 	.word	0x40000c00
 8002fd0:	40014000 	.word	0x40014000

08002fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d020      	beq.n	8003038 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01b      	beq.n	8003038 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0202 	mvn.w	r2, #2
 8003008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f999 	bl	8003356 <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f98b 	bl	8003342 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f99c 	bl	800336a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b00      	cmp	r3, #0
 8003040:	d020      	beq.n	8003084 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01b      	beq.n	8003084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0204 	mvn.w	r2, #4
 8003054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2202      	movs	r2, #2
 800305a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f973 	bl	8003356 <HAL_TIM_IC_CaptureCallback>
 8003070:	e005      	b.n	800307e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f965 	bl	8003342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f976 	bl	800336a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d020      	beq.n	80030d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01b      	beq.n	80030d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0208 	mvn.w	r2, #8
 80030a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2204      	movs	r2, #4
 80030a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f94d 	bl	8003356 <HAL_TIM_IC_CaptureCallback>
 80030bc:	e005      	b.n	80030ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f93f 	bl	8003342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f950 	bl	800336a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d020      	beq.n	800311c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01b      	beq.n	800311c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0210 	mvn.w	r2, #16
 80030ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2208      	movs	r2, #8
 80030f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f927 	bl	8003356 <HAL_TIM_IC_CaptureCallback>
 8003108:	e005      	b.n	8003116 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f919 	bl	8003342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f92a 	bl	800336a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00c      	beq.n	8003140 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d007      	beq.n	8003140 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0201 	mvn.w	r2, #1
 8003138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fe fbba 	bl	80018b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00c      	beq.n	8003164 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003150:	2b00      	cmp	r3, #0
 8003152:	d007      	beq.n	8003164 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800315c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fab6 	bl	80036d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00c      	beq.n	8003188 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003174:	2b00      	cmp	r3, #0
 8003176:	d007      	beq.n	8003188 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f8fb 	bl	800337e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00c      	beq.n	80031ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d007      	beq.n	80031ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0220 	mvn.w	r2, #32
 80031a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fa88 	bl	80036bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031ac:	bf00      	nop
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_TIM_ConfigClockSource+0x1c>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e0b4      	b.n	800333a <HAL_TIM_ConfigClockSource+0x186>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003208:	d03e      	beq.n	8003288 <HAL_TIM_ConfigClockSource+0xd4>
 800320a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800320e:	f200 8087 	bhi.w	8003320 <HAL_TIM_ConfigClockSource+0x16c>
 8003212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003216:	f000 8086 	beq.w	8003326 <HAL_TIM_ConfigClockSource+0x172>
 800321a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321e:	d87f      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x16c>
 8003220:	2b70      	cmp	r3, #112	; 0x70
 8003222:	d01a      	beq.n	800325a <HAL_TIM_ConfigClockSource+0xa6>
 8003224:	2b70      	cmp	r3, #112	; 0x70
 8003226:	d87b      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x16c>
 8003228:	2b60      	cmp	r3, #96	; 0x60
 800322a:	d050      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x11a>
 800322c:	2b60      	cmp	r3, #96	; 0x60
 800322e:	d877      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x16c>
 8003230:	2b50      	cmp	r3, #80	; 0x50
 8003232:	d03c      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0xfa>
 8003234:	2b50      	cmp	r3, #80	; 0x50
 8003236:	d873      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x16c>
 8003238:	2b40      	cmp	r3, #64	; 0x40
 800323a:	d058      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x13a>
 800323c:	2b40      	cmp	r3, #64	; 0x40
 800323e:	d86f      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x16c>
 8003240:	2b30      	cmp	r3, #48	; 0x30
 8003242:	d064      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x15a>
 8003244:	2b30      	cmp	r3, #48	; 0x30
 8003246:	d86b      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x16c>
 8003248:	2b20      	cmp	r3, #32
 800324a:	d060      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x15a>
 800324c:	2b20      	cmp	r3, #32
 800324e:	d867      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x16c>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d05c      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x15a>
 8003254:	2b10      	cmp	r3, #16
 8003256:	d05a      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x15a>
 8003258:	e062      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800326a:	f000 f999 	bl	80035a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800327c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	609a      	str	r2, [r3, #8]
      break;
 8003286:	e04f      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003298:	f000 f982 	bl	80035a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032aa:	609a      	str	r2, [r3, #8]
      break;
 80032ac:	e03c      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ba:	461a      	mov	r2, r3
 80032bc:	f000 f8f6 	bl	80034ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2150      	movs	r1, #80	; 0x50
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f94f 	bl	800356a <TIM_ITRx_SetConfig>
      break;
 80032cc:	e02c      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032da:	461a      	mov	r2, r3
 80032dc:	f000 f915 	bl	800350a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2160      	movs	r1, #96	; 0x60
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f93f 	bl	800356a <TIM_ITRx_SetConfig>
      break;
 80032ec:	e01c      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fa:	461a      	mov	r2, r3
 80032fc:	f000 f8d6 	bl	80034ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2140      	movs	r1, #64	; 0x40
 8003306:	4618      	mov	r0, r3
 8003308:	f000 f92f 	bl	800356a <TIM_ITRx_SetConfig>
      break;
 800330c:	e00c      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4619      	mov	r1, r3
 8003318:	4610      	mov	r0, r2
 800331a:	f000 f926 	bl	800356a <TIM_ITRx_SetConfig>
      break;
 800331e:	e003      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
      break;
 8003324:	e000      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003326:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003338:	7bfb      	ldrb	r3, [r7, #15]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
	...

08003394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a3a      	ldr	r2, [pc, #232]	; (8003490 <TIM_Base_SetConfig+0xfc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00f      	beq.n	80033cc <TIM_Base_SetConfig+0x38>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b2:	d00b      	beq.n	80033cc <TIM_Base_SetConfig+0x38>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a37      	ldr	r2, [pc, #220]	; (8003494 <TIM_Base_SetConfig+0x100>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d007      	beq.n	80033cc <TIM_Base_SetConfig+0x38>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a36      	ldr	r2, [pc, #216]	; (8003498 <TIM_Base_SetConfig+0x104>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d003      	beq.n	80033cc <TIM_Base_SetConfig+0x38>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a35      	ldr	r2, [pc, #212]	; (800349c <TIM_Base_SetConfig+0x108>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d108      	bne.n	80033de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a2b      	ldr	r2, [pc, #172]	; (8003490 <TIM_Base_SetConfig+0xfc>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01b      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ec:	d017      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a28      	ldr	r2, [pc, #160]	; (8003494 <TIM_Base_SetConfig+0x100>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d013      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a27      	ldr	r2, [pc, #156]	; (8003498 <TIM_Base_SetConfig+0x104>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00f      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a26      	ldr	r2, [pc, #152]	; (800349c <TIM_Base_SetConfig+0x108>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d00b      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a25      	ldr	r2, [pc, #148]	; (80034a0 <TIM_Base_SetConfig+0x10c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d007      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a24      	ldr	r2, [pc, #144]	; (80034a4 <TIM_Base_SetConfig+0x110>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d003      	beq.n	800341e <TIM_Base_SetConfig+0x8a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a23      	ldr	r2, [pc, #140]	; (80034a8 <TIM_Base_SetConfig+0x114>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d108      	bne.n	8003430 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	4313      	orrs	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a0e      	ldr	r2, [pc, #56]	; (8003490 <TIM_Base_SetConfig+0xfc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d103      	bne.n	8003464 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b01      	cmp	r3, #1
 8003474:	d105      	bne.n	8003482 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f023 0201 	bic.w	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	611a      	str	r2, [r3, #16]
  }
}
 8003482:	bf00      	nop
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40010000 	.word	0x40010000
 8003494:	40000400 	.word	0x40000400
 8003498:	40000800 	.word	0x40000800
 800349c:	40000c00 	.word	0x40000c00
 80034a0:	40014000 	.word	0x40014000
 80034a4:	40014400 	.word	0x40014400
 80034a8:	40014800 	.word	0x40014800

080034ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	f023 0201 	bic.w	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f023 030a 	bic.w	r3, r3, #10
 80034e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	621a      	str	r2, [r3, #32]
}
 80034fe:	bf00      	nop
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800350a:	b480      	push	{r7}
 800350c:	b087      	sub	sp, #28
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	f023 0210 	bic.w	r2, r3, #16
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003534:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	031b      	lsls	r3, r3, #12
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	4313      	orrs	r3, r2
 800353e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003546:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	621a      	str	r2, [r3, #32]
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800356a:	b480      	push	{r7}
 800356c:	b085      	sub	sp, #20
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003580:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	f043 0307 	orr.w	r3, r3, #7
 800358c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	609a      	str	r2, [r3, #8]
}
 8003594:	bf00      	nop
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	021a      	lsls	r2, r3, #8
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	609a      	str	r2, [r3, #8]
}
 80035d4:	bf00      	nop
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e050      	b.n	800369a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d018      	beq.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003644:	d013      	beq.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00e      	beq.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a16      	ldr	r2, [pc, #88]	; (80036b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d009      	beq.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d004      	beq.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a13      	ldr	r2, [pc, #76]	; (80036b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d10c      	bne.n	8003688 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	4313      	orrs	r3, r2
 800367e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40010000 	.word	0x40010000
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40000800 	.word	0x40000800
 80036b4:	40000c00 	.word	0x40000c00
 80036b8:	40014000 	.word	0x40014000

080036bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e042      	b.n	800377c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7fe f952 	bl	80019b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2224      	movs	r2, #36	; 0x24
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003726:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fa09 	bl	8003b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691a      	ldr	r2, [r3, #16]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800373c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	695a      	ldr	r2, [r3, #20]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800374c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800375c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08a      	sub	sp, #40	; 0x28
 8003788:	af02      	add	r7, sp, #8
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	4613      	mov	r3, r2
 8003792:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d175      	bne.n	8003890 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <HAL_UART_Transmit+0x2c>
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e06e      	b.n	8003892 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2221      	movs	r2, #33	; 0x21
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037c2:	f7fe fb37 	bl	8001e34 <HAL_GetTick>
 80037c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	88fa      	ldrh	r2, [r7, #6]
 80037cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	88fa      	ldrh	r2, [r7, #6]
 80037d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037dc:	d108      	bne.n	80037f0 <HAL_UART_Transmit+0x6c>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d104      	bne.n	80037f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	e003      	b.n	80037f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037f8:	e02e      	b.n	8003858 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2200      	movs	r2, #0
 8003802:	2180      	movs	r1, #128	; 0x80
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f8df 	bl	80039c8 <UART_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e03a      	b.n	8003892 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10b      	bne.n	800383a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003830:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	3302      	adds	r3, #2
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	e007      	b.n	800384a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	781a      	ldrb	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	3301      	adds	r3, #1
 8003848:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1cb      	bne.n	80037fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2200      	movs	r2, #0
 800386a:	2140      	movs	r1, #64	; 0x40
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 f8ab 	bl	80039c8 <UART_WaitOnFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e006      	b.n	8003892 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	e000      	b.n	8003892 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003890:	2302      	movs	r3, #2
  }
}
 8003892:	4618      	mov	r0, r3
 8003894:	3720      	adds	r7, #32
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b08a      	sub	sp, #40	; 0x28
 800389e:	af02      	add	r7, sp, #8
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	603b      	str	r3, [r7, #0]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	f040 8081 	bne.w	80039be <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_UART_Receive+0x2e>
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e079      	b.n	80039c0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2222      	movs	r2, #34	; 0x22
 80038d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038e0:	f7fe faa8 	bl	8001e34 <HAL_GetTick>
 80038e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	88fa      	ldrh	r2, [r7, #6]
 80038ea:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	88fa      	ldrh	r2, [r7, #6]
 80038f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fa:	d108      	bne.n	800390e <HAL_UART_Receive+0x74>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d104      	bne.n	800390e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003904:	2300      	movs	r3, #0
 8003906:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	e003      	b.n	8003916 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003916:	e047      	b.n	80039a8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2200      	movs	r2, #0
 8003920:	2120      	movs	r1, #32
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f850 	bl	80039c8 <UART_WaitOnFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e042      	b.n	80039c0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10c      	bne.n	800395a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	b29b      	uxth	r3, r3
 8003948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394c:	b29a      	uxth	r2, r3
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	3302      	adds	r3, #2
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	e01f      	b.n	800399a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003962:	d007      	beq.n	8003974 <HAL_UART_Receive+0xda>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10a      	bne.n	8003982 <HAL_UART_Receive+0xe8>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d106      	bne.n	8003982 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	b2da      	uxtb	r2, r3
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	701a      	strb	r2, [r3, #0]
 8003980:	e008      	b.n	8003994 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800398e:	b2da      	uxtb	r2, r3
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	3301      	adds	r3, #1
 8003998:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1b2      	bne.n	8003918 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e000      	b.n	80039c0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80039be:	2302      	movs	r3, #2
  }
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3720      	adds	r7, #32
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	4613      	mov	r3, r2
 80039d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d8:	e03b      	b.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d037      	beq.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e2:	f7fe fa27 	bl	8001e34 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	6a3a      	ldr	r2, [r7, #32]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d302      	bcc.n	80039f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e03a      	b.n	8003a72 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d023      	beq.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b80      	cmp	r3, #128	; 0x80
 8003a0e:	d020      	beq.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b40      	cmp	r3, #64	; 0x40
 8003a14:	d01d      	beq.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d116      	bne.n	8003a52 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 f81d 	bl	8003a7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2208      	movs	r2, #8
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e00f      	b.n	8003a72 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	bf0c      	ite	eq
 8003a62:	2301      	moveq	r3, #1
 8003a64:	2300      	movne	r3, #0
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d0b4      	beq.n	80039da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b095      	sub	sp, #84	; 0x54
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	330c      	adds	r3, #12
 8003a88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003aa2:	643a      	str	r2, [r7, #64]	; 0x40
 8003aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003aa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e5      	bne.n	8003a82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3314      	adds	r3, #20
 8003abc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	e853 3f00 	ldrex	r3, [r3]
 8003ac4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	f023 0301 	bic.w	r3, r3, #1
 8003acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3314      	adds	r3, #20
 8003ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e5      	bne.n	8003ab6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d119      	bne.n	8003b26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	330c      	adds	r3, #12
 8003af8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f023 0310 	bic.w	r3, r3, #16
 8003b08:	647b      	str	r3, [r7, #68]	; 0x44
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	330c      	adds	r3, #12
 8003b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b12:	61ba      	str	r2, [r7, #24]
 8003b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	6979      	ldr	r1, [r7, #20]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e5      	bne.n	8003af2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b34:	bf00      	nop
 8003b36:	3754      	adds	r7, #84	; 0x54
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b44:	b0c0      	sub	sp, #256	; 0x100
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5c:	68d9      	ldr	r1, [r3, #12]
 8003b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	ea40 0301 	orr.w	r3, r0, r1
 8003b68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b98:	f021 010c 	bic.w	r1, r1, #12
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ba6:	430b      	orrs	r3, r1
 8003ba8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bba:	6999      	ldr	r1, [r3, #24]
 8003bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	ea40 0301 	orr.w	r3, r0, r1
 8003bc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	4b8f      	ldr	r3, [pc, #572]	; (8003e0c <UART_SetConfig+0x2cc>)
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d005      	beq.n	8003be0 <UART_SetConfig+0xa0>
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4b8d      	ldr	r3, [pc, #564]	; (8003e10 <UART_SetConfig+0x2d0>)
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d104      	bne.n	8003bea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003be0:	f7ff f8a6 	bl	8002d30 <HAL_RCC_GetPCLK2Freq>
 8003be4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003be8:	e003      	b.n	8003bf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bea:	f7ff f88d 	bl	8002d08 <HAL_RCC_GetPCLK1Freq>
 8003bee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bfc:	f040 810c 	bne.w	8003e18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c12:	4622      	mov	r2, r4
 8003c14:	462b      	mov	r3, r5
 8003c16:	1891      	adds	r1, r2, r2
 8003c18:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c1a:	415b      	adcs	r3, r3
 8003c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c22:	4621      	mov	r1, r4
 8003c24:	eb12 0801 	adds.w	r8, r2, r1
 8003c28:	4629      	mov	r1, r5
 8003c2a:	eb43 0901 	adc.w	r9, r3, r1
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c42:	4690      	mov	r8, r2
 8003c44:	4699      	mov	r9, r3
 8003c46:	4623      	mov	r3, r4
 8003c48:	eb18 0303 	adds.w	r3, r8, r3
 8003c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c50:	462b      	mov	r3, r5
 8003c52:	eb49 0303 	adc.w	r3, r9, r3
 8003c56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c6e:	460b      	mov	r3, r1
 8003c70:	18db      	adds	r3, r3, r3
 8003c72:	653b      	str	r3, [r7, #80]	; 0x50
 8003c74:	4613      	mov	r3, r2
 8003c76:	eb42 0303 	adc.w	r3, r2, r3
 8003c7a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c84:	f7fc ff7a 	bl	8000b7c <__aeabi_uldivmod>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4b61      	ldr	r3, [pc, #388]	; (8003e14 <UART_SetConfig+0x2d4>)
 8003c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	011c      	lsls	r4, r3, #4
 8003c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ca0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ca4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ca8:	4642      	mov	r2, r8
 8003caa:	464b      	mov	r3, r9
 8003cac:	1891      	adds	r1, r2, r2
 8003cae:	64b9      	str	r1, [r7, #72]	; 0x48
 8003cb0:	415b      	adcs	r3, r3
 8003cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003cb8:	4641      	mov	r1, r8
 8003cba:	eb12 0a01 	adds.w	sl, r2, r1
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	eb43 0b01 	adc.w	fp, r3, r1
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cd8:	4692      	mov	sl, r2
 8003cda:	469b      	mov	fp, r3
 8003cdc:	4643      	mov	r3, r8
 8003cde:	eb1a 0303 	adds.w	r3, sl, r3
 8003ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ce6:	464b      	mov	r3, r9
 8003ce8:	eb4b 0303 	adc.w	r3, fp, r3
 8003cec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d04:	460b      	mov	r3, r1
 8003d06:	18db      	adds	r3, r3, r3
 8003d08:	643b      	str	r3, [r7, #64]	; 0x40
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	eb42 0303 	adc.w	r3, r2, r3
 8003d10:	647b      	str	r3, [r7, #68]	; 0x44
 8003d12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d1a:	f7fc ff2f 	bl	8000b7c <__aeabi_uldivmod>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4611      	mov	r1, r2
 8003d24:	4b3b      	ldr	r3, [pc, #236]	; (8003e14 <UART_SetConfig+0x2d4>)
 8003d26:	fba3 2301 	umull	r2, r3, r3, r1
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	2264      	movs	r2, #100	; 0x64
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	1acb      	subs	r3, r1, r3
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d3a:	4b36      	ldr	r3, [pc, #216]	; (8003e14 <UART_SetConfig+0x2d4>)
 8003d3c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d48:	441c      	add	r4, r3
 8003d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	464b      	mov	r3, r9
 8003d60:	1891      	adds	r1, r2, r2
 8003d62:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d64:	415b      	adcs	r3, r3
 8003d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d6c:	4641      	mov	r1, r8
 8003d6e:	1851      	adds	r1, r2, r1
 8003d70:	6339      	str	r1, [r7, #48]	; 0x30
 8003d72:	4649      	mov	r1, r9
 8003d74:	414b      	adcs	r3, r1
 8003d76:	637b      	str	r3, [r7, #52]	; 0x34
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d84:	4659      	mov	r1, fp
 8003d86:	00cb      	lsls	r3, r1, #3
 8003d88:	4651      	mov	r1, sl
 8003d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d8e:	4651      	mov	r1, sl
 8003d90:	00ca      	lsls	r2, r1, #3
 8003d92:	4610      	mov	r0, r2
 8003d94:	4619      	mov	r1, r3
 8003d96:	4603      	mov	r3, r0
 8003d98:	4642      	mov	r2, r8
 8003d9a:	189b      	adds	r3, r3, r2
 8003d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003da0:	464b      	mov	r3, r9
 8003da2:	460a      	mov	r2, r1
 8003da4:	eb42 0303 	adc.w	r3, r2, r3
 8003da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003db8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003dbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	18db      	adds	r3, r3, r3
 8003dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	eb42 0303 	adc.w	r3, r2, r3
 8003dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003dd6:	f7fc fed1 	bl	8000b7c <__aeabi_uldivmod>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4b0d      	ldr	r3, [pc, #52]	; (8003e14 <UART_SetConfig+0x2d4>)
 8003de0:	fba3 1302 	umull	r1, r3, r3, r2
 8003de4:	095b      	lsrs	r3, r3, #5
 8003de6:	2164      	movs	r1, #100	; 0x64
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	3332      	adds	r3, #50	; 0x32
 8003df2:	4a08      	ldr	r2, [pc, #32]	; (8003e14 <UART_SetConfig+0x2d4>)
 8003df4:	fba2 2303 	umull	r2, r3, r2, r3
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	f003 0207 	and.w	r2, r3, #7
 8003dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4422      	add	r2, r4
 8003e06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e08:	e106      	b.n	8004018 <UART_SetConfig+0x4d8>
 8003e0a:	bf00      	nop
 8003e0c:	40011000 	.word	0x40011000
 8003e10:	40011400 	.word	0x40011400
 8003e14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003e26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003e2a:	4642      	mov	r2, r8
 8003e2c:	464b      	mov	r3, r9
 8003e2e:	1891      	adds	r1, r2, r2
 8003e30:	6239      	str	r1, [r7, #32]
 8003e32:	415b      	adcs	r3, r3
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
 8003e36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e3a:	4641      	mov	r1, r8
 8003e3c:	1854      	adds	r4, r2, r1
 8003e3e:	4649      	mov	r1, r9
 8003e40:	eb43 0501 	adc.w	r5, r3, r1
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	00eb      	lsls	r3, r5, #3
 8003e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e52:	00e2      	lsls	r2, r4, #3
 8003e54:	4614      	mov	r4, r2
 8003e56:	461d      	mov	r5, r3
 8003e58:	4643      	mov	r3, r8
 8003e5a:	18e3      	adds	r3, r4, r3
 8003e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e60:	464b      	mov	r3, r9
 8003e62:	eb45 0303 	adc.w	r3, r5, r3
 8003e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e86:	4629      	mov	r1, r5
 8003e88:	008b      	lsls	r3, r1, #2
 8003e8a:	4621      	mov	r1, r4
 8003e8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e90:	4621      	mov	r1, r4
 8003e92:	008a      	lsls	r2, r1, #2
 8003e94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e98:	f7fc fe70 	bl	8000b7c <__aeabi_uldivmod>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4b60      	ldr	r3, [pc, #384]	; (8004024 <UART_SetConfig+0x4e4>)
 8003ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	011c      	lsls	r4, r3, #4
 8003eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003eb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003eb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ebc:	4642      	mov	r2, r8
 8003ebe:	464b      	mov	r3, r9
 8003ec0:	1891      	adds	r1, r2, r2
 8003ec2:	61b9      	str	r1, [r7, #24]
 8003ec4:	415b      	adcs	r3, r3
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ecc:	4641      	mov	r1, r8
 8003ece:	1851      	adds	r1, r2, r1
 8003ed0:	6139      	str	r1, [r7, #16]
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	414b      	adcs	r3, r1
 8003ed6:	617b      	str	r3, [r7, #20]
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ee4:	4659      	mov	r1, fp
 8003ee6:	00cb      	lsls	r3, r1, #3
 8003ee8:	4651      	mov	r1, sl
 8003eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eee:	4651      	mov	r1, sl
 8003ef0:	00ca      	lsls	r2, r1, #3
 8003ef2:	4610      	mov	r0, r2
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	4642      	mov	r2, r8
 8003efa:	189b      	adds	r3, r3, r2
 8003efc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f00:	464b      	mov	r3, r9
 8003f02:	460a      	mov	r2, r1
 8003f04:	eb42 0303 	adc.w	r3, r2, r3
 8003f08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003f24:	4649      	mov	r1, r9
 8003f26:	008b      	lsls	r3, r1, #2
 8003f28:	4641      	mov	r1, r8
 8003f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f2e:	4641      	mov	r1, r8
 8003f30:	008a      	lsls	r2, r1, #2
 8003f32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f36:	f7fc fe21 	bl	8000b7c <__aeabi_uldivmod>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4b38      	ldr	r3, [pc, #224]	; (8004024 <UART_SetConfig+0x4e4>)
 8003f42:	fba3 2301 	umull	r2, r3, r3, r1
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2264      	movs	r2, #100	; 0x64
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	1acb      	subs	r3, r1, r3
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	3332      	adds	r3, #50	; 0x32
 8003f54:	4a33      	ldr	r2, [pc, #204]	; (8004024 <UART_SetConfig+0x4e4>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f60:	441c      	add	r4, r3
 8003f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f66:	2200      	movs	r2, #0
 8003f68:	673b      	str	r3, [r7, #112]	; 0x70
 8003f6a:	677a      	str	r2, [r7, #116]	; 0x74
 8003f6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f70:	4642      	mov	r2, r8
 8003f72:	464b      	mov	r3, r9
 8003f74:	1891      	adds	r1, r2, r2
 8003f76:	60b9      	str	r1, [r7, #8]
 8003f78:	415b      	adcs	r3, r3
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f80:	4641      	mov	r1, r8
 8003f82:	1851      	adds	r1, r2, r1
 8003f84:	6039      	str	r1, [r7, #0]
 8003f86:	4649      	mov	r1, r9
 8003f88:	414b      	adcs	r3, r1
 8003f8a:	607b      	str	r3, [r7, #4]
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f98:	4659      	mov	r1, fp
 8003f9a:	00cb      	lsls	r3, r1, #3
 8003f9c:	4651      	mov	r1, sl
 8003f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fa2:	4651      	mov	r1, sl
 8003fa4:	00ca      	lsls	r2, r1, #3
 8003fa6:	4610      	mov	r0, r2
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4603      	mov	r3, r0
 8003fac:	4642      	mov	r2, r8
 8003fae:	189b      	adds	r3, r3, r2
 8003fb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	460a      	mov	r2, r1
 8003fb6:	eb42 0303 	adc.w	r3, r2, r3
 8003fba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8003fc6:	667a      	str	r2, [r7, #100]	; 0x64
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003fd4:	4649      	mov	r1, r9
 8003fd6:	008b      	lsls	r3, r1, #2
 8003fd8:	4641      	mov	r1, r8
 8003fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fde:	4641      	mov	r1, r8
 8003fe0:	008a      	lsls	r2, r1, #2
 8003fe2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fe6:	f7fc fdc9 	bl	8000b7c <__aeabi_uldivmod>
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	4b0d      	ldr	r3, [pc, #52]	; (8004024 <UART_SetConfig+0x4e4>)
 8003ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ff4:	095b      	lsrs	r3, r3, #5
 8003ff6:	2164      	movs	r1, #100	; 0x64
 8003ff8:	fb01 f303 	mul.w	r3, r1, r3
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	3332      	adds	r3, #50	; 0x32
 8004002:	4a08      	ldr	r2, [pc, #32]	; (8004024 <UART_SetConfig+0x4e4>)
 8004004:	fba2 2303 	umull	r2, r3, r2, r3
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	f003 020f 	and.w	r2, r3, #15
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4422      	add	r2, r4
 8004016:	609a      	str	r2, [r3, #8]
}
 8004018:	bf00      	nop
 800401a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800401e:	46bd      	mov	sp, r7
 8004020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004024:	51eb851f 	.word	0x51eb851f

08004028 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800403a:	2b84      	cmp	r3, #132	; 0x84
 800403c:	d005      	beq.n	800404a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800403e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4413      	add	r3, r2
 8004046:	3303      	adds	r3, #3
 8004048:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800404a:	68fb      	ldr	r3, [r7, #12]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3714      	adds	r7, #20
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800405e:	f3ef 8305 	mrs	r3, IPSR
 8004062:	607b      	str	r3, [r7, #4]
  return(result);
 8004064:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004066:	2b00      	cmp	r3, #0
 8004068:	bf14      	ite	ne
 800406a:	2301      	movne	r3, #1
 800406c:	2300      	moveq	r3, #0
 800406e:	b2db      	uxtb	r3, r3
}
 8004070:	4618      	mov	r0, r3
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004080:	f001 f926 	bl	80052d0 <vTaskStartScheduler>
  
  return osOK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	bd80      	pop	{r7, pc}

0800408a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800408a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800408c:	b089      	sub	sp, #36	; 0x24
 800408e:	af04      	add	r7, sp, #16
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d020      	beq.n	80040de <osThreadCreate+0x54>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d01c      	beq.n	80040de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685c      	ldr	r4, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691e      	ldr	r6, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff ffb6 	bl	8004028 <makeFreeRtosPriority>
 80040bc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040c6:	9202      	str	r2, [sp, #8]
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	9100      	str	r1, [sp, #0]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	4632      	mov	r2, r6
 80040d0:	4629      	mov	r1, r5
 80040d2:	4620      	mov	r0, r4
 80040d4:	f000 ff1e 	bl	8004f14 <xTaskCreateStatic>
 80040d8:	4603      	mov	r3, r0
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	e01c      	b.n	8004118 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685c      	ldr	r4, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040ea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff ff98 	bl	8004028 <makeFreeRtosPriority>
 80040f8:	4602      	mov	r2, r0
 80040fa:	f107 030c 	add.w	r3, r7, #12
 80040fe:	9301      	str	r3, [sp, #4]
 8004100:	9200      	str	r2, [sp, #0]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	4632      	mov	r2, r6
 8004106:	4629      	mov	r1, r5
 8004108:	4620      	mov	r0, r4
 800410a:	f000 ff60 	bl	8004fce <xTaskCreate>
 800410e:	4603      	mov	r3, r0
 8004110:	2b01      	cmp	r3, #1
 8004112:	d001      	beq.n	8004118 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004114:	2300      	movs	r3, #0
 8004116:	e000      	b.n	800411a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004118:	68fb      	ldr	r3, [r7, #12]
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004122 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b084      	sub	sp, #16
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <osDelay+0x16>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	e000      	b.n	800413a <osDelay+0x18>
 8004138:	2301      	movs	r3, #1
 800413a:	4618      	mov	r0, r3
 800413c:	f001 f894 	bl	8005268 <vTaskDelay>
  
  return osOK;
 8004140:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800414a:	b580      	push	{r7, lr}
 800414c:	b086      	sub	sp, #24
 800414e:	af02      	add	r7, sp, #8
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00f      	beq.n	800417c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d10a      	bne.n	8004178 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2203      	movs	r2, #3
 8004168:	9200      	str	r2, [sp, #0]
 800416a:	2200      	movs	r2, #0
 800416c:	2100      	movs	r1, #0
 800416e:	2001      	movs	r0, #1
 8004170:	f000 f9be 	bl	80044f0 <xQueueGenericCreateStatic>
 8004174:	4603      	mov	r3, r0
 8004176:	e016      	b.n	80041a6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004178:	2300      	movs	r3, #0
 800417a:	e014      	b.n	80041a6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d110      	bne.n	80041a4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004182:	2203      	movs	r2, #3
 8004184:	2100      	movs	r1, #0
 8004186:	2001      	movs	r0, #1
 8004188:	f000 fa2a 	bl	80045e0 <xQueueGenericCreate>
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <osSemaphoreCreate+0x56>
 8004194:	2300      	movs	r3, #0
 8004196:	2200      	movs	r2, #0
 8004198:	2100      	movs	r1, #0
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 fa7a 	bl	8004694 <xQueueGenericSend>
      return sema;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	e000      	b.n	80041a6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80041a4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80041ba:	2300      	movs	r3, #0
 80041bc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	e03a      	b.n	800423e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	d103      	bne.n	80041dc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80041d4:	f04f 33ff 	mov.w	r3, #4294967295
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	e009      	b.n	80041f0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d006      	beq.n	80041f0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <osSemaphoreWait+0x40>
      ticks = 1;
 80041ec:	2301      	movs	r3, #1
 80041ee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80041f0:	f7ff ff32 	bl	8004058 <inHandlerMode>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d017      	beq.n	800422a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80041fa:	f107 0308 	add.w	r3, r7, #8
 80041fe:	461a      	mov	r2, r3
 8004200:	2100      	movs	r1, #0
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fcde 	bl	8004bc4 <xQueueReceiveFromISR>
 8004208:	4603      	mov	r3, r0
 800420a:	2b01      	cmp	r3, #1
 800420c:	d001      	beq.n	8004212 <osSemaphoreWait+0x62>
      return osErrorOS;
 800420e:	23ff      	movs	r3, #255	; 0xff
 8004210:	e015      	b.n	800423e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d011      	beq.n	800423c <osSemaphoreWait+0x8c>
 8004218:	4b0b      	ldr	r3, [pc, #44]	; (8004248 <osSemaphoreWait+0x98>)
 800421a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	e008      	b.n	800423c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800422a:	68f9      	ldr	r1, [r7, #12]
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 fbbd 	bl	80049ac <xQueueSemaphoreTake>
 8004232:	4603      	mov	r3, r0
 8004234:	2b01      	cmp	r3, #1
 8004236:	d001      	beq.n	800423c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004238:	23ff      	movs	r3, #255	; 0xff
 800423a:	e000      	b.n	800423e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004258:	2300      	movs	r3, #0
 800425a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800425c:	f7ff fefc 	bl	8004058 <inHandlerMode>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d016      	beq.n	8004294 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004266:	f107 0308 	add.w	r3, r7, #8
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fb0f 	bl	8004890 <xQueueGiveFromISR>
 8004272:	4603      	mov	r3, r0
 8004274:	2b01      	cmp	r3, #1
 8004276:	d001      	beq.n	800427c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004278:	23ff      	movs	r3, #255	; 0xff
 800427a:	e017      	b.n	80042ac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d013      	beq.n	80042aa <osSemaphoreRelease+0x5e>
 8004282:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <osSemaphoreRelease+0x68>)
 8004284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	e00a      	b.n	80042aa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004294:	2300      	movs	r3, #0
 8004296:	2200      	movs	r2, #0
 8004298:	2100      	movs	r1, #0
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f9fa 	bl	8004694 <xQueueGenericSend>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d001      	beq.n	80042aa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80042a6:	23ff      	movs	r3, #255	; 0xff
 80042a8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80042aa:	68fb      	ldr	r3, [r7, #12]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	e000ed04 	.word	0xe000ed04

080042b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f103 0208 	add.w	r2, r3, #8
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f04f 32ff 	mov.w	r2, #4294967295
 80042d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f103 0208 	add.w	r2, r3, #8
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f103 0208 	add.w	r2, r3, #8
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004312:	b480      	push	{r7}
 8004314:	b085      	sub	sp, #20
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
 800431a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	601a      	str	r2, [r3, #0]
}
 800434e:	bf00      	nop
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800435a:	b480      	push	{r7}
 800435c:	b085      	sub	sp, #20
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004370:	d103      	bne.n	800437a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	e00c      	b.n	8004394 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3308      	adds	r3, #8
 800437e:	60fb      	str	r3, [r7, #12]
 8004380:	e002      	b.n	8004388 <vListInsert+0x2e>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	429a      	cmp	r2, r3
 8004392:	d2f6      	bcs.n	8004382 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	601a      	str	r2, [r3, #0]
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6892      	ldr	r2, [r2, #8]
 80043e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6852      	ldr	r2, [r2, #4]
 80043ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d103      	bne.n	8004400 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	1e5a      	subs	r2, r3, #1
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10a      	bne.n	800444a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004446:	bf00      	nop
 8004448:	e7fe      	b.n	8004448 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800444a:	f001 fea3 	bl	8006194 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	68f9      	ldr	r1, [r7, #12]
 8004458:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800445a:	fb01 f303 	mul.w	r3, r1, r3
 800445e:	441a      	add	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	3b01      	subs	r3, #1
 800447c:	68f9      	ldr	r1, [r7, #12]
 800447e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004480:	fb01 f303 	mul.w	r3, r1, r3
 8004484:	441a      	add	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	22ff      	movs	r2, #255	; 0xff
 800448e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	22ff      	movs	r2, #255	; 0xff
 8004496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d114      	bne.n	80044ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d01a      	beq.n	80044de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3310      	adds	r3, #16
 80044ac:	4618      	mov	r0, r3
 80044ae:	f001 f961 	bl	8005774 <xTaskRemoveFromEventList>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d012      	beq.n	80044de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <xQueueGenericReset+0xcc>)
 80044ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	e009      	b.n	80044de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	3310      	adds	r3, #16
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff fef2 	bl	80042b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3324      	adds	r3, #36	; 0x24
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff feed 	bl	80042b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044de:	f001 fe89 	bl	80061f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044e2:	2301      	movs	r3, #1
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	e000ed04 	.word	0xe000ed04

080044f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08e      	sub	sp, #56	; 0x38
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004516:	bf00      	nop
 8004518:	e7fe      	b.n	8004518 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10a      	bne.n	8004536 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <xQueueGenericCreateStatic+0x52>
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <xQueueGenericCreateStatic+0x56>
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <xQueueGenericCreateStatic+0x58>
 8004546:	2300      	movs	r3, #0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	623b      	str	r3, [r7, #32]
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d102      	bne.n	800456e <xQueueGenericCreateStatic+0x7e>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <xQueueGenericCreateStatic+0x82>
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <xQueueGenericCreateStatic+0x84>
 8004572:	2300      	movs	r3, #0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10a      	bne.n	800458e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	61fb      	str	r3, [r7, #28]
}
 800458a:	bf00      	nop
 800458c:	e7fe      	b.n	800458c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800458e:	2348      	movs	r3, #72	; 0x48
 8004590:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b48      	cmp	r3, #72	; 0x48
 8004596:	d00a      	beq.n	80045ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	61bb      	str	r3, [r7, #24]
}
 80045aa:	bf00      	nop
 80045ac:	e7fe      	b.n	80045ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80045ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80045b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00d      	beq.n	80045d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	4613      	mov	r3, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f83f 	bl	8004654 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80045d8:	4618      	mov	r0, r3
 80045da:	3730      	adds	r7, #48	; 0x30
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	; 0x28
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	4613      	mov	r3, r2
 80045ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10a      	bne.n	800460a <xQueueGenericCreate+0x2a>
	__asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	613b      	str	r3, [r7, #16]
}
 8004606:	bf00      	nop
 8004608:	e7fe      	b.n	8004608 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	fb02 f303 	mul.w	r3, r2, r3
 8004612:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	3348      	adds	r3, #72	; 0x48
 8004618:	4618      	mov	r0, r3
 800461a:	f001 fedd 	bl	80063d8 <pvPortMalloc>
 800461e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d011      	beq.n	800464a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	3348      	adds	r3, #72	; 0x48
 800462e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004638:	79fa      	ldrb	r2, [r7, #7]
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	4613      	mov	r3, r2
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f805 	bl	8004654 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800464a:	69bb      	ldr	r3, [r7, #24]
	}
 800464c:	4618      	mov	r0, r3
 800464e:	3720      	adds	r7, #32
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
 8004660:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d103      	bne.n	8004670 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e002      	b.n	8004676 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004682:	2101      	movs	r1, #1
 8004684:	69b8      	ldr	r0, [r7, #24]
 8004686:	f7ff fecb 	bl	8004420 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
	...

08004694 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08e      	sub	sp, #56	; 0x38
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80046a2:	2300      	movs	r3, #0
 80046a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <xQueueGenericSend+0x32>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <xQueueGenericSend+0x40>
 80046cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <xQueueGenericSend+0x44>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <xQueueGenericSend+0x46>
 80046d8:	2300      	movs	r3, #0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10a      	bne.n	80046f4 <xQueueGenericSend+0x60>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046f0:	bf00      	nop
 80046f2:	e7fe      	b.n	80046f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d103      	bne.n	8004702 <xQueueGenericSend+0x6e>
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <xQueueGenericSend+0x72>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <xQueueGenericSend+0x74>
 8004706:	2300      	movs	r3, #0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10a      	bne.n	8004722 <xQueueGenericSend+0x8e>
	__asm volatile
 800470c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004710:	f383 8811 	msr	BASEPRI, r3
 8004714:	f3bf 8f6f 	isb	sy
 8004718:	f3bf 8f4f 	dsb	sy
 800471c:	623b      	str	r3, [r7, #32]
}
 800471e:	bf00      	nop
 8004720:	e7fe      	b.n	8004720 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004722:	f001 f9e7 	bl	8005af4 <xTaskGetSchedulerState>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d102      	bne.n	8004732 <xQueueGenericSend+0x9e>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <xQueueGenericSend+0xa2>
 8004732:	2301      	movs	r3, #1
 8004734:	e000      	b.n	8004738 <xQueueGenericSend+0xa4>
 8004736:	2300      	movs	r3, #0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10a      	bne.n	8004752 <xQueueGenericSend+0xbe>
	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	f383 8811 	msr	BASEPRI, r3
 8004744:	f3bf 8f6f 	isb	sy
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	61fb      	str	r3, [r7, #28]
}
 800474e:	bf00      	nop
 8004750:	e7fe      	b.n	8004750 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004752:	f001 fd1f 	bl	8006194 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800475a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475e:	429a      	cmp	r2, r3
 8004760:	d302      	bcc.n	8004768 <xQueueGenericSend+0xd4>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d129      	bne.n	80047bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	68b9      	ldr	r1, [r7, #8]
 800476c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800476e:	f000 fac1 	bl	8004cf4 <prvCopyDataToQueue>
 8004772:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	2b00      	cmp	r3, #0
 800477a:	d010      	beq.n	800479e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	3324      	adds	r3, #36	; 0x24
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fff7 	bl	8005774 <xTaskRemoveFromEventList>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d013      	beq.n	80047b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800478c:	4b3f      	ldr	r3, [pc, #252]	; (800488c <xQueueGenericSend+0x1f8>)
 800478e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	f3bf 8f6f 	isb	sy
 800479c:	e00a      	b.n	80047b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d007      	beq.n	80047b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047a4:	4b39      	ldr	r3, [pc, #228]	; (800488c <xQueueGenericSend+0x1f8>)
 80047a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047b4:	f001 fd1e 	bl	80061f4 <vPortExitCritical>
				return pdPASS;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e063      	b.n	8004884 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d103      	bne.n	80047ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047c2:	f001 fd17 	bl	80061f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	e05c      	b.n	8004884 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d106      	bne.n	80047de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047d0:	f107 0314 	add.w	r3, r7, #20
 80047d4:	4618      	mov	r0, r3
 80047d6:	f001 f82f 	bl	8005838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047da:	2301      	movs	r3, #1
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047de:	f001 fd09 	bl	80061f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047e2:	f000 fddf 	bl	80053a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047e6:	f001 fcd5 	bl	8006194 <vPortEnterCritical>
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047f0:	b25b      	sxtb	r3, r3
 80047f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f6:	d103      	bne.n	8004800 <xQueueGenericSend+0x16c>
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004806:	b25b      	sxtb	r3, r3
 8004808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480c:	d103      	bne.n	8004816 <xQueueGenericSend+0x182>
 800480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004816:	f001 fced 	bl	80061f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800481a:	1d3a      	adds	r2, r7, #4
 800481c:	f107 0314 	add.w	r3, r7, #20
 8004820:	4611      	mov	r1, r2
 8004822:	4618      	mov	r0, r3
 8004824:	f001 f81e 	bl	8005864 <xTaskCheckForTimeOut>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d124      	bne.n	8004878 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800482e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004830:	f000 fb58 	bl	8004ee4 <prvIsQueueFull>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d018      	beq.n	800486c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	3310      	adds	r3, #16
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	4611      	mov	r1, r2
 8004842:	4618      	mov	r0, r3
 8004844:	f000 ff72 	bl	800572c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800484a:	f000 fae3 	bl	8004e14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800484e:	f000 fdb7 	bl	80053c0 <xTaskResumeAll>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	f47f af7c 	bne.w	8004752 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800485a:	4b0c      	ldr	r3, [pc, #48]	; (800488c <xQueueGenericSend+0x1f8>)
 800485c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	e772      	b.n	8004752 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800486c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800486e:	f000 fad1 	bl	8004e14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004872:	f000 fda5 	bl	80053c0 <xTaskResumeAll>
 8004876:	e76c      	b.n	8004752 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800487a:	f000 facb 	bl	8004e14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800487e:	f000 fd9f 	bl	80053c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004882:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004884:	4618      	mov	r0, r3
 8004886:	3738      	adds	r7, #56	; 0x38
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	e000ed04 	.word	0xe000ed04

08004890 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08e      	sub	sp, #56	; 0x38
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800489e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <xQueueGiveFromISR+0x2a>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	623b      	str	r3, [r7, #32]
}
 80048b6:	bf00      	nop
 80048b8:	e7fe      	b.n	80048b8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80048ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <xQueueGiveFromISR+0x48>
	__asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	61fb      	str	r3, [r7, #28]
}
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d103      	bne.n	80048e8 <xQueueGiveFromISR+0x58>
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <xQueueGiveFromISR+0x5c>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <xQueueGiveFromISR+0x5e>
 80048ec:	2300      	movs	r3, #0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <xQueueGiveFromISR+0x78>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	61bb      	str	r3, [r7, #24]
}
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004908:	f001 fd26 	bl	8006358 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800490c:	f3ef 8211 	mrs	r2, BASEPRI
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	617a      	str	r2, [r7, #20]
 8004922:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004924:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004934:	429a      	cmp	r2, r3
 8004936:	d22b      	bcs.n	8004990 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800493e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800494a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800494e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004952:	d112      	bne.n	800497a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	2b00      	cmp	r3, #0
 800495a:	d016      	beq.n	800498a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	3324      	adds	r3, #36	; 0x24
 8004960:	4618      	mov	r0, r3
 8004962:	f000 ff07 	bl	8005774 <xTaskRemoveFromEventList>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00e      	beq.n	800498a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00b      	beq.n	800498a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	e007      	b.n	800498a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800497a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800497e:	3301      	adds	r3, #1
 8004980:	b2db      	uxtb	r3, r3
 8004982:	b25a      	sxtb	r2, r3
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800498a:	2301      	movs	r3, #1
 800498c:	637b      	str	r3, [r7, #52]	; 0x34
 800498e:	e001      	b.n	8004994 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004990:	2300      	movs	r3, #0
 8004992:	637b      	str	r3, [r7, #52]	; 0x34
 8004994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004996:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800499e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3738      	adds	r7, #56	; 0x38
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
	...

080049ac <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08e      	sub	sp, #56	; 0x38
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80049be:	2300      	movs	r3, #0
 80049c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <xQueueSemaphoreTake+0x32>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	623b      	str	r3, [r7, #32]
}
 80049da:	bf00      	nop
 80049dc:	e7fe      	b.n	80049dc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80049de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	61fb      	str	r3, [r7, #28]
}
 80049f8:	bf00      	nop
 80049fa:	e7fe      	b.n	80049fa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049fc:	f001 f87a 	bl	8005af4 <xTaskGetSchedulerState>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d102      	bne.n	8004a0c <xQueueSemaphoreTake+0x60>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <xQueueSemaphoreTake+0x64>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <xQueueSemaphoreTake+0x66>
 8004a10:	2300      	movs	r3, #0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10a      	bne.n	8004a2c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	61bb      	str	r3, [r7, #24]
}
 8004a28:	bf00      	nop
 8004a2a:	e7fe      	b.n	8004a2a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a2c:	f001 fbb2 	bl	8006194 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d024      	beq.n	8004a86 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	1e5a      	subs	r2, r3, #1
 8004a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a42:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004a4c:	f001 f9fa 	bl	8005e44 <pvTaskIncrementMutexHeldCount>
 8004a50:	4602      	mov	r2, r0
 8004a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a54:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00f      	beq.n	8004a7e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	3310      	adds	r3, #16
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fe86 	bl	8005774 <xTaskRemoveFromEventList>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d007      	beq.n	8004a7e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a6e:	4b54      	ldr	r3, [pc, #336]	; (8004bc0 <xQueueSemaphoreTake+0x214>)
 8004a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a7e:	f001 fbb9 	bl	80061f4 <vPortExitCritical>
				return pdPASS;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e097      	b.n	8004bb6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d111      	bne.n	8004ab0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	617b      	str	r3, [r7, #20]
}
 8004aa4:	bf00      	nop
 8004aa6:	e7fe      	b.n	8004aa6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004aa8:	f001 fba4 	bl	80061f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004aac:	2300      	movs	r3, #0
 8004aae:	e082      	b.n	8004bb6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ab6:	f107 030c 	add.w	r3, r7, #12
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 febc 	bl	8005838 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ac4:	f001 fb96 	bl	80061f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ac8:	f000 fc6c 	bl	80053a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004acc:	f001 fb62 	bl	8006194 <vPortEnterCritical>
 8004ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ad6:	b25b      	sxtb	r3, r3
 8004ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004adc:	d103      	bne.n	8004ae6 <xQueueSemaphoreTake+0x13a>
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004aec:	b25b      	sxtb	r3, r3
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af2:	d103      	bne.n	8004afc <xQueueSemaphoreTake+0x150>
 8004af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004afc:	f001 fb7a 	bl	80061f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b00:	463a      	mov	r2, r7
 8004b02:	f107 030c 	add.w	r3, r7, #12
 8004b06:	4611      	mov	r1, r2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 feab 	bl	8005864 <xTaskCheckForTimeOut>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d132      	bne.n	8004b7a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b16:	f000 f9cf 	bl	8004eb8 <prvIsQueueEmpty>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d026      	beq.n	8004b6e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d109      	bne.n	8004b3c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004b28:	f001 fb34 	bl	8006194 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fffd 	bl	8005b30 <xTaskPriorityInherit>
 8004b36:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004b38:	f001 fb5c 	bl	80061f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	3324      	adds	r3, #36	; 0x24
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	4611      	mov	r1, r2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fdf1 	bl	800572c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b4c:	f000 f962 	bl	8004e14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b50:	f000 fc36 	bl	80053c0 <xTaskResumeAll>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f47f af68 	bne.w	8004a2c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004b5c:	4b18      	ldr	r3, [pc, #96]	; (8004bc0 <xQueueSemaphoreTake+0x214>)
 8004b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	e75e      	b.n	8004a2c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004b6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b70:	f000 f950 	bl	8004e14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b74:	f000 fc24 	bl	80053c0 <xTaskResumeAll>
 8004b78:	e758      	b.n	8004a2c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004b7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b7c:	f000 f94a 	bl	8004e14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b80:	f000 fc1e 	bl	80053c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b86:	f000 f997 	bl	8004eb8 <prvIsQueueEmpty>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f43f af4d 	beq.w	8004a2c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00d      	beq.n	8004bb4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004b98:	f001 fafc 	bl	8006194 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004b9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b9e:	f000 f891 	bl	8004cc4 <prvGetDisinheritPriorityAfterTimeout>
 8004ba2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004baa:	4618      	mov	r0, r3
 8004bac:	f001 f8bc 	bl	8005d28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004bb0:	f001 fb20 	bl	80061f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3738      	adds	r7, #56	; 0x38
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	e000ed04 	.word	0xe000ed04

08004bc4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b08e      	sub	sp, #56	; 0x38
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10a      	bne.n	8004bf0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	623b      	str	r3, [r7, #32]
}
 8004bec:	bf00      	nop
 8004bee:	e7fe      	b.n	8004bee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d103      	bne.n	8004bfe <xQueueReceiveFromISR+0x3a>
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <xQueueReceiveFromISR+0x3e>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e000      	b.n	8004c04 <xQueueReceiveFromISR+0x40>
 8004c02:	2300      	movs	r3, #0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	61fb      	str	r3, [r7, #28]
}
 8004c1a:	bf00      	nop
 8004c1c:	e7fe      	b.n	8004c1c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c1e:	f001 fb9b 	bl	8006358 <vPortValidateInterruptPriority>
	__asm volatile
 8004c22:	f3ef 8211 	mrs	r2, BASEPRI
 8004c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	61ba      	str	r2, [r7, #24]
 8004c38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004c3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d02f      	beq.n	8004caa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c58:	f000 f8b6 	bl	8004dc8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	1e5a      	subs	r2, r3, #1
 8004c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c62:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004c64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d112      	bne.n	8004c94 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d016      	beq.n	8004ca4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	3310      	adds	r3, #16
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fd7a 	bl	8005774 <xTaskRemoveFromEventList>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00e      	beq.n	8004ca4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00b      	beq.n	8004ca4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	e007      	b.n	8004ca4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c98:	3301      	adds	r3, #1
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	b25a      	sxtb	r2, r3
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ca8:	e001      	b.n	8004cae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	637b      	str	r3, [r7, #52]	; 0x34
 8004cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f383 8811 	msr	BASEPRI, r3
}
 8004cb8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3738      	adds	r7, #56	; 0x38
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d006      	beq.n	8004ce2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f1c3 0307 	rsb	r3, r3, #7
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	e001      	b.n	8004ce6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
	}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10d      	bne.n	8004d2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d14d      	bne.n	8004db6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 ff7c 	bl	8005c1c <xTaskPriorityDisinherit>
 8004d24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	609a      	str	r2, [r3, #8]
 8004d2c:	e043      	b.n	8004db6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d119      	bne.n	8004d68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6858      	ldr	r0, [r3, #4]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	68b9      	ldr	r1, [r7, #8]
 8004d40:	f002 f8db 	bl	8006efa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	441a      	add	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d32b      	bcc.n	8004db6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	605a      	str	r2, [r3, #4]
 8004d66:	e026      	b.n	8004db6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	68d8      	ldr	r0, [r3, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d70:	461a      	mov	r2, r3
 8004d72:	68b9      	ldr	r1, [r7, #8]
 8004d74:	f002 f8c1 	bl	8006efa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	425b      	negs	r3, r3
 8004d82:	441a      	add	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d207      	bcs.n	8004da4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	425b      	negs	r3, r3
 8004d9e:	441a      	add	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d105      	bne.n	8004db6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	3b01      	subs	r3, #1
 8004db4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004dbe:	697b      	ldr	r3, [r7, #20]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d018      	beq.n	8004e0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	441a      	add	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d303      	bcc.n	8004dfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68d9      	ldr	r1, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	461a      	mov	r2, r3
 8004e06:	6838      	ldr	r0, [r7, #0]
 8004e08:	f002 f877 	bl	8006efa <memcpy>
	}
}
 8004e0c:	bf00      	nop
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e1c:	f001 f9ba 	bl	8006194 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e28:	e011      	b.n	8004e4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d012      	beq.n	8004e58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3324      	adds	r3, #36	; 0x24
 8004e36:	4618      	mov	r0, r3
 8004e38:	f000 fc9c 	bl	8005774 <xTaskRemoveFromEventList>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e42:	f000 fd71 	bl	8005928 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e46:	7bfb      	ldrb	r3, [r7, #15]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	dce9      	bgt.n	8004e2a <prvUnlockQueue+0x16>
 8004e56:	e000      	b.n	8004e5a <prvUnlockQueue+0x46>
					break;
 8004e58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	22ff      	movs	r2, #255	; 0xff
 8004e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e62:	f001 f9c7 	bl	80061f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e66:	f001 f995 	bl	8006194 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e72:	e011      	b.n	8004e98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d012      	beq.n	8004ea2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3310      	adds	r3, #16
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fc77 	bl	8005774 <xTaskRemoveFromEventList>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e8c:	f000 fd4c 	bl	8005928 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e90:	7bbb      	ldrb	r3, [r7, #14]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	dce9      	bgt.n	8004e74 <prvUnlockQueue+0x60>
 8004ea0:	e000      	b.n	8004ea4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ea2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	22ff      	movs	r2, #255	; 0xff
 8004ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004eac:	f001 f9a2 	bl	80061f4 <vPortExitCritical>
}
 8004eb0:	bf00      	nop
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ec0:	f001 f968 	bl	8006194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d102      	bne.n	8004ed2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	60fb      	str	r3, [r7, #12]
 8004ed0:	e001      	b.n	8004ed6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ed6:	f001 f98d 	bl	80061f4 <vPortExitCritical>

	return xReturn;
 8004eda:	68fb      	ldr	r3, [r7, #12]
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004eec:	f001 f952 	bl	8006194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d102      	bne.n	8004f02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004efc:	2301      	movs	r3, #1
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	e001      	b.n	8004f06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f06:	f001 f975 	bl	80061f4 <vPortExitCritical>

	return xReturn;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08e      	sub	sp, #56	; 0x38
 8004f18:	af04      	add	r7, sp, #16
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	623b      	str	r3, [r7, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	e7fe      	b.n	8004f3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10a      	bne.n	8004f5a <xTaskCreateStatic+0x46>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	61fb      	str	r3, [r7, #28]
}
 8004f56:	bf00      	nop
 8004f58:	e7fe      	b.n	8004f58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f5a:	23a0      	movs	r3, #160	; 0xa0
 8004f5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2ba0      	cmp	r3, #160	; 0xa0
 8004f62:	d00a      	beq.n	8004f7a <xTaskCreateStatic+0x66>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	61bb      	str	r3, [r7, #24]
}
 8004f76:	bf00      	nop
 8004f78:	e7fe      	b.n	8004f78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01e      	beq.n	8004fc0 <xTaskCreateStatic+0xac>
 8004f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01b      	beq.n	8004fc0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	2202      	movs	r2, #2
 8004f96:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	9303      	str	r3, [sp, #12]
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	9302      	str	r3, [sp, #8]
 8004fa2:	f107 0314 	add.w	r3, r7, #20
 8004fa6:	9301      	str	r3, [sp, #4]
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 f850 	bl	8005058 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fba:	f000 f8eb 	bl	8005194 <prvAddNewTaskToReadyList>
 8004fbe:	e001      	b.n	8004fc4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004fc4:	697b      	ldr	r3, [r7, #20]
	}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3728      	adds	r7, #40	; 0x28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b08c      	sub	sp, #48	; 0x30
 8004fd2:	af04      	add	r7, sp, #16
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	603b      	str	r3, [r7, #0]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004fde:	88fb      	ldrh	r3, [r7, #6]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f001 f9f8 	bl	80063d8 <pvPortMalloc>
 8004fe8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00e      	beq.n	800500e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ff0:	20a0      	movs	r0, #160	; 0xa0
 8004ff2:	f001 f9f1 	bl	80063d8 <pvPortMalloc>
 8004ff6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
 8005004:	e005      	b.n	8005012 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005006:	6978      	ldr	r0, [r7, #20]
 8005008:	f001 fab2 	bl	8006570 <vPortFree>
 800500c:	e001      	b.n	8005012 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800500e:	2300      	movs	r3, #0
 8005010:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d017      	beq.n	8005048 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005020:	88fa      	ldrh	r2, [r7, #6]
 8005022:	2300      	movs	r3, #0
 8005024:	9303      	str	r3, [sp, #12]
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	9302      	str	r3, [sp, #8]
 800502a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502c:	9301      	str	r3, [sp, #4]
 800502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	68b9      	ldr	r1, [r7, #8]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f80e 	bl	8005058 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800503c:	69f8      	ldr	r0, [r7, #28]
 800503e:	f000 f8a9 	bl	8005194 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005042:	2301      	movs	r3, #1
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	e002      	b.n	800504e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005048:	f04f 33ff 	mov.w	r3, #4294967295
 800504c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800504e:	69bb      	ldr	r3, [r7, #24]
	}
 8005050:	4618      	mov	r0, r3
 8005052:	3720      	adds	r7, #32
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005070:	3b01      	subs	r3, #1
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	f023 0307 	bic.w	r3, r3, #7
 800507e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	617b      	str	r3, [r7, #20]
}
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01f      	beq.n	80050e6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050a6:	2300      	movs	r3, #0
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	e012      	b.n	80050d2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	4413      	add	r3, r2
 80050b2:	7819      	ldrb	r1, [r3, #0]
 80050b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	3334      	adds	r3, #52	; 0x34
 80050bc:	460a      	mov	r2, r1
 80050be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d006      	beq.n	80050da <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	3301      	adds	r3, #1
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	2b0f      	cmp	r3, #15
 80050d6:	d9e9      	bls.n	80050ac <prvInitialiseNewTask+0x54>
 80050d8:	e000      	b.n	80050dc <prvInitialiseNewTask+0x84>
			{
				break;
 80050da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050e4:	e003      	b.n	80050ee <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f0:	2b06      	cmp	r3, #6
 80050f2:	d901      	bls.n	80050f8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050f4:	2306      	movs	r3, #6
 80050f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005102:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	2200      	movs	r2, #0
 8005108:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	3304      	adds	r3, #4
 800510e:	4618      	mov	r0, r3
 8005110:	f7ff f8f2 	bl	80042f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005116:	3318      	adds	r3, #24
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff f8ed 	bl	80042f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005122:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	f1c3 0207 	rsb	r2, r3, #7
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005132:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005136:	2200      	movs	r2, #0
 8005138:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513e:	2200      	movs	r2, #0
 8005140:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	334c      	adds	r3, #76	; 0x4c
 8005148:	224c      	movs	r2, #76	; 0x4c
 800514a:	2100      	movs	r1, #0
 800514c:	4618      	mov	r0, r3
 800514e:	f001 fe03 	bl	8006d58 <memset>
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	4a0c      	ldr	r2, [pc, #48]	; (8005188 <prvInitialiseNewTask+0x130>)
 8005156:	651a      	str	r2, [r3, #80]	; 0x50
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	4a0c      	ldr	r2, [pc, #48]	; (800518c <prvInitialiseNewTask+0x134>)
 800515c:	655a      	str	r2, [r3, #84]	; 0x54
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	4a0b      	ldr	r2, [pc, #44]	; (8005190 <prvInitialiseNewTask+0x138>)
 8005162:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	68f9      	ldr	r1, [r7, #12]
 8005168:	69b8      	ldr	r0, [r7, #24]
 800516a:	f000 fee5 	bl	8005f38 <pxPortInitialiseStack>
 800516e:	4602      	mov	r2, r0
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800517e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005180:	bf00      	nop
 8005182:	3720      	adds	r7, #32
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	200041cc 	.word	0x200041cc
 800518c:	20004234 	.word	0x20004234
 8005190:	2000429c 	.word	0x2000429c

08005194 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800519c:	f000 fffa 	bl	8006194 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80051a0:	4b2a      	ldr	r3, [pc, #168]	; (800524c <prvAddNewTaskToReadyList+0xb8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3301      	adds	r3, #1
 80051a6:	4a29      	ldr	r2, [pc, #164]	; (800524c <prvAddNewTaskToReadyList+0xb8>)
 80051a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80051aa:	4b29      	ldr	r3, [pc, #164]	; (8005250 <prvAddNewTaskToReadyList+0xbc>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d109      	bne.n	80051c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80051b2:	4a27      	ldr	r2, [pc, #156]	; (8005250 <prvAddNewTaskToReadyList+0xbc>)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80051b8:	4b24      	ldr	r3, [pc, #144]	; (800524c <prvAddNewTaskToReadyList+0xb8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d110      	bne.n	80051e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80051c0:	f000 fbd6 	bl	8005970 <prvInitialiseTaskLists>
 80051c4:	e00d      	b.n	80051e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80051c6:	4b23      	ldr	r3, [pc, #140]	; (8005254 <prvAddNewTaskToReadyList+0xc0>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d109      	bne.n	80051e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80051ce:	4b20      	ldr	r3, [pc, #128]	; (8005250 <prvAddNewTaskToReadyList+0xbc>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d8:	429a      	cmp	r2, r3
 80051da:	d802      	bhi.n	80051e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80051dc:	4a1c      	ldr	r2, [pc, #112]	; (8005250 <prvAddNewTaskToReadyList+0xbc>)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80051e2:	4b1d      	ldr	r3, [pc, #116]	; (8005258 <prvAddNewTaskToReadyList+0xc4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3301      	adds	r3, #1
 80051e8:	4a1b      	ldr	r2, [pc, #108]	; (8005258 <prvAddNewTaskToReadyList+0xc4>)
 80051ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f0:	2201      	movs	r2, #1
 80051f2:	409a      	lsls	r2, r3
 80051f4:	4b19      	ldr	r3, [pc, #100]	; (800525c <prvAddNewTaskToReadyList+0xc8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	4a18      	ldr	r2, [pc, #96]	; (800525c <prvAddNewTaskToReadyList+0xc8>)
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4a15      	ldr	r2, [pc, #84]	; (8005260 <prvAddNewTaskToReadyList+0xcc>)
 800520c:	441a      	add	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3304      	adds	r3, #4
 8005212:	4619      	mov	r1, r3
 8005214:	4610      	mov	r0, r2
 8005216:	f7ff f87c 	bl	8004312 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800521a:	f000 ffeb 	bl	80061f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800521e:	4b0d      	ldr	r3, [pc, #52]	; (8005254 <prvAddNewTaskToReadyList+0xc0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00e      	beq.n	8005244 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005226:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <prvAddNewTaskToReadyList+0xbc>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	429a      	cmp	r2, r3
 8005232:	d207      	bcs.n	8005244 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005234:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <prvAddNewTaskToReadyList+0xd0>)
 8005236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005244:	bf00      	nop
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20000578 	.word	0x20000578
 8005250:	20000478 	.word	0x20000478
 8005254:	20000584 	.word	0x20000584
 8005258:	20000594 	.word	0x20000594
 800525c:	20000580 	.word	0x20000580
 8005260:	2000047c 	.word	0x2000047c
 8005264:	e000ed04 	.word	0xe000ed04

08005268 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d017      	beq.n	80052aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800527a:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <vTaskDelay+0x60>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00a      	beq.n	8005298 <vTaskDelay+0x30>
	__asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	60bb      	str	r3, [r7, #8]
}
 8005294:	bf00      	nop
 8005296:	e7fe      	b.n	8005296 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005298:	f000 f884 	bl	80053a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800529c:	2100      	movs	r1, #0
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fde4 	bl	8005e6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80052a4:	f000 f88c 	bl	80053c0 <xTaskResumeAll>
 80052a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d107      	bne.n	80052c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80052b0:	4b06      	ldr	r3, [pc, #24]	; (80052cc <vTaskDelay+0x64>)
 80052b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052c0:	bf00      	nop
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	200005a0 	.word	0x200005a0
 80052cc:	e000ed04 	.word	0xe000ed04

080052d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08a      	sub	sp, #40	; 0x28
 80052d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80052de:	463a      	mov	r2, r7
 80052e0:	1d39      	adds	r1, r7, #4
 80052e2:	f107 0308 	add.w	r3, r7, #8
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fb fe56 	bl	8000f98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80052ec:	6839      	ldr	r1, [r7, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	9202      	str	r2, [sp, #8]
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	2300      	movs	r3, #0
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	2300      	movs	r3, #0
 80052fc:	460a      	mov	r2, r1
 80052fe:	4921      	ldr	r1, [pc, #132]	; (8005384 <vTaskStartScheduler+0xb4>)
 8005300:	4821      	ldr	r0, [pc, #132]	; (8005388 <vTaskStartScheduler+0xb8>)
 8005302:	f7ff fe07 	bl	8004f14 <xTaskCreateStatic>
 8005306:	4603      	mov	r3, r0
 8005308:	4a20      	ldr	r2, [pc, #128]	; (800538c <vTaskStartScheduler+0xbc>)
 800530a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800530c:	4b1f      	ldr	r3, [pc, #124]	; (800538c <vTaskStartScheduler+0xbc>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005314:	2301      	movs	r3, #1
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e001      	b.n	800531e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800531a:	2300      	movs	r3, #0
 800531c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d11b      	bne.n	800535c <vTaskStartScheduler+0x8c>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	613b      	str	r3, [r7, #16]
}
 8005336:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005338:	4b15      	ldr	r3, [pc, #84]	; (8005390 <vTaskStartScheduler+0xc0>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	334c      	adds	r3, #76	; 0x4c
 800533e:	4a15      	ldr	r2, [pc, #84]	; (8005394 <vTaskStartScheduler+0xc4>)
 8005340:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005342:	4b15      	ldr	r3, [pc, #84]	; (8005398 <vTaskStartScheduler+0xc8>)
 8005344:	f04f 32ff 	mov.w	r2, #4294967295
 8005348:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800534a:	4b14      	ldr	r3, [pc, #80]	; (800539c <vTaskStartScheduler+0xcc>)
 800534c:	2201      	movs	r2, #1
 800534e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005350:	4b13      	ldr	r3, [pc, #76]	; (80053a0 <vTaskStartScheduler+0xd0>)
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005356:	f000 fe7b 	bl	8006050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800535a:	e00e      	b.n	800537a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005362:	d10a      	bne.n	800537a <vTaskStartScheduler+0xaa>
	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	60fb      	str	r3, [r7, #12]
}
 8005376:	bf00      	nop
 8005378:	e7fe      	b.n	8005378 <vTaskStartScheduler+0xa8>
}
 800537a:	bf00      	nop
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	08007e2c 	.word	0x08007e2c
 8005388:	08005941 	.word	0x08005941
 800538c:	2000059c 	.word	0x2000059c
 8005390:	20000478 	.word	0x20000478
 8005394:	20000068 	.word	0x20000068
 8005398:	20000598 	.word	0x20000598
 800539c:	20000584 	.word	0x20000584
 80053a0:	2000057c 	.word	0x2000057c

080053a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80053a8:	4b04      	ldr	r3, [pc, #16]	; (80053bc <vTaskSuspendAll+0x18>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3301      	adds	r3, #1
 80053ae:	4a03      	ldr	r2, [pc, #12]	; (80053bc <vTaskSuspendAll+0x18>)
 80053b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80053b2:	bf00      	nop
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	200005a0 	.word	0x200005a0

080053c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053ca:	2300      	movs	r3, #0
 80053cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053ce:	4b41      	ldr	r3, [pc, #260]	; (80054d4 <xTaskResumeAll+0x114>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10a      	bne.n	80053ec <xTaskResumeAll+0x2c>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	603b      	str	r3, [r7, #0]
}
 80053e8:	bf00      	nop
 80053ea:	e7fe      	b.n	80053ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80053ec:	f000 fed2 	bl	8006194 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80053f0:	4b38      	ldr	r3, [pc, #224]	; (80054d4 <xTaskResumeAll+0x114>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	4a37      	ldr	r2, [pc, #220]	; (80054d4 <xTaskResumeAll+0x114>)
 80053f8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053fa:	4b36      	ldr	r3, [pc, #216]	; (80054d4 <xTaskResumeAll+0x114>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d161      	bne.n	80054c6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005402:	4b35      	ldr	r3, [pc, #212]	; (80054d8 <xTaskResumeAll+0x118>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d05d      	beq.n	80054c6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800540a:	e02e      	b.n	800546a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800540c:	4b33      	ldr	r3, [pc, #204]	; (80054dc <xTaskResumeAll+0x11c>)
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	3318      	adds	r3, #24
 8005418:	4618      	mov	r0, r3
 800541a:	f7fe ffd7 	bl	80043cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3304      	adds	r3, #4
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe ffd2 	bl	80043cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	2201      	movs	r2, #1
 800542e:	409a      	lsls	r2, r3
 8005430:	4b2b      	ldr	r3, [pc, #172]	; (80054e0 <xTaskResumeAll+0x120>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4313      	orrs	r3, r2
 8005436:	4a2a      	ldr	r2, [pc, #168]	; (80054e0 <xTaskResumeAll+0x120>)
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543e:	4613      	mov	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4a27      	ldr	r2, [pc, #156]	; (80054e4 <xTaskResumeAll+0x124>)
 8005448:	441a      	add	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3304      	adds	r3, #4
 800544e:	4619      	mov	r1, r3
 8005450:	4610      	mov	r0, r2
 8005452:	f7fe ff5e 	bl	8004312 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545a:	4b23      	ldr	r3, [pc, #140]	; (80054e8 <xTaskResumeAll+0x128>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005460:	429a      	cmp	r2, r3
 8005462:	d302      	bcc.n	800546a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005464:	4b21      	ldr	r3, [pc, #132]	; (80054ec <xTaskResumeAll+0x12c>)
 8005466:	2201      	movs	r2, #1
 8005468:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800546a:	4b1c      	ldr	r3, [pc, #112]	; (80054dc <xTaskResumeAll+0x11c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1cc      	bne.n	800540c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005478:	f000 fb1c 	bl	8005ab4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800547c:	4b1c      	ldr	r3, [pc, #112]	; (80054f0 <xTaskResumeAll+0x130>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d010      	beq.n	80054aa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005488:	f000 f836 	bl	80054f8 <xTaskIncrementTick>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005492:	4b16      	ldr	r3, [pc, #88]	; (80054ec <xTaskResumeAll+0x12c>)
 8005494:	2201      	movs	r2, #1
 8005496:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3b01      	subs	r3, #1
 800549c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1f1      	bne.n	8005488 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80054a4:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <xTaskResumeAll+0x130>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80054aa:	4b10      	ldr	r3, [pc, #64]	; (80054ec <xTaskResumeAll+0x12c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d009      	beq.n	80054c6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80054b2:	2301      	movs	r3, #1
 80054b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054b6:	4b0f      	ldr	r3, [pc, #60]	; (80054f4 <xTaskResumeAll+0x134>)
 80054b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054c6:	f000 fe95 	bl	80061f4 <vPortExitCritical>

	return xAlreadyYielded;
 80054ca:	68bb      	ldr	r3, [r7, #8]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	200005a0 	.word	0x200005a0
 80054d8:	20000578 	.word	0x20000578
 80054dc:	20000538 	.word	0x20000538
 80054e0:	20000580 	.word	0x20000580
 80054e4:	2000047c 	.word	0x2000047c
 80054e8:	20000478 	.word	0x20000478
 80054ec:	2000058c 	.word	0x2000058c
 80054f0:	20000588 	.word	0x20000588
 80054f4:	e000ed04 	.word	0xe000ed04

080054f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005502:	4b4e      	ldr	r3, [pc, #312]	; (800563c <xTaskIncrementTick+0x144>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	f040 808e 	bne.w	8005628 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800550c:	4b4c      	ldr	r3, [pc, #304]	; (8005640 <xTaskIncrementTick+0x148>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3301      	adds	r3, #1
 8005512:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005514:	4a4a      	ldr	r2, [pc, #296]	; (8005640 <xTaskIncrementTick+0x148>)
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d120      	bne.n	8005562 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005520:	4b48      	ldr	r3, [pc, #288]	; (8005644 <xTaskIncrementTick+0x14c>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <xTaskIncrementTick+0x48>
	__asm volatile
 800552a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552e:	f383 8811 	msr	BASEPRI, r3
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	603b      	str	r3, [r7, #0]
}
 800553c:	bf00      	nop
 800553e:	e7fe      	b.n	800553e <xTaskIncrementTick+0x46>
 8005540:	4b40      	ldr	r3, [pc, #256]	; (8005644 <xTaskIncrementTick+0x14c>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	4b40      	ldr	r3, [pc, #256]	; (8005648 <xTaskIncrementTick+0x150>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a3e      	ldr	r2, [pc, #248]	; (8005644 <xTaskIncrementTick+0x14c>)
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	4a3e      	ldr	r2, [pc, #248]	; (8005648 <xTaskIncrementTick+0x150>)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	4b3d      	ldr	r3, [pc, #244]	; (800564c <xTaskIncrementTick+0x154>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3301      	adds	r3, #1
 800555a:	4a3c      	ldr	r2, [pc, #240]	; (800564c <xTaskIncrementTick+0x154>)
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	f000 faa9 	bl	8005ab4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005562:	4b3b      	ldr	r3, [pc, #236]	; (8005650 <xTaskIncrementTick+0x158>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	429a      	cmp	r2, r3
 800556a:	d348      	bcc.n	80055fe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800556c:	4b35      	ldr	r3, [pc, #212]	; (8005644 <xTaskIncrementTick+0x14c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d104      	bne.n	8005580 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005576:	4b36      	ldr	r3, [pc, #216]	; (8005650 <xTaskIncrementTick+0x158>)
 8005578:	f04f 32ff 	mov.w	r2, #4294967295
 800557c:	601a      	str	r2, [r3, #0]
					break;
 800557e:	e03e      	b.n	80055fe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005580:	4b30      	ldr	r3, [pc, #192]	; (8005644 <xTaskIncrementTick+0x14c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	429a      	cmp	r2, r3
 8005596:	d203      	bcs.n	80055a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005598:	4a2d      	ldr	r2, [pc, #180]	; (8005650 <xTaskIncrementTick+0x158>)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800559e:	e02e      	b.n	80055fe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fe ff11 	bl	80043cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d004      	beq.n	80055bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	3318      	adds	r3, #24
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fe ff08 	bl	80043cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	2201      	movs	r2, #1
 80055c2:	409a      	lsls	r2, r3
 80055c4:	4b23      	ldr	r3, [pc, #140]	; (8005654 <xTaskIncrementTick+0x15c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	4a22      	ldr	r2, [pc, #136]	; (8005654 <xTaskIncrementTick+0x15c>)
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4a1f      	ldr	r2, [pc, #124]	; (8005658 <xTaskIncrementTick+0x160>)
 80055dc:	441a      	add	r2, r3
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	3304      	adds	r3, #4
 80055e2:	4619      	mov	r1, r3
 80055e4:	4610      	mov	r0, r2
 80055e6:	f7fe fe94 	bl	8004312 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ee:	4b1b      	ldr	r3, [pc, #108]	; (800565c <xTaskIncrementTick+0x164>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d3b9      	bcc.n	800556c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80055f8:	2301      	movs	r3, #1
 80055fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055fc:	e7b6      	b.n	800556c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055fe:	4b17      	ldr	r3, [pc, #92]	; (800565c <xTaskIncrementTick+0x164>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005604:	4914      	ldr	r1, [pc, #80]	; (8005658 <xTaskIncrementTick+0x160>)
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d901      	bls.n	800561a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005616:	2301      	movs	r3, #1
 8005618:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800561a:	4b11      	ldr	r3, [pc, #68]	; (8005660 <xTaskIncrementTick+0x168>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d007      	beq.n	8005632 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005622:	2301      	movs	r3, #1
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	e004      	b.n	8005632 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005628:	4b0e      	ldr	r3, [pc, #56]	; (8005664 <xTaskIncrementTick+0x16c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3301      	adds	r3, #1
 800562e:	4a0d      	ldr	r2, [pc, #52]	; (8005664 <xTaskIncrementTick+0x16c>)
 8005630:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005632:	697b      	ldr	r3, [r7, #20]
}
 8005634:	4618      	mov	r0, r3
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	200005a0 	.word	0x200005a0
 8005640:	2000057c 	.word	0x2000057c
 8005644:	20000530 	.word	0x20000530
 8005648:	20000534 	.word	0x20000534
 800564c:	20000590 	.word	0x20000590
 8005650:	20000598 	.word	0x20000598
 8005654:	20000580 	.word	0x20000580
 8005658:	2000047c 	.word	0x2000047c
 800565c:	20000478 	.word	0x20000478
 8005660:	2000058c 	.word	0x2000058c
 8005664:	20000588 	.word	0x20000588

08005668 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800566e:	4b29      	ldr	r3, [pc, #164]	; (8005714 <vTaskSwitchContext+0xac>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005676:	4b28      	ldr	r3, [pc, #160]	; (8005718 <vTaskSwitchContext+0xb0>)
 8005678:	2201      	movs	r2, #1
 800567a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800567c:	e044      	b.n	8005708 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800567e:	4b26      	ldr	r3, [pc, #152]	; (8005718 <vTaskSwitchContext+0xb0>)
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005684:	4b25      	ldr	r3, [pc, #148]	; (800571c <vTaskSwitchContext+0xb4>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	fab3 f383 	clz	r3, r3
 8005690:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005692:	7afb      	ldrb	r3, [r7, #11]
 8005694:	f1c3 031f 	rsb	r3, r3, #31
 8005698:	617b      	str	r3, [r7, #20]
 800569a:	4921      	ldr	r1, [pc, #132]	; (8005720 <vTaskSwitchContext+0xb8>)
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	440b      	add	r3, r1
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d10a      	bne.n	80056c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80056ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	607b      	str	r3, [r7, #4]
}
 80056c0:	bf00      	nop
 80056c2:	e7fe      	b.n	80056c2 <vTaskSwitchContext+0x5a>
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4a14      	ldr	r2, [pc, #80]	; (8005720 <vTaskSwitchContext+0xb8>)
 80056d0:	4413      	add	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	605a      	str	r2, [r3, #4]
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	3308      	adds	r3, #8
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d104      	bne.n	80056f4 <vTaskSwitchContext+0x8c>
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	605a      	str	r2, [r3, #4]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	4a0a      	ldr	r2, [pc, #40]	; (8005724 <vTaskSwitchContext+0xbc>)
 80056fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056fe:	4b09      	ldr	r3, [pc, #36]	; (8005724 <vTaskSwitchContext+0xbc>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	334c      	adds	r3, #76	; 0x4c
 8005704:	4a08      	ldr	r2, [pc, #32]	; (8005728 <vTaskSwitchContext+0xc0>)
 8005706:	6013      	str	r3, [r2, #0]
}
 8005708:	bf00      	nop
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	200005a0 	.word	0x200005a0
 8005718:	2000058c 	.word	0x2000058c
 800571c:	20000580 	.word	0x20000580
 8005720:	2000047c 	.word	0x2000047c
 8005724:	20000478 	.word	0x20000478
 8005728:	20000068 	.word	0x20000068

0800572c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	60fb      	str	r3, [r7, #12]
}
 800574e:	bf00      	nop
 8005750:	e7fe      	b.n	8005750 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005752:	4b07      	ldr	r3, [pc, #28]	; (8005770 <vTaskPlaceOnEventList+0x44>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3318      	adds	r3, #24
 8005758:	4619      	mov	r1, r3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fe fdfd 	bl	800435a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005760:	2101      	movs	r1, #1
 8005762:	6838      	ldr	r0, [r7, #0]
 8005764:	f000 fb82 	bl	8005e6c <prvAddCurrentTaskToDelayedList>
}
 8005768:	bf00      	nop
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	20000478 	.word	0x20000478

08005774 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d10a      	bne.n	80057a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	60fb      	str	r3, [r7, #12]
}
 800579c:	bf00      	nop
 800579e:	e7fe      	b.n	800579e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	3318      	adds	r3, #24
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7fe fe11 	bl	80043cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057aa:	4b1d      	ldr	r3, [pc, #116]	; (8005820 <xTaskRemoveFromEventList+0xac>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d11c      	bne.n	80057ec <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	3304      	adds	r3, #4
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fe fe08 	bl	80043cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	2201      	movs	r2, #1
 80057c2:	409a      	lsls	r2, r3
 80057c4:	4b17      	ldr	r3, [pc, #92]	; (8005824 <xTaskRemoveFromEventList+0xb0>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	4a16      	ldr	r2, [pc, #88]	; (8005824 <xTaskRemoveFromEventList+0xb0>)
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d2:	4613      	mov	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4a13      	ldr	r2, [pc, #76]	; (8005828 <xTaskRemoveFromEventList+0xb4>)
 80057dc:	441a      	add	r2, r3
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	3304      	adds	r3, #4
 80057e2:	4619      	mov	r1, r3
 80057e4:	4610      	mov	r0, r2
 80057e6:	f7fe fd94 	bl	8004312 <vListInsertEnd>
 80057ea:	e005      	b.n	80057f8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	3318      	adds	r3, #24
 80057f0:	4619      	mov	r1, r3
 80057f2:	480e      	ldr	r0, [pc, #56]	; (800582c <xTaskRemoveFromEventList+0xb8>)
 80057f4:	f7fe fd8d 	bl	8004312 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fc:	4b0c      	ldr	r3, [pc, #48]	; (8005830 <xTaskRemoveFromEventList+0xbc>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005802:	429a      	cmp	r2, r3
 8005804:	d905      	bls.n	8005812 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005806:	2301      	movs	r3, #1
 8005808:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800580a:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <xTaskRemoveFromEventList+0xc0>)
 800580c:	2201      	movs	r2, #1
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	e001      	b.n	8005816 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005812:	2300      	movs	r3, #0
 8005814:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005816:	697b      	ldr	r3, [r7, #20]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	200005a0 	.word	0x200005a0
 8005824:	20000580 	.word	0x20000580
 8005828:	2000047c 	.word	0x2000047c
 800582c:	20000538 	.word	0x20000538
 8005830:	20000478 	.word	0x20000478
 8005834:	2000058c 	.word	0x2000058c

08005838 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005840:	4b06      	ldr	r3, [pc, #24]	; (800585c <vTaskInternalSetTimeOutState+0x24>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005848:	4b05      	ldr	r3, [pc, #20]	; (8005860 <vTaskInternalSetTimeOutState+0x28>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	605a      	str	r2, [r3, #4]
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	20000590 	.word	0x20000590
 8005860:	2000057c 	.word	0x2000057c

08005864 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10a      	bne.n	800588a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	613b      	str	r3, [r7, #16]
}
 8005886:	bf00      	nop
 8005888:	e7fe      	b.n	8005888 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	60fb      	str	r3, [r7, #12]
}
 80058a2:	bf00      	nop
 80058a4:	e7fe      	b.n	80058a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80058a6:	f000 fc75 	bl	8006194 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058aa:	4b1d      	ldr	r3, [pc, #116]	; (8005920 <xTaskCheckForTimeOut+0xbc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c2:	d102      	bne.n	80058ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80058c4:	2300      	movs	r3, #0
 80058c6:	61fb      	str	r3, [r7, #28]
 80058c8:	e023      	b.n	8005912 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	4b15      	ldr	r3, [pc, #84]	; (8005924 <xTaskCheckForTimeOut+0xc0>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d007      	beq.n	80058e6 <xTaskCheckForTimeOut+0x82>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d302      	bcc.n	80058e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058e0:	2301      	movs	r3, #1
 80058e2:	61fb      	str	r3, [r7, #28]
 80058e4:	e015      	b.n	8005912 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d20b      	bcs.n	8005908 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	1ad2      	subs	r2, r2, r3
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff ff9b 	bl	8005838 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005902:	2300      	movs	r3, #0
 8005904:	61fb      	str	r3, [r7, #28]
 8005906:	e004      	b.n	8005912 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800590e:	2301      	movs	r3, #1
 8005910:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005912:	f000 fc6f 	bl	80061f4 <vPortExitCritical>

	return xReturn;
 8005916:	69fb      	ldr	r3, [r7, #28]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3720      	adds	r7, #32
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	2000057c 	.word	0x2000057c
 8005924:	20000590 	.word	0x20000590

08005928 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800592c:	4b03      	ldr	r3, [pc, #12]	; (800593c <vTaskMissedYield+0x14>)
 800592e:	2201      	movs	r2, #1
 8005930:	601a      	str	r2, [r3, #0]
}
 8005932:	bf00      	nop
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr
 800593c:	2000058c 	.word	0x2000058c

08005940 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005948:	f000 f852 	bl	80059f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800594c:	4b06      	ldr	r3, [pc, #24]	; (8005968 <prvIdleTask+0x28>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d9f9      	bls.n	8005948 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005954:	4b05      	ldr	r3, [pc, #20]	; (800596c <prvIdleTask+0x2c>)
 8005956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005964:	e7f0      	b.n	8005948 <prvIdleTask+0x8>
 8005966:	bf00      	nop
 8005968:	2000047c 	.word	0x2000047c
 800596c:	e000ed04 	.word	0xe000ed04

08005970 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005976:	2300      	movs	r3, #0
 8005978:	607b      	str	r3, [r7, #4]
 800597a:	e00c      	b.n	8005996 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	4613      	mov	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4a12      	ldr	r2, [pc, #72]	; (80059d0 <prvInitialiseTaskLists+0x60>)
 8005988:	4413      	add	r3, r2
 800598a:	4618      	mov	r0, r3
 800598c:	f7fe fc94 	bl	80042b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	3301      	adds	r3, #1
 8005994:	607b      	str	r3, [r7, #4]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b06      	cmp	r3, #6
 800599a:	d9ef      	bls.n	800597c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800599c:	480d      	ldr	r0, [pc, #52]	; (80059d4 <prvInitialiseTaskLists+0x64>)
 800599e:	f7fe fc8b 	bl	80042b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059a2:	480d      	ldr	r0, [pc, #52]	; (80059d8 <prvInitialiseTaskLists+0x68>)
 80059a4:	f7fe fc88 	bl	80042b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059a8:	480c      	ldr	r0, [pc, #48]	; (80059dc <prvInitialiseTaskLists+0x6c>)
 80059aa:	f7fe fc85 	bl	80042b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059ae:	480c      	ldr	r0, [pc, #48]	; (80059e0 <prvInitialiseTaskLists+0x70>)
 80059b0:	f7fe fc82 	bl	80042b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059b4:	480b      	ldr	r0, [pc, #44]	; (80059e4 <prvInitialiseTaskLists+0x74>)
 80059b6:	f7fe fc7f 	bl	80042b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80059ba:	4b0b      	ldr	r3, [pc, #44]	; (80059e8 <prvInitialiseTaskLists+0x78>)
 80059bc:	4a05      	ldr	r2, [pc, #20]	; (80059d4 <prvInitialiseTaskLists+0x64>)
 80059be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80059c0:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <prvInitialiseTaskLists+0x7c>)
 80059c2:	4a05      	ldr	r2, [pc, #20]	; (80059d8 <prvInitialiseTaskLists+0x68>)
 80059c4:	601a      	str	r2, [r3, #0]
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	2000047c 	.word	0x2000047c
 80059d4:	20000508 	.word	0x20000508
 80059d8:	2000051c 	.word	0x2000051c
 80059dc:	20000538 	.word	0x20000538
 80059e0:	2000054c 	.word	0x2000054c
 80059e4:	20000564 	.word	0x20000564
 80059e8:	20000530 	.word	0x20000530
 80059ec:	20000534 	.word	0x20000534

080059f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059f6:	e019      	b.n	8005a2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059f8:	f000 fbcc 	bl	8006194 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059fc:	4b10      	ldr	r3, [pc, #64]	; (8005a40 <prvCheckTasksWaitingTermination+0x50>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	3304      	adds	r3, #4
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7fe fcdf 	bl	80043cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a0e:	4b0d      	ldr	r3, [pc, #52]	; (8005a44 <prvCheckTasksWaitingTermination+0x54>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	4a0b      	ldr	r2, [pc, #44]	; (8005a44 <prvCheckTasksWaitingTermination+0x54>)
 8005a16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a18:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <prvCheckTasksWaitingTermination+0x58>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	4a0a      	ldr	r2, [pc, #40]	; (8005a48 <prvCheckTasksWaitingTermination+0x58>)
 8005a20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a22:	f000 fbe7 	bl	80061f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f810 	bl	8005a4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a2c:	4b06      	ldr	r3, [pc, #24]	; (8005a48 <prvCheckTasksWaitingTermination+0x58>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e1      	bne.n	80059f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	2000054c 	.word	0x2000054c
 8005a44:	20000578 	.word	0x20000578
 8005a48:	20000560 	.word	0x20000560

08005a4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	334c      	adds	r3, #76	; 0x4c
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f001 f995 	bl	8006d88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d108      	bne.n	8005a7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 fd7f 	bl	8006570 <vPortFree>
				vPortFree( pxTCB );
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fd7c 	bl	8006570 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a78:	e018      	b.n	8005aac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d103      	bne.n	8005a8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fd73 	bl	8006570 <vPortFree>
	}
 8005a8a:	e00f      	b.n	8005aac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d00a      	beq.n	8005aac <prvDeleteTCB+0x60>
	__asm volatile
 8005a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	60fb      	str	r3, [r7, #12]
}
 8005aa8:	bf00      	nop
 8005aaa:	e7fe      	b.n	8005aaa <prvDeleteTCB+0x5e>
	}
 8005aac:	bf00      	nop
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aba:	4b0c      	ldr	r3, [pc, #48]	; (8005aec <prvResetNextTaskUnblockTime+0x38>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d104      	bne.n	8005ace <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <prvResetNextTaskUnblockTime+0x3c>)
 8005ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005acc:	e008      	b.n	8005ae0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ace:	4b07      	ldr	r3, [pc, #28]	; (8005aec <prvResetNextTaskUnblockTime+0x38>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	4a04      	ldr	r2, [pc, #16]	; (8005af0 <prvResetNextTaskUnblockTime+0x3c>)
 8005ade:	6013      	str	r3, [r2, #0]
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	20000530 	.word	0x20000530
 8005af0:	20000598 	.word	0x20000598

08005af4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005afa:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <xTaskGetSchedulerState+0x34>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d102      	bne.n	8005b08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b02:	2301      	movs	r3, #1
 8005b04:	607b      	str	r3, [r7, #4]
 8005b06:	e008      	b.n	8005b1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b08:	4b08      	ldr	r3, [pc, #32]	; (8005b2c <xTaskGetSchedulerState+0x38>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d102      	bne.n	8005b16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b10:	2302      	movs	r3, #2
 8005b12:	607b      	str	r3, [r7, #4]
 8005b14:	e001      	b.n	8005b1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b16:	2300      	movs	r3, #0
 8005b18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b1a:	687b      	ldr	r3, [r7, #4]
	}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	20000584 	.word	0x20000584
 8005b2c:	200005a0 	.word	0x200005a0

08005b30 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d05e      	beq.n	8005c04 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4a:	4b31      	ldr	r3, [pc, #196]	; (8005c10 <xTaskPriorityInherit+0xe0>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d24e      	bcs.n	8005bf2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	db06      	blt.n	8005b6a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b5c:	4b2c      	ldr	r3, [pc, #176]	; (8005c10 <xTaskPriorityInherit+0xe0>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b62:	f1c3 0207 	rsb	r2, r3, #7
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6959      	ldr	r1, [r3, #20]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4a26      	ldr	r2, [pc, #152]	; (8005c14 <xTaskPriorityInherit+0xe4>)
 8005b7c:	4413      	add	r3, r2
 8005b7e:	4299      	cmp	r1, r3
 8005b80:	d12f      	bne.n	8005be2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	3304      	adds	r3, #4
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fe fc20 	bl	80043cc <uxListRemove>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10a      	bne.n	8005ba8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	2201      	movs	r2, #1
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	43da      	mvns	r2, r3
 8005b9e:	4b1e      	ldr	r3, [pc, #120]	; (8005c18 <xTaskPriorityInherit+0xe8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	4a1c      	ldr	r2, [pc, #112]	; (8005c18 <xTaskPriorityInherit+0xe8>)
 8005ba6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ba8:	4b19      	ldr	r3, [pc, #100]	; (8005c10 <xTaskPriorityInherit+0xe0>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	409a      	lsls	r2, r3
 8005bba:	4b17      	ldr	r3, [pc, #92]	; (8005c18 <xTaskPriorityInherit+0xe8>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	4a15      	ldr	r2, [pc, #84]	; (8005c18 <xTaskPriorityInherit+0xe8>)
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4a10      	ldr	r2, [pc, #64]	; (8005c14 <xTaskPriorityInherit+0xe4>)
 8005bd2:	441a      	add	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	f7fe fb99 	bl	8004312 <vListInsertEnd>
 8005be0:	e004      	b.n	8005bec <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005be2:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <xTaskPriorityInherit+0xe0>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005bec:	2301      	movs	r3, #1
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	e008      	b.n	8005c04 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bf6:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <xTaskPriorityInherit+0xe0>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d201      	bcs.n	8005c04 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005c00:	2301      	movs	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c04:	68fb      	ldr	r3, [r7, #12]
	}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20000478 	.word	0x20000478
 8005c14:	2000047c 	.word	0x2000047c
 8005c18:	20000580 	.word	0x20000580

08005c1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d06e      	beq.n	8005d10 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c32:	4b3a      	ldr	r3, [pc, #232]	; (8005d1c <xTaskPriorityDisinherit+0x100>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d00a      	beq.n	8005c52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c40:	f383 8811 	msr	BASEPRI, r3
 8005c44:	f3bf 8f6f 	isb	sy
 8005c48:	f3bf 8f4f 	dsb	sy
 8005c4c:	60fb      	str	r3, [r7, #12]
}
 8005c4e:	bf00      	nop
 8005c50:	e7fe      	b.n	8005c50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10a      	bne.n	8005c70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	60bb      	str	r3, [r7, #8]
}
 8005c6c:	bf00      	nop
 8005c6e:	e7fe      	b.n	8005c6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c74:	1e5a      	subs	r2, r3, #1
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d044      	beq.n	8005d10 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d140      	bne.n	8005d10 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fe fb9a 	bl	80043cc <uxListRemove>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d115      	bne.n	8005cca <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca2:	491f      	ldr	r1, [pc, #124]	; (8005d20 <xTaskPriorityDisinherit+0x104>)
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	440b      	add	r3, r1
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10a      	bne.n	8005cca <xTaskPriorityDisinherit+0xae>
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	2201      	movs	r2, #1
 8005cba:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbe:	43da      	mvns	r2, r3
 8005cc0:	4b18      	ldr	r3, [pc, #96]	; (8005d24 <xTaskPriorityDisinherit+0x108>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	4a17      	ldr	r2, [pc, #92]	; (8005d24 <xTaskPriorityDisinherit+0x108>)
 8005cc8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd6:	f1c3 0207 	rsb	r2, r3, #7
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	409a      	lsls	r2, r3
 8005ce6:	4b0f      	ldr	r3, [pc, #60]	; (8005d24 <xTaskPriorityDisinherit+0x108>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	4a0d      	ldr	r2, [pc, #52]	; (8005d24 <xTaskPriorityDisinherit+0x108>)
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4a08      	ldr	r2, [pc, #32]	; (8005d20 <xTaskPriorityDisinherit+0x104>)
 8005cfe:	441a      	add	r2, r3
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	3304      	adds	r3, #4
 8005d04:	4619      	mov	r1, r3
 8005d06:	4610      	mov	r0, r2
 8005d08:	f7fe fb03 	bl	8004312 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d10:	697b      	ldr	r3, [r7, #20]
	}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000478 	.word	0x20000478
 8005d20:	2000047c 	.word	0x2000047c
 8005d24:	20000580 	.word	0x20000580

08005d28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005d36:	2301      	movs	r3, #1
 8005d38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d077      	beq.n	8005e30 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10a      	bne.n	8005d5e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	60fb      	str	r3, [r7, #12]
}
 8005d5a:	bf00      	nop
 8005d5c:	e7fe      	b.n	8005d5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d902      	bls.n	8005d6e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	61fb      	str	r3, [r7, #28]
 8005d6c:	e002      	b.n	8005d74 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d72:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d058      	beq.n	8005e30 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d153      	bne.n	8005e30 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005d88:	4b2b      	ldr	r3, [pc, #172]	; (8005e38 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d10a      	bne.n	8005da8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	60bb      	str	r3, [r7, #8]
}
 8005da4:	bf00      	nop
 8005da6:	e7fe      	b.n	8005da6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	69fa      	ldr	r2, [r7, #28]
 8005db2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	db04      	blt.n	8005dc6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	f1c3 0207 	rsb	r2, r3, #7
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	6959      	ldr	r1, [r3, #20]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4a19      	ldr	r2, [pc, #100]	; (8005e3c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005dd6:	4413      	add	r3, r2
 8005dd8:	4299      	cmp	r1, r3
 8005dda:	d129      	bne.n	8005e30 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	3304      	adds	r3, #4
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fe faf3 	bl	80043cc <uxListRemove>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10a      	bne.n	8005e02 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df0:	2201      	movs	r2, #1
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	43da      	mvns	r2, r3
 8005df8:	4b11      	ldr	r3, [pc, #68]	; (8005e40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	4a10      	ldr	r2, [pc, #64]	; (8005e40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005e00:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e06:	2201      	movs	r2, #1
 8005e08:	409a      	lsls	r2, r3
 8005e0a:	4b0d      	ldr	r3, [pc, #52]	; (8005e40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	4a0b      	ldr	r2, [pc, #44]	; (8005e40 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e18:	4613      	mov	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4a06      	ldr	r2, [pc, #24]	; (8005e3c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005e22:	441a      	add	r2, r3
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	3304      	adds	r3, #4
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	f7fe fa71 	bl	8004312 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e30:	bf00      	nop
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20000478 	.word	0x20000478
 8005e3c:	2000047c 	.word	0x2000047c
 8005e40:	20000580 	.word	0x20000580

08005e44 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005e48:	4b07      	ldr	r3, [pc, #28]	; (8005e68 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d004      	beq.n	8005e5a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005e50:	4b05      	ldr	r3, [pc, #20]	; (8005e68 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e56:	3201      	adds	r2, #1
 8005e58:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005e5a:	4b03      	ldr	r3, [pc, #12]	; (8005e68 <pvTaskIncrementMutexHeldCount+0x24>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
	}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr
 8005e68:	20000478 	.word	0x20000478

08005e6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e76:	4b29      	ldr	r3, [pc, #164]	; (8005f1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e7c:	4b28      	ldr	r3, [pc, #160]	; (8005f20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3304      	adds	r3, #4
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe faa2 	bl	80043cc <uxListRemove>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10b      	bne.n	8005ea6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005e8e:	4b24      	ldr	r3, [pc, #144]	; (8005f20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e94:	2201      	movs	r2, #1
 8005e96:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9a:	43da      	mvns	r2, r3
 8005e9c:	4b21      	ldr	r3, [pc, #132]	; (8005f24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	4a20      	ldr	r2, [pc, #128]	; (8005f24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ea4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eac:	d10a      	bne.n	8005ec4 <prvAddCurrentTaskToDelayedList+0x58>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d007      	beq.n	8005ec4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eb4:	4b1a      	ldr	r3, [pc, #104]	; (8005f20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4619      	mov	r1, r3
 8005ebc:	481a      	ldr	r0, [pc, #104]	; (8005f28 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ebe:	f7fe fa28 	bl	8004312 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ec2:	e026      	b.n	8005f12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4413      	add	r3, r2
 8005eca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ecc:	4b14      	ldr	r3, [pc, #80]	; (8005f20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d209      	bcs.n	8005ef0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005edc:	4b13      	ldr	r3, [pc, #76]	; (8005f2c <prvAddCurrentTaskToDelayedList+0xc0>)
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	4b0f      	ldr	r3, [pc, #60]	; (8005f20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4610      	mov	r0, r2
 8005eea:	f7fe fa36 	bl	800435a <vListInsert>
}
 8005eee:	e010      	b.n	8005f12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ef0:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	4619      	mov	r1, r3
 8005efc:	4610      	mov	r0, r2
 8005efe:	f7fe fa2c 	bl	800435a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f02:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d202      	bcs.n	8005f12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f0c:	4a09      	ldr	r2, [pc, #36]	; (8005f34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	6013      	str	r3, [r2, #0]
}
 8005f12:	bf00      	nop
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	2000057c 	.word	0x2000057c
 8005f20:	20000478 	.word	0x20000478
 8005f24:	20000580 	.word	0x20000580
 8005f28:	20000564 	.word	0x20000564
 8005f2c:	20000534 	.word	0x20000534
 8005f30:	20000530 	.word	0x20000530
 8005f34:	20000598 	.word	0x20000598

08005f38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3b04      	subs	r3, #4
 8005f48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3b04      	subs	r3, #4
 8005f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f023 0201 	bic.w	r2, r3, #1
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3b04      	subs	r3, #4
 8005f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f68:	4a0c      	ldr	r2, [pc, #48]	; (8005f9c <pxPortInitialiseStack+0x64>)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	3b14      	subs	r3, #20
 8005f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3b04      	subs	r3, #4
 8005f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f06f 0202 	mvn.w	r2, #2
 8005f86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3b20      	subs	r3, #32
 8005f8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	08005fa1 	.word	0x08005fa1

08005fa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005faa:	4b12      	ldr	r3, [pc, #72]	; (8005ff4 <prvTaskExitError+0x54>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb2:	d00a      	beq.n	8005fca <prvTaskExitError+0x2a>
	__asm volatile
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	60fb      	str	r3, [r7, #12]
}
 8005fc6:	bf00      	nop
 8005fc8:	e7fe      	b.n	8005fc8 <prvTaskExitError+0x28>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	60bb      	str	r3, [r7, #8]
}
 8005fdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fde:	bf00      	nop
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0fc      	beq.n	8005fe0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fe6:	bf00      	nop
 8005fe8:	bf00      	nop
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	2000000c 	.word	0x2000000c
	...

08006000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006000:	4b07      	ldr	r3, [pc, #28]	; (8006020 <pxCurrentTCBConst2>)
 8006002:	6819      	ldr	r1, [r3, #0]
 8006004:	6808      	ldr	r0, [r1, #0]
 8006006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600a:	f380 8809 	msr	PSP, r0
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f04f 0000 	mov.w	r0, #0
 8006016:	f380 8811 	msr	BASEPRI, r0
 800601a:	4770      	bx	lr
 800601c:	f3af 8000 	nop.w

08006020 <pxCurrentTCBConst2>:
 8006020:	20000478 	.word	0x20000478
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop

08006028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006028:	4808      	ldr	r0, [pc, #32]	; (800604c <prvPortStartFirstTask+0x24>)
 800602a:	6800      	ldr	r0, [r0, #0]
 800602c:	6800      	ldr	r0, [r0, #0]
 800602e:	f380 8808 	msr	MSP, r0
 8006032:	f04f 0000 	mov.w	r0, #0
 8006036:	f380 8814 	msr	CONTROL, r0
 800603a:	b662      	cpsie	i
 800603c:	b661      	cpsie	f
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	df00      	svc	0
 8006048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800604a:	bf00      	nop
 800604c:	e000ed08 	.word	0xe000ed08

08006050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006056:	4b46      	ldr	r3, [pc, #280]	; (8006170 <xPortStartScheduler+0x120>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a46      	ldr	r2, [pc, #280]	; (8006174 <xPortStartScheduler+0x124>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d10a      	bne.n	8006076 <xPortStartScheduler+0x26>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	613b      	str	r3, [r7, #16]
}
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006076:	4b3e      	ldr	r3, [pc, #248]	; (8006170 <xPortStartScheduler+0x120>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a3f      	ldr	r2, [pc, #252]	; (8006178 <xPortStartScheduler+0x128>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d10a      	bne.n	8006096 <xPortStartScheduler+0x46>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	60fb      	str	r3, [r7, #12]
}
 8006092:	bf00      	nop
 8006094:	e7fe      	b.n	8006094 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006096:	4b39      	ldr	r3, [pc, #228]	; (800617c <xPortStartScheduler+0x12c>)
 8006098:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	22ff      	movs	r2, #255	; 0xff
 80060a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	4b31      	ldr	r3, [pc, #196]	; (8006180 <xPortStartScheduler+0x130>)
 80060bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060be:	4b31      	ldr	r3, [pc, #196]	; (8006184 <xPortStartScheduler+0x134>)
 80060c0:	2207      	movs	r2, #7
 80060c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060c4:	e009      	b.n	80060da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80060c6:	4b2f      	ldr	r3, [pc, #188]	; (8006184 <xPortStartScheduler+0x134>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3b01      	subs	r3, #1
 80060cc:	4a2d      	ldr	r2, [pc, #180]	; (8006184 <xPortStartScheduler+0x134>)
 80060ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e2:	2b80      	cmp	r3, #128	; 0x80
 80060e4:	d0ef      	beq.n	80060c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060e6:	4b27      	ldr	r3, [pc, #156]	; (8006184 <xPortStartScheduler+0x134>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f1c3 0307 	rsb	r3, r3, #7
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d00a      	beq.n	8006108 <xPortStartScheduler+0xb8>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	60bb      	str	r3, [r7, #8]
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006108:	4b1e      	ldr	r3, [pc, #120]	; (8006184 <xPortStartScheduler+0x134>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	021b      	lsls	r3, r3, #8
 800610e:	4a1d      	ldr	r2, [pc, #116]	; (8006184 <xPortStartScheduler+0x134>)
 8006110:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006112:	4b1c      	ldr	r3, [pc, #112]	; (8006184 <xPortStartScheduler+0x134>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800611a:	4a1a      	ldr	r2, [pc, #104]	; (8006184 <xPortStartScheduler+0x134>)
 800611c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	b2da      	uxtb	r2, r3
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006126:	4b18      	ldr	r3, [pc, #96]	; (8006188 <xPortStartScheduler+0x138>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a17      	ldr	r2, [pc, #92]	; (8006188 <xPortStartScheduler+0x138>)
 800612c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006130:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006132:	4b15      	ldr	r3, [pc, #84]	; (8006188 <xPortStartScheduler+0x138>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a14      	ldr	r2, [pc, #80]	; (8006188 <xPortStartScheduler+0x138>)
 8006138:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800613c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800613e:	f000 f8dd 	bl	80062fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006142:	4b12      	ldr	r3, [pc, #72]	; (800618c <xPortStartScheduler+0x13c>)
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006148:	f000 f8fc 	bl	8006344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800614c:	4b10      	ldr	r3, [pc, #64]	; (8006190 <xPortStartScheduler+0x140>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a0f      	ldr	r2, [pc, #60]	; (8006190 <xPortStartScheduler+0x140>)
 8006152:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006156:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006158:	f7ff ff66 	bl	8006028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800615c:	f7ff fa84 	bl	8005668 <vTaskSwitchContext>
	prvTaskExitError();
 8006160:	f7ff ff1e 	bl	8005fa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	e000ed00 	.word	0xe000ed00
 8006174:	410fc271 	.word	0x410fc271
 8006178:	410fc270 	.word	0x410fc270
 800617c:	e000e400 	.word	0xe000e400
 8006180:	200005a4 	.word	0x200005a4
 8006184:	200005a8 	.word	0x200005a8
 8006188:	e000ed20 	.word	0xe000ed20
 800618c:	2000000c 	.word	0x2000000c
 8006190:	e000ef34 	.word	0xe000ef34

08006194 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	607b      	str	r3, [r7, #4]
}
 80061ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061ae:	4b0f      	ldr	r3, [pc, #60]	; (80061ec <vPortEnterCritical+0x58>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3301      	adds	r3, #1
 80061b4:	4a0d      	ldr	r2, [pc, #52]	; (80061ec <vPortEnterCritical+0x58>)
 80061b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061b8:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <vPortEnterCritical+0x58>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d10f      	bne.n	80061e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061c0:	4b0b      	ldr	r3, [pc, #44]	; (80061f0 <vPortEnterCritical+0x5c>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	603b      	str	r3, [r7, #0]
}
 80061dc:	bf00      	nop
 80061de:	e7fe      	b.n	80061de <vPortEnterCritical+0x4a>
	}
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	2000000c 	.word	0x2000000c
 80061f0:	e000ed04 	.word	0xe000ed04

080061f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061fa:	4b12      	ldr	r3, [pc, #72]	; (8006244 <vPortExitCritical+0x50>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10a      	bne.n	8006218 <vPortExitCritical+0x24>
	__asm volatile
 8006202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	607b      	str	r3, [r7, #4]
}
 8006214:	bf00      	nop
 8006216:	e7fe      	b.n	8006216 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006218:	4b0a      	ldr	r3, [pc, #40]	; (8006244 <vPortExitCritical+0x50>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3b01      	subs	r3, #1
 800621e:	4a09      	ldr	r2, [pc, #36]	; (8006244 <vPortExitCritical+0x50>)
 8006220:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006222:	4b08      	ldr	r3, [pc, #32]	; (8006244 <vPortExitCritical+0x50>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d105      	bne.n	8006236 <vPortExitCritical+0x42>
 800622a:	2300      	movs	r3, #0
 800622c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	f383 8811 	msr	BASEPRI, r3
}
 8006234:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	2000000c 	.word	0x2000000c
	...

08006250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006250:	f3ef 8009 	mrs	r0, PSP
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	4b15      	ldr	r3, [pc, #84]	; (80062b0 <pxCurrentTCBConst>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	f01e 0f10 	tst.w	lr, #16
 8006260:	bf08      	it	eq
 8006262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626a:	6010      	str	r0, [r2, #0]
 800626c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006270:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006274:	f380 8811 	msr	BASEPRI, r0
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f7ff f9f2 	bl	8005668 <vTaskSwitchContext>
 8006284:	f04f 0000 	mov.w	r0, #0
 8006288:	f380 8811 	msr	BASEPRI, r0
 800628c:	bc09      	pop	{r0, r3}
 800628e:	6819      	ldr	r1, [r3, #0]
 8006290:	6808      	ldr	r0, [r1, #0]
 8006292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006296:	f01e 0f10 	tst.w	lr, #16
 800629a:	bf08      	it	eq
 800629c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062a0:	f380 8809 	msr	PSP, r0
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	f3af 8000 	nop.w

080062b0 <pxCurrentTCBConst>:
 80062b0:	20000478 	.word	0x20000478
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062b4:	bf00      	nop
 80062b6:	bf00      	nop

080062b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	607b      	str	r3, [r7, #4]
}
 80062d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062d2:	f7ff f911 	bl	80054f8 <xTaskIncrementTick>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d003      	beq.n	80062e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062dc:	4b06      	ldr	r3, [pc, #24]	; (80062f8 <SysTick_Handler+0x40>)
 80062de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	2300      	movs	r3, #0
 80062e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	f383 8811 	msr	BASEPRI, r3
}
 80062ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80062f0:	bf00      	nop
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	e000ed04 	.word	0xe000ed04

080062fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006300:	4b0b      	ldr	r3, [pc, #44]	; (8006330 <vPortSetupTimerInterrupt+0x34>)
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006306:	4b0b      	ldr	r3, [pc, #44]	; (8006334 <vPortSetupTimerInterrupt+0x38>)
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800630c:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <vPortSetupTimerInterrupt+0x3c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a0a      	ldr	r2, [pc, #40]	; (800633c <vPortSetupTimerInterrupt+0x40>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	099b      	lsrs	r3, r3, #6
 8006318:	4a09      	ldr	r2, [pc, #36]	; (8006340 <vPortSetupTimerInterrupt+0x44>)
 800631a:	3b01      	subs	r3, #1
 800631c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800631e:	4b04      	ldr	r3, [pc, #16]	; (8006330 <vPortSetupTimerInterrupt+0x34>)
 8006320:	2207      	movs	r2, #7
 8006322:	601a      	str	r2, [r3, #0]
}
 8006324:	bf00      	nop
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	e000e010 	.word	0xe000e010
 8006334:	e000e018 	.word	0xe000e018
 8006338:	20000000 	.word	0x20000000
 800633c:	10624dd3 	.word	0x10624dd3
 8006340:	e000e014 	.word	0xe000e014

08006344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006344:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006354 <vPortEnableVFP+0x10>
 8006348:	6801      	ldr	r1, [r0, #0]
 800634a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800634e:	6001      	str	r1, [r0, #0]
 8006350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006352:	bf00      	nop
 8006354:	e000ed88 	.word	0xe000ed88

08006358 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800635e:	f3ef 8305 	mrs	r3, IPSR
 8006362:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b0f      	cmp	r3, #15
 8006368:	d914      	bls.n	8006394 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800636a:	4a17      	ldr	r2, [pc, #92]	; (80063c8 <vPortValidateInterruptPriority+0x70>)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006374:	4b15      	ldr	r3, [pc, #84]	; (80063cc <vPortValidateInterruptPriority+0x74>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	7afa      	ldrb	r2, [r7, #11]
 800637a:	429a      	cmp	r2, r3
 800637c:	d20a      	bcs.n	8006394 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	607b      	str	r3, [r7, #4]
}
 8006390:	bf00      	nop
 8006392:	e7fe      	b.n	8006392 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006394:	4b0e      	ldr	r3, [pc, #56]	; (80063d0 <vPortValidateInterruptPriority+0x78>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800639c:	4b0d      	ldr	r3, [pc, #52]	; (80063d4 <vPortValidateInterruptPriority+0x7c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d90a      	bls.n	80063ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	603b      	str	r3, [r7, #0]
}
 80063b6:	bf00      	nop
 80063b8:	e7fe      	b.n	80063b8 <vPortValidateInterruptPriority+0x60>
	}
 80063ba:	bf00      	nop
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	e000e3f0 	.word	0xe000e3f0
 80063cc:	200005a4 	.word	0x200005a4
 80063d0:	e000ed0c 	.word	0xe000ed0c
 80063d4:	200005a8 	.word	0x200005a8

080063d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	; 0x28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063e0:	2300      	movs	r3, #0
 80063e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063e4:	f7fe ffde 	bl	80053a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063e8:	4b5b      	ldr	r3, [pc, #364]	; (8006558 <pvPortMalloc+0x180>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063f0:	f000 f920 	bl	8006634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063f4:	4b59      	ldr	r3, [pc, #356]	; (800655c <pvPortMalloc+0x184>)
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4013      	ands	r3, r2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f040 8093 	bne.w	8006528 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d01d      	beq.n	8006444 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006408:	2208      	movs	r2, #8
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	2b00      	cmp	r3, #0
 8006418:	d014      	beq.n	8006444 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f023 0307 	bic.w	r3, r3, #7
 8006420:	3308      	adds	r3, #8
 8006422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <pvPortMalloc+0x6c>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	617b      	str	r3, [r7, #20]
}
 8006440:	bf00      	nop
 8006442:	e7fe      	b.n	8006442 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d06e      	beq.n	8006528 <pvPortMalloc+0x150>
 800644a:	4b45      	ldr	r3, [pc, #276]	; (8006560 <pvPortMalloc+0x188>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	429a      	cmp	r2, r3
 8006452:	d869      	bhi.n	8006528 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006454:	4b43      	ldr	r3, [pc, #268]	; (8006564 <pvPortMalloc+0x18c>)
 8006456:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006458:	4b42      	ldr	r3, [pc, #264]	; (8006564 <pvPortMalloc+0x18c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800645e:	e004      	b.n	800646a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	429a      	cmp	r2, r3
 8006472:	d903      	bls.n	800647c <pvPortMalloc+0xa4>
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1f1      	bne.n	8006460 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800647c:	4b36      	ldr	r3, [pc, #216]	; (8006558 <pvPortMalloc+0x180>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006482:	429a      	cmp	r2, r3
 8006484:	d050      	beq.n	8006528 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006486:	6a3b      	ldr	r3, [r7, #32]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2208      	movs	r2, #8
 800648c:	4413      	add	r3, r2
 800648e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	6a3b      	ldr	r3, [r7, #32]
 8006496:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	1ad2      	subs	r2, r2, r3
 80064a0:	2308      	movs	r3, #8
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d91f      	bls.n	80064e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4413      	add	r3, r2
 80064ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00a      	beq.n	80064d0 <pvPortMalloc+0xf8>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	613b      	str	r3, [r7, #16]
}
 80064cc:	bf00      	nop
 80064ce:	e7fe      	b.n	80064ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	1ad2      	subs	r2, r2, r3
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064e2:	69b8      	ldr	r0, [r7, #24]
 80064e4:	f000 f908 	bl	80066f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064e8:	4b1d      	ldr	r3, [pc, #116]	; (8006560 <pvPortMalloc+0x188>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	4a1b      	ldr	r2, [pc, #108]	; (8006560 <pvPortMalloc+0x188>)
 80064f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064f6:	4b1a      	ldr	r3, [pc, #104]	; (8006560 <pvPortMalloc+0x188>)
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	4b1b      	ldr	r3, [pc, #108]	; (8006568 <pvPortMalloc+0x190>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d203      	bcs.n	800650a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006502:	4b17      	ldr	r3, [pc, #92]	; (8006560 <pvPortMalloc+0x188>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a18      	ldr	r2, [pc, #96]	; (8006568 <pvPortMalloc+0x190>)
 8006508:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	4b13      	ldr	r3, [pc, #76]	; (800655c <pvPortMalloc+0x184>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	431a      	orrs	r2, r3
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800651e:	4b13      	ldr	r3, [pc, #76]	; (800656c <pvPortMalloc+0x194>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3301      	adds	r3, #1
 8006524:	4a11      	ldr	r2, [pc, #68]	; (800656c <pvPortMalloc+0x194>)
 8006526:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006528:	f7fe ff4a 	bl	80053c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	f003 0307 	and.w	r3, r3, #7
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <pvPortMalloc+0x174>
	__asm volatile
 8006536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653a:	f383 8811 	msr	BASEPRI, r3
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	60fb      	str	r3, [r7, #12]
}
 8006548:	bf00      	nop
 800654a:	e7fe      	b.n	800654a <pvPortMalloc+0x172>
	return pvReturn;
 800654c:	69fb      	ldr	r3, [r7, #28]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3728      	adds	r7, #40	; 0x28
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	200041b4 	.word	0x200041b4
 800655c:	200041c8 	.word	0x200041c8
 8006560:	200041b8 	.word	0x200041b8
 8006564:	200041ac 	.word	0x200041ac
 8006568:	200041bc 	.word	0x200041bc
 800656c:	200041c0 	.word	0x200041c0

08006570 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d04d      	beq.n	800661e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006582:	2308      	movs	r3, #8
 8006584:	425b      	negs	r3, r3
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	4413      	add	r3, r2
 800658a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	4b24      	ldr	r3, [pc, #144]	; (8006628 <vPortFree+0xb8>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4013      	ands	r3, r2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <vPortFree+0x44>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	60fb      	str	r3, [r7, #12]
}
 80065b0:	bf00      	nop
 80065b2:	e7fe      	b.n	80065b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00a      	beq.n	80065d2 <vPortFree+0x62>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	60bb      	str	r3, [r7, #8]
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <vPortFree+0xb8>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4013      	ands	r3, r2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01e      	beq.n	800661e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d11a      	bne.n	800661e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	4b0e      	ldr	r3, [pc, #56]	; (8006628 <vPortFree+0xb8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	43db      	mvns	r3, r3
 80065f2:	401a      	ands	r2, r3
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065f8:	f7fe fed4 	bl	80053a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	4b0a      	ldr	r3, [pc, #40]	; (800662c <vPortFree+0xbc>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4413      	add	r3, r2
 8006606:	4a09      	ldr	r2, [pc, #36]	; (800662c <vPortFree+0xbc>)
 8006608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800660a:	6938      	ldr	r0, [r7, #16]
 800660c:	f000 f874 	bl	80066f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006610:	4b07      	ldr	r3, [pc, #28]	; (8006630 <vPortFree+0xc0>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3301      	adds	r3, #1
 8006616:	4a06      	ldr	r2, [pc, #24]	; (8006630 <vPortFree+0xc0>)
 8006618:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800661a:	f7fe fed1 	bl	80053c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800661e:	bf00      	nop
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	200041c8 	.word	0x200041c8
 800662c:	200041b8 	.word	0x200041b8
 8006630:	200041c4 	.word	0x200041c4

08006634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800663a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800663e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006640:	4b27      	ldr	r3, [pc, #156]	; (80066e0 <prvHeapInit+0xac>)
 8006642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00c      	beq.n	8006668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3307      	adds	r3, #7
 8006652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0307 	bic.w	r3, r3, #7
 800665a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	4a1f      	ldr	r2, [pc, #124]	; (80066e0 <prvHeapInit+0xac>)
 8006664:	4413      	add	r3, r2
 8006666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800666c:	4a1d      	ldr	r2, [pc, #116]	; (80066e4 <prvHeapInit+0xb0>)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006672:	4b1c      	ldr	r3, [pc, #112]	; (80066e4 <prvHeapInit+0xb0>)
 8006674:	2200      	movs	r2, #0
 8006676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68ba      	ldr	r2, [r7, #8]
 800667c:	4413      	add	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006680:	2208      	movs	r2, #8
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0307 	bic.w	r3, r3, #7
 800668e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	4a15      	ldr	r2, [pc, #84]	; (80066e8 <prvHeapInit+0xb4>)
 8006694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006696:	4b14      	ldr	r3, [pc, #80]	; (80066e8 <prvHeapInit+0xb4>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2200      	movs	r2, #0
 800669c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800669e:	4b12      	ldr	r3, [pc, #72]	; (80066e8 <prvHeapInit+0xb4>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	1ad2      	subs	r2, r2, r3
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066b4:	4b0c      	ldr	r3, [pc, #48]	; (80066e8 <prvHeapInit+0xb4>)
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	4a0a      	ldr	r2, [pc, #40]	; (80066ec <prvHeapInit+0xb8>)
 80066c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	4a09      	ldr	r2, [pc, #36]	; (80066f0 <prvHeapInit+0xbc>)
 80066ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066cc:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <prvHeapInit+0xc0>)
 80066ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066d2:	601a      	str	r2, [r3, #0]
}
 80066d4:	bf00      	nop
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	200005ac 	.word	0x200005ac
 80066e4:	200041ac 	.word	0x200041ac
 80066e8:	200041b4 	.word	0x200041b4
 80066ec:	200041bc 	.word	0x200041bc
 80066f0:	200041b8 	.word	0x200041b8
 80066f4:	200041c8 	.word	0x200041c8

080066f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006700:	4b28      	ldr	r3, [pc, #160]	; (80067a4 <prvInsertBlockIntoFreeList+0xac>)
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	e002      	b.n	800670c <prvInsertBlockIntoFreeList+0x14>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	429a      	cmp	r2, r3
 8006714:	d8f7      	bhi.n	8006706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	4413      	add	r3, r2
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	429a      	cmp	r2, r3
 8006726:	d108      	bne.n	800673a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	441a      	add	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	441a      	add	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d118      	bne.n	8006780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4b15      	ldr	r3, [pc, #84]	; (80067a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d00d      	beq.n	8006776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	441a      	add	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	e008      	b.n	8006788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006776:	4b0c      	ldr	r3, [pc, #48]	; (80067a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	e003      	b.n	8006788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	429a      	cmp	r2, r3
 800678e:	d002      	beq.n	8006796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006796:	bf00      	nop
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	200041ac 	.word	0x200041ac
 80067a8:	200041b4 	.word	0x200041b4

080067ac <std>:
 80067ac:	2300      	movs	r3, #0
 80067ae:	b510      	push	{r4, lr}
 80067b0:	4604      	mov	r4, r0
 80067b2:	e9c0 3300 	strd	r3, r3, [r0]
 80067b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067ba:	6083      	str	r3, [r0, #8]
 80067bc:	8181      	strh	r1, [r0, #12]
 80067be:	6643      	str	r3, [r0, #100]	; 0x64
 80067c0:	81c2      	strh	r2, [r0, #14]
 80067c2:	6183      	str	r3, [r0, #24]
 80067c4:	4619      	mov	r1, r3
 80067c6:	2208      	movs	r2, #8
 80067c8:	305c      	adds	r0, #92	; 0x5c
 80067ca:	f000 fac5 	bl	8006d58 <memset>
 80067ce:	4b0d      	ldr	r3, [pc, #52]	; (8006804 <std+0x58>)
 80067d0:	6263      	str	r3, [r4, #36]	; 0x24
 80067d2:	4b0d      	ldr	r3, [pc, #52]	; (8006808 <std+0x5c>)
 80067d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80067d6:	4b0d      	ldr	r3, [pc, #52]	; (800680c <std+0x60>)
 80067d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067da:	4b0d      	ldr	r3, [pc, #52]	; (8006810 <std+0x64>)
 80067dc:	6323      	str	r3, [r4, #48]	; 0x30
 80067de:	4b0d      	ldr	r3, [pc, #52]	; (8006814 <std+0x68>)
 80067e0:	6224      	str	r4, [r4, #32]
 80067e2:	429c      	cmp	r4, r3
 80067e4:	d006      	beq.n	80067f4 <std+0x48>
 80067e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80067ea:	4294      	cmp	r4, r2
 80067ec:	d002      	beq.n	80067f4 <std+0x48>
 80067ee:	33d0      	adds	r3, #208	; 0xd0
 80067f0:	429c      	cmp	r4, r3
 80067f2:	d105      	bne.n	8006800 <std+0x54>
 80067f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067fc:	f000 bb7a 	b.w	8006ef4 <__retarget_lock_init_recursive>
 8006800:	bd10      	pop	{r4, pc}
 8006802:	bf00      	nop
 8006804:	08006ba9 	.word	0x08006ba9
 8006808:	08006bcb 	.word	0x08006bcb
 800680c:	08006c03 	.word	0x08006c03
 8006810:	08006c27 	.word	0x08006c27
 8006814:	200041cc 	.word	0x200041cc

08006818 <stdio_exit_handler>:
 8006818:	4a02      	ldr	r2, [pc, #8]	; (8006824 <stdio_exit_handler+0xc>)
 800681a:	4903      	ldr	r1, [pc, #12]	; (8006828 <stdio_exit_handler+0x10>)
 800681c:	4803      	ldr	r0, [pc, #12]	; (800682c <stdio_exit_handler+0x14>)
 800681e:	f000 b869 	b.w	80068f4 <_fwalk_sglue>
 8006822:	bf00      	nop
 8006824:	20000010 	.word	0x20000010
 8006828:	08007a7d 	.word	0x08007a7d
 800682c:	2000001c 	.word	0x2000001c

08006830 <cleanup_stdio>:
 8006830:	6841      	ldr	r1, [r0, #4]
 8006832:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <cleanup_stdio+0x34>)
 8006834:	4299      	cmp	r1, r3
 8006836:	b510      	push	{r4, lr}
 8006838:	4604      	mov	r4, r0
 800683a:	d001      	beq.n	8006840 <cleanup_stdio+0x10>
 800683c:	f001 f91e 	bl	8007a7c <_fflush_r>
 8006840:	68a1      	ldr	r1, [r4, #8]
 8006842:	4b09      	ldr	r3, [pc, #36]	; (8006868 <cleanup_stdio+0x38>)
 8006844:	4299      	cmp	r1, r3
 8006846:	d002      	beq.n	800684e <cleanup_stdio+0x1e>
 8006848:	4620      	mov	r0, r4
 800684a:	f001 f917 	bl	8007a7c <_fflush_r>
 800684e:	68e1      	ldr	r1, [r4, #12]
 8006850:	4b06      	ldr	r3, [pc, #24]	; (800686c <cleanup_stdio+0x3c>)
 8006852:	4299      	cmp	r1, r3
 8006854:	d004      	beq.n	8006860 <cleanup_stdio+0x30>
 8006856:	4620      	mov	r0, r4
 8006858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800685c:	f001 b90e 	b.w	8007a7c <_fflush_r>
 8006860:	bd10      	pop	{r4, pc}
 8006862:	bf00      	nop
 8006864:	200041cc 	.word	0x200041cc
 8006868:	20004234 	.word	0x20004234
 800686c:	2000429c 	.word	0x2000429c

08006870 <global_stdio_init.part.0>:
 8006870:	b510      	push	{r4, lr}
 8006872:	4b0b      	ldr	r3, [pc, #44]	; (80068a0 <global_stdio_init.part.0+0x30>)
 8006874:	4c0b      	ldr	r4, [pc, #44]	; (80068a4 <global_stdio_init.part.0+0x34>)
 8006876:	4a0c      	ldr	r2, [pc, #48]	; (80068a8 <global_stdio_init.part.0+0x38>)
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	4620      	mov	r0, r4
 800687c:	2200      	movs	r2, #0
 800687e:	2104      	movs	r1, #4
 8006880:	f7ff ff94 	bl	80067ac <std>
 8006884:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006888:	2201      	movs	r2, #1
 800688a:	2109      	movs	r1, #9
 800688c:	f7ff ff8e 	bl	80067ac <std>
 8006890:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006894:	2202      	movs	r2, #2
 8006896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800689a:	2112      	movs	r1, #18
 800689c:	f7ff bf86 	b.w	80067ac <std>
 80068a0:	20004304 	.word	0x20004304
 80068a4:	200041cc 	.word	0x200041cc
 80068a8:	08006819 	.word	0x08006819

080068ac <__sfp_lock_acquire>:
 80068ac:	4801      	ldr	r0, [pc, #4]	; (80068b4 <__sfp_lock_acquire+0x8>)
 80068ae:	f000 bb22 	b.w	8006ef6 <__retarget_lock_acquire_recursive>
 80068b2:	bf00      	nop
 80068b4:	2000430d 	.word	0x2000430d

080068b8 <__sfp_lock_release>:
 80068b8:	4801      	ldr	r0, [pc, #4]	; (80068c0 <__sfp_lock_release+0x8>)
 80068ba:	f000 bb1d 	b.w	8006ef8 <__retarget_lock_release_recursive>
 80068be:	bf00      	nop
 80068c0:	2000430d 	.word	0x2000430d

080068c4 <__sinit>:
 80068c4:	b510      	push	{r4, lr}
 80068c6:	4604      	mov	r4, r0
 80068c8:	f7ff fff0 	bl	80068ac <__sfp_lock_acquire>
 80068cc:	6a23      	ldr	r3, [r4, #32]
 80068ce:	b11b      	cbz	r3, 80068d8 <__sinit+0x14>
 80068d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d4:	f7ff bff0 	b.w	80068b8 <__sfp_lock_release>
 80068d8:	4b04      	ldr	r3, [pc, #16]	; (80068ec <__sinit+0x28>)
 80068da:	6223      	str	r3, [r4, #32]
 80068dc:	4b04      	ldr	r3, [pc, #16]	; (80068f0 <__sinit+0x2c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1f5      	bne.n	80068d0 <__sinit+0xc>
 80068e4:	f7ff ffc4 	bl	8006870 <global_stdio_init.part.0>
 80068e8:	e7f2      	b.n	80068d0 <__sinit+0xc>
 80068ea:	bf00      	nop
 80068ec:	08006831 	.word	0x08006831
 80068f0:	20004304 	.word	0x20004304

080068f4 <_fwalk_sglue>:
 80068f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068f8:	4607      	mov	r7, r0
 80068fa:	4688      	mov	r8, r1
 80068fc:	4614      	mov	r4, r2
 80068fe:	2600      	movs	r6, #0
 8006900:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006904:	f1b9 0901 	subs.w	r9, r9, #1
 8006908:	d505      	bpl.n	8006916 <_fwalk_sglue+0x22>
 800690a:	6824      	ldr	r4, [r4, #0]
 800690c:	2c00      	cmp	r4, #0
 800690e:	d1f7      	bne.n	8006900 <_fwalk_sglue+0xc>
 8006910:	4630      	mov	r0, r6
 8006912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006916:	89ab      	ldrh	r3, [r5, #12]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d907      	bls.n	800692c <_fwalk_sglue+0x38>
 800691c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006920:	3301      	adds	r3, #1
 8006922:	d003      	beq.n	800692c <_fwalk_sglue+0x38>
 8006924:	4629      	mov	r1, r5
 8006926:	4638      	mov	r0, r7
 8006928:	47c0      	blx	r8
 800692a:	4306      	orrs	r6, r0
 800692c:	3568      	adds	r5, #104	; 0x68
 800692e:	e7e9      	b.n	8006904 <_fwalk_sglue+0x10>

08006930 <iprintf>:
 8006930:	b40f      	push	{r0, r1, r2, r3}
 8006932:	b507      	push	{r0, r1, r2, lr}
 8006934:	4906      	ldr	r1, [pc, #24]	; (8006950 <iprintf+0x20>)
 8006936:	ab04      	add	r3, sp, #16
 8006938:	6808      	ldr	r0, [r1, #0]
 800693a:	f853 2b04 	ldr.w	r2, [r3], #4
 800693e:	6881      	ldr	r1, [r0, #8]
 8006940:	9301      	str	r3, [sp, #4]
 8006942:	f000 fd6b 	bl	800741c <_vfiprintf_r>
 8006946:	b003      	add	sp, #12
 8006948:	f85d eb04 	ldr.w	lr, [sp], #4
 800694c:	b004      	add	sp, #16
 800694e:	4770      	bx	lr
 8006950:	20000068 	.word	0x20000068

08006954 <_puts_r>:
 8006954:	6a03      	ldr	r3, [r0, #32]
 8006956:	b570      	push	{r4, r5, r6, lr}
 8006958:	6884      	ldr	r4, [r0, #8]
 800695a:	4605      	mov	r5, r0
 800695c:	460e      	mov	r6, r1
 800695e:	b90b      	cbnz	r3, 8006964 <_puts_r+0x10>
 8006960:	f7ff ffb0 	bl	80068c4 <__sinit>
 8006964:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006966:	07db      	lsls	r3, r3, #31
 8006968:	d405      	bmi.n	8006976 <_puts_r+0x22>
 800696a:	89a3      	ldrh	r3, [r4, #12]
 800696c:	0598      	lsls	r0, r3, #22
 800696e:	d402      	bmi.n	8006976 <_puts_r+0x22>
 8006970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006972:	f000 fac0 	bl	8006ef6 <__retarget_lock_acquire_recursive>
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	0719      	lsls	r1, r3, #28
 800697a:	d513      	bpl.n	80069a4 <_puts_r+0x50>
 800697c:	6923      	ldr	r3, [r4, #16]
 800697e:	b18b      	cbz	r3, 80069a4 <_puts_r+0x50>
 8006980:	3e01      	subs	r6, #1
 8006982:	68a3      	ldr	r3, [r4, #8]
 8006984:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006988:	3b01      	subs	r3, #1
 800698a:	60a3      	str	r3, [r4, #8]
 800698c:	b9e9      	cbnz	r1, 80069ca <_puts_r+0x76>
 800698e:	2b00      	cmp	r3, #0
 8006990:	da2e      	bge.n	80069f0 <_puts_r+0x9c>
 8006992:	4622      	mov	r2, r4
 8006994:	210a      	movs	r1, #10
 8006996:	4628      	mov	r0, r5
 8006998:	f000 f949 	bl	8006c2e <__swbuf_r>
 800699c:	3001      	adds	r0, #1
 800699e:	d007      	beq.n	80069b0 <_puts_r+0x5c>
 80069a0:	250a      	movs	r5, #10
 80069a2:	e007      	b.n	80069b4 <_puts_r+0x60>
 80069a4:	4621      	mov	r1, r4
 80069a6:	4628      	mov	r0, r5
 80069a8:	f000 f97e 	bl	8006ca8 <__swsetup_r>
 80069ac:	2800      	cmp	r0, #0
 80069ae:	d0e7      	beq.n	8006980 <_puts_r+0x2c>
 80069b0:	f04f 35ff 	mov.w	r5, #4294967295
 80069b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069b6:	07da      	lsls	r2, r3, #31
 80069b8:	d405      	bmi.n	80069c6 <_puts_r+0x72>
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	059b      	lsls	r3, r3, #22
 80069be:	d402      	bmi.n	80069c6 <_puts_r+0x72>
 80069c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069c2:	f000 fa99 	bl	8006ef8 <__retarget_lock_release_recursive>
 80069c6:	4628      	mov	r0, r5
 80069c8:	bd70      	pop	{r4, r5, r6, pc}
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	da04      	bge.n	80069d8 <_puts_r+0x84>
 80069ce:	69a2      	ldr	r2, [r4, #24]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	dc06      	bgt.n	80069e2 <_puts_r+0x8e>
 80069d4:	290a      	cmp	r1, #10
 80069d6:	d004      	beq.n	80069e2 <_puts_r+0x8e>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	6022      	str	r2, [r4, #0]
 80069de:	7019      	strb	r1, [r3, #0]
 80069e0:	e7cf      	b.n	8006982 <_puts_r+0x2e>
 80069e2:	4622      	mov	r2, r4
 80069e4:	4628      	mov	r0, r5
 80069e6:	f000 f922 	bl	8006c2e <__swbuf_r>
 80069ea:	3001      	adds	r0, #1
 80069ec:	d1c9      	bne.n	8006982 <_puts_r+0x2e>
 80069ee:	e7df      	b.n	80069b0 <_puts_r+0x5c>
 80069f0:	6823      	ldr	r3, [r4, #0]
 80069f2:	250a      	movs	r5, #10
 80069f4:	1c5a      	adds	r2, r3, #1
 80069f6:	6022      	str	r2, [r4, #0]
 80069f8:	701d      	strb	r5, [r3, #0]
 80069fa:	e7db      	b.n	80069b4 <_puts_r+0x60>

080069fc <puts>:
 80069fc:	4b02      	ldr	r3, [pc, #8]	; (8006a08 <puts+0xc>)
 80069fe:	4601      	mov	r1, r0
 8006a00:	6818      	ldr	r0, [r3, #0]
 8006a02:	f7ff bfa7 	b.w	8006954 <_puts_r>
 8006a06:	bf00      	nop
 8006a08:	20000068 	.word	0x20000068

08006a0c <setvbuf>:
 8006a0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a10:	461d      	mov	r5, r3
 8006a12:	4b54      	ldr	r3, [pc, #336]	; (8006b64 <setvbuf+0x158>)
 8006a14:	681f      	ldr	r7, [r3, #0]
 8006a16:	4604      	mov	r4, r0
 8006a18:	460e      	mov	r6, r1
 8006a1a:	4690      	mov	r8, r2
 8006a1c:	b127      	cbz	r7, 8006a28 <setvbuf+0x1c>
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	b913      	cbnz	r3, 8006a28 <setvbuf+0x1c>
 8006a22:	4638      	mov	r0, r7
 8006a24:	f7ff ff4e 	bl	80068c4 <__sinit>
 8006a28:	f1b8 0f02 	cmp.w	r8, #2
 8006a2c:	d006      	beq.n	8006a3c <setvbuf+0x30>
 8006a2e:	f1b8 0f01 	cmp.w	r8, #1
 8006a32:	f200 8094 	bhi.w	8006b5e <setvbuf+0x152>
 8006a36:	2d00      	cmp	r5, #0
 8006a38:	f2c0 8091 	blt.w	8006b5e <setvbuf+0x152>
 8006a3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a3e:	07da      	lsls	r2, r3, #31
 8006a40:	d405      	bmi.n	8006a4e <setvbuf+0x42>
 8006a42:	89a3      	ldrh	r3, [r4, #12]
 8006a44:	059b      	lsls	r3, r3, #22
 8006a46:	d402      	bmi.n	8006a4e <setvbuf+0x42>
 8006a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a4a:	f000 fa54 	bl	8006ef6 <__retarget_lock_acquire_recursive>
 8006a4e:	4621      	mov	r1, r4
 8006a50:	4638      	mov	r0, r7
 8006a52:	f001 f813 	bl	8007a7c <_fflush_r>
 8006a56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a58:	b141      	cbz	r1, 8006a6c <setvbuf+0x60>
 8006a5a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a5e:	4299      	cmp	r1, r3
 8006a60:	d002      	beq.n	8006a68 <setvbuf+0x5c>
 8006a62:	4638      	mov	r0, r7
 8006a64:	f000 fa58 	bl	8006f18 <_free_r>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	6363      	str	r3, [r4, #52]	; 0x34
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	61a3      	str	r3, [r4, #24]
 8006a70:	6063      	str	r3, [r4, #4]
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	0618      	lsls	r0, r3, #24
 8006a76:	d503      	bpl.n	8006a80 <setvbuf+0x74>
 8006a78:	6921      	ldr	r1, [r4, #16]
 8006a7a:	4638      	mov	r0, r7
 8006a7c:	f000 fa4c 	bl	8006f18 <_free_r>
 8006a80:	89a3      	ldrh	r3, [r4, #12]
 8006a82:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006a86:	f023 0303 	bic.w	r3, r3, #3
 8006a8a:	f1b8 0f02 	cmp.w	r8, #2
 8006a8e:	81a3      	strh	r3, [r4, #12]
 8006a90:	d05f      	beq.n	8006b52 <setvbuf+0x146>
 8006a92:	ab01      	add	r3, sp, #4
 8006a94:	466a      	mov	r2, sp
 8006a96:	4621      	mov	r1, r4
 8006a98:	4638      	mov	r0, r7
 8006a9a:	f001 f817 	bl	8007acc <__swhatbuf_r>
 8006a9e:	89a3      	ldrh	r3, [r4, #12]
 8006aa0:	4318      	orrs	r0, r3
 8006aa2:	81a0      	strh	r0, [r4, #12]
 8006aa4:	bb2d      	cbnz	r5, 8006af2 <setvbuf+0xe6>
 8006aa6:	9d00      	ldr	r5, [sp, #0]
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	f000 fa81 	bl	8006fb0 <malloc>
 8006aae:	4606      	mov	r6, r0
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d150      	bne.n	8006b56 <setvbuf+0x14a>
 8006ab4:	f8dd 9000 	ldr.w	r9, [sp]
 8006ab8:	45a9      	cmp	r9, r5
 8006aba:	d13e      	bne.n	8006b3a <setvbuf+0x12e>
 8006abc:	f04f 35ff 	mov.w	r5, #4294967295
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	60a2      	str	r2, [r4, #8]
 8006ac4:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006ac8:	6022      	str	r2, [r4, #0]
 8006aca:	6122      	str	r2, [r4, #16]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ad2:	6162      	str	r2, [r4, #20]
 8006ad4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ad6:	f043 0302 	orr.w	r3, r3, #2
 8006ada:	07d1      	lsls	r1, r2, #31
 8006adc:	81a3      	strh	r3, [r4, #12]
 8006ade:	d404      	bmi.n	8006aea <setvbuf+0xde>
 8006ae0:	059b      	lsls	r3, r3, #22
 8006ae2:	d402      	bmi.n	8006aea <setvbuf+0xde>
 8006ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ae6:	f000 fa07 	bl	8006ef8 <__retarget_lock_release_recursive>
 8006aea:	4628      	mov	r0, r5
 8006aec:	b003      	add	sp, #12
 8006aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006af2:	2e00      	cmp	r6, #0
 8006af4:	d0d8      	beq.n	8006aa8 <setvbuf+0x9c>
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	b913      	cbnz	r3, 8006b00 <setvbuf+0xf4>
 8006afa:	4638      	mov	r0, r7
 8006afc:	f7ff fee2 	bl	80068c4 <__sinit>
 8006b00:	f1b8 0f01 	cmp.w	r8, #1
 8006b04:	bf08      	it	eq
 8006b06:	89a3      	ldrheq	r3, [r4, #12]
 8006b08:	6026      	str	r6, [r4, #0]
 8006b0a:	bf04      	itt	eq
 8006b0c:	f043 0301 	orreq.w	r3, r3, #1
 8006b10:	81a3      	strheq	r3, [r4, #12]
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	f013 0208 	ands.w	r2, r3, #8
 8006b18:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006b1c:	d01d      	beq.n	8006b5a <setvbuf+0x14e>
 8006b1e:	07da      	lsls	r2, r3, #31
 8006b20:	bf41      	itttt	mi
 8006b22:	2200      	movmi	r2, #0
 8006b24:	426d      	negmi	r5, r5
 8006b26:	60a2      	strmi	r2, [r4, #8]
 8006b28:	61a5      	strmi	r5, [r4, #24]
 8006b2a:	bf58      	it	pl
 8006b2c:	60a5      	strpl	r5, [r4, #8]
 8006b2e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006b30:	f015 0501 	ands.w	r5, r5, #1
 8006b34:	d0d4      	beq.n	8006ae0 <setvbuf+0xd4>
 8006b36:	2500      	movs	r5, #0
 8006b38:	e7d7      	b.n	8006aea <setvbuf+0xde>
 8006b3a:	4648      	mov	r0, r9
 8006b3c:	f000 fa38 	bl	8006fb0 <malloc>
 8006b40:	4606      	mov	r6, r0
 8006b42:	2800      	cmp	r0, #0
 8006b44:	d0ba      	beq.n	8006abc <setvbuf+0xb0>
 8006b46:	89a3      	ldrh	r3, [r4, #12]
 8006b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4c:	81a3      	strh	r3, [r4, #12]
 8006b4e:	464d      	mov	r5, r9
 8006b50:	e7d1      	b.n	8006af6 <setvbuf+0xea>
 8006b52:	2500      	movs	r5, #0
 8006b54:	e7b4      	b.n	8006ac0 <setvbuf+0xb4>
 8006b56:	46a9      	mov	r9, r5
 8006b58:	e7f5      	b.n	8006b46 <setvbuf+0x13a>
 8006b5a:	60a2      	str	r2, [r4, #8]
 8006b5c:	e7e7      	b.n	8006b2e <setvbuf+0x122>
 8006b5e:	f04f 35ff 	mov.w	r5, #4294967295
 8006b62:	e7c2      	b.n	8006aea <setvbuf+0xde>
 8006b64:	20000068 	.word	0x20000068

08006b68 <siprintf>:
 8006b68:	b40e      	push	{r1, r2, r3}
 8006b6a:	b500      	push	{lr}
 8006b6c:	b09c      	sub	sp, #112	; 0x70
 8006b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8006b70:	9002      	str	r0, [sp, #8]
 8006b72:	9006      	str	r0, [sp, #24]
 8006b74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b78:	4809      	ldr	r0, [pc, #36]	; (8006ba0 <siprintf+0x38>)
 8006b7a:	9107      	str	r1, [sp, #28]
 8006b7c:	9104      	str	r1, [sp, #16]
 8006b7e:	4909      	ldr	r1, [pc, #36]	; (8006ba4 <siprintf+0x3c>)
 8006b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b84:	9105      	str	r1, [sp, #20]
 8006b86:	6800      	ldr	r0, [r0, #0]
 8006b88:	9301      	str	r3, [sp, #4]
 8006b8a:	a902      	add	r1, sp, #8
 8006b8c:	f000 fb1e 	bl	80071cc <_svfiprintf_r>
 8006b90:	9b02      	ldr	r3, [sp, #8]
 8006b92:	2200      	movs	r2, #0
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	b01c      	add	sp, #112	; 0x70
 8006b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b9c:	b003      	add	sp, #12
 8006b9e:	4770      	bx	lr
 8006ba0:	20000068 	.word	0x20000068
 8006ba4:	ffff0208 	.word	0xffff0208

08006ba8 <__sread>:
 8006ba8:	b510      	push	{r4, lr}
 8006baa:	460c      	mov	r4, r1
 8006bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bb0:	f000 f952 	bl	8006e58 <_read_r>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	bfab      	itete	ge
 8006bb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bba:	89a3      	ldrhlt	r3, [r4, #12]
 8006bbc:	181b      	addge	r3, r3, r0
 8006bbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bc2:	bfac      	ite	ge
 8006bc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bc6:	81a3      	strhlt	r3, [r4, #12]
 8006bc8:	bd10      	pop	{r4, pc}

08006bca <__swrite>:
 8006bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bce:	461f      	mov	r7, r3
 8006bd0:	898b      	ldrh	r3, [r1, #12]
 8006bd2:	05db      	lsls	r3, r3, #23
 8006bd4:	4605      	mov	r5, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	4616      	mov	r6, r2
 8006bda:	d505      	bpl.n	8006be8 <__swrite+0x1e>
 8006bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006be0:	2302      	movs	r3, #2
 8006be2:	2200      	movs	r2, #0
 8006be4:	f000 f926 	bl	8006e34 <_lseek_r>
 8006be8:	89a3      	ldrh	r3, [r4, #12]
 8006bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bf2:	81a3      	strh	r3, [r4, #12]
 8006bf4:	4632      	mov	r2, r6
 8006bf6:	463b      	mov	r3, r7
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfe:	f000 b93d 	b.w	8006e7c <_write_r>

08006c02 <__sseek>:
 8006c02:	b510      	push	{r4, lr}
 8006c04:	460c      	mov	r4, r1
 8006c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c0a:	f000 f913 	bl	8006e34 <_lseek_r>
 8006c0e:	1c43      	adds	r3, r0, #1
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	bf15      	itete	ne
 8006c14:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c1e:	81a3      	strheq	r3, [r4, #12]
 8006c20:	bf18      	it	ne
 8006c22:	81a3      	strhne	r3, [r4, #12]
 8006c24:	bd10      	pop	{r4, pc}

08006c26 <__sclose>:
 8006c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c2a:	f000 b89d 	b.w	8006d68 <_close_r>

08006c2e <__swbuf_r>:
 8006c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c30:	460e      	mov	r6, r1
 8006c32:	4614      	mov	r4, r2
 8006c34:	4605      	mov	r5, r0
 8006c36:	b118      	cbz	r0, 8006c40 <__swbuf_r+0x12>
 8006c38:	6a03      	ldr	r3, [r0, #32]
 8006c3a:	b90b      	cbnz	r3, 8006c40 <__swbuf_r+0x12>
 8006c3c:	f7ff fe42 	bl	80068c4 <__sinit>
 8006c40:	69a3      	ldr	r3, [r4, #24]
 8006c42:	60a3      	str	r3, [r4, #8]
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	071a      	lsls	r2, r3, #28
 8006c48:	d525      	bpl.n	8006c96 <__swbuf_r+0x68>
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	b31b      	cbz	r3, 8006c96 <__swbuf_r+0x68>
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	6922      	ldr	r2, [r4, #16]
 8006c52:	1a98      	subs	r0, r3, r2
 8006c54:	6963      	ldr	r3, [r4, #20]
 8006c56:	b2f6      	uxtb	r6, r6
 8006c58:	4283      	cmp	r3, r0
 8006c5a:	4637      	mov	r7, r6
 8006c5c:	dc04      	bgt.n	8006c68 <__swbuf_r+0x3a>
 8006c5e:	4621      	mov	r1, r4
 8006c60:	4628      	mov	r0, r5
 8006c62:	f000 ff0b 	bl	8007a7c <_fflush_r>
 8006c66:	b9e0      	cbnz	r0, 8006ca2 <__swbuf_r+0x74>
 8006c68:	68a3      	ldr	r3, [r4, #8]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	60a3      	str	r3, [r4, #8]
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	6022      	str	r2, [r4, #0]
 8006c74:	701e      	strb	r6, [r3, #0]
 8006c76:	6962      	ldr	r2, [r4, #20]
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d004      	beq.n	8006c88 <__swbuf_r+0x5a>
 8006c7e:	89a3      	ldrh	r3, [r4, #12]
 8006c80:	07db      	lsls	r3, r3, #31
 8006c82:	d506      	bpl.n	8006c92 <__swbuf_r+0x64>
 8006c84:	2e0a      	cmp	r6, #10
 8006c86:	d104      	bne.n	8006c92 <__swbuf_r+0x64>
 8006c88:	4621      	mov	r1, r4
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f000 fef6 	bl	8007a7c <_fflush_r>
 8006c90:	b938      	cbnz	r0, 8006ca2 <__swbuf_r+0x74>
 8006c92:	4638      	mov	r0, r7
 8006c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c96:	4621      	mov	r1, r4
 8006c98:	4628      	mov	r0, r5
 8006c9a:	f000 f805 	bl	8006ca8 <__swsetup_r>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d0d5      	beq.n	8006c4e <__swbuf_r+0x20>
 8006ca2:	f04f 37ff 	mov.w	r7, #4294967295
 8006ca6:	e7f4      	b.n	8006c92 <__swbuf_r+0x64>

08006ca8 <__swsetup_r>:
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	4b2a      	ldr	r3, [pc, #168]	; (8006d54 <__swsetup_r+0xac>)
 8006cac:	4605      	mov	r5, r0
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	b118      	cbz	r0, 8006cbc <__swsetup_r+0x14>
 8006cb4:	6a03      	ldr	r3, [r0, #32]
 8006cb6:	b90b      	cbnz	r3, 8006cbc <__swsetup_r+0x14>
 8006cb8:	f7ff fe04 	bl	80068c4 <__sinit>
 8006cbc:	89a3      	ldrh	r3, [r4, #12]
 8006cbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cc2:	0718      	lsls	r0, r3, #28
 8006cc4:	d422      	bmi.n	8006d0c <__swsetup_r+0x64>
 8006cc6:	06d9      	lsls	r1, r3, #27
 8006cc8:	d407      	bmi.n	8006cda <__swsetup_r+0x32>
 8006cca:	2309      	movs	r3, #9
 8006ccc:	602b      	str	r3, [r5, #0]
 8006cce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cd2:	81a3      	strh	r3, [r4, #12]
 8006cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd8:	e034      	b.n	8006d44 <__swsetup_r+0x9c>
 8006cda:	0758      	lsls	r0, r3, #29
 8006cdc:	d512      	bpl.n	8006d04 <__swsetup_r+0x5c>
 8006cde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ce0:	b141      	cbz	r1, 8006cf4 <__swsetup_r+0x4c>
 8006ce2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ce6:	4299      	cmp	r1, r3
 8006ce8:	d002      	beq.n	8006cf0 <__swsetup_r+0x48>
 8006cea:	4628      	mov	r0, r5
 8006cec:	f000 f914 	bl	8006f18 <_free_r>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	6363      	str	r3, [r4, #52]	; 0x34
 8006cf4:	89a3      	ldrh	r3, [r4, #12]
 8006cf6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cfa:	81a3      	strh	r3, [r4, #12]
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	6063      	str	r3, [r4, #4]
 8006d00:	6923      	ldr	r3, [r4, #16]
 8006d02:	6023      	str	r3, [r4, #0]
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	f043 0308 	orr.w	r3, r3, #8
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	6923      	ldr	r3, [r4, #16]
 8006d0e:	b94b      	cbnz	r3, 8006d24 <__swsetup_r+0x7c>
 8006d10:	89a3      	ldrh	r3, [r4, #12]
 8006d12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d1a:	d003      	beq.n	8006d24 <__swsetup_r+0x7c>
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f000 fefa 	bl	8007b18 <__smakebuf_r>
 8006d24:	89a0      	ldrh	r0, [r4, #12]
 8006d26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d2a:	f010 0301 	ands.w	r3, r0, #1
 8006d2e:	d00a      	beq.n	8006d46 <__swsetup_r+0x9e>
 8006d30:	2300      	movs	r3, #0
 8006d32:	60a3      	str	r3, [r4, #8]
 8006d34:	6963      	ldr	r3, [r4, #20]
 8006d36:	425b      	negs	r3, r3
 8006d38:	61a3      	str	r3, [r4, #24]
 8006d3a:	6923      	ldr	r3, [r4, #16]
 8006d3c:	b943      	cbnz	r3, 8006d50 <__swsetup_r+0xa8>
 8006d3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d42:	d1c4      	bne.n	8006cce <__swsetup_r+0x26>
 8006d44:	bd38      	pop	{r3, r4, r5, pc}
 8006d46:	0781      	lsls	r1, r0, #30
 8006d48:	bf58      	it	pl
 8006d4a:	6963      	ldrpl	r3, [r4, #20]
 8006d4c:	60a3      	str	r3, [r4, #8]
 8006d4e:	e7f4      	b.n	8006d3a <__swsetup_r+0x92>
 8006d50:	2000      	movs	r0, #0
 8006d52:	e7f7      	b.n	8006d44 <__swsetup_r+0x9c>
 8006d54:	20000068 	.word	0x20000068

08006d58 <memset>:
 8006d58:	4402      	add	r2, r0
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d100      	bne.n	8006d62 <memset+0xa>
 8006d60:	4770      	bx	lr
 8006d62:	f803 1b01 	strb.w	r1, [r3], #1
 8006d66:	e7f9      	b.n	8006d5c <memset+0x4>

08006d68 <_close_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4d06      	ldr	r5, [pc, #24]	; (8006d84 <_close_r+0x1c>)
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	4604      	mov	r4, r0
 8006d70:	4608      	mov	r0, r1
 8006d72:	602b      	str	r3, [r5, #0]
 8006d74:	f7fa ff49 	bl	8001c0a <_close>
 8006d78:	1c43      	adds	r3, r0, #1
 8006d7a:	d102      	bne.n	8006d82 <_close_r+0x1a>
 8006d7c:	682b      	ldr	r3, [r5, #0]
 8006d7e:	b103      	cbz	r3, 8006d82 <_close_r+0x1a>
 8006d80:	6023      	str	r3, [r4, #0]
 8006d82:	bd38      	pop	{r3, r4, r5, pc}
 8006d84:	20004308 	.word	0x20004308

08006d88 <_reclaim_reent>:
 8006d88:	4b29      	ldr	r3, [pc, #164]	; (8006e30 <_reclaim_reent+0xa8>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4283      	cmp	r3, r0
 8006d8e:	b570      	push	{r4, r5, r6, lr}
 8006d90:	4604      	mov	r4, r0
 8006d92:	d04b      	beq.n	8006e2c <_reclaim_reent+0xa4>
 8006d94:	69c3      	ldr	r3, [r0, #28]
 8006d96:	b143      	cbz	r3, 8006daa <_reclaim_reent+0x22>
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d144      	bne.n	8006e28 <_reclaim_reent+0xa0>
 8006d9e:	69e3      	ldr	r3, [r4, #28]
 8006da0:	6819      	ldr	r1, [r3, #0]
 8006da2:	b111      	cbz	r1, 8006daa <_reclaim_reent+0x22>
 8006da4:	4620      	mov	r0, r4
 8006da6:	f000 f8b7 	bl	8006f18 <_free_r>
 8006daa:	6961      	ldr	r1, [r4, #20]
 8006dac:	b111      	cbz	r1, 8006db4 <_reclaim_reent+0x2c>
 8006dae:	4620      	mov	r0, r4
 8006db0:	f000 f8b2 	bl	8006f18 <_free_r>
 8006db4:	69e1      	ldr	r1, [r4, #28]
 8006db6:	b111      	cbz	r1, 8006dbe <_reclaim_reent+0x36>
 8006db8:	4620      	mov	r0, r4
 8006dba:	f000 f8ad 	bl	8006f18 <_free_r>
 8006dbe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006dc0:	b111      	cbz	r1, 8006dc8 <_reclaim_reent+0x40>
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 f8a8 	bl	8006f18 <_free_r>
 8006dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dca:	b111      	cbz	r1, 8006dd2 <_reclaim_reent+0x4a>
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f000 f8a3 	bl	8006f18 <_free_r>
 8006dd2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006dd4:	b111      	cbz	r1, 8006ddc <_reclaim_reent+0x54>
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f000 f89e 	bl	8006f18 <_free_r>
 8006ddc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006dde:	b111      	cbz	r1, 8006de6 <_reclaim_reent+0x5e>
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 f899 	bl	8006f18 <_free_r>
 8006de6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006de8:	b111      	cbz	r1, 8006df0 <_reclaim_reent+0x68>
 8006dea:	4620      	mov	r0, r4
 8006dec:	f000 f894 	bl	8006f18 <_free_r>
 8006df0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006df2:	b111      	cbz	r1, 8006dfa <_reclaim_reent+0x72>
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 f88f 	bl	8006f18 <_free_r>
 8006dfa:	6a23      	ldr	r3, [r4, #32]
 8006dfc:	b1b3      	cbz	r3, 8006e2c <_reclaim_reent+0xa4>
 8006dfe:	4620      	mov	r0, r4
 8006e00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006e04:	4718      	bx	r3
 8006e06:	5949      	ldr	r1, [r1, r5]
 8006e08:	b941      	cbnz	r1, 8006e1c <_reclaim_reent+0x94>
 8006e0a:	3504      	adds	r5, #4
 8006e0c:	69e3      	ldr	r3, [r4, #28]
 8006e0e:	2d80      	cmp	r5, #128	; 0x80
 8006e10:	68d9      	ldr	r1, [r3, #12]
 8006e12:	d1f8      	bne.n	8006e06 <_reclaim_reent+0x7e>
 8006e14:	4620      	mov	r0, r4
 8006e16:	f000 f87f 	bl	8006f18 <_free_r>
 8006e1a:	e7c0      	b.n	8006d9e <_reclaim_reent+0x16>
 8006e1c:	680e      	ldr	r6, [r1, #0]
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f000 f87a 	bl	8006f18 <_free_r>
 8006e24:	4631      	mov	r1, r6
 8006e26:	e7ef      	b.n	8006e08 <_reclaim_reent+0x80>
 8006e28:	2500      	movs	r5, #0
 8006e2a:	e7ef      	b.n	8006e0c <_reclaim_reent+0x84>
 8006e2c:	bd70      	pop	{r4, r5, r6, pc}
 8006e2e:	bf00      	nop
 8006e30:	20000068 	.word	0x20000068

08006e34 <_lseek_r>:
 8006e34:	b538      	push	{r3, r4, r5, lr}
 8006e36:	4d07      	ldr	r5, [pc, #28]	; (8006e54 <_lseek_r+0x20>)
 8006e38:	4604      	mov	r4, r0
 8006e3a:	4608      	mov	r0, r1
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	2200      	movs	r2, #0
 8006e40:	602a      	str	r2, [r5, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	f7fa ff08 	bl	8001c58 <_lseek>
 8006e48:	1c43      	adds	r3, r0, #1
 8006e4a:	d102      	bne.n	8006e52 <_lseek_r+0x1e>
 8006e4c:	682b      	ldr	r3, [r5, #0]
 8006e4e:	b103      	cbz	r3, 8006e52 <_lseek_r+0x1e>
 8006e50:	6023      	str	r3, [r4, #0]
 8006e52:	bd38      	pop	{r3, r4, r5, pc}
 8006e54:	20004308 	.word	0x20004308

08006e58 <_read_r>:
 8006e58:	b538      	push	{r3, r4, r5, lr}
 8006e5a:	4d07      	ldr	r5, [pc, #28]	; (8006e78 <_read_r+0x20>)
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	4608      	mov	r0, r1
 8006e60:	4611      	mov	r1, r2
 8006e62:	2200      	movs	r2, #0
 8006e64:	602a      	str	r2, [r5, #0]
 8006e66:	461a      	mov	r2, r3
 8006e68:	f7fa fe96 	bl	8001b98 <_read>
 8006e6c:	1c43      	adds	r3, r0, #1
 8006e6e:	d102      	bne.n	8006e76 <_read_r+0x1e>
 8006e70:	682b      	ldr	r3, [r5, #0]
 8006e72:	b103      	cbz	r3, 8006e76 <_read_r+0x1e>
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	bd38      	pop	{r3, r4, r5, pc}
 8006e78:	20004308 	.word	0x20004308

08006e7c <_write_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	4d07      	ldr	r5, [pc, #28]	; (8006e9c <_write_r+0x20>)
 8006e80:	4604      	mov	r4, r0
 8006e82:	4608      	mov	r0, r1
 8006e84:	4611      	mov	r1, r2
 8006e86:	2200      	movs	r2, #0
 8006e88:	602a      	str	r2, [r5, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f7fa fea1 	bl	8001bd2 <_write>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d102      	bne.n	8006e9a <_write_r+0x1e>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	b103      	cbz	r3, 8006e9a <_write_r+0x1e>
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	20004308 	.word	0x20004308

08006ea0 <__errno>:
 8006ea0:	4b01      	ldr	r3, [pc, #4]	; (8006ea8 <__errno+0x8>)
 8006ea2:	6818      	ldr	r0, [r3, #0]
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	20000068 	.word	0x20000068

08006eac <__libc_init_array>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	4d0d      	ldr	r5, [pc, #52]	; (8006ee4 <__libc_init_array+0x38>)
 8006eb0:	4c0d      	ldr	r4, [pc, #52]	; (8006ee8 <__libc_init_array+0x3c>)
 8006eb2:	1b64      	subs	r4, r4, r5
 8006eb4:	10a4      	asrs	r4, r4, #2
 8006eb6:	2600      	movs	r6, #0
 8006eb8:	42a6      	cmp	r6, r4
 8006eba:	d109      	bne.n	8006ed0 <__libc_init_array+0x24>
 8006ebc:	4d0b      	ldr	r5, [pc, #44]	; (8006eec <__libc_init_array+0x40>)
 8006ebe:	4c0c      	ldr	r4, [pc, #48]	; (8006ef0 <__libc_init_array+0x44>)
 8006ec0:	f000 feea 	bl	8007c98 <_init>
 8006ec4:	1b64      	subs	r4, r4, r5
 8006ec6:	10a4      	asrs	r4, r4, #2
 8006ec8:	2600      	movs	r6, #0
 8006eca:	42a6      	cmp	r6, r4
 8006ecc:	d105      	bne.n	8006eda <__libc_init_array+0x2e>
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed4:	4798      	blx	r3
 8006ed6:	3601      	adds	r6, #1
 8006ed8:	e7ee      	b.n	8006eb8 <__libc_init_array+0xc>
 8006eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ede:	4798      	blx	r3
 8006ee0:	3601      	adds	r6, #1
 8006ee2:	e7f2      	b.n	8006eca <__libc_init_array+0x1e>
 8006ee4:	08007e88 	.word	0x08007e88
 8006ee8:	08007e88 	.word	0x08007e88
 8006eec:	08007e88 	.word	0x08007e88
 8006ef0:	08007e8c 	.word	0x08007e8c

08006ef4 <__retarget_lock_init_recursive>:
 8006ef4:	4770      	bx	lr

08006ef6 <__retarget_lock_acquire_recursive>:
 8006ef6:	4770      	bx	lr

08006ef8 <__retarget_lock_release_recursive>:
 8006ef8:	4770      	bx	lr

08006efa <memcpy>:
 8006efa:	440a      	add	r2, r1
 8006efc:	4291      	cmp	r1, r2
 8006efe:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f02:	d100      	bne.n	8006f06 <memcpy+0xc>
 8006f04:	4770      	bx	lr
 8006f06:	b510      	push	{r4, lr}
 8006f08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f10:	4291      	cmp	r1, r2
 8006f12:	d1f9      	bne.n	8006f08 <memcpy+0xe>
 8006f14:	bd10      	pop	{r4, pc}
	...

08006f18 <_free_r>:
 8006f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f1a:	2900      	cmp	r1, #0
 8006f1c:	d044      	beq.n	8006fa8 <_free_r+0x90>
 8006f1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f22:	9001      	str	r0, [sp, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f1a1 0404 	sub.w	r4, r1, #4
 8006f2a:	bfb8      	it	lt
 8006f2c:	18e4      	addlt	r4, r4, r3
 8006f2e:	f000 f8e7 	bl	8007100 <__malloc_lock>
 8006f32:	4a1e      	ldr	r2, [pc, #120]	; (8006fac <_free_r+0x94>)
 8006f34:	9801      	ldr	r0, [sp, #4]
 8006f36:	6813      	ldr	r3, [r2, #0]
 8006f38:	b933      	cbnz	r3, 8006f48 <_free_r+0x30>
 8006f3a:	6063      	str	r3, [r4, #4]
 8006f3c:	6014      	str	r4, [r2, #0]
 8006f3e:	b003      	add	sp, #12
 8006f40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f44:	f000 b8e2 	b.w	800710c <__malloc_unlock>
 8006f48:	42a3      	cmp	r3, r4
 8006f4a:	d908      	bls.n	8006f5e <_free_r+0x46>
 8006f4c:	6825      	ldr	r5, [r4, #0]
 8006f4e:	1961      	adds	r1, r4, r5
 8006f50:	428b      	cmp	r3, r1
 8006f52:	bf01      	itttt	eq
 8006f54:	6819      	ldreq	r1, [r3, #0]
 8006f56:	685b      	ldreq	r3, [r3, #4]
 8006f58:	1949      	addeq	r1, r1, r5
 8006f5a:	6021      	streq	r1, [r4, #0]
 8006f5c:	e7ed      	b.n	8006f3a <_free_r+0x22>
 8006f5e:	461a      	mov	r2, r3
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	b10b      	cbz	r3, 8006f68 <_free_r+0x50>
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	d9fa      	bls.n	8006f5e <_free_r+0x46>
 8006f68:	6811      	ldr	r1, [r2, #0]
 8006f6a:	1855      	adds	r5, r2, r1
 8006f6c:	42a5      	cmp	r5, r4
 8006f6e:	d10b      	bne.n	8006f88 <_free_r+0x70>
 8006f70:	6824      	ldr	r4, [r4, #0]
 8006f72:	4421      	add	r1, r4
 8006f74:	1854      	adds	r4, r2, r1
 8006f76:	42a3      	cmp	r3, r4
 8006f78:	6011      	str	r1, [r2, #0]
 8006f7a:	d1e0      	bne.n	8006f3e <_free_r+0x26>
 8006f7c:	681c      	ldr	r4, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	6053      	str	r3, [r2, #4]
 8006f82:	440c      	add	r4, r1
 8006f84:	6014      	str	r4, [r2, #0]
 8006f86:	e7da      	b.n	8006f3e <_free_r+0x26>
 8006f88:	d902      	bls.n	8006f90 <_free_r+0x78>
 8006f8a:	230c      	movs	r3, #12
 8006f8c:	6003      	str	r3, [r0, #0]
 8006f8e:	e7d6      	b.n	8006f3e <_free_r+0x26>
 8006f90:	6825      	ldr	r5, [r4, #0]
 8006f92:	1961      	adds	r1, r4, r5
 8006f94:	428b      	cmp	r3, r1
 8006f96:	bf04      	itt	eq
 8006f98:	6819      	ldreq	r1, [r3, #0]
 8006f9a:	685b      	ldreq	r3, [r3, #4]
 8006f9c:	6063      	str	r3, [r4, #4]
 8006f9e:	bf04      	itt	eq
 8006fa0:	1949      	addeq	r1, r1, r5
 8006fa2:	6021      	streq	r1, [r4, #0]
 8006fa4:	6054      	str	r4, [r2, #4]
 8006fa6:	e7ca      	b.n	8006f3e <_free_r+0x26>
 8006fa8:	b003      	add	sp, #12
 8006faa:	bd30      	pop	{r4, r5, pc}
 8006fac:	20004310 	.word	0x20004310

08006fb0 <malloc>:
 8006fb0:	4b02      	ldr	r3, [pc, #8]	; (8006fbc <malloc+0xc>)
 8006fb2:	4601      	mov	r1, r0
 8006fb4:	6818      	ldr	r0, [r3, #0]
 8006fb6:	f000 b823 	b.w	8007000 <_malloc_r>
 8006fba:	bf00      	nop
 8006fbc:	20000068 	.word	0x20000068

08006fc0 <sbrk_aligned>:
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	4e0e      	ldr	r6, [pc, #56]	; (8006ffc <sbrk_aligned+0x3c>)
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	6831      	ldr	r1, [r6, #0]
 8006fc8:	4605      	mov	r5, r0
 8006fca:	b911      	cbnz	r1, 8006fd2 <sbrk_aligned+0x12>
 8006fcc:	f000 fe1c 	bl	8007c08 <_sbrk_r>
 8006fd0:	6030      	str	r0, [r6, #0]
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	f000 fe17 	bl	8007c08 <_sbrk_r>
 8006fda:	1c43      	adds	r3, r0, #1
 8006fdc:	d00a      	beq.n	8006ff4 <sbrk_aligned+0x34>
 8006fde:	1cc4      	adds	r4, r0, #3
 8006fe0:	f024 0403 	bic.w	r4, r4, #3
 8006fe4:	42a0      	cmp	r0, r4
 8006fe6:	d007      	beq.n	8006ff8 <sbrk_aligned+0x38>
 8006fe8:	1a21      	subs	r1, r4, r0
 8006fea:	4628      	mov	r0, r5
 8006fec:	f000 fe0c 	bl	8007c08 <_sbrk_r>
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d101      	bne.n	8006ff8 <sbrk_aligned+0x38>
 8006ff4:	f04f 34ff 	mov.w	r4, #4294967295
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	bd70      	pop	{r4, r5, r6, pc}
 8006ffc:	20004314 	.word	0x20004314

08007000 <_malloc_r>:
 8007000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007004:	1ccd      	adds	r5, r1, #3
 8007006:	f025 0503 	bic.w	r5, r5, #3
 800700a:	3508      	adds	r5, #8
 800700c:	2d0c      	cmp	r5, #12
 800700e:	bf38      	it	cc
 8007010:	250c      	movcc	r5, #12
 8007012:	2d00      	cmp	r5, #0
 8007014:	4607      	mov	r7, r0
 8007016:	db01      	blt.n	800701c <_malloc_r+0x1c>
 8007018:	42a9      	cmp	r1, r5
 800701a:	d905      	bls.n	8007028 <_malloc_r+0x28>
 800701c:	230c      	movs	r3, #12
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	2600      	movs	r6, #0
 8007022:	4630      	mov	r0, r6
 8007024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007028:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80070fc <_malloc_r+0xfc>
 800702c:	f000 f868 	bl	8007100 <__malloc_lock>
 8007030:	f8d8 3000 	ldr.w	r3, [r8]
 8007034:	461c      	mov	r4, r3
 8007036:	bb5c      	cbnz	r4, 8007090 <_malloc_r+0x90>
 8007038:	4629      	mov	r1, r5
 800703a:	4638      	mov	r0, r7
 800703c:	f7ff ffc0 	bl	8006fc0 <sbrk_aligned>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	4604      	mov	r4, r0
 8007044:	d155      	bne.n	80070f2 <_malloc_r+0xf2>
 8007046:	f8d8 4000 	ldr.w	r4, [r8]
 800704a:	4626      	mov	r6, r4
 800704c:	2e00      	cmp	r6, #0
 800704e:	d145      	bne.n	80070dc <_malloc_r+0xdc>
 8007050:	2c00      	cmp	r4, #0
 8007052:	d048      	beq.n	80070e6 <_malloc_r+0xe6>
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	4631      	mov	r1, r6
 8007058:	4638      	mov	r0, r7
 800705a:	eb04 0903 	add.w	r9, r4, r3
 800705e:	f000 fdd3 	bl	8007c08 <_sbrk_r>
 8007062:	4581      	cmp	r9, r0
 8007064:	d13f      	bne.n	80070e6 <_malloc_r+0xe6>
 8007066:	6821      	ldr	r1, [r4, #0]
 8007068:	1a6d      	subs	r5, r5, r1
 800706a:	4629      	mov	r1, r5
 800706c:	4638      	mov	r0, r7
 800706e:	f7ff ffa7 	bl	8006fc0 <sbrk_aligned>
 8007072:	3001      	adds	r0, #1
 8007074:	d037      	beq.n	80070e6 <_malloc_r+0xe6>
 8007076:	6823      	ldr	r3, [r4, #0]
 8007078:	442b      	add	r3, r5
 800707a:	6023      	str	r3, [r4, #0]
 800707c:	f8d8 3000 	ldr.w	r3, [r8]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d038      	beq.n	80070f6 <_malloc_r+0xf6>
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	42a2      	cmp	r2, r4
 8007088:	d12b      	bne.n	80070e2 <_malloc_r+0xe2>
 800708a:	2200      	movs	r2, #0
 800708c:	605a      	str	r2, [r3, #4]
 800708e:	e00f      	b.n	80070b0 <_malloc_r+0xb0>
 8007090:	6822      	ldr	r2, [r4, #0]
 8007092:	1b52      	subs	r2, r2, r5
 8007094:	d41f      	bmi.n	80070d6 <_malloc_r+0xd6>
 8007096:	2a0b      	cmp	r2, #11
 8007098:	d917      	bls.n	80070ca <_malloc_r+0xca>
 800709a:	1961      	adds	r1, r4, r5
 800709c:	42a3      	cmp	r3, r4
 800709e:	6025      	str	r5, [r4, #0]
 80070a0:	bf18      	it	ne
 80070a2:	6059      	strne	r1, [r3, #4]
 80070a4:	6863      	ldr	r3, [r4, #4]
 80070a6:	bf08      	it	eq
 80070a8:	f8c8 1000 	streq.w	r1, [r8]
 80070ac:	5162      	str	r2, [r4, r5]
 80070ae:	604b      	str	r3, [r1, #4]
 80070b0:	4638      	mov	r0, r7
 80070b2:	f104 060b 	add.w	r6, r4, #11
 80070b6:	f000 f829 	bl	800710c <__malloc_unlock>
 80070ba:	f026 0607 	bic.w	r6, r6, #7
 80070be:	1d23      	adds	r3, r4, #4
 80070c0:	1af2      	subs	r2, r6, r3
 80070c2:	d0ae      	beq.n	8007022 <_malloc_r+0x22>
 80070c4:	1b9b      	subs	r3, r3, r6
 80070c6:	50a3      	str	r3, [r4, r2]
 80070c8:	e7ab      	b.n	8007022 <_malloc_r+0x22>
 80070ca:	42a3      	cmp	r3, r4
 80070cc:	6862      	ldr	r2, [r4, #4]
 80070ce:	d1dd      	bne.n	800708c <_malloc_r+0x8c>
 80070d0:	f8c8 2000 	str.w	r2, [r8]
 80070d4:	e7ec      	b.n	80070b0 <_malloc_r+0xb0>
 80070d6:	4623      	mov	r3, r4
 80070d8:	6864      	ldr	r4, [r4, #4]
 80070da:	e7ac      	b.n	8007036 <_malloc_r+0x36>
 80070dc:	4634      	mov	r4, r6
 80070de:	6876      	ldr	r6, [r6, #4]
 80070e0:	e7b4      	b.n	800704c <_malloc_r+0x4c>
 80070e2:	4613      	mov	r3, r2
 80070e4:	e7cc      	b.n	8007080 <_malloc_r+0x80>
 80070e6:	230c      	movs	r3, #12
 80070e8:	603b      	str	r3, [r7, #0]
 80070ea:	4638      	mov	r0, r7
 80070ec:	f000 f80e 	bl	800710c <__malloc_unlock>
 80070f0:	e797      	b.n	8007022 <_malloc_r+0x22>
 80070f2:	6025      	str	r5, [r4, #0]
 80070f4:	e7dc      	b.n	80070b0 <_malloc_r+0xb0>
 80070f6:	605b      	str	r3, [r3, #4]
 80070f8:	deff      	udf	#255	; 0xff
 80070fa:	bf00      	nop
 80070fc:	20004310 	.word	0x20004310

08007100 <__malloc_lock>:
 8007100:	4801      	ldr	r0, [pc, #4]	; (8007108 <__malloc_lock+0x8>)
 8007102:	f7ff bef8 	b.w	8006ef6 <__retarget_lock_acquire_recursive>
 8007106:	bf00      	nop
 8007108:	2000430c 	.word	0x2000430c

0800710c <__malloc_unlock>:
 800710c:	4801      	ldr	r0, [pc, #4]	; (8007114 <__malloc_unlock+0x8>)
 800710e:	f7ff bef3 	b.w	8006ef8 <__retarget_lock_release_recursive>
 8007112:	bf00      	nop
 8007114:	2000430c 	.word	0x2000430c

08007118 <__ssputs_r>:
 8007118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800711c:	688e      	ldr	r6, [r1, #8]
 800711e:	461f      	mov	r7, r3
 8007120:	42be      	cmp	r6, r7
 8007122:	680b      	ldr	r3, [r1, #0]
 8007124:	4682      	mov	sl, r0
 8007126:	460c      	mov	r4, r1
 8007128:	4690      	mov	r8, r2
 800712a:	d82c      	bhi.n	8007186 <__ssputs_r+0x6e>
 800712c:	898a      	ldrh	r2, [r1, #12]
 800712e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007132:	d026      	beq.n	8007182 <__ssputs_r+0x6a>
 8007134:	6965      	ldr	r5, [r4, #20]
 8007136:	6909      	ldr	r1, [r1, #16]
 8007138:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800713c:	eba3 0901 	sub.w	r9, r3, r1
 8007140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007144:	1c7b      	adds	r3, r7, #1
 8007146:	444b      	add	r3, r9
 8007148:	106d      	asrs	r5, r5, #1
 800714a:	429d      	cmp	r5, r3
 800714c:	bf38      	it	cc
 800714e:	461d      	movcc	r5, r3
 8007150:	0553      	lsls	r3, r2, #21
 8007152:	d527      	bpl.n	80071a4 <__ssputs_r+0x8c>
 8007154:	4629      	mov	r1, r5
 8007156:	f7ff ff53 	bl	8007000 <_malloc_r>
 800715a:	4606      	mov	r6, r0
 800715c:	b360      	cbz	r0, 80071b8 <__ssputs_r+0xa0>
 800715e:	6921      	ldr	r1, [r4, #16]
 8007160:	464a      	mov	r2, r9
 8007162:	f7ff feca 	bl	8006efa <memcpy>
 8007166:	89a3      	ldrh	r3, [r4, #12]
 8007168:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800716c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007170:	81a3      	strh	r3, [r4, #12]
 8007172:	6126      	str	r6, [r4, #16]
 8007174:	6165      	str	r5, [r4, #20]
 8007176:	444e      	add	r6, r9
 8007178:	eba5 0509 	sub.w	r5, r5, r9
 800717c:	6026      	str	r6, [r4, #0]
 800717e:	60a5      	str	r5, [r4, #8]
 8007180:	463e      	mov	r6, r7
 8007182:	42be      	cmp	r6, r7
 8007184:	d900      	bls.n	8007188 <__ssputs_r+0x70>
 8007186:	463e      	mov	r6, r7
 8007188:	6820      	ldr	r0, [r4, #0]
 800718a:	4632      	mov	r2, r6
 800718c:	4641      	mov	r1, r8
 800718e:	f000 fcff 	bl	8007b90 <memmove>
 8007192:	68a3      	ldr	r3, [r4, #8]
 8007194:	1b9b      	subs	r3, r3, r6
 8007196:	60a3      	str	r3, [r4, #8]
 8007198:	6823      	ldr	r3, [r4, #0]
 800719a:	4433      	add	r3, r6
 800719c:	6023      	str	r3, [r4, #0]
 800719e:	2000      	movs	r0, #0
 80071a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a4:	462a      	mov	r2, r5
 80071a6:	f000 fd3f 	bl	8007c28 <_realloc_r>
 80071aa:	4606      	mov	r6, r0
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d1e0      	bne.n	8007172 <__ssputs_r+0x5a>
 80071b0:	6921      	ldr	r1, [r4, #16]
 80071b2:	4650      	mov	r0, sl
 80071b4:	f7ff feb0 	bl	8006f18 <_free_r>
 80071b8:	230c      	movs	r3, #12
 80071ba:	f8ca 3000 	str.w	r3, [sl]
 80071be:	89a3      	ldrh	r3, [r4, #12]
 80071c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071c4:	81a3      	strh	r3, [r4, #12]
 80071c6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ca:	e7e9      	b.n	80071a0 <__ssputs_r+0x88>

080071cc <_svfiprintf_r>:
 80071cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d0:	4698      	mov	r8, r3
 80071d2:	898b      	ldrh	r3, [r1, #12]
 80071d4:	061b      	lsls	r3, r3, #24
 80071d6:	b09d      	sub	sp, #116	; 0x74
 80071d8:	4607      	mov	r7, r0
 80071da:	460d      	mov	r5, r1
 80071dc:	4614      	mov	r4, r2
 80071de:	d50e      	bpl.n	80071fe <_svfiprintf_r+0x32>
 80071e0:	690b      	ldr	r3, [r1, #16]
 80071e2:	b963      	cbnz	r3, 80071fe <_svfiprintf_r+0x32>
 80071e4:	2140      	movs	r1, #64	; 0x40
 80071e6:	f7ff ff0b 	bl	8007000 <_malloc_r>
 80071ea:	6028      	str	r0, [r5, #0]
 80071ec:	6128      	str	r0, [r5, #16]
 80071ee:	b920      	cbnz	r0, 80071fa <_svfiprintf_r+0x2e>
 80071f0:	230c      	movs	r3, #12
 80071f2:	603b      	str	r3, [r7, #0]
 80071f4:	f04f 30ff 	mov.w	r0, #4294967295
 80071f8:	e0d0      	b.n	800739c <_svfiprintf_r+0x1d0>
 80071fa:	2340      	movs	r3, #64	; 0x40
 80071fc:	616b      	str	r3, [r5, #20]
 80071fe:	2300      	movs	r3, #0
 8007200:	9309      	str	r3, [sp, #36]	; 0x24
 8007202:	2320      	movs	r3, #32
 8007204:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007208:	f8cd 800c 	str.w	r8, [sp, #12]
 800720c:	2330      	movs	r3, #48	; 0x30
 800720e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80073b4 <_svfiprintf_r+0x1e8>
 8007212:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007216:	f04f 0901 	mov.w	r9, #1
 800721a:	4623      	mov	r3, r4
 800721c:	469a      	mov	sl, r3
 800721e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007222:	b10a      	cbz	r2, 8007228 <_svfiprintf_r+0x5c>
 8007224:	2a25      	cmp	r2, #37	; 0x25
 8007226:	d1f9      	bne.n	800721c <_svfiprintf_r+0x50>
 8007228:	ebba 0b04 	subs.w	fp, sl, r4
 800722c:	d00b      	beq.n	8007246 <_svfiprintf_r+0x7a>
 800722e:	465b      	mov	r3, fp
 8007230:	4622      	mov	r2, r4
 8007232:	4629      	mov	r1, r5
 8007234:	4638      	mov	r0, r7
 8007236:	f7ff ff6f 	bl	8007118 <__ssputs_r>
 800723a:	3001      	adds	r0, #1
 800723c:	f000 80a9 	beq.w	8007392 <_svfiprintf_r+0x1c6>
 8007240:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007242:	445a      	add	r2, fp
 8007244:	9209      	str	r2, [sp, #36]	; 0x24
 8007246:	f89a 3000 	ldrb.w	r3, [sl]
 800724a:	2b00      	cmp	r3, #0
 800724c:	f000 80a1 	beq.w	8007392 <_svfiprintf_r+0x1c6>
 8007250:	2300      	movs	r3, #0
 8007252:	f04f 32ff 	mov.w	r2, #4294967295
 8007256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800725a:	f10a 0a01 	add.w	sl, sl, #1
 800725e:	9304      	str	r3, [sp, #16]
 8007260:	9307      	str	r3, [sp, #28]
 8007262:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007266:	931a      	str	r3, [sp, #104]	; 0x68
 8007268:	4654      	mov	r4, sl
 800726a:	2205      	movs	r2, #5
 800726c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007270:	4850      	ldr	r0, [pc, #320]	; (80073b4 <_svfiprintf_r+0x1e8>)
 8007272:	f7f8 ffb5 	bl	80001e0 <memchr>
 8007276:	9a04      	ldr	r2, [sp, #16]
 8007278:	b9d8      	cbnz	r0, 80072b2 <_svfiprintf_r+0xe6>
 800727a:	06d0      	lsls	r0, r2, #27
 800727c:	bf44      	itt	mi
 800727e:	2320      	movmi	r3, #32
 8007280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007284:	0711      	lsls	r1, r2, #28
 8007286:	bf44      	itt	mi
 8007288:	232b      	movmi	r3, #43	; 0x2b
 800728a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800728e:	f89a 3000 	ldrb.w	r3, [sl]
 8007292:	2b2a      	cmp	r3, #42	; 0x2a
 8007294:	d015      	beq.n	80072c2 <_svfiprintf_r+0xf6>
 8007296:	9a07      	ldr	r2, [sp, #28]
 8007298:	4654      	mov	r4, sl
 800729a:	2000      	movs	r0, #0
 800729c:	f04f 0c0a 	mov.w	ip, #10
 80072a0:	4621      	mov	r1, r4
 80072a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072a6:	3b30      	subs	r3, #48	; 0x30
 80072a8:	2b09      	cmp	r3, #9
 80072aa:	d94d      	bls.n	8007348 <_svfiprintf_r+0x17c>
 80072ac:	b1b0      	cbz	r0, 80072dc <_svfiprintf_r+0x110>
 80072ae:	9207      	str	r2, [sp, #28]
 80072b0:	e014      	b.n	80072dc <_svfiprintf_r+0x110>
 80072b2:	eba0 0308 	sub.w	r3, r0, r8
 80072b6:	fa09 f303 	lsl.w	r3, r9, r3
 80072ba:	4313      	orrs	r3, r2
 80072bc:	9304      	str	r3, [sp, #16]
 80072be:	46a2      	mov	sl, r4
 80072c0:	e7d2      	b.n	8007268 <_svfiprintf_r+0x9c>
 80072c2:	9b03      	ldr	r3, [sp, #12]
 80072c4:	1d19      	adds	r1, r3, #4
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	9103      	str	r1, [sp, #12]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	bfbb      	ittet	lt
 80072ce:	425b      	neglt	r3, r3
 80072d0:	f042 0202 	orrlt.w	r2, r2, #2
 80072d4:	9307      	strge	r3, [sp, #28]
 80072d6:	9307      	strlt	r3, [sp, #28]
 80072d8:	bfb8      	it	lt
 80072da:	9204      	strlt	r2, [sp, #16]
 80072dc:	7823      	ldrb	r3, [r4, #0]
 80072de:	2b2e      	cmp	r3, #46	; 0x2e
 80072e0:	d10c      	bne.n	80072fc <_svfiprintf_r+0x130>
 80072e2:	7863      	ldrb	r3, [r4, #1]
 80072e4:	2b2a      	cmp	r3, #42	; 0x2a
 80072e6:	d134      	bne.n	8007352 <_svfiprintf_r+0x186>
 80072e8:	9b03      	ldr	r3, [sp, #12]
 80072ea:	1d1a      	adds	r2, r3, #4
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	9203      	str	r2, [sp, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	bfb8      	it	lt
 80072f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80072f8:	3402      	adds	r4, #2
 80072fa:	9305      	str	r3, [sp, #20]
 80072fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80073c4 <_svfiprintf_r+0x1f8>
 8007300:	7821      	ldrb	r1, [r4, #0]
 8007302:	2203      	movs	r2, #3
 8007304:	4650      	mov	r0, sl
 8007306:	f7f8 ff6b 	bl	80001e0 <memchr>
 800730a:	b138      	cbz	r0, 800731c <_svfiprintf_r+0x150>
 800730c:	9b04      	ldr	r3, [sp, #16]
 800730e:	eba0 000a 	sub.w	r0, r0, sl
 8007312:	2240      	movs	r2, #64	; 0x40
 8007314:	4082      	lsls	r2, r0
 8007316:	4313      	orrs	r3, r2
 8007318:	3401      	adds	r4, #1
 800731a:	9304      	str	r3, [sp, #16]
 800731c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007320:	4825      	ldr	r0, [pc, #148]	; (80073b8 <_svfiprintf_r+0x1ec>)
 8007322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007326:	2206      	movs	r2, #6
 8007328:	f7f8 ff5a 	bl	80001e0 <memchr>
 800732c:	2800      	cmp	r0, #0
 800732e:	d038      	beq.n	80073a2 <_svfiprintf_r+0x1d6>
 8007330:	4b22      	ldr	r3, [pc, #136]	; (80073bc <_svfiprintf_r+0x1f0>)
 8007332:	bb1b      	cbnz	r3, 800737c <_svfiprintf_r+0x1b0>
 8007334:	9b03      	ldr	r3, [sp, #12]
 8007336:	3307      	adds	r3, #7
 8007338:	f023 0307 	bic.w	r3, r3, #7
 800733c:	3308      	adds	r3, #8
 800733e:	9303      	str	r3, [sp, #12]
 8007340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007342:	4433      	add	r3, r6
 8007344:	9309      	str	r3, [sp, #36]	; 0x24
 8007346:	e768      	b.n	800721a <_svfiprintf_r+0x4e>
 8007348:	fb0c 3202 	mla	r2, ip, r2, r3
 800734c:	460c      	mov	r4, r1
 800734e:	2001      	movs	r0, #1
 8007350:	e7a6      	b.n	80072a0 <_svfiprintf_r+0xd4>
 8007352:	2300      	movs	r3, #0
 8007354:	3401      	adds	r4, #1
 8007356:	9305      	str	r3, [sp, #20]
 8007358:	4619      	mov	r1, r3
 800735a:	f04f 0c0a 	mov.w	ip, #10
 800735e:	4620      	mov	r0, r4
 8007360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007364:	3a30      	subs	r2, #48	; 0x30
 8007366:	2a09      	cmp	r2, #9
 8007368:	d903      	bls.n	8007372 <_svfiprintf_r+0x1a6>
 800736a:	2b00      	cmp	r3, #0
 800736c:	d0c6      	beq.n	80072fc <_svfiprintf_r+0x130>
 800736e:	9105      	str	r1, [sp, #20]
 8007370:	e7c4      	b.n	80072fc <_svfiprintf_r+0x130>
 8007372:	fb0c 2101 	mla	r1, ip, r1, r2
 8007376:	4604      	mov	r4, r0
 8007378:	2301      	movs	r3, #1
 800737a:	e7f0      	b.n	800735e <_svfiprintf_r+0x192>
 800737c:	ab03      	add	r3, sp, #12
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	462a      	mov	r2, r5
 8007382:	4b0f      	ldr	r3, [pc, #60]	; (80073c0 <_svfiprintf_r+0x1f4>)
 8007384:	a904      	add	r1, sp, #16
 8007386:	4638      	mov	r0, r7
 8007388:	f3af 8000 	nop.w
 800738c:	1c42      	adds	r2, r0, #1
 800738e:	4606      	mov	r6, r0
 8007390:	d1d6      	bne.n	8007340 <_svfiprintf_r+0x174>
 8007392:	89ab      	ldrh	r3, [r5, #12]
 8007394:	065b      	lsls	r3, r3, #25
 8007396:	f53f af2d 	bmi.w	80071f4 <_svfiprintf_r+0x28>
 800739a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800739c:	b01d      	add	sp, #116	; 0x74
 800739e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a2:	ab03      	add	r3, sp, #12
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	462a      	mov	r2, r5
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <_svfiprintf_r+0x1f4>)
 80073aa:	a904      	add	r1, sp, #16
 80073ac:	4638      	mov	r0, r7
 80073ae:	f000 f9bd 	bl	800772c <_printf_i>
 80073b2:	e7eb      	b.n	800738c <_svfiprintf_r+0x1c0>
 80073b4:	08007e4c 	.word	0x08007e4c
 80073b8:	08007e56 	.word	0x08007e56
 80073bc:	00000000 	.word	0x00000000
 80073c0:	08007119 	.word	0x08007119
 80073c4:	08007e52 	.word	0x08007e52

080073c8 <__sfputc_r>:
 80073c8:	6893      	ldr	r3, [r2, #8]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	b410      	push	{r4}
 80073d0:	6093      	str	r3, [r2, #8]
 80073d2:	da08      	bge.n	80073e6 <__sfputc_r+0x1e>
 80073d4:	6994      	ldr	r4, [r2, #24]
 80073d6:	42a3      	cmp	r3, r4
 80073d8:	db01      	blt.n	80073de <__sfputc_r+0x16>
 80073da:	290a      	cmp	r1, #10
 80073dc:	d103      	bne.n	80073e6 <__sfputc_r+0x1e>
 80073de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073e2:	f7ff bc24 	b.w	8006c2e <__swbuf_r>
 80073e6:	6813      	ldr	r3, [r2, #0]
 80073e8:	1c58      	adds	r0, r3, #1
 80073ea:	6010      	str	r0, [r2, #0]
 80073ec:	7019      	strb	r1, [r3, #0]
 80073ee:	4608      	mov	r0, r1
 80073f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <__sfputs_r>:
 80073f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f8:	4606      	mov	r6, r0
 80073fa:	460f      	mov	r7, r1
 80073fc:	4614      	mov	r4, r2
 80073fe:	18d5      	adds	r5, r2, r3
 8007400:	42ac      	cmp	r4, r5
 8007402:	d101      	bne.n	8007408 <__sfputs_r+0x12>
 8007404:	2000      	movs	r0, #0
 8007406:	e007      	b.n	8007418 <__sfputs_r+0x22>
 8007408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800740c:	463a      	mov	r2, r7
 800740e:	4630      	mov	r0, r6
 8007410:	f7ff ffda 	bl	80073c8 <__sfputc_r>
 8007414:	1c43      	adds	r3, r0, #1
 8007416:	d1f3      	bne.n	8007400 <__sfputs_r+0xa>
 8007418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800741c <_vfiprintf_r>:
 800741c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007420:	460d      	mov	r5, r1
 8007422:	b09d      	sub	sp, #116	; 0x74
 8007424:	4614      	mov	r4, r2
 8007426:	4698      	mov	r8, r3
 8007428:	4606      	mov	r6, r0
 800742a:	b118      	cbz	r0, 8007434 <_vfiprintf_r+0x18>
 800742c:	6a03      	ldr	r3, [r0, #32]
 800742e:	b90b      	cbnz	r3, 8007434 <_vfiprintf_r+0x18>
 8007430:	f7ff fa48 	bl	80068c4 <__sinit>
 8007434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007436:	07d9      	lsls	r1, r3, #31
 8007438:	d405      	bmi.n	8007446 <_vfiprintf_r+0x2a>
 800743a:	89ab      	ldrh	r3, [r5, #12]
 800743c:	059a      	lsls	r2, r3, #22
 800743e:	d402      	bmi.n	8007446 <_vfiprintf_r+0x2a>
 8007440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007442:	f7ff fd58 	bl	8006ef6 <__retarget_lock_acquire_recursive>
 8007446:	89ab      	ldrh	r3, [r5, #12]
 8007448:	071b      	lsls	r3, r3, #28
 800744a:	d501      	bpl.n	8007450 <_vfiprintf_r+0x34>
 800744c:	692b      	ldr	r3, [r5, #16]
 800744e:	b99b      	cbnz	r3, 8007478 <_vfiprintf_r+0x5c>
 8007450:	4629      	mov	r1, r5
 8007452:	4630      	mov	r0, r6
 8007454:	f7ff fc28 	bl	8006ca8 <__swsetup_r>
 8007458:	b170      	cbz	r0, 8007478 <_vfiprintf_r+0x5c>
 800745a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800745c:	07dc      	lsls	r4, r3, #31
 800745e:	d504      	bpl.n	800746a <_vfiprintf_r+0x4e>
 8007460:	f04f 30ff 	mov.w	r0, #4294967295
 8007464:	b01d      	add	sp, #116	; 0x74
 8007466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800746a:	89ab      	ldrh	r3, [r5, #12]
 800746c:	0598      	lsls	r0, r3, #22
 800746e:	d4f7      	bmi.n	8007460 <_vfiprintf_r+0x44>
 8007470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007472:	f7ff fd41 	bl	8006ef8 <__retarget_lock_release_recursive>
 8007476:	e7f3      	b.n	8007460 <_vfiprintf_r+0x44>
 8007478:	2300      	movs	r3, #0
 800747a:	9309      	str	r3, [sp, #36]	; 0x24
 800747c:	2320      	movs	r3, #32
 800747e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007482:	f8cd 800c 	str.w	r8, [sp, #12]
 8007486:	2330      	movs	r3, #48	; 0x30
 8007488:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800763c <_vfiprintf_r+0x220>
 800748c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007490:	f04f 0901 	mov.w	r9, #1
 8007494:	4623      	mov	r3, r4
 8007496:	469a      	mov	sl, r3
 8007498:	f813 2b01 	ldrb.w	r2, [r3], #1
 800749c:	b10a      	cbz	r2, 80074a2 <_vfiprintf_r+0x86>
 800749e:	2a25      	cmp	r2, #37	; 0x25
 80074a0:	d1f9      	bne.n	8007496 <_vfiprintf_r+0x7a>
 80074a2:	ebba 0b04 	subs.w	fp, sl, r4
 80074a6:	d00b      	beq.n	80074c0 <_vfiprintf_r+0xa4>
 80074a8:	465b      	mov	r3, fp
 80074aa:	4622      	mov	r2, r4
 80074ac:	4629      	mov	r1, r5
 80074ae:	4630      	mov	r0, r6
 80074b0:	f7ff ffa1 	bl	80073f6 <__sfputs_r>
 80074b4:	3001      	adds	r0, #1
 80074b6:	f000 80a9 	beq.w	800760c <_vfiprintf_r+0x1f0>
 80074ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074bc:	445a      	add	r2, fp
 80074be:	9209      	str	r2, [sp, #36]	; 0x24
 80074c0:	f89a 3000 	ldrb.w	r3, [sl]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 80a1 	beq.w	800760c <_vfiprintf_r+0x1f0>
 80074ca:	2300      	movs	r3, #0
 80074cc:	f04f 32ff 	mov.w	r2, #4294967295
 80074d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074d4:	f10a 0a01 	add.w	sl, sl, #1
 80074d8:	9304      	str	r3, [sp, #16]
 80074da:	9307      	str	r3, [sp, #28]
 80074dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074e0:	931a      	str	r3, [sp, #104]	; 0x68
 80074e2:	4654      	mov	r4, sl
 80074e4:	2205      	movs	r2, #5
 80074e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ea:	4854      	ldr	r0, [pc, #336]	; (800763c <_vfiprintf_r+0x220>)
 80074ec:	f7f8 fe78 	bl	80001e0 <memchr>
 80074f0:	9a04      	ldr	r2, [sp, #16]
 80074f2:	b9d8      	cbnz	r0, 800752c <_vfiprintf_r+0x110>
 80074f4:	06d1      	lsls	r1, r2, #27
 80074f6:	bf44      	itt	mi
 80074f8:	2320      	movmi	r3, #32
 80074fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80074fe:	0713      	lsls	r3, r2, #28
 8007500:	bf44      	itt	mi
 8007502:	232b      	movmi	r3, #43	; 0x2b
 8007504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007508:	f89a 3000 	ldrb.w	r3, [sl]
 800750c:	2b2a      	cmp	r3, #42	; 0x2a
 800750e:	d015      	beq.n	800753c <_vfiprintf_r+0x120>
 8007510:	9a07      	ldr	r2, [sp, #28]
 8007512:	4654      	mov	r4, sl
 8007514:	2000      	movs	r0, #0
 8007516:	f04f 0c0a 	mov.w	ip, #10
 800751a:	4621      	mov	r1, r4
 800751c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007520:	3b30      	subs	r3, #48	; 0x30
 8007522:	2b09      	cmp	r3, #9
 8007524:	d94d      	bls.n	80075c2 <_vfiprintf_r+0x1a6>
 8007526:	b1b0      	cbz	r0, 8007556 <_vfiprintf_r+0x13a>
 8007528:	9207      	str	r2, [sp, #28]
 800752a:	e014      	b.n	8007556 <_vfiprintf_r+0x13a>
 800752c:	eba0 0308 	sub.w	r3, r0, r8
 8007530:	fa09 f303 	lsl.w	r3, r9, r3
 8007534:	4313      	orrs	r3, r2
 8007536:	9304      	str	r3, [sp, #16]
 8007538:	46a2      	mov	sl, r4
 800753a:	e7d2      	b.n	80074e2 <_vfiprintf_r+0xc6>
 800753c:	9b03      	ldr	r3, [sp, #12]
 800753e:	1d19      	adds	r1, r3, #4
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	9103      	str	r1, [sp, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	bfbb      	ittet	lt
 8007548:	425b      	neglt	r3, r3
 800754a:	f042 0202 	orrlt.w	r2, r2, #2
 800754e:	9307      	strge	r3, [sp, #28]
 8007550:	9307      	strlt	r3, [sp, #28]
 8007552:	bfb8      	it	lt
 8007554:	9204      	strlt	r2, [sp, #16]
 8007556:	7823      	ldrb	r3, [r4, #0]
 8007558:	2b2e      	cmp	r3, #46	; 0x2e
 800755a:	d10c      	bne.n	8007576 <_vfiprintf_r+0x15a>
 800755c:	7863      	ldrb	r3, [r4, #1]
 800755e:	2b2a      	cmp	r3, #42	; 0x2a
 8007560:	d134      	bne.n	80075cc <_vfiprintf_r+0x1b0>
 8007562:	9b03      	ldr	r3, [sp, #12]
 8007564:	1d1a      	adds	r2, r3, #4
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	9203      	str	r2, [sp, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	bfb8      	it	lt
 800756e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007572:	3402      	adds	r4, #2
 8007574:	9305      	str	r3, [sp, #20]
 8007576:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800764c <_vfiprintf_r+0x230>
 800757a:	7821      	ldrb	r1, [r4, #0]
 800757c:	2203      	movs	r2, #3
 800757e:	4650      	mov	r0, sl
 8007580:	f7f8 fe2e 	bl	80001e0 <memchr>
 8007584:	b138      	cbz	r0, 8007596 <_vfiprintf_r+0x17a>
 8007586:	9b04      	ldr	r3, [sp, #16]
 8007588:	eba0 000a 	sub.w	r0, r0, sl
 800758c:	2240      	movs	r2, #64	; 0x40
 800758e:	4082      	lsls	r2, r0
 8007590:	4313      	orrs	r3, r2
 8007592:	3401      	adds	r4, #1
 8007594:	9304      	str	r3, [sp, #16]
 8007596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800759a:	4829      	ldr	r0, [pc, #164]	; (8007640 <_vfiprintf_r+0x224>)
 800759c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075a0:	2206      	movs	r2, #6
 80075a2:	f7f8 fe1d 	bl	80001e0 <memchr>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d03f      	beq.n	800762a <_vfiprintf_r+0x20e>
 80075aa:	4b26      	ldr	r3, [pc, #152]	; (8007644 <_vfiprintf_r+0x228>)
 80075ac:	bb1b      	cbnz	r3, 80075f6 <_vfiprintf_r+0x1da>
 80075ae:	9b03      	ldr	r3, [sp, #12]
 80075b0:	3307      	adds	r3, #7
 80075b2:	f023 0307 	bic.w	r3, r3, #7
 80075b6:	3308      	adds	r3, #8
 80075b8:	9303      	str	r3, [sp, #12]
 80075ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075bc:	443b      	add	r3, r7
 80075be:	9309      	str	r3, [sp, #36]	; 0x24
 80075c0:	e768      	b.n	8007494 <_vfiprintf_r+0x78>
 80075c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80075c6:	460c      	mov	r4, r1
 80075c8:	2001      	movs	r0, #1
 80075ca:	e7a6      	b.n	800751a <_vfiprintf_r+0xfe>
 80075cc:	2300      	movs	r3, #0
 80075ce:	3401      	adds	r4, #1
 80075d0:	9305      	str	r3, [sp, #20]
 80075d2:	4619      	mov	r1, r3
 80075d4:	f04f 0c0a 	mov.w	ip, #10
 80075d8:	4620      	mov	r0, r4
 80075da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075de:	3a30      	subs	r2, #48	; 0x30
 80075e0:	2a09      	cmp	r2, #9
 80075e2:	d903      	bls.n	80075ec <_vfiprintf_r+0x1d0>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0c6      	beq.n	8007576 <_vfiprintf_r+0x15a>
 80075e8:	9105      	str	r1, [sp, #20]
 80075ea:	e7c4      	b.n	8007576 <_vfiprintf_r+0x15a>
 80075ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80075f0:	4604      	mov	r4, r0
 80075f2:	2301      	movs	r3, #1
 80075f4:	e7f0      	b.n	80075d8 <_vfiprintf_r+0x1bc>
 80075f6:	ab03      	add	r3, sp, #12
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	462a      	mov	r2, r5
 80075fc:	4b12      	ldr	r3, [pc, #72]	; (8007648 <_vfiprintf_r+0x22c>)
 80075fe:	a904      	add	r1, sp, #16
 8007600:	4630      	mov	r0, r6
 8007602:	f3af 8000 	nop.w
 8007606:	4607      	mov	r7, r0
 8007608:	1c78      	adds	r0, r7, #1
 800760a:	d1d6      	bne.n	80075ba <_vfiprintf_r+0x19e>
 800760c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800760e:	07d9      	lsls	r1, r3, #31
 8007610:	d405      	bmi.n	800761e <_vfiprintf_r+0x202>
 8007612:	89ab      	ldrh	r3, [r5, #12]
 8007614:	059a      	lsls	r2, r3, #22
 8007616:	d402      	bmi.n	800761e <_vfiprintf_r+0x202>
 8007618:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800761a:	f7ff fc6d 	bl	8006ef8 <__retarget_lock_release_recursive>
 800761e:	89ab      	ldrh	r3, [r5, #12]
 8007620:	065b      	lsls	r3, r3, #25
 8007622:	f53f af1d 	bmi.w	8007460 <_vfiprintf_r+0x44>
 8007626:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007628:	e71c      	b.n	8007464 <_vfiprintf_r+0x48>
 800762a:	ab03      	add	r3, sp, #12
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	462a      	mov	r2, r5
 8007630:	4b05      	ldr	r3, [pc, #20]	; (8007648 <_vfiprintf_r+0x22c>)
 8007632:	a904      	add	r1, sp, #16
 8007634:	4630      	mov	r0, r6
 8007636:	f000 f879 	bl	800772c <_printf_i>
 800763a:	e7e4      	b.n	8007606 <_vfiprintf_r+0x1ea>
 800763c:	08007e4c 	.word	0x08007e4c
 8007640:	08007e56 	.word	0x08007e56
 8007644:	00000000 	.word	0x00000000
 8007648:	080073f7 	.word	0x080073f7
 800764c:	08007e52 	.word	0x08007e52

08007650 <_printf_common>:
 8007650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007654:	4616      	mov	r6, r2
 8007656:	4699      	mov	r9, r3
 8007658:	688a      	ldr	r2, [r1, #8]
 800765a:	690b      	ldr	r3, [r1, #16]
 800765c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007660:	4293      	cmp	r3, r2
 8007662:	bfb8      	it	lt
 8007664:	4613      	movlt	r3, r2
 8007666:	6033      	str	r3, [r6, #0]
 8007668:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800766c:	4607      	mov	r7, r0
 800766e:	460c      	mov	r4, r1
 8007670:	b10a      	cbz	r2, 8007676 <_printf_common+0x26>
 8007672:	3301      	adds	r3, #1
 8007674:	6033      	str	r3, [r6, #0]
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	0699      	lsls	r1, r3, #26
 800767a:	bf42      	ittt	mi
 800767c:	6833      	ldrmi	r3, [r6, #0]
 800767e:	3302      	addmi	r3, #2
 8007680:	6033      	strmi	r3, [r6, #0]
 8007682:	6825      	ldr	r5, [r4, #0]
 8007684:	f015 0506 	ands.w	r5, r5, #6
 8007688:	d106      	bne.n	8007698 <_printf_common+0x48>
 800768a:	f104 0a19 	add.w	sl, r4, #25
 800768e:	68e3      	ldr	r3, [r4, #12]
 8007690:	6832      	ldr	r2, [r6, #0]
 8007692:	1a9b      	subs	r3, r3, r2
 8007694:	42ab      	cmp	r3, r5
 8007696:	dc26      	bgt.n	80076e6 <_printf_common+0x96>
 8007698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800769c:	1e13      	subs	r3, r2, #0
 800769e:	6822      	ldr	r2, [r4, #0]
 80076a0:	bf18      	it	ne
 80076a2:	2301      	movne	r3, #1
 80076a4:	0692      	lsls	r2, r2, #26
 80076a6:	d42b      	bmi.n	8007700 <_printf_common+0xb0>
 80076a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076ac:	4649      	mov	r1, r9
 80076ae:	4638      	mov	r0, r7
 80076b0:	47c0      	blx	r8
 80076b2:	3001      	adds	r0, #1
 80076b4:	d01e      	beq.n	80076f4 <_printf_common+0xa4>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	6922      	ldr	r2, [r4, #16]
 80076ba:	f003 0306 	and.w	r3, r3, #6
 80076be:	2b04      	cmp	r3, #4
 80076c0:	bf02      	ittt	eq
 80076c2:	68e5      	ldreq	r5, [r4, #12]
 80076c4:	6833      	ldreq	r3, [r6, #0]
 80076c6:	1aed      	subeq	r5, r5, r3
 80076c8:	68a3      	ldr	r3, [r4, #8]
 80076ca:	bf0c      	ite	eq
 80076cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076d0:	2500      	movne	r5, #0
 80076d2:	4293      	cmp	r3, r2
 80076d4:	bfc4      	itt	gt
 80076d6:	1a9b      	subgt	r3, r3, r2
 80076d8:	18ed      	addgt	r5, r5, r3
 80076da:	2600      	movs	r6, #0
 80076dc:	341a      	adds	r4, #26
 80076de:	42b5      	cmp	r5, r6
 80076e0:	d11a      	bne.n	8007718 <_printf_common+0xc8>
 80076e2:	2000      	movs	r0, #0
 80076e4:	e008      	b.n	80076f8 <_printf_common+0xa8>
 80076e6:	2301      	movs	r3, #1
 80076e8:	4652      	mov	r2, sl
 80076ea:	4649      	mov	r1, r9
 80076ec:	4638      	mov	r0, r7
 80076ee:	47c0      	blx	r8
 80076f0:	3001      	adds	r0, #1
 80076f2:	d103      	bne.n	80076fc <_printf_common+0xac>
 80076f4:	f04f 30ff 	mov.w	r0, #4294967295
 80076f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076fc:	3501      	adds	r5, #1
 80076fe:	e7c6      	b.n	800768e <_printf_common+0x3e>
 8007700:	18e1      	adds	r1, r4, r3
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	2030      	movs	r0, #48	; 0x30
 8007706:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800770a:	4422      	add	r2, r4
 800770c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007710:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007714:	3302      	adds	r3, #2
 8007716:	e7c7      	b.n	80076a8 <_printf_common+0x58>
 8007718:	2301      	movs	r3, #1
 800771a:	4622      	mov	r2, r4
 800771c:	4649      	mov	r1, r9
 800771e:	4638      	mov	r0, r7
 8007720:	47c0      	blx	r8
 8007722:	3001      	adds	r0, #1
 8007724:	d0e6      	beq.n	80076f4 <_printf_common+0xa4>
 8007726:	3601      	adds	r6, #1
 8007728:	e7d9      	b.n	80076de <_printf_common+0x8e>
	...

0800772c <_printf_i>:
 800772c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007730:	7e0f      	ldrb	r7, [r1, #24]
 8007732:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007734:	2f78      	cmp	r7, #120	; 0x78
 8007736:	4691      	mov	r9, r2
 8007738:	4680      	mov	r8, r0
 800773a:	460c      	mov	r4, r1
 800773c:	469a      	mov	sl, r3
 800773e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007742:	d807      	bhi.n	8007754 <_printf_i+0x28>
 8007744:	2f62      	cmp	r7, #98	; 0x62
 8007746:	d80a      	bhi.n	800775e <_printf_i+0x32>
 8007748:	2f00      	cmp	r7, #0
 800774a:	f000 80d4 	beq.w	80078f6 <_printf_i+0x1ca>
 800774e:	2f58      	cmp	r7, #88	; 0x58
 8007750:	f000 80c0 	beq.w	80078d4 <_printf_i+0x1a8>
 8007754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007758:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800775c:	e03a      	b.n	80077d4 <_printf_i+0xa8>
 800775e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007762:	2b15      	cmp	r3, #21
 8007764:	d8f6      	bhi.n	8007754 <_printf_i+0x28>
 8007766:	a101      	add	r1, pc, #4	; (adr r1, 800776c <_printf_i+0x40>)
 8007768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800776c:	080077c5 	.word	0x080077c5
 8007770:	080077d9 	.word	0x080077d9
 8007774:	08007755 	.word	0x08007755
 8007778:	08007755 	.word	0x08007755
 800777c:	08007755 	.word	0x08007755
 8007780:	08007755 	.word	0x08007755
 8007784:	080077d9 	.word	0x080077d9
 8007788:	08007755 	.word	0x08007755
 800778c:	08007755 	.word	0x08007755
 8007790:	08007755 	.word	0x08007755
 8007794:	08007755 	.word	0x08007755
 8007798:	080078dd 	.word	0x080078dd
 800779c:	08007805 	.word	0x08007805
 80077a0:	08007897 	.word	0x08007897
 80077a4:	08007755 	.word	0x08007755
 80077a8:	08007755 	.word	0x08007755
 80077ac:	080078ff 	.word	0x080078ff
 80077b0:	08007755 	.word	0x08007755
 80077b4:	08007805 	.word	0x08007805
 80077b8:	08007755 	.word	0x08007755
 80077bc:	08007755 	.word	0x08007755
 80077c0:	0800789f 	.word	0x0800789f
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	1d1a      	adds	r2, r3, #4
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	602a      	str	r2, [r5, #0]
 80077cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077d4:	2301      	movs	r3, #1
 80077d6:	e09f      	b.n	8007918 <_printf_i+0x1ec>
 80077d8:	6820      	ldr	r0, [r4, #0]
 80077da:	682b      	ldr	r3, [r5, #0]
 80077dc:	0607      	lsls	r7, r0, #24
 80077de:	f103 0104 	add.w	r1, r3, #4
 80077e2:	6029      	str	r1, [r5, #0]
 80077e4:	d501      	bpl.n	80077ea <_printf_i+0xbe>
 80077e6:	681e      	ldr	r6, [r3, #0]
 80077e8:	e003      	b.n	80077f2 <_printf_i+0xc6>
 80077ea:	0646      	lsls	r6, r0, #25
 80077ec:	d5fb      	bpl.n	80077e6 <_printf_i+0xba>
 80077ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80077f2:	2e00      	cmp	r6, #0
 80077f4:	da03      	bge.n	80077fe <_printf_i+0xd2>
 80077f6:	232d      	movs	r3, #45	; 0x2d
 80077f8:	4276      	negs	r6, r6
 80077fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077fe:	485a      	ldr	r0, [pc, #360]	; (8007968 <_printf_i+0x23c>)
 8007800:	230a      	movs	r3, #10
 8007802:	e012      	b.n	800782a <_printf_i+0xfe>
 8007804:	682b      	ldr	r3, [r5, #0]
 8007806:	6820      	ldr	r0, [r4, #0]
 8007808:	1d19      	adds	r1, r3, #4
 800780a:	6029      	str	r1, [r5, #0]
 800780c:	0605      	lsls	r5, r0, #24
 800780e:	d501      	bpl.n	8007814 <_printf_i+0xe8>
 8007810:	681e      	ldr	r6, [r3, #0]
 8007812:	e002      	b.n	800781a <_printf_i+0xee>
 8007814:	0641      	lsls	r1, r0, #25
 8007816:	d5fb      	bpl.n	8007810 <_printf_i+0xe4>
 8007818:	881e      	ldrh	r6, [r3, #0]
 800781a:	4853      	ldr	r0, [pc, #332]	; (8007968 <_printf_i+0x23c>)
 800781c:	2f6f      	cmp	r7, #111	; 0x6f
 800781e:	bf0c      	ite	eq
 8007820:	2308      	moveq	r3, #8
 8007822:	230a      	movne	r3, #10
 8007824:	2100      	movs	r1, #0
 8007826:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800782a:	6865      	ldr	r5, [r4, #4]
 800782c:	60a5      	str	r5, [r4, #8]
 800782e:	2d00      	cmp	r5, #0
 8007830:	bfa2      	ittt	ge
 8007832:	6821      	ldrge	r1, [r4, #0]
 8007834:	f021 0104 	bicge.w	r1, r1, #4
 8007838:	6021      	strge	r1, [r4, #0]
 800783a:	b90e      	cbnz	r6, 8007840 <_printf_i+0x114>
 800783c:	2d00      	cmp	r5, #0
 800783e:	d04b      	beq.n	80078d8 <_printf_i+0x1ac>
 8007840:	4615      	mov	r5, r2
 8007842:	fbb6 f1f3 	udiv	r1, r6, r3
 8007846:	fb03 6711 	mls	r7, r3, r1, r6
 800784a:	5dc7      	ldrb	r7, [r0, r7]
 800784c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007850:	4637      	mov	r7, r6
 8007852:	42bb      	cmp	r3, r7
 8007854:	460e      	mov	r6, r1
 8007856:	d9f4      	bls.n	8007842 <_printf_i+0x116>
 8007858:	2b08      	cmp	r3, #8
 800785a:	d10b      	bne.n	8007874 <_printf_i+0x148>
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	07de      	lsls	r6, r3, #31
 8007860:	d508      	bpl.n	8007874 <_printf_i+0x148>
 8007862:	6923      	ldr	r3, [r4, #16]
 8007864:	6861      	ldr	r1, [r4, #4]
 8007866:	4299      	cmp	r1, r3
 8007868:	bfde      	ittt	le
 800786a:	2330      	movle	r3, #48	; 0x30
 800786c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007870:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007874:	1b52      	subs	r2, r2, r5
 8007876:	6122      	str	r2, [r4, #16]
 8007878:	f8cd a000 	str.w	sl, [sp]
 800787c:	464b      	mov	r3, r9
 800787e:	aa03      	add	r2, sp, #12
 8007880:	4621      	mov	r1, r4
 8007882:	4640      	mov	r0, r8
 8007884:	f7ff fee4 	bl	8007650 <_printf_common>
 8007888:	3001      	adds	r0, #1
 800788a:	d14a      	bne.n	8007922 <_printf_i+0x1f6>
 800788c:	f04f 30ff 	mov.w	r0, #4294967295
 8007890:	b004      	add	sp, #16
 8007892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	f043 0320 	orr.w	r3, r3, #32
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	4833      	ldr	r0, [pc, #204]	; (800796c <_printf_i+0x240>)
 80078a0:	2778      	movs	r7, #120	; 0x78
 80078a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	6829      	ldr	r1, [r5, #0]
 80078aa:	061f      	lsls	r7, r3, #24
 80078ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80078b0:	d402      	bmi.n	80078b8 <_printf_i+0x18c>
 80078b2:	065f      	lsls	r7, r3, #25
 80078b4:	bf48      	it	mi
 80078b6:	b2b6      	uxthmi	r6, r6
 80078b8:	07df      	lsls	r7, r3, #31
 80078ba:	bf48      	it	mi
 80078bc:	f043 0320 	orrmi.w	r3, r3, #32
 80078c0:	6029      	str	r1, [r5, #0]
 80078c2:	bf48      	it	mi
 80078c4:	6023      	strmi	r3, [r4, #0]
 80078c6:	b91e      	cbnz	r6, 80078d0 <_printf_i+0x1a4>
 80078c8:	6823      	ldr	r3, [r4, #0]
 80078ca:	f023 0320 	bic.w	r3, r3, #32
 80078ce:	6023      	str	r3, [r4, #0]
 80078d0:	2310      	movs	r3, #16
 80078d2:	e7a7      	b.n	8007824 <_printf_i+0xf8>
 80078d4:	4824      	ldr	r0, [pc, #144]	; (8007968 <_printf_i+0x23c>)
 80078d6:	e7e4      	b.n	80078a2 <_printf_i+0x176>
 80078d8:	4615      	mov	r5, r2
 80078da:	e7bd      	b.n	8007858 <_printf_i+0x12c>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	6826      	ldr	r6, [r4, #0]
 80078e0:	6961      	ldr	r1, [r4, #20]
 80078e2:	1d18      	adds	r0, r3, #4
 80078e4:	6028      	str	r0, [r5, #0]
 80078e6:	0635      	lsls	r5, r6, #24
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	d501      	bpl.n	80078f0 <_printf_i+0x1c4>
 80078ec:	6019      	str	r1, [r3, #0]
 80078ee:	e002      	b.n	80078f6 <_printf_i+0x1ca>
 80078f0:	0670      	lsls	r0, r6, #25
 80078f2:	d5fb      	bpl.n	80078ec <_printf_i+0x1c0>
 80078f4:	8019      	strh	r1, [r3, #0]
 80078f6:	2300      	movs	r3, #0
 80078f8:	6123      	str	r3, [r4, #16]
 80078fa:	4615      	mov	r5, r2
 80078fc:	e7bc      	b.n	8007878 <_printf_i+0x14c>
 80078fe:	682b      	ldr	r3, [r5, #0]
 8007900:	1d1a      	adds	r2, r3, #4
 8007902:	602a      	str	r2, [r5, #0]
 8007904:	681d      	ldr	r5, [r3, #0]
 8007906:	6862      	ldr	r2, [r4, #4]
 8007908:	2100      	movs	r1, #0
 800790a:	4628      	mov	r0, r5
 800790c:	f7f8 fc68 	bl	80001e0 <memchr>
 8007910:	b108      	cbz	r0, 8007916 <_printf_i+0x1ea>
 8007912:	1b40      	subs	r0, r0, r5
 8007914:	6060      	str	r0, [r4, #4]
 8007916:	6863      	ldr	r3, [r4, #4]
 8007918:	6123      	str	r3, [r4, #16]
 800791a:	2300      	movs	r3, #0
 800791c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007920:	e7aa      	b.n	8007878 <_printf_i+0x14c>
 8007922:	6923      	ldr	r3, [r4, #16]
 8007924:	462a      	mov	r2, r5
 8007926:	4649      	mov	r1, r9
 8007928:	4640      	mov	r0, r8
 800792a:	47d0      	blx	sl
 800792c:	3001      	adds	r0, #1
 800792e:	d0ad      	beq.n	800788c <_printf_i+0x160>
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	079b      	lsls	r3, r3, #30
 8007934:	d413      	bmi.n	800795e <_printf_i+0x232>
 8007936:	68e0      	ldr	r0, [r4, #12]
 8007938:	9b03      	ldr	r3, [sp, #12]
 800793a:	4298      	cmp	r0, r3
 800793c:	bfb8      	it	lt
 800793e:	4618      	movlt	r0, r3
 8007940:	e7a6      	b.n	8007890 <_printf_i+0x164>
 8007942:	2301      	movs	r3, #1
 8007944:	4632      	mov	r2, r6
 8007946:	4649      	mov	r1, r9
 8007948:	4640      	mov	r0, r8
 800794a:	47d0      	blx	sl
 800794c:	3001      	adds	r0, #1
 800794e:	d09d      	beq.n	800788c <_printf_i+0x160>
 8007950:	3501      	adds	r5, #1
 8007952:	68e3      	ldr	r3, [r4, #12]
 8007954:	9903      	ldr	r1, [sp, #12]
 8007956:	1a5b      	subs	r3, r3, r1
 8007958:	42ab      	cmp	r3, r5
 800795a:	dcf2      	bgt.n	8007942 <_printf_i+0x216>
 800795c:	e7eb      	b.n	8007936 <_printf_i+0x20a>
 800795e:	2500      	movs	r5, #0
 8007960:	f104 0619 	add.w	r6, r4, #25
 8007964:	e7f5      	b.n	8007952 <_printf_i+0x226>
 8007966:	bf00      	nop
 8007968:	08007e5d 	.word	0x08007e5d
 800796c:	08007e6e 	.word	0x08007e6e

08007970 <__sflush_r>:
 8007970:	898a      	ldrh	r2, [r1, #12]
 8007972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007976:	4605      	mov	r5, r0
 8007978:	0710      	lsls	r0, r2, #28
 800797a:	460c      	mov	r4, r1
 800797c:	d458      	bmi.n	8007a30 <__sflush_r+0xc0>
 800797e:	684b      	ldr	r3, [r1, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	dc05      	bgt.n	8007990 <__sflush_r+0x20>
 8007984:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007986:	2b00      	cmp	r3, #0
 8007988:	dc02      	bgt.n	8007990 <__sflush_r+0x20>
 800798a:	2000      	movs	r0, #0
 800798c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007990:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007992:	2e00      	cmp	r6, #0
 8007994:	d0f9      	beq.n	800798a <__sflush_r+0x1a>
 8007996:	2300      	movs	r3, #0
 8007998:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800799c:	682f      	ldr	r7, [r5, #0]
 800799e:	6a21      	ldr	r1, [r4, #32]
 80079a0:	602b      	str	r3, [r5, #0]
 80079a2:	d032      	beq.n	8007a0a <__sflush_r+0x9a>
 80079a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079a6:	89a3      	ldrh	r3, [r4, #12]
 80079a8:	075a      	lsls	r2, r3, #29
 80079aa:	d505      	bpl.n	80079b8 <__sflush_r+0x48>
 80079ac:	6863      	ldr	r3, [r4, #4]
 80079ae:	1ac0      	subs	r0, r0, r3
 80079b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079b2:	b10b      	cbz	r3, 80079b8 <__sflush_r+0x48>
 80079b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079b6:	1ac0      	subs	r0, r0, r3
 80079b8:	2300      	movs	r3, #0
 80079ba:	4602      	mov	r2, r0
 80079bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079be:	6a21      	ldr	r1, [r4, #32]
 80079c0:	4628      	mov	r0, r5
 80079c2:	47b0      	blx	r6
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	d106      	bne.n	80079d8 <__sflush_r+0x68>
 80079ca:	6829      	ldr	r1, [r5, #0]
 80079cc:	291d      	cmp	r1, #29
 80079ce:	d82b      	bhi.n	8007a28 <__sflush_r+0xb8>
 80079d0:	4a29      	ldr	r2, [pc, #164]	; (8007a78 <__sflush_r+0x108>)
 80079d2:	410a      	asrs	r2, r1
 80079d4:	07d6      	lsls	r6, r2, #31
 80079d6:	d427      	bmi.n	8007a28 <__sflush_r+0xb8>
 80079d8:	2200      	movs	r2, #0
 80079da:	6062      	str	r2, [r4, #4]
 80079dc:	04d9      	lsls	r1, r3, #19
 80079de:	6922      	ldr	r2, [r4, #16]
 80079e0:	6022      	str	r2, [r4, #0]
 80079e2:	d504      	bpl.n	80079ee <__sflush_r+0x7e>
 80079e4:	1c42      	adds	r2, r0, #1
 80079e6:	d101      	bne.n	80079ec <__sflush_r+0x7c>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	b903      	cbnz	r3, 80079ee <__sflush_r+0x7e>
 80079ec:	6560      	str	r0, [r4, #84]	; 0x54
 80079ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079f0:	602f      	str	r7, [r5, #0]
 80079f2:	2900      	cmp	r1, #0
 80079f4:	d0c9      	beq.n	800798a <__sflush_r+0x1a>
 80079f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079fa:	4299      	cmp	r1, r3
 80079fc:	d002      	beq.n	8007a04 <__sflush_r+0x94>
 80079fe:	4628      	mov	r0, r5
 8007a00:	f7ff fa8a 	bl	8006f18 <_free_r>
 8007a04:	2000      	movs	r0, #0
 8007a06:	6360      	str	r0, [r4, #52]	; 0x34
 8007a08:	e7c0      	b.n	800798c <__sflush_r+0x1c>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	47b0      	blx	r6
 8007a10:	1c41      	adds	r1, r0, #1
 8007a12:	d1c8      	bne.n	80079a6 <__sflush_r+0x36>
 8007a14:	682b      	ldr	r3, [r5, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0c5      	beq.n	80079a6 <__sflush_r+0x36>
 8007a1a:	2b1d      	cmp	r3, #29
 8007a1c:	d001      	beq.n	8007a22 <__sflush_r+0xb2>
 8007a1e:	2b16      	cmp	r3, #22
 8007a20:	d101      	bne.n	8007a26 <__sflush_r+0xb6>
 8007a22:	602f      	str	r7, [r5, #0]
 8007a24:	e7b1      	b.n	800798a <__sflush_r+0x1a>
 8007a26:	89a3      	ldrh	r3, [r4, #12]
 8007a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a2c:	81a3      	strh	r3, [r4, #12]
 8007a2e:	e7ad      	b.n	800798c <__sflush_r+0x1c>
 8007a30:	690f      	ldr	r7, [r1, #16]
 8007a32:	2f00      	cmp	r7, #0
 8007a34:	d0a9      	beq.n	800798a <__sflush_r+0x1a>
 8007a36:	0793      	lsls	r3, r2, #30
 8007a38:	680e      	ldr	r6, [r1, #0]
 8007a3a:	bf08      	it	eq
 8007a3c:	694b      	ldreq	r3, [r1, #20]
 8007a3e:	600f      	str	r7, [r1, #0]
 8007a40:	bf18      	it	ne
 8007a42:	2300      	movne	r3, #0
 8007a44:	eba6 0807 	sub.w	r8, r6, r7
 8007a48:	608b      	str	r3, [r1, #8]
 8007a4a:	f1b8 0f00 	cmp.w	r8, #0
 8007a4e:	dd9c      	ble.n	800798a <__sflush_r+0x1a>
 8007a50:	6a21      	ldr	r1, [r4, #32]
 8007a52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a54:	4643      	mov	r3, r8
 8007a56:	463a      	mov	r2, r7
 8007a58:	4628      	mov	r0, r5
 8007a5a:	47b0      	blx	r6
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	dc06      	bgt.n	8007a6e <__sflush_r+0xfe>
 8007a60:	89a3      	ldrh	r3, [r4, #12]
 8007a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a66:	81a3      	strh	r3, [r4, #12]
 8007a68:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6c:	e78e      	b.n	800798c <__sflush_r+0x1c>
 8007a6e:	4407      	add	r7, r0
 8007a70:	eba8 0800 	sub.w	r8, r8, r0
 8007a74:	e7e9      	b.n	8007a4a <__sflush_r+0xda>
 8007a76:	bf00      	nop
 8007a78:	dfbffffe 	.word	0xdfbffffe

08007a7c <_fflush_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	690b      	ldr	r3, [r1, #16]
 8007a80:	4605      	mov	r5, r0
 8007a82:	460c      	mov	r4, r1
 8007a84:	b913      	cbnz	r3, 8007a8c <_fflush_r+0x10>
 8007a86:	2500      	movs	r5, #0
 8007a88:	4628      	mov	r0, r5
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}
 8007a8c:	b118      	cbz	r0, 8007a96 <_fflush_r+0x1a>
 8007a8e:	6a03      	ldr	r3, [r0, #32]
 8007a90:	b90b      	cbnz	r3, 8007a96 <_fflush_r+0x1a>
 8007a92:	f7fe ff17 	bl	80068c4 <__sinit>
 8007a96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d0f3      	beq.n	8007a86 <_fflush_r+0xa>
 8007a9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007aa0:	07d0      	lsls	r0, r2, #31
 8007aa2:	d404      	bmi.n	8007aae <_fflush_r+0x32>
 8007aa4:	0599      	lsls	r1, r3, #22
 8007aa6:	d402      	bmi.n	8007aae <_fflush_r+0x32>
 8007aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aaa:	f7ff fa24 	bl	8006ef6 <__retarget_lock_acquire_recursive>
 8007aae:	4628      	mov	r0, r5
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	f7ff ff5d 	bl	8007970 <__sflush_r>
 8007ab6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ab8:	07da      	lsls	r2, r3, #31
 8007aba:	4605      	mov	r5, r0
 8007abc:	d4e4      	bmi.n	8007a88 <_fflush_r+0xc>
 8007abe:	89a3      	ldrh	r3, [r4, #12]
 8007ac0:	059b      	lsls	r3, r3, #22
 8007ac2:	d4e1      	bmi.n	8007a88 <_fflush_r+0xc>
 8007ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ac6:	f7ff fa17 	bl	8006ef8 <__retarget_lock_release_recursive>
 8007aca:	e7dd      	b.n	8007a88 <_fflush_r+0xc>

08007acc <__swhatbuf_r>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	460c      	mov	r4, r1
 8007ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad4:	2900      	cmp	r1, #0
 8007ad6:	b096      	sub	sp, #88	; 0x58
 8007ad8:	4615      	mov	r5, r2
 8007ada:	461e      	mov	r6, r3
 8007adc:	da0d      	bge.n	8007afa <__swhatbuf_r+0x2e>
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ae4:	f04f 0100 	mov.w	r1, #0
 8007ae8:	bf0c      	ite	eq
 8007aea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007aee:	2340      	movne	r3, #64	; 0x40
 8007af0:	2000      	movs	r0, #0
 8007af2:	6031      	str	r1, [r6, #0]
 8007af4:	602b      	str	r3, [r5, #0]
 8007af6:	b016      	add	sp, #88	; 0x58
 8007af8:	bd70      	pop	{r4, r5, r6, pc}
 8007afa:	466a      	mov	r2, sp
 8007afc:	f000 f862 	bl	8007bc4 <_fstat_r>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	dbec      	blt.n	8007ade <__swhatbuf_r+0x12>
 8007b04:	9901      	ldr	r1, [sp, #4]
 8007b06:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007b0a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007b0e:	4259      	negs	r1, r3
 8007b10:	4159      	adcs	r1, r3
 8007b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b16:	e7eb      	b.n	8007af0 <__swhatbuf_r+0x24>

08007b18 <__smakebuf_r>:
 8007b18:	898b      	ldrh	r3, [r1, #12]
 8007b1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b1c:	079d      	lsls	r5, r3, #30
 8007b1e:	4606      	mov	r6, r0
 8007b20:	460c      	mov	r4, r1
 8007b22:	d507      	bpl.n	8007b34 <__smakebuf_r+0x1c>
 8007b24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	6123      	str	r3, [r4, #16]
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	6163      	str	r3, [r4, #20]
 8007b30:	b002      	add	sp, #8
 8007b32:	bd70      	pop	{r4, r5, r6, pc}
 8007b34:	ab01      	add	r3, sp, #4
 8007b36:	466a      	mov	r2, sp
 8007b38:	f7ff ffc8 	bl	8007acc <__swhatbuf_r>
 8007b3c:	9900      	ldr	r1, [sp, #0]
 8007b3e:	4605      	mov	r5, r0
 8007b40:	4630      	mov	r0, r6
 8007b42:	f7ff fa5d 	bl	8007000 <_malloc_r>
 8007b46:	b948      	cbnz	r0, 8007b5c <__smakebuf_r+0x44>
 8007b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b4c:	059a      	lsls	r2, r3, #22
 8007b4e:	d4ef      	bmi.n	8007b30 <__smakebuf_r+0x18>
 8007b50:	f023 0303 	bic.w	r3, r3, #3
 8007b54:	f043 0302 	orr.w	r3, r3, #2
 8007b58:	81a3      	strh	r3, [r4, #12]
 8007b5a:	e7e3      	b.n	8007b24 <__smakebuf_r+0xc>
 8007b5c:	89a3      	ldrh	r3, [r4, #12]
 8007b5e:	6020      	str	r0, [r4, #0]
 8007b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b64:	81a3      	strh	r3, [r4, #12]
 8007b66:	9b00      	ldr	r3, [sp, #0]
 8007b68:	6163      	str	r3, [r4, #20]
 8007b6a:	9b01      	ldr	r3, [sp, #4]
 8007b6c:	6120      	str	r0, [r4, #16]
 8007b6e:	b15b      	cbz	r3, 8007b88 <__smakebuf_r+0x70>
 8007b70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b74:	4630      	mov	r0, r6
 8007b76:	f000 f837 	bl	8007be8 <_isatty_r>
 8007b7a:	b128      	cbz	r0, 8007b88 <__smakebuf_r+0x70>
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	f023 0303 	bic.w	r3, r3, #3
 8007b82:	f043 0301 	orr.w	r3, r3, #1
 8007b86:	81a3      	strh	r3, [r4, #12]
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	431d      	orrs	r5, r3
 8007b8c:	81a5      	strh	r5, [r4, #12]
 8007b8e:	e7cf      	b.n	8007b30 <__smakebuf_r+0x18>

08007b90 <memmove>:
 8007b90:	4288      	cmp	r0, r1
 8007b92:	b510      	push	{r4, lr}
 8007b94:	eb01 0402 	add.w	r4, r1, r2
 8007b98:	d902      	bls.n	8007ba0 <memmove+0x10>
 8007b9a:	4284      	cmp	r4, r0
 8007b9c:	4623      	mov	r3, r4
 8007b9e:	d807      	bhi.n	8007bb0 <memmove+0x20>
 8007ba0:	1e43      	subs	r3, r0, #1
 8007ba2:	42a1      	cmp	r1, r4
 8007ba4:	d008      	beq.n	8007bb8 <memmove+0x28>
 8007ba6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007baa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bae:	e7f8      	b.n	8007ba2 <memmove+0x12>
 8007bb0:	4402      	add	r2, r0
 8007bb2:	4601      	mov	r1, r0
 8007bb4:	428a      	cmp	r2, r1
 8007bb6:	d100      	bne.n	8007bba <memmove+0x2a>
 8007bb8:	bd10      	pop	{r4, pc}
 8007bba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bc2:	e7f7      	b.n	8007bb4 <memmove+0x24>

08007bc4 <_fstat_r>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	4d07      	ldr	r5, [pc, #28]	; (8007be4 <_fstat_r+0x20>)
 8007bc8:	2300      	movs	r3, #0
 8007bca:	4604      	mov	r4, r0
 8007bcc:	4608      	mov	r0, r1
 8007bce:	4611      	mov	r1, r2
 8007bd0:	602b      	str	r3, [r5, #0]
 8007bd2:	f7fa f826 	bl	8001c22 <_fstat>
 8007bd6:	1c43      	adds	r3, r0, #1
 8007bd8:	d102      	bne.n	8007be0 <_fstat_r+0x1c>
 8007bda:	682b      	ldr	r3, [r5, #0]
 8007bdc:	b103      	cbz	r3, 8007be0 <_fstat_r+0x1c>
 8007bde:	6023      	str	r3, [r4, #0]
 8007be0:	bd38      	pop	{r3, r4, r5, pc}
 8007be2:	bf00      	nop
 8007be4:	20004308 	.word	0x20004308

08007be8 <_isatty_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	4d06      	ldr	r5, [pc, #24]	; (8007c04 <_isatty_r+0x1c>)
 8007bec:	2300      	movs	r3, #0
 8007bee:	4604      	mov	r4, r0
 8007bf0:	4608      	mov	r0, r1
 8007bf2:	602b      	str	r3, [r5, #0]
 8007bf4:	f7fa f825 	bl	8001c42 <_isatty>
 8007bf8:	1c43      	adds	r3, r0, #1
 8007bfa:	d102      	bne.n	8007c02 <_isatty_r+0x1a>
 8007bfc:	682b      	ldr	r3, [r5, #0]
 8007bfe:	b103      	cbz	r3, 8007c02 <_isatty_r+0x1a>
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	bd38      	pop	{r3, r4, r5, pc}
 8007c04:	20004308 	.word	0x20004308

08007c08 <_sbrk_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	4d06      	ldr	r5, [pc, #24]	; (8007c24 <_sbrk_r+0x1c>)
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	4604      	mov	r4, r0
 8007c10:	4608      	mov	r0, r1
 8007c12:	602b      	str	r3, [r5, #0]
 8007c14:	f7fa f82e 	bl	8001c74 <_sbrk>
 8007c18:	1c43      	adds	r3, r0, #1
 8007c1a:	d102      	bne.n	8007c22 <_sbrk_r+0x1a>
 8007c1c:	682b      	ldr	r3, [r5, #0]
 8007c1e:	b103      	cbz	r3, 8007c22 <_sbrk_r+0x1a>
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	bd38      	pop	{r3, r4, r5, pc}
 8007c24:	20004308 	.word	0x20004308

08007c28 <_realloc_r>:
 8007c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2c:	4680      	mov	r8, r0
 8007c2e:	4614      	mov	r4, r2
 8007c30:	460e      	mov	r6, r1
 8007c32:	b921      	cbnz	r1, 8007c3e <_realloc_r+0x16>
 8007c34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c38:	4611      	mov	r1, r2
 8007c3a:	f7ff b9e1 	b.w	8007000 <_malloc_r>
 8007c3e:	b92a      	cbnz	r2, 8007c4c <_realloc_r+0x24>
 8007c40:	f7ff f96a 	bl	8006f18 <_free_r>
 8007c44:	4625      	mov	r5, r4
 8007c46:	4628      	mov	r0, r5
 8007c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c4c:	f000 f81b 	bl	8007c86 <_malloc_usable_size_r>
 8007c50:	4284      	cmp	r4, r0
 8007c52:	4607      	mov	r7, r0
 8007c54:	d802      	bhi.n	8007c5c <_realloc_r+0x34>
 8007c56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c5a:	d812      	bhi.n	8007c82 <_realloc_r+0x5a>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4640      	mov	r0, r8
 8007c60:	f7ff f9ce 	bl	8007000 <_malloc_r>
 8007c64:	4605      	mov	r5, r0
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d0ed      	beq.n	8007c46 <_realloc_r+0x1e>
 8007c6a:	42bc      	cmp	r4, r7
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	4631      	mov	r1, r6
 8007c70:	bf28      	it	cs
 8007c72:	463a      	movcs	r2, r7
 8007c74:	f7ff f941 	bl	8006efa <memcpy>
 8007c78:	4631      	mov	r1, r6
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	f7ff f94c 	bl	8006f18 <_free_r>
 8007c80:	e7e1      	b.n	8007c46 <_realloc_r+0x1e>
 8007c82:	4635      	mov	r5, r6
 8007c84:	e7df      	b.n	8007c46 <_realloc_r+0x1e>

08007c86 <_malloc_usable_size_r>:
 8007c86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c8a:	1f18      	subs	r0, r3, #4
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	bfbc      	itt	lt
 8007c90:	580b      	ldrlt	r3, [r1, r0]
 8007c92:	18c0      	addlt	r0, r0, r3
 8007c94:	4770      	bx	lr
	...

08007c98 <_init>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	bf00      	nop
 8007c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9e:	bc08      	pop	{r3}
 8007ca0:	469e      	mov	lr, r3
 8007ca2:	4770      	bx	lr

08007ca4 <_fini>:
 8007ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca6:	bf00      	nop
 8007ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007caa:	bc08      	pop	{r3}
 8007cac:	469e      	mov	lr, r3
 8007cae:	4770      	bx	lr
